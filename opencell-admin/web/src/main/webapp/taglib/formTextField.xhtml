<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://xmlns.jcp.org/jsf/facelets" xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:f="http://xmlns.jcp.org/jsf/core"
    xmlns:p="http://primefaces.org/ui" xmlns:c="http://xmlns.jcp.org/jsp/jstl/core" xmlns:o="http://omnifaces.org/ui" xmlns:of="http://omnifaces.org/functions" xmlns:hftl="http://hftl.org">

<ui:composition>

    <hftl:decorateFormField fieldId="#{id}" label="#{label}" componentWidth="#{componentWidth}" newLine="#{newLine}" displayOneLine="#{displayOneLine}" styleClass="#{styleClass}"
        style="#{style}" labelStyle="#{labelStyle}" labelStyleClass="#{labelStyleClass}" inputStyle="#{inputStyle}" inputStyleClass="#{inputStyleClass}" labelWidth="#{labelWidth}"
        inputWidth="#{inputWidth}">

        <c:if test="#{not isHtml and not textArea and listValues == null and !isAutocomplete and not popup and edit}">

            <p:inputText id="#{id}" value="#{fieldItem}" disabled="#{disabled}" required="#{required}" size="#{size}" maxlength="#{maxlength}" >

                <c:if test="#{not empty converter}">
                    <f:converter converterId="#{converter}" />
                </c:if>
                <c:if test="#{useConverter}">
                    <f:converter converterId="stringConverter" />
                </c:if>
                <c:if test="#{validateEmail}">
                    <!-- <f:validateRegex pattern="([^.@]+)(\.[^.@]+)*@([^.@]+\.)+([^.@]+)"></f:validateRegex> -->
                    <o:validator validatorId="javax.faces.RegularExpression" pattern="([^.@]+)(\.[^.@]+)*@([^.@]+\.)+([^.@]+)" message="#{messages['validator.email.invalid']}" />
                </c:if>
                <c:if test="#{not empty validatorId}">
                    <f:validator validatorId="#{validatorId}" />
                </c:if>
                <c:if test="#{validateUnique}">
                    <f:validator binding="#{uniqueConstraintValidator}" />
                    <f:attribute name="className" value="#{entity.getClass().getSimpleName()}" />
                    <f:attribute name="fieldName" value="#{field}" />
                    <f:attribute name="idValue" value="#{entity.getId()}" />
                </c:if>
                <!--  commented out as validateRib is not used anywhere and need to find an equivalent solution for rich:clientId replacement -->
                <!--                 <c:if test="#{validateRib}"> -->
                <!--                     <f:validator validatorId="ribValidator" /> -->
                <!--                     <f:attribute name="bankCodeId" value="#{rich:clientId('bankCode')}" /> -->
                <!--                     <f:attribute name="branchCodeId" value="#{rich:clientId('branchCode')}" /> -->
                <!--                     <f:attribute name="accountNumberId" value="#{rich:clientId('accountNumber')}" /> -->
                <!--                     <f:attribute name="keyId" value="#{rich:clientId('key')}" /> -->
                <!--                 </c:if> -->

                <c:if test="#{not empty listenerUpdate and empty actionListenerBean}">
                    <p:ajax update="#{listenerUpdate}" event="change" />
                </c:if>
                <c:if test="#{not empty listenerUpdate and not empty actionListenerBean}">
                    <p:ajax update="#{listenerUpdate}" listener="#{actionListenerBean[actionListenerMethod]}" event="change" />
                </c:if>
                <c:if test="#{field eq 'code' and empty pattern}">
                    <o:validator validatorId="codeValidator" />
                </c:if>
                <c:if test="#{not empty pattern}">
                    <o:validator validatorId="javax.faces.RegularExpression" pattern="#{pattern}" message="#{of:format2(messages['message.validation.code.pattern'], label, pattern)}" />
                </c:if>
            </p:inputText>
        </c:if>
        <c:if test="#{isAutocomplete and  edit}">
            <p:autoComplete id="#{id}" value="#{fieldItem}" disabled="#{disabled}" required="#{required}" size="#{size}" maxlength="#{maxlength}" dropdown="true"
                completeMethod="#{autocompleteBean[autocompleteMethod]}" var="e" itemLabel="#{e}" itemValue="#{e}">
                <c:if test="#{not empty listenerUpdate and empty actionListenerBean}">
                    <p:ajax update="#{listenerUpdate}" event="itemSelect" />
                </c:if>
                <c:if test="#{not empty listenerUpdate and not empty actionListenerBean}">
                    <p:ajax update="#{listenerUpdate}" listener="#{actionListenerBean[actionListenerMethod]}" event="itemSelect" />
                </c:if>
            </p:autoComplete>
        </c:if>
        <c:if test="#{textArea}">
            <p:inputTextarea id="#{id}" readonly="${readonly}" disabled="#{disabled}" value="#{fieldItem}" required="#{required}" cols="#{cols}" rows="#{rows}" maxlength="#{maxlength}" autoResize="true"
                style="width:100%;" />
        </c:if>
        <c:if test="#{isHtml and edit}">
            <p:editor id="#{id}" disabled="#{disabled}" value="#{fieldItem}" required="#{required}"></p:editor>
        </c:if>
        <c:if test="#{listValues != null and edit}">
            <p:selectOneMenu id="#{id}" value="#{fieldItem}" required="#{required}" disabled="#{disabled}">
                <f:selectItem itemValue="#{null}" itemLabel="" />
                <f:selectItems value="#{listValues.entrySet()}" var="listVal" itemValue="#{listVal.key}" itemLabel="#{listVal.value}" />
            </p:selectOneMenu>
        </c:if>

        <c:if test="#{popup and edit}">
            <p:inputText id="#{id}_text" value="#{fieldItem}" size="#{size}" disabled="true" />
            <p:inputText id="#{id}" type="hidden" value="#{fieldItem}" required="#{required}" size="#{size}" />
            <p:commandButton id="#{popupId}_selectLink" onclick="PF('dlg_#{popupId}').show()" type="button" icon="ui-icon-search" />
        </c:if>

        <c:if test="#{!edit and not textArea}">
            <h:outputText id="#{id}" value="#{fieldItem}" styleClass="field-value" />
        </c:if>
    </hftl:decorateFormField>
</ui:composition>

</html>
