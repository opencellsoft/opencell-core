
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
	xmlns:hf="http://xmlns.jcp.org/jsf/composite/tags"
    xmlns:o="http://omnifaces.org/ui" 
	xmlns:cc="http://xmlns.jcp.org/jsf/composite">

<!--
    Makes part of "happy faces" component group.
    A custom component to display default data entry and navigation related buttons in a formPanel.
    
    Must be located inside a formPanel component.   
 
    Attributes
        edit - edit or view mode
        ajaxSubmit - should create/update form submit be done in ajax way
        submitPartialProcess - items to process during ajax submit
        submitPartialSubmitFilter - items to filter during ajax submit
        submitUpdate - items to update after ajax submit
        killConversationOnSave - should conversation be killed uppon saving
        killConversationOnBack - should conversation be killed uppon navigating back
        showBackButton - show a default "navigate back" button
        showEditButton - show a default "edit"/"save" button
        showEnableDisableButton - show a default "enable/disable" button
        showDeleteButton - show "delete" button
        useCustomIdParam and objectIdParamName - should a custom parameter id instead of a default "objectId" be used for navigation
        updateConfirmationMessage - if not empty, "update" will show a confirmation dialog with this message  
        execute - show button to invoke a execute method
        executeLabel - Button execute lapel
        formId - form id, to distinguish buttons, defaults to 'formId'
        submitActionListener - if true add actionListener to submit button=submitActionListener()
        stop - show button to invoke a stop method
                stopLabel - a "stop" button label 
        stopConfirmationMessage - if not empty, "stop" will show a confirmation dialog with this message
        stopByForce - show button to invoke a stop by force method
        stopByForceLabel - a "stop by force" button label
        stopByForceConfirmationMessage - if not empty, "stopByForce" will show a confirmation dialog with this message
        executeLabel - Button stop lapel
-->


<cc:interface>
	<cc:attribute name="backingBean" required="true"
		type="org.meveo.admin.action.BaseBean" />
	<cc:attribute name="edit" required="true" />
	<cc:attribute name="killConversationOnSave" default="true" />
	<cc:attribute name="killConversationOnBack" default="true" />
	<cc:attribute name="showBackButton" default="true" />
    <cc:attribute name="showEditButton" default="true" />
    <cc:attribute name="showEnableDisableButton" default="false" />
    <cc:attribute name="showDeleteButton" default="true"/>
	<cc:attribute name="useCustomIdParam" default="false" />
	<cc:attribute name="objectIdParamName" default="#{cc.attrs.useCustomIdParam?cc.attrs.backingBean.idParameterName:'objectId'}" />
	<cc:attribute name="updateConfirmationMessage" default="" />
    <cc:attribute name="ajaxSubmit" required="true" />
    <cc:attribute name="submitPartialProcess" />
    <cc:attribute name="submitPartialSubmitFilter" default=":not([name*='omitFromSubmit'])"/> <!--  instead of partial submit filter, jquery expression could be used in process attribute, but issue is with calendars or other input components that are not of input type:  process="@this @( :input:not([name*='omitFromSubmit']))" -->
    <cc:attribute name="submitUpdate" default="@form"/> 
    <cc:attribute name="execute" default="false" />
    <cc:attribute name="formId" default="formId" />
    <cc:attribute name="submitActionListener" default="false" />
    <cc:attribute name="stop" default="false" />
    <cc:attribute name="stopByForce" default="false" />
</cc:interface>

<cc:implementation>
    <o:importFunctions type="org.meveo.service.base.ValueExpressionWrapper" var="exp" />

	<h:panelGroup layout="block" styleClass="form-panel-actions" id="formPanelActions">
		<p:button value="#{messages['commons.edit']}" includeViewParams="true"
			rendered="#{!cc.attrs.edit and cc.attrs.showEditButton and cc.attrs.backingBean.canUserUpdateEntity()}">
			<f:param name="edit" value="true" />
 			<f:param name="#{cc.attrs.objectIdParamName}"
 				value="#{cc.attrs.backingBean.objectId}" />
 			<f:param name="cid"
 				value="#{javax.enterprise.context.conversation.id}" />
			<c:if test="#{not empty cc.attrs.backingBean.backView}">
				<f:param name="backView" value="#{cc.attrs.backingBean.backView}"/>
			</c:if>
		</p:button>

        <p:commandButton value="#{messages['commons.disable']}"
            rendered="#{not empty cc.attrs.backingBean.objectId and cc.attrs.showEnableDisableButton and cc.attrs.backingBean.entity.active and cc.attrs.backingBean.canUserUpdateEntity()}"
            action="#{cc.attrs.backingBean.disable}" update="@form" process="@form">
            <p:confirm header="#{messages['commons.disable']}" message="#{messages['commons.confirmDisable']}" />
        </p:commandButton>

        <p:commandButton value="#{messages['commons.enable']}"
            rendered="#{not empty cc.attrs.backingBean.objectId and cc.attrs.showEnableDisableButton and cc.attrs.backingBean.entity.disabled and cc.attrs.backingBean.canUserUpdateEntity()}"
            action="#{cc.attrs.backingBean.enable}" update="@form" process="@form">
            <p:confirm header="#{messages['commons.enable']}" message="#{messages['commons.confirmEnable']}" />
        </p:commandButton>
        
        <script type="text/javascript">
				function delayDisable(button){
					setTimeout(function(){
		            	button.disabled = true;
		            }, 100);
				}
		</script>

		<p:commandButton id="saveButton"
			rendered="#{cc.attrs.edit and cc.attrs.showEditButton and empty(cc.attrs.updateConfirmationMessage) and !cc.attrs.ajaxSubmit and cc.attrs.backingBean.canUserUpdateEntity()}"
			value="#{messages['action.save']}"
			onclick="delayDisable(this);"
			oncomplete="this.disabled=false;"
			action="#{cc.attrs.backingBean.saveOrUpdate(cc.attrs.killConversationOnSave)}"
			icon="ui-icon-check" 
			ajax="false">
			<f:param name="edit" value="#{cc.attrs.edit}" />
			<c:if test="#{cc.attrs.submitActionListener}">
            	<f:actionListener binding="#{cc.attrs.backingBean.submitActionListener()}"></f:actionListener>
            </c:if>
		</p:commandButton>

        <p:commandButton id="saveButtonAjax"
            rendered="#{cc.attrs.edit and cc.attrs.showEditButton and empty(cc.attrs.updateConfirmationMessage) and cc.attrs.ajaxSubmit and cc.attrs.backingBean.canUserUpdateEntity()}"
            value="#{messages['action.save']}"  onclick="delayDisable(this);" oncomplete="$('html,body').scrollTop(0);"
            action="#{cc.attrs.backingBean.saveOrUpdate(cc.attrs.killConversationOnSave)}"
            icon="ui-icon-check" process="@this #{cc.attrs.submitPartialProcess!=null?cc.attrs.submitPartialProcess:'@form'}" 
            partialSubmit="#{cc.attrs.submitPartialProcess !=null}" 
            partialSubmitFilter="#{cc.attrs.submitPartialSubmitFilter}" 
            update="#{cc.attrs.submitUpdate}">
            <f:param name="edit" value="#{cc.attrs.edit}" />
            <f:param name="objectId" value="#{cc.attrs.backingBean.objectId}" />
            <c:if test="#{cc.attrs.submitActionListener}">
            	<f:actionListener binding="#{cc.attrs.backingBean.submitActionListener()}"></f:actionListener>
            </c:if>
        </p:commandButton>
        <p:commandButton id="ExecuteButtonAjax"
            rendered="#{ cc.attrs.execute  and cc.attrs.edit and empty(cc.attrs.updateConfirmationMessage) and cc.attrs.ajaxSubmit and !empty(cc.attrs.backingBean.objectId) and cc.attrs.backingBean.canUserUpdateEntity()}"
            value="#{cc.attrs.executeLabel}" oncomplete="$('html,body').scrollTop(0);"
            action="#{cc.attrs.backingBean.execute()}"
            process="@this #{cc.attrs.submitPartialProcess!=null?cc.attrs.submitPartialProcess:'@form'}" partialSubmit="#{cc.attrs.submitPartialProcess !=null}" partialSubmitFilter="#{cc.attrs.submitPartialSubmitFilter}" update="#{cc.attrs.submitUpdate}">
            <f:param name="edit" value="#{cc.attrs.edit}" />
        </p:commandButton>
                
        <p:commandButton id="StopButtonAjax"
            rendered="#{ cc.attrs.stop  and cc.attrs.edit and empty(cc.attrs.updateConfirmationMessage) and cc.attrs.ajaxSubmit and !empty(cc.attrs.backingBean.objectId) and cc.attrs.backingBean.canUserUpdateEntity()}"
            value="#{cc.attrs.stopLabel}" oncomplete="$('html,body').scrollTop(0);"
            action="#{cc.attrs.backingBean.stop()}" immediate="true" update="#{cc.attrs.submitUpdate}">
            <f:param name="edit" value="#{cc.attrs.edit}" />
            <p:confirm header="#{messages['commons.confirmationHeader']}" message="#{(cc.attrs.stopConfirmationMessage eq '') ? messages['confirmationMessage.confirmStop'] : cc.attrs.stopConfirmationMessage}" icon="ui-icon-alert" />
        </p:commandButton>            
        
        <p:commandButton id="StopByForceButtonAjax"
            rendered="#{ cc.attrs.stopByForce and cc.attrs.edit and empty(cc.attrs.updateConfirmationMessage) and cc.attrs.ajaxSubmit and !empty(cc.attrs.backingBean.objectId) and cc.attrs.backingBean.canUserUpdateEntity()}"
            value="#{cc.attrs.stopByForceLabel}" oncomplete="$('html,body').scrollTop(0);"
            action="#{cc.attrs.backingBean.stopByForce()}" immediate="true" update="#{cc.attrs.submitUpdate}">
            <f:param name="edit" value="#{cc.attrs.edit}" />
            <p:confirm header="#{messages['commons.confirmationHeader']}" message="#{(cc.attrs.stopByForceConfirmationMessage eq '') ? messages['confirmationMessage.confirmStopByForce'] : cc.attrs.stopByForceConfirmationMessage}" icon="ui-icon-alert" />
        </p:commandButton>      
        

		<!-- Update with message -->
		<p:remoteCommand id="remoteUpdateWithMessageButton" rendered="#{cc.attrs.submitPartialProcess==null}"
			action="#{cc.attrs.backingBean.saveOrUpdateWithCallbackResult(cc.attrs.killConversationOnSave)}"
			name="#{cc.attrs.formId}updateWithMessage" oncomplete="handleUpdateWithMessageComplete(xhr,status,args)" />
            
        <!-- Update with message with partial submit -->
        <p:remoteCommand id="remoteUpdateWithMessageButtonPartialSubmit" rendered="#{cc.attrs.submitPartialProcess!=null}"
            action="#{cc.attrs.backingBean.saveOrUpdateWithCallbackResult(cc.attrs.killConversationOnSave)}"
            process="@this #{cc.attrs.submitPartialProcess}" partialSubmit="true" partialSubmitFilter="#{cc.attrs.submitPartialSubmitFilter}" 
            update="#{cc.attrs.submitUpdate}" name="#{cc.attrs.formId}updateWithMessagePartialSubmit" oncomplete="handleUpdateWithMessageComplete(xhr,status,args)" />            
            
		<p:commandButton id="saveButtonWithMessage"
			rendered="#{cc.attrs.edit and cc.attrs.showEditButton and !empty(cc.attrs.backingBean.objectId) and !empty(cc.attrs.updateConfirmationMessage) and cc.attrs.backingBean.canUserUpdateEntity()}"
			value="#{messages['action.save']}" icon="ui-icon-check"
			oncomplete="#{cc.attrs.formId}#{cc.attrs.submitPartialProcess==null?'updateWithMessage()':'updateWithMessagePartialSubmit()'}" >
			<c:if test="#{cc.attrs.submitActionListener}">
            	<f:actionListener binding="#{cc.attrs.backingBean.submitActionListener()}"/>
            </c:if>
            <p:confirm header="#{messages['commons.confirmationHeader']}" message="#{(cc.attrs.updateConfirmationMessage eq '') ? messages['confirmationMessage.confirmUpdate'] : cc.attrs.updateConfirmationMessage}" icon="ui-icon-alert" />
		</p:commandButton>
        
		<cc:insertChildren />

		<hf:clearButton id="resetButtonCC" label="#{messages['action.reset']}"
			edit="#{cc.attrs.edit}" rendered="#{cc.attrs.showEditButton and cc.attrs.backingBean.canUserUpdateEntity()}"
			resetAction="#{cc.attrs.backingBean.resetFormEntity()}" includeViewParams="true"/>

		<p:button id="backButton" value="#{messages['action.back']}"
			rendered="#{cc.attrs.showBackButton}"
			outcome="#{cc.attrs.backingBean.back()}" includeViewParams="true">

			<c:if
				test="#{javax.enterprise.context.conversation.id != null and not cc.attrs.killConversationOnBack}">
				<f:param name="cid"
					value="#{javax.enterprise.context.conversation.id}" />
			</c:if>
			<f:param name="tab" value="#{cc.attrs.backingBean.activeTab}"></f:param>
		</p:button>

        <c:if test="#{! empty customFieldDataEntryBean.getCustomActions(cc.attrs.backingBean.entity)}">
            <ui:repeat var="customAction" value="#{customFieldDataEntryBean.getCustomActions(cc.attrs.backingBean.entity)}">
                <p:commandButton value="#{customAction.getLabel(customFieldDataEntryBean.currentLocale.ISO3Language)}" action="#{customFieldDataEntryBean.executeCustomAction(cc.attrs.backingBean.entity, customAction, null)}"
                    process="@this #{cc.attrs.submitPartialProcess!=null?cc.attrs.submitPartialProcess:'@form'}" partialSubmit="#{cc.attrs.submitPartialProcess !=null}"
                    partialSubmitFilter="#{cc.attrs.submitPartialSubmitFilter}" update="@form"
                    rendered="#{exp:evaluateToBooleanOneVariable(customAction.applicableOnEl,'entity',cc.attrs.backingBean.entity)}" />
            </ui:repeat>
        </c:if>


        <script type="text/javascript">
				function handleUpdateWithMessageComplete(xhr, status, args) {
					var result = args.result;
					if(typeof(result)!="undefined" &amp;&amp; !result){
						PF('#{cc.attrs.formId}confirmCannotUpdateWithMessageDialog').show();
					}
				}
		</script>	
		<p:commandButton id="deletelink" icon="ui-icon-trash" value="#{messages['commons.delete']}" action="#{cc.attrs.backingBean.deleteWithBack}" immediate="true" update="@form"
			rendered="#{cc.attrs.showDeleteButton and cc.attrs.backingBean.entity.id!=null and cc.attrs.backingBean.canUserDeleteEntity()}" process="@this">
            <p:confirm header="#{messages['commons.confirmationHeader']}" message="#{messages['commons.confirmDelete']}" icon="ui-icon-alert" />
		</p:commandButton>

		<p:confirmDialog id="confirmCannotUpdateWithMessageDialog" styleClass="confirm-dialog"
			message="#{messages['message.confirm.cannotUpdate']}" header=""
			severity="alert" widgetVar="#{cc.attrs.formId}confirmCannotUpdateWithMessageDialog" appendTo="@(body)">
			<p:panel styleClass="confirm-dialog-content">
				<p:commandButton id="cannotUpdateWithMessage" value="#{messages['commons.ok']}"
					oncomplete="PF('#{cc.attrs.formId}confirmCannotUpdateWithMessageDialog').hide()" update="@this" process="@this" />
			</p:panel>
		</p:confirmDialog>		
	</h:panelGroup>

</cc:implementation>

</html>
