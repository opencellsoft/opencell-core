{
	"info": {
		"_postman_id": "97b7debe-9713-4251-b727-3c9dc248778e",
		"name": "OPENCELL_PERF_TESTS_SUITE_Hassnaa",
		"description": "# Introduction\r\n\r\nThis configuration file is designed to be a basis for all configurations provided by Opencell.\r\nIt merely contains most common general settings and a catalog of services implementing various rating models.\r\n\r\n# Configuring Opencell\r\n\r\nThere are 2 main ways for configuring ***Opencell***:\r\n* GUI (*Administration GUI* and *Marketing Manager*)\r\n* API (all Opencell configuration and operations can be performed using our extensive API library)\r\n\r\nThe most flexible way is using APIs which currently are available as **Rest** and **Soap**.\r\nThe **Soap** API are deprecated, so will won't mention them anymore.\r\n\r\n## Tools\r\n\r\nAny tools able to send HTTP requests will do.\r\nOne could even just script *curl* calls using shell script.\r\nBut of course, a more user friendly tool will make things easier.\r\n\r\nHere at ***Opencell***, we prefer **Postman** (https://getpostman.com):\r\n* it has a modern, friendly interface\r\n* Sets of API request can be organized into collections, themselves structured into a folder tree.\r\n* Collections can be exported as _JSON_ files or shared with other team members using collaboration features (payed version)\r\n* it allows to uses variables at different levels (collection, environement, global) and to execute *Javascript* scripts before and after executing API calls which allows great flexibility and API response testing.\r\n\r\n\r\n\r\n# Configuration documentation guidelines\r\n\r\nIn order to document our configuration, we make full used of the internal documentation capabilities of the Markdown fields on Postman Objects\r\n\r\n## Default template for *Collection* documentation\r\n\r\n## Default template for *Folder* documentation\r\n\r\n## Default template for *Request* documentation\r\n\r\n\r\n\r\n# Tips & guidelines\r\n\r\nHere follow a few tips for understanding this collection.\r\n\r\n## Collection pre-request script\r\n\r\n```javascript\r\npm.globals.set(\"timestamp.iso\", (new Date()).toISOString());\r\npm.globals.set(\"request.label\", pm.info.requestName);\r\n\r\nvar parts = pm.info.requestName.split(\"|\");\r\n\r\nfor(let i=0; i<parts.length; i++) {\r\n    pm.globals.set(\"request.label.\"+i, parts[i]);\r\n}\r\n```\r\n\r\n## Configuration guidelines\r\n\r\n## Entities\r\n\r\n<entity>_<project_code>_XXX\r\n\r\n### Custom Fields\r\n\r\nCF_<entity>_<project_code>_ XXX\r\n\r\n<entity> will be discarded for inherited\r\n\r\n#### Custom field visibility\r\n\r\nSE_<entity>_<project_code>_<markers>_XXX\r\n\r\n<markers> are used in CFT.applicableOnEl to show CFT on entities\r\n\r\n\r\n## Entity abbreviation\r\n\r\n| code  | entity                        |\r\n|:-----:|:------------------------------|\r\n|   P   | Provider                      |\r\n|   S   | Seller                        |\r\n|   C   | Customer                      |\r\n|  CA   | Customer Account              |\r\n|  BA   | Billing Account               |\r\n|  UA   | User Account                  |\r\n|  SU   | Subscription                  |\r\n|  AP   | Access Point                  |\r\n|  OF   | Offer Template                |\r\n|  SE   | Service Template and Instance |\r\n|  CH   | Charge Template               |\r\n|  PP   | Price Plan                    |\r\n|  CN   | Counter                       |\r\n| ICAT  | Invoice Category              |\r\n| ISCAT | Invoice SubCategory           |\r\n|  CAL  | Calendar                      |\r\n|  BC   | Billing Cycle                 |\r\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12516174"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Regional settings",
					"item": [
						{
							"name": "Currencies",
							"item": [
								{
									"name": "CURRENCY EUR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n  \"code\": \"EUR\",\n  \"description\": \"Euro\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/currency/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currency",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Languages",
							"item": [
								{
									"name": "LANG ENG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"code\": \"ENG\",\r\n  \"description\": \"English\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/language/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"language",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "LANG FRA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n  \"code\": \"FRA\",\n  \"description\": \"French\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/language/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"language",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Countries",
							"item": [
								{
									"name": "COUNTRY FRA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n  \"countryCode\": \"FR\",\n  \"name\": \"France\",\n  \"currencyCode\":\"EUR\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/country/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"country",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "COUNTRY US",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n  \"countryCode\": \"US\",\n  \"name\": \"USA\",\n  \"currencyCode\":\"EUR\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/country/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"country",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "Provider & Seller",
							"item": [
								{
									"name": "Seller hierarchy",
									"item": [
										{
											"name": "S|OPENCELL|Opencell",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"code\" : \"{{request.label.1}}\",\r\n\t\"description\" : \"{{request.label.2}}\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"countryCode\": \"FR\",\r\n    \"languageCode\": \"ENG\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": \"Esc. A\",\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": null\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"billing@opencellsoft.com\",\r\n        \"phone\": \"0123456789\",\r\n        \"mobile\": \"0678912345\",\r\n        \"fax\": null\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "S|SELLER_LVL1|Seller Opencell level 1|OPENCELL",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Proxy-Authorization",
														"value": "{{proxy.auth}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"code\" : \"{{request.label.1}}\",\n\t\"description\" : \"{{request.label.2}}\",\n\t\"parentSeller\" : \"{{request.label.3}}\",\n\t\"currencyCode\" : \"EUR\",\n\t\"countryCode\" : \"FR\",\n\t\"languageCode\" : \"FRA\",\n    \"contactInformation\": null,\n    \"address\": {\n        \"address1\": \"52 rue Kléber\",\n        \"address2\": null,\n        \"address3\": null,\n        \"zipCode\": \"92300\",\n        \"city\": \"Levallois-Perret\",\n        \"country\": \"FR\",\n        \"state\": null\n    },\n    \"invoiceTypeSequences\": {\n        \"COM\": {\n            \"prefixEL\": \"{{request.label.1}}\",\n            \"sequenceSize\": 6\n        }\n    },\n    \"customFields\": { \"customField\": []}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "S|SELLER_LVL2|Seller Opencell level 2|SELLER_LVL1",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"code\" : \"{{request.label.1}}\",\n\t\"description\" : \"{{request.label.2}}\",\n\t\"parentSeller\" : \"{{request.label.3}}\",\n\t\"currencyCode\" : \"EUR\",\n\t\"countryCode\" : \"FR\",\n\t\"languageCode\" : \"FRA\",\n    \"contactInformation\": null,\n    \"registrationNo\": \"REG999999999\",\n    \"vatNo\": \"VAT999999999\",\n    \"address\": {\n        \"address1\": \"52 rue Kléber\",\n        \"address2\": null,\n        \"address3\": null,\n        \"zipCode\": \"92300\",\n        \"city\": \"Levallois-Perret\",\n        \"country\": \"FR\",\n        \"state\": null\n    },\n    \"customFields\": { \"customField\": []}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update Provider",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{provider.code}}\",\n    \"description\": \"{{template.label}}\",\n    \"enterprise\": \"true\",\n    \"rounding\": 6,\n    \"roundingMode\": \"NEAREST\",\n    \"invoiceRounding\": 2,\n    \"invoiceRoundingMode\": \"NEAREST\",\n    \"invoiceConfiguration\": {\n        \"displaySubscriptions\": \"true\",\n        \"displayServices\": \"true\",\n        \"displayOffers\": \"true\",\n        \"displayEdrs\": \"true\",\n        \"displayProvider\": \"true\",\n        \"displayCfAsXML\": \"true\",\n        \"displayPricePlans\": \"true\",\n        \"displayDetail\": \"true\",\n        \"displayChargesPeriods\": \"true\",\n        \"displayFreeTransacInInvoice\": \"true\",\n        \"displayBillingCycle\": \"true\",\n        \"displayOrders\": \"true\"\n    }\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/provider/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CF_PROV_PROJECT_VERSION",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{request.label}}_{{$timestamp}}\",\r\n    \"description\": \"{{project.code}} {{project.type}} {{project.version}}\",\r\n    \"fieldType\": \"STRING\",\r\n    \"appliesTo\": \"Provider\",\r\n    \"defaultValue\": \"{{timestamp.iso}}\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \"versionable\": false,\r\n    \"allowEdit\": false,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"guiPosition\": \"tab:Project versions:999\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Calendars",
							"item": [
								{
									"name": "CAL_PERIOD_MONTHLY",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 1,\n    \"periodUnit\": \"MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "FR_BANKING_CAL_2018",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"description\": \"France bank calendar 2018\",\n    \"calendarType\": \"BANKING\",\n    \"weekendBegin\": 6,\n    \"weekendEnd\": 7,\n    \"endDate\": 1546210800000,\n    \"startDate\": 1514761200000,\n    \"holidays\": [\n        {\n            \"holidayBegin\": 101,\n            \"holidayEnd\": 101\n        },\n        {\n            \"holidayBegin\": 330,\n            \"holidayEnd\": 330\n        },\n        {\n            \"holidayBegin\": 402,\n            \"holidayEnd\": 402\n        },\n        {\n            \"holidayBegin\": 501,\n            \"holidayEnd\": 501\n        },\n        {\n            \"holidayBegin\": 1225,\n            \"holidayEnd\": 1226\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "FR_BANKING_CAL_2019",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n        \"code\": \"{{request.label}}\",\n        \"description\": \"France bank calendar 2019\",\n        \"calendarType\": \"BANKING\",\n        \"weekendBegin\": 6,\n        \"weekendEnd\": 7,\n        \"endDate\": 1577746800000,\n        \"startDate\": 1546297200000,\n        \"holidays\": [\n            {\n                \"holidayBegin\": 101,\n                \"holidayEnd\": 101\n            },\n            {\n                \"holidayBegin\": 419,\n                \"holidayEnd\": 419\n            },\n            {\n                \"holidayBegin\": 422,\n                \"holidayEnd\": 422\n            },\n            {\n                \"holidayBegin\": 501,\n                \"holidayEnd\": 501\n            },\n            {\n                \"holidayBegin\": 1225,\n                \"holidayEnd\": 1226\n            }\n        ]\n    }\n"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_YEARLY",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 12,\n    \"periodUnit\": \"MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_DAILY_ONCE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 1,\n    \"periodUnit\": \"DAY_OF_MONTH\",\n    \"nbPeriods\": 1\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_5DAYS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 5,\n    \"periodUnit\": \"DAY_OF_MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_MONTHLY_1ST",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"{{request.label}}\",\n  \"description\": \"1st of the month\",\n  \"calendarType\": \"YEARLY\",\n  \"days\": [\n  {\n    \"day\": \"1\",\n    \"month\": \"JANUARY\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"FEBRUARY\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"MARCH\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"APRIL\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"MAY\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"JUNE\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"JULY\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"AUGUST\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"SEPTEMBER\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"OCTOBER\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"NOVEMBER\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"DECEMBER\"\n  }\n  ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_DAILY",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 1,\n    \"periodUnit\": \"DAY_OF_MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_5MONTHS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 5,\n    \"periodUnit\": \"MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_2MONTHS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 2,\n    \"periodUnit\": \"MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Taxes",
							"item": [
								{
									"name": "Tax rates",
									"item": [
										{
											"name": "tax|code=TAX_20|desc=VAT 20%|percentage=20|accCode=445710000",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/tax/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"tax",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "tax|code=TAX_10|desc=VAT 10%|percentage=10|accCode=445710000",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/tax/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"tax",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "tax|code=NO_TAX|desc=No tax|percentage=0|accCode=445710000",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/tax/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"tax",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Tax categories (account)",
									"item": [
										{
											"name": "taxCat|code=REGULAR|desc=Regular accounts",
											"event": [
												{
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxCat|code=EXEMPTED|desc=Exempted accounts",
											"event": [
												{
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Tax classes (charge)",
									"item": [
										{
											"name": "taxClass|code=NORMAL|desc=Product with normal tax",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxClass|code=REDUCED|desc=Products with reduced tax",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxClass|code=NO_TAX|desc=Products with no VAT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Tax Assignement",
									"item": [
										{
											"name": "taxMapping|priority=100|taxCat=EXEMPTED|taxClass=|buyer=|tax=NO_TAX",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}},\n    \"validFrom\": \"2017-02-20\",\n    \"validTo\": \"2023-02-20\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=20|taxCat=REGULAR|taxClass=NO_TAX|buyer=|tax=NO_TAX",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}},\n    \"validFrom\": \"2017-02-20\",\n    \"validTo\": \"2023-02-20\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=1|taxCat=REGULAR|taxClass=NORMAL|buyer=|tax=TAX_20",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}},\n    \"validFrom\": \"2017-02-20\",\n    \"validTo\": \"2023-02-20\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=2|taxCat=REGULAR|taxClass=REDUCED|buyer=|tax=TAX_10",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}},\n    \"validFrom\": \"2017-02-20\",\n    \"validTo\": \"2023-02-20\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=10|taxCat=REGULAR|taxClass=NORMAL|buyer=US|tax=TAX_10",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}},\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"validFrom\": \"2017-02-20\",\n    \"validTo\": \"2023-02-20\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Account",
							"item": [
								{
									"name": "title|code=SIR|desc=Sir.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"isCompany\": \"false\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "custCat|code=CLIENT|taxCat=REGULAR",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"Client\",\r\n    \"taxCategoryCode\": \"{{taxCat}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "custCat|code=PROSPECT|taxCat=REGULAR",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"Prospect\",\r\n    \"taxCategoryCode\": \"{{taxCat}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "custCat|code=ASSOCIATION|taxCat=EXEMPTED",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"Association\",\r\n    \"taxCategoryCode\": \"{{taxCat}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "DEFAULT|Default",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label.0}}\",\n    \"description\": \"{{request.label.1}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice",
							"item": [
								{
									"name": "Invoice Categories",
									"item": [
										{
											"name": "ICAT_PRD",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ICAT_PRD\",\n  \"description\": \"Product category\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_PRD",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ISCAT_PRD\",\n  \"description\": \"Product sub-category\",\n  \"invoiceCategory\": \"ICAT_PRD\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ICAT_REC",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ICAT_REC\",\n  \"description\": \"Reccuring License\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_REC",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ISCAT_REC\",\n  \"description\": \"Recurring default sub-category\",\n  \"invoiceCategory\": \"ICAT_REC\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ICAT_OSH",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ICAT_OSH\",\n  \"description\": \"Certified Training Course\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_OSS",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ISCAT_OSS\",\n  \"description\": \"Oneshot Subscription sub-category\",\n  \"invoiceCategory\": \"ICAT_OSH\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_OST",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ISCAT_OST\",\n  \"description\": \"Oneshot Termination sub-category\",\n  \"invoiceCategory\": \"ICAT_OSH\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_OSO",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ISCAT_OSO\",\n  \"description\": \"Oneshot Other sub-category\",\n  \"invoiceCategory\": \"ICAT_OSH\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ICAT_USG",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ICAT_USG\",\n  \"description\": \"Professional Services Usage\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_USG",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ISCAT_USG\",\n  \"description\": \"Usage default sub-category\",\n  \"invoiceCategory\": \"ICAT_USG\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Invoice Type",
									"item": [
										{
											"name": "invoiceType|code=COM|desc=Invoice",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"name": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"{{code}}\",\r\n  \"description\": \"{{desc}}\",\r\n  \"occTemplateCode\": \"INV_STD\",\r\n  \"occTemplateNegativeCode\": null,\r\n  \"billingTemplateName\": \"OPENCELL_DEMO\",\r\n  \"sequenceDto\": {\r\n    \"prefixEL\": \"INV_\",\r\n    \"sequenceSize\": 4,\r\n    \"currentInvoiceNb\":null\r\n  },\r\n  \"xmlFilenameEL\": \"XML_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n  \"pdfFilenameEL\": \"PDF_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n  \"sellerSequence\": null,\r\n  \"appliesTo\": [\r\n    \"COM\",\r\n    \"ADJ\"\r\n  ],\r\n  \"matchingAuto\": false,\r\n  \"useSelfSequence\": true\r\n}\r\n"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceType",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Termination reasons",
							"item": [
								{
									"name": "TR_NONE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"TR_NONE\",\n\t\"description\": \"Termination with no action (no fees, no reimbursment)\",\n\t\"applyAgreement\": false,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": false,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TR_AGREEMENT",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"TR_AGREEMENT\",\n\t\"description\": \"Termination with Charge Agreement\",\n\t\"applyAgreement\": true,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": false,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TR_REIMBURSE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"description\": \"Termination with Reimbursment\",\n    \"applyAgreement\": false,\n    \"applyReimbursment\": true,\n    \"applyTerminationCharges\": false,\n    \"reimburseOneshots\": true,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TR_FEE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{request.label}}\",\n\t\"description\": \"Termination fee\",\n\t\"applyAgreement\": false,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": true,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Notifications Access Sub creation",
							"item": [
								{
									"name": "SCRIPT|CreateAccess|Creates an access on Subscription creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code == 200 ) { \r",
													"    tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors==null ||JSON.parse(responseBody).compilationErrors.length === 0; \r",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"name": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<ScriptInstance code=\"org.meveo.service.script.{{request.label.1}}\" description=\"{{request.label.2}} {{$timestamp}}\">\r\n        <type>JAVA</type>\r\n        <script><![CDATA[\r\npackage org.meveo.service.script;\r\n\r\nimport java.util.Date;\r\nimport java.util.Map;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.admin.User;\r\nimport org.meveo.model.billing.Subscription;\r\nimport org.meveo.model.mediation.Access;\r\n\r\nimport org.meveo.service.medina.impl.AccessService;\r\nimport org.meveo.service.script.Script;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CreateAccess extends Script {    \r\n    private static final Logger log = LoggerFactory.getLogger(CreateAccess.class);        \r\n\r\n    private AccessService accessService = (AccessService) getServiceInterface(\"AccessService\");\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> context) throws BusinessException {\r\n        log.info(\"EXECUTE context={}\", context);\r\n\r\n        Subscription subscription = (Subscription) context.get(\"entity\");\r\n        if(subscription == null){\r\n            throw new BusinessException(\"subscription is null\");\r\n        }\r\n        log.debug(\"subscription={}\", subscription);\r\n\r\n        Access access = new Access();\r\n        access.setSubscription(subscription);\r\n        access.setAccessUserId(subscription.getCode());\r\n        access.setStartDate(null);\r\n        access.setEndDate(null);\r\n        accessService.create(access);\r\n    }\r\n}]]></script>\r\n</ScriptInstance>"
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "notifSubscriptionCreate",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"updatedCode\": null,\r\n    \"code\": \"subscriptionCreate\",\r\n    \"classNameFilter\": \"org.meveo.model.billing.Subscription\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.CreateAccess\",\r\n    \"scriptParams\": {\r\n      \"entity\": \"#{event}\"\r\n    },\r\n    \"counterTemplate\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Channels",
							"item": [
								{
									"name": "chan|code=PHONE|desc=Telephone",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{code}}\",\n\t\"description\": \"{{desc}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "chan|code=EMAIL|desc=E-mail",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{code}}\",\n\t\"description\": \"{{desc}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "chan|code=WEB|desc=Online store",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"WEB\",\n\t\"description\": \"WEB\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "chan|code=RETAIL|desc=Retail store",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{code}}\",\n\t\"description\": \"{{desc}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Billing cycles",
							"item": [
								{
									"name": "INV_MT_1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"{{request.label}}\",\n  \"description\": \"Monthly Invoice Cycle 1\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"2\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"1\",\n  \"invoicingThreshold\": null,\n  \"calendar\": \"CAL_MONTHLY_1ST\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "INV_MT_2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"{{request.label}}\",\n  \"description\": \"Monthly Invoice Cycle 1\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"2\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"1\",\n  \"invoicingThreshold\": null,\n  \"calendar\": \"CAL_MONTHLY_1ST\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "INV_MT_3",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"{{request.label}}\",\n  \"description\": \"Monthly Invoice Cycle 1\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"2\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"1\",\n  \"invoicingThreshold\": null,\n  \"calendar\": \"CAL_MONTHLY_1ST\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "BC_MONTHLY_1ST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"{{request.label}}\",\n  \"description\": \"Monthly 1st\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"30\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"1\",\n  \"invoicingThreshold\": null,\n  \"calendar\": \"CAL_MONTHLY_1ST\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "BC_PERIOD_DAILY_ONCE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"{{request.label}}\",\n  \"description\": \"One day period, only once\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"30\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"0\",\n  \"invoicingThreshold\": 0.01,\n  \"calendar\": \"CAL_PERIOD_DAILY_ONCE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "BC_MONTHLY_PERIOD",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"{{request.label}}\",\n  \"description\": \"Monthly period\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"30\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"2\",\n  \"invoicingThreshold\": null,\n  \"calendar\": \"CAL_PERIOD_MONTHLY\",\n  \"referenceDate\": \"NEXT_INVOICE_DATE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Catalog",
					"item": [
						{
							"name": "Counters",
							"item": [
								{
									"name": "Counter1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"counter_1\",\n    \"description\": \"First counter\",\n    \"disabled\": false,\n    \"calendar\": \"CAL_MONTHLY_1ST\",\n    \"type\": \"USAGE\",\n    \"ceiling\": 80000,\n    \"counterLevel\": \"BA\",\n    \"notificationLevels\": \"50\",\n    \"accumulator\": false\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"counterTemplate",
												"createOrUpdate"
											]
										},
										"description": "\"validFrom\": 1546297200000,\r\n    \"validTo\": 1640991600000,"
									},
									"response": []
								},
								{
									"name": "Counter2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"counter_2\",\n    \"description\": \"Second counter\",\n    \"disabled\": false,\n    \"calendar\": \"CAL_MONTHLY_1ST\",\n    \"type\": \"USAGE\",\n    \"ceiling\": 1000000,\n    \"counterLevel\": \"UA\",\n    \"accumulator\": false\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"counterTemplate",
												"createOrUpdate"
											]
										},
										"description": "\"validFrom\": 1546297200000,\r\n    \"validTo\": 1640991600000,"
									},
									"response": []
								},
								{
									"name": "Accumulator counter single value",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"acum_counter_single_value\",\n    \"description\": \"Accumulator counter, single value\",\n    \"disabled\": false,\n    \"calendar\": \"CAL_MONTHLY_1ST\",\n    \"type\": \"USAGE\",\n    \"counterLevel\": \"BA\",\n    \"notificationLevels\": \"50\",\n    \"accumulator\": true,\n    \"accumulatorType\": \"SINGLE_VALUE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"counterTemplate",
												"createOrUpdate"
											]
										},
										"description": "\"validFrom\": 1546297200000,\r\n    \"validTo\": 1640991600000,"
									},
									"response": []
								},
								{
									"name": "Accumulator counter multi value",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"acum_counter_multi_value\",\n    \"description\": \"Accumulator counter, multiple values\",\n    \"disabled\": false,\n    \"calendar\": \"CAL_MONTHLY_1ST\",\n    \"type\": \"USAGE\",\n    \"counterLevel\": \"BA\",\n    \"accumulator\": true,\n    \"accumulatorType\": \"MULTI_VALUE\",\n    \"keyEl\": \"#{op.code}\",\n    \"valueEl\": \"#{op.amountWithoutTax}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"counterTemplate",
												"createOrUpdate"
											]
										},
										"description": "\"validFrom\": 1546297200000,\r\n    \"validTo\": 1640991600000,"
									},
									"response": []
								}
							]
						},
						{
							"name": "OfferTemplateCategory",
							"item": [
								{
									"name": "ocat|code=OCAT_ROOT|parent=|name=Root",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"OCAT_ROOT\",\n    \"description\": \"Offer category OCAT_ROOT\",\n    \"disabled\": false,\n    \"name\": \"root\",\n    \"offerTemplateCategoryCode\": \"\",\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "ocat|code=OCAT_CHILD|parent=OCAT_ROOT|name=Child",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Offer category {{code}}\",\n    \"disabled\": false,\n    \"name\": \"{{name}}\",\n    \"offerTemplateCategoryCode\": \"{{parent}}\",\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "ocat|code=OCAT_REC|parent=OCAT_ROOT|name=Recurring",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Offer category {{code}}\",\n    \"disabled\": false,\n    \"name\": \"{{name}}\",\n    \"offerTemplateCategoryCode\": \"{{parent}}\",\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "ocat|code=OCAT_USG|parent=OCAT_ROOT|name=Usage",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Offer category {{code}}\",\n    \"disabled\": false,\n    \"name\": \"{{name}}\",\n    \"offerTemplateCategoryCode\": \"{{parent}}\",\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Custom Fields",
							"item": [
								{
									"name": "Service",
									"item": [
										{
											"name": "CF_SE_DOUBLE (template)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_DOUBLE\",\n    \"description\": \"Service Price\",\n    \"fieldType\": \"DOUBLE\",\n    \"appliesTo\": \"ServiceTemplate\",\n    \"defaultValue\": \"850.0\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:1;fieldGroup:General;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_OSS_DOUBLE (template)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_OSS_DOUBLE\",\n    \"description\": \"Service Price\",\n    \"fieldType\": \"DOUBLE\",\n    \"appliesTo\": \"ServiceTemplate\",\n    \"defaultValue\": \"850.0\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:1;fieldGroup:General;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_OST_DOUBLE (template)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_OST_DOUBLE\",\n    \"description\": \"Service Price\",\n    \"fieldType\": \"DOUBLE\",\n    \"appliesTo\": \"ServiceTemplate\",\n    \"defaultValue\": \"850.0\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:1;fieldGroup:General;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_USG_DOUBLE (template)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_USG_DOUBLE\",\n    \"description\": \"Service Price\",\n    \"fieldType\": \"DOUBLE\",\n    \"appliesTo\": \"ServiceTemplate\",\n    \"defaultValue\": \"0.85\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:1;fieldGroup:General;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_DOUBLE (instance)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_DOUBLE\",\n    \"description\": \"Service Price\",\n    \"fieldType\": \"DOUBLE\",\n    \"useInheritedAsDefaultValue\": false,\n    \"appliesTo\": \"ServiceInstance\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:1;fieldGroup:General;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_BUILD_DOUBLE_VERSION (template)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_BUILD_DOUBLE_VERSION\",\n    \"description\": \"A versioned BUILD double on Service\",\n    \"fieldType\": \"DOUBLE\",\n    \"appliesTo\": \"ServiceTemplate\",\n    \"defaultValue\": \"1.0\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": true,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:0;fieldGroup:Build;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_BUILD_DOUBLE_VERSION (instance)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_BUILD_DOUBLE_VERSION\",\n    \"description\": \"A versioned BUILD double on Service\",\n    \"fieldType\": \"DOUBLE\",\n    \"appliesTo\": \"ServiceInstance\",\n    \"useInheritedAsDefaultValue\": false,\n    \"defaultValue\": \"2.0\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": true,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:0;fieldGroup:Build;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_RUN_DOUBLE_VERSION (template)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_RUN_DOUBLE_VERSION\",\n    \"description\": \"A versioned RUN double on Service\",\n    \"fieldType\": \"DOUBLE\",\n    \"appliesTo\": \"ServiceTemplate\",\n    \"defaultValue\": \"1.0\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": true,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:0;fieldGroup:Run;field:3\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_RUN_DOUBLE_VERSION (instance)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_RUN_DOUBLE_VERSION\",\n    \"description\": \"A versioned RUN double on Service\",\n    \"fieldType\": \"DOUBLE\",\n    \"appliesTo\": \"ServiceInstance\",\n    \"useInheritedAsDefaultValue\": false,\n    \"defaultValue\": \"2.0\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": true,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:Configuration:0;fieldGroup:Run;field:3\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_STRING_TEMPLATE_ONLY (template)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_STRING_TEMPLATE_ONLY\",\n    \"description\": \"A String on service template only\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"ServiceTemplate\",\n    \"defaultValue\": \"from service template\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:CustomTab:1;fieldGroup:CustomGroup;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_STRING_INSTANCE_ONLY (instance)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_STRING_INSTANCE_ONLY\",\n    \"description\": \"A String on service instance only\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"ServiceInstance\",\n    \"defaultValue\": \"from service instance\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"guiPosition\": \"tab:CustomTab:1;fieldGroup:CustomGroup;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_BUILD_RUN_SITUATION (ServiceInstance)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_BUILD_RUN_SITUATION\",\n    \"description\": \"Build or Run Situation \",\n    \"disabled\": false,\n    \"fieldType\": \"STRING\",\n    \"accountLevel\": \"ServiceInstance\",\n    \"appliesTo\": \"ServiceInstance\",\n    \"useInheritedAsDefaultValue\": false,\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"uniqueConstraint\": false,\n    \"versionable\": true,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"maxValue\": 50,\n    \"guiPosition\": \"tab:Configuration:0;fieldGroup:General:0;field:2\"\n}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_SE_BUILD_RUN_SITUATION (template)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"CF_SE_BUILD_RUN_SITUATION\",\n    \"description\": \"Build or Run Situation \",\n    \"disabled\": false,\n    \"fieldType\": \"STRING\",\n    \"accountLevel\": \"ServiceTemplate\",\n    \"appliesTo\": \"ServiceTemplate\",\n    \"defaultValue\": \"BUILD\",\n    \"useInheritedAsDefaultValue\": true,\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"uniqueConstraint\": false,\n    \"versionable\": true,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"maxValue\": 50,\n    \"guiPosition\": \"tab:Configuration:0;fieldGroup:General:0;field:2\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "OfferTemplate",
									"item": [
										{
											"name": "CF|code=CF_OF_STRING|target=OfferTemplate|type=STRING|storage=SINGLE",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"A {{storage}} {{type}} on {{target}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"from CFT on {{target}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"maxValue\": 200,\n    \"guiPosition\": \"tab:Tab:0;group:Group;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ProductTemplate",
									"item": [
										{
											"name": "CF|code=CF_PR_STRING|target=ProductTemplate|type=STRING|storage=SINGLE",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{code}}: a {{storage}} {{type}} on {{target}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"from CFT on {{target}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"maxValue\": 200,\n    \"guiPosition\": \"tab:Tab:0;group:Group;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "WalletOperation",
									"item": [
										{
											"name": "CF|code=cfParam4|target=WalletOperation|type=STRING|storage=SINGLE",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{code}}: a {{storage}} {{type}} on {{target}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"from CFT on {{target}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"maxValue\": 200,\n    \"guiPosition\": \"tab:Tab:0;group:Group;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF|code=cfParam5|target=WalletOperation|type=STRING|storage=SINGLE",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{code}}: a {{storage}} {{type}} on {{target}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"from CFT on {{target}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"maxValue\": 200,\n    \"guiPosition\": \"tab:Tab:0;group:Group;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF|code=cfParam6|target=WalletOperation|type=STRING|storage=SINGLE",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{code}}: a {{storage}} {{type}} on {{target}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"from CFT on {{target}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"maxValue\": 200,\n    \"guiPosition\": \"tab:Tab:0;group:Group;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Charges",
							"item": [
								{
									"name": "CH_PRD",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CH_PRD\",\n    \"description\": \"Product\",\n    \"invoiceSubCategory\": \"ISCAT_PRD\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": null,\n    \"status\":\"ACTIVE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "charge|code=CH_REC_BUILD_RUN_ADV|desc=Monthly Recurring License",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"invoiceSubCategory\": \"ISCAT_REC\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"calendar\": \"CAL_MONTHLY_1ST\",\n    \"durationTermInMonth\": null,\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"filterExpression\": \"\",\n    \"triggeredEdrs\": null,\n    \"status\":\"ACTIVE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "charge|CH_USG_UNIT|Professional services",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"UNIT\",\n    \"priority\": 10,\n    \"status\":\"ACTIVE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "charge|CH_USG_UNIT_2|Professional services second",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"UNIT\",\n    \"priority\": 10,\n    \"status\":\"ACTIVE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "charge|CH_OSS|Certified Training Courses",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"status\":\"ACTIVE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "charge|CH_OST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"One Shot Termination\",\n    \"oneShotChargeTemplateType\": \"TERMINATION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OST\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"status\":\"ACTIVE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "charge|CH_OSO",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"One Shot Other\",\n    \"oneShotChargeTemplateType\": \"OTHER\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSO\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"status\":\"ACTIVE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Price Plans",
							"item": [
								{
									"name": "PP_REC_BUILD_RUN_ADV",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"PP_REC_BUILD_RUN_ADV\",\n    \"eventCode\": \"CH_REC_BUILD_RUN_ADV\",\n    \"criteriaEL\": null,\n    \"amountWithoutTax\": 10,\n    \"amountWithoutTaxEL\": \"#{ mv:getInheritedCFValueForDate(serviceInstance,'CF_SE_'.concat(mv:getInheritedCFValueForDate(serviceInstance,'CF_SE_BUILD_RUN_SITUATION', op.operationDate )).concat('_DOUBLE_VERSION'), op.operationDate ) }\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "PP_OSS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"PP_OSS\",\n    \"eventCode\": \"CH_OSS\",\n    \"amountWithoutTax\": 10,\n    \"amountWithoutTaxEL\": \"#{ mv:getInheritedCFValue(serviceInstance, 'CF_SE_OSS_DOUBLE') }\",\n    \"scriptInstance\": null\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "PP_PRD",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"PP_PRD\",\n    \"eventCode\": \"CH_PRD\",\n    \"amountWithoutTax\": 10\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "PP_OST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"PP_OST\",\n    \"eventCode\": \"CH_OST\",\n    \"amountWithoutTax\": 10,\n    \"amountWithoutTaxEL\": \"#{ mv:getInheritedCFValue(serviceInstance, 'CF_SE_OST_DOUBLE') }\",\n    \"scriptInstance\": null\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "PP_USG_UNIT",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"PP_USG_UNIT\",\n    \"eventCode\": \"CH_USG_UNIT\",\n    \"amountWithoutTax\": 0.01,\n    \"amountWithTax\": 0.001,\n    \"woDescriptionEL\": null\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "PP_USG_UNIT_2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"PP_USG_UNIT_2\",\n    \"eventCode\": \"CH_USG_UNIT_2\",\n    \"amountWithoutTax\": 0.01,\n    \"amountWithTax\": 0.001,\n    \"woDescriptionEL\": null\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Services",
							"item": [
								{
									"name": "RESET SERVICE LIST (DO NOT EDIT)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{opencell.url}}/provider/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "SE|code=SE_OSS_OST_USG_RECU|desc=all_in_one_services",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"CF_SE_OSS_DOUBLE\",\n                \"doubleValue\": 1\n            },\n            {\n                \"code\": \"CF_SE_OST_DOUBLE\",\n                \"doubleValue\": 1\n            },\n            {\n                \"code\": \"CF_SE_DOUBLE\",\n                \"doubleValue\": 8.5\n            },\n            {\n                \"code\": \"CF_SE_USG_DOUBLE\",\n                \"doubleValue\": 0.57\n            },\n            {\n                \"code\": \"CF_SE_BUILD_RUN_SITUATION\",\n                \"valuePeriodStartDate\": \"2010-04-19\",\n                \"valuePeriodEndDate\": \"2020-05-19\",\n                \"valuePeriodPriority\": 1,\n                \"stringValue\": \"BUILD\"\n            },\n            {\n                \"code\": \"CF_SE_BUILD_RUN_SITUATION\",\n                \"valuePeriodStartDate\": \"2020-05-20\",\n                \"valuePeriodEndDate\": \"2030-05-19\",\n                \"valuePeriodPriority\": 2,\n                \"stringValue\": \"RUN\"\n            },\n            {\n                \"code\": \"CF_SE_BUILD_DOUBLE_VERSION\",\n                \"valuePeriodPriority\": 1,\n                \"valuePeriodStartDate\": \"2010-04-19\",\n                \"valuePeriodEndDate\": \"2030-04-19\",\n                \"doubleValue\": 5\n            },\n            {\n                \"code\": \"CF_SE_RUN_DOUBLE_VERSION\",\n                \"valuePeriodPriority\": 1,\n                \"valuePeriodStartDate\": \"2010-04-19\",\n                \"valuePeriodEndDate\": \"2030-04-19\",\n                \"doubleValue\": 8\n            }\n        ]\n    },\n    \"imageBase64\": null,\n    \"imagePath\": null,\n    \"invoicingCalendar\": null,\n    \"longDescription\": null,\n    \"mandatory\": true,\n    \"serviceChargeTemplateSubscriptions\": {\n        \"serviceChargeTemplateSubscription\": [\n            {\n                \"code\": \"CH_OSS\",\n                \"wallets\": null\n            }\n        ]\n    },\n    \"serviceChargeTemplateTerminations\": {\n        \"serviceChargeTemplateTermination\": [\n            {\n                \"code\": \"CH_OST\",\n                \"wallets\": null\n            }\n        ]\n    },\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"CH_USG_UNIT\",\n                    \"wallets\": null,\n                    \"accumulatorCounterTemplates\": {\n                        \"counterTemplate\": [\n                            \"acum_counter_single_value\"\n                        ]\n                    },\n                    \"counterTemplate\": \"counter_1\"\n            }\n        ]\n    },\n    \"serviceChargeTemplateRecurrings\": {\n        \"serviceChargeTemplateRecurring\": [\n            {\n                \"code\": \"CH_REC_BUILD_RUN_ADV\",\n                \"wallets\": null\n            }\n        ]\n    },\n    \"somCode\": null\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var services;",
											"var serviceCode;",
											"if(pm.info.requestName==='RESET SERVICE LIST (DO NOT EDIT)') {",
											"    services = \"\";",
											"} else {",
											"    services = pm.globals.get(\"offer.services\");",
											"    serviceCode = pm.globals.get(\"code\");",
											"    if(services === \"\") {",
											"        services = '{\"serviceTemplate\":{\"code\":\"'+serviceCode+'\",\"customFields\":null},\"mandatory\":false,\"incompatibleServiceTemplate\":[]}';",
											"    } else {",
											"        services += '\\n,{\"serviceTemplate\":{\"code\":\"'+serviceCode+'\",\"customFields\":null},\"mandatory\":false,\"incompatibleServiceTemplate\":[]}';",
											"    }",
											"}",
											"",
											"pm.globals.set(\"offer.services\", services);",
											""
										]
									}
								}
							]
						},
						{
							"name": "Products and Bundles",
							"item": [
								{
									"name": "PR_PRD",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"PR_PRD\",\r\n  \"description\": \"Product\",\r\n  \"name\": \"A product DEMO\",\r\n  \"validFrom\": null,\r\n  \"validTo\": null,\r\n  \"lifeCycleStatus\": \"ACTIVE\",\r\n  \"customFields\": null,\r\n  \"imageBase64\": null,\r\n  \"businessProductModel\": null,\r\n  \"offerTemplateCategory\": null,\r\n  \"productChargeTemplate\": [ { \"code\": \"CH_PRD\" } ],\r\n  \"walletTemplate\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Offers",
							"item": [
								{
									"name": "OF|code=OF_BASIC|name=Offre Opencell",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"OF_BASIC\",\n    \"name\": \"{{name}}\",\n    \"description\": \"{{name}} {{code}} {{$timestamp}}\",\n    \"validFrom\": \"{{$timestamp}}\",\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"ENG\",\n            \"description\": \"{{name}} OF_BASIC EN\"\n        },\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{name}} OF_BASIC FR\"\n        }\n    ],\n    \"longDescription\": \"{{name}} OF_BASIC long {{$timestamp}}\",\n    \"longDescriptionsTranslated\": [\n        {\n            \"languageCode\": \"ENG\",\n            \"description\": \"{{name}} OF_BASIC long EN\"\n        },\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{name}} OF_BASIC long FR\"\n        }\n    ],\n    \"disabled\": false,\n    \"lifeCycleStatus\": \"ACTIVE\",\n    \"bomCode\": null,\n    \"offerTemplateCategory\": [\n        {\n            \"code\": \"OCAT_ROOT\"\n        }\n    ],\n    \"channel\": [\n        {\n            \"code\": \"EMAIL\"\n        },\n        {\n            \"code\": \"RETAIL\"\n        },\n        {\n            \"code\": \"WEB\"\n        }\n    ],\n    \"seller\": [\n        \"OPENCELL\",\n        \"SELLER_LVL1\",\n        \"SELLER_LVL2\"\n    ],\n    \"customerCategory\": [\n        {\n            \"code\": \"PROSPECT\"\n        },\n        {\n            \"code\": \"CLIENT\"\n        }\n    ],\n    \"offerProductTemplate\": [\n        {\n            \"productTemplate\": {\n                \"code\": \"PR_PRD\"\n            }\n        }\n    ],\n    \"offerServiceTemplate\": [\n        {{offer.services}}\n    ],\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"CF_OF_STRING\",\n                \"stringValue\": \"From OfferTemplate {{code}}\"\n            }\n        ]\n    },\n    \"imagePath\": \".png\",\n    \"imageBase64\": \"\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										},
										"description": "\"validFrom\": 1546297200000,\r\n    \"validTo\": 1640991600000,"
									},
									"response": []
								}
							]
						},
						{
							"name": "Offers update",
							"item": []
						},
						{
							"name": "Discount plan",
							"item": [
								{
									"name": "discountPlan|DP_GLOBAL_10P",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"Discount plan {{request.label.1}}\",\r\n    \"discountPlanType\":\"INVOICE\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "discountPlanItem|DP_GLOBAL_10P|DPI_GLOBAL_10P|PERCENTAGE|10",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{request.label.2}}\",\r\n    \"discountPlanCode\": \"{{request.label.1}}\",\r\n    \"disabled\": false,\r\n    \"discountPlanItemType\": \"{{request.label.3}}\",\r\n    \"discountValue\": {{request.label.4}},\r\n    \"discountValueEL\": null,\r\n    \"customFields\": null\r\n}\r\n"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlanItem/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlanItem",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Jasper Template",
			"item": [
				{
					"name": "createDir|path=/jasper/OPENCELL_DEMO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{path}}"
						},
						"url": {
							"raw": "{{opencell.url}}/admin/files/createDir",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"admin",
								"files",
								"createDir"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadZippedFileBase64",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"filepath\":\"{{path}}/test.zip\",\n\"content\":\"\"\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/admin/files/uploadZippedFileBase64",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"admin",
								"files",
								"uploadZippedFileBase64"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Perf_test_jobs",
			"item": [
				{
					"name": "Update cacheCFT to false to look up in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if( pm.response.code == 200 ) { \r",
									"    tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors==null ||JSON.parse(responseBody).compilationErrors.length === 0; \r",
									"    }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "opencell.superadmin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "opencell.superadmin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"property\": \"cache.cacheCFT\",\r\n    \"value\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{opencell.url}}/configurations",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCRIPT|MailNotificationScript",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if( pm.response.code == 200 ) { \r",
									"    tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors==null ||JSON.parse(responseBody).compilationErrors.length === 0; \r",
									"    }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ScriptInstance>\r\n    <code>org.meveo.service.script.MailNotificationScript</code>\r\n    <description>MailNotificationScript</description>\r\n    <type>JAVA</type>\r\n    <script>\r\n        <![CDATA[package org.meveo.service.script;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Map.Entry;\r\nimport java.util.Set;\r\n\r\nimport javax.persistence.EntityManager;\r\nimport javax.persistence.Query;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.service.billing.impl.EdrService;\r\nimport org.meveo.service.communication.impl.EmailSender;\r\nimport org.meveo.util.Version;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.math.BigInteger;\r\n\r\npublic class MailNotificationScript extends Script {\r\n\r\n private EmailSender emailSender = (EmailSender) getServiceInterface(\"EmailSender\");\r\n private EdrService edrService = (EdrService) getServiceInterface(\"EdrService\");\r\n\r\n @Override\r\n public void execute(Map<String, Object> methodContext) throws BusinessException {\r\n\r\n  String jobNativeQuery = \"SELECT meveo_job_instance.code, start_date, ((\"\r\n    + \"DATE_PART('day', end_date\\\\:\\\\:timestamp - start_date\\\\:\\\\:timestamp) * 24 + \"\r\n    + \"DATE_PART('hour', end_date\\\\:\\\\:timestamp - start_date\\\\:\\\\:timestamp)) * 60 + \"\r\n    + \"DATE_PART('minute', end_date\\\\:\\\\:timestamp - start_date\\\\:\\\\:timestamp)) * 60 + \"\r\n    + \"DATE_PART('second', end_date\\\\:\\\\:timestamp - start_date\\\\:\\\\:timestamp) as time_in_seconds, nb_to_process, nb_success, nb_error, nb_warning FROM job_execution, meveo_job_instance \"\r\n    + \"WHERE job_execution.job_instance_id=meveo_job_instance.id AND code in ('Cust_Job','Acco_Job','Subs_Job','M_Job','U_Job','RT_Job','BillingRunJob','Inv_Job','XML_Job','PDF_Job','AO_Job','A_SEPA') order by start_date\";\r\n  \r\n\r\n  String nbBASQL = \"SELECT count (*) FROM billing_billing_account\";\r\n  EntityManager entityManager = edrService.getEntityManager();\r\n\r\n  Query query = entityManager.createNativeQuery(jobNativeQuery);\r\n  List<Object[]> rows = query.getResultList();\r\n  Map<String, Date> jobDateMap = new LinkedHashMap<>();\r\n  Map<String, Double> jobDuration = new LinkedHashMap<>();\r\n  Map<String, BigInteger> jobProcess = new LinkedHashMap<>();   \r\n  Map<String, BigInteger> jobSuccess = new LinkedHashMap<>();\r\n  Map<String, BigInteger> jobErrors = new LinkedHashMap<>();\r\n  Map<String, BigInteger> jobWarnings = new LinkedHashMap<>();\r\n\r\n  Query nbBAQuery = entityManager.createNativeQuery(nbBASQL);\r\n\r\n  BigInteger nbBA = (BigInteger) nbBAQuery.getSingleResult();\r\n   \r\n\r\n  for (Object[] row : rows) {\r\n   try {\r\n    jobDateMap.put((String) row[0], (Date) row[1]);\r\n    jobDuration.put((String) row[0], (Double) row[2]);\r\n    jobProcess.put((String) row[0], (BigInteger) row[3]);\r\n    jobSuccess.put((String) row[0], (BigInteger) row[4]);\r\n    jobErrors.put((String) row[0], (BigInteger) row[5]);\r\n    jobWarnings.put((String) row[0], (BigInteger) row[6]);\r\n   } catch (Exception ex) {\r\n    System.out.println(ex.getMessage());\r\n   }\r\n  }\r\n\r\n \r\n  StringBuilder stringBuilder = new StringBuilder();\r\n  stringBuilder.append(\"<html>\");\r\n  stringBuilder.append(\"<head>\");\r\n  stringBuilder.append(\"<title>Test Perfs Result on \" + nbBA + \" entities </title>\");\r\n  stringBuilder.append(\"</head>\");\r\n  stringBuilder.append(\"<body>\");\r\n  stringBuilder.append(\"<style>table{font-family:Arial,Helvetica,sans-serif;border-collapse:collapse}td,th{border:1px solid #ddd;padding:8px}tr:nth-child(even){background-color:#f2f2f2}tr:hover{background-color:#ddd}th{padding-top:12px;padding-bottom:12px;text-align:left;background-color:#4CAF50;color:#fff}</style>\");\r\n  stringBuilder.append(\"<h2>Jobs Performance tests results on \" + nbBA + \" entities for version : \" + Version.appVersion + \"on {{opencell.base}} </h2>\");\r\n  stringBuilder.append(\"<table>\");\r\n  stringBuilder.append(\"<thead>\");\r\n  stringBuilder.append(\"<tr>\");\r\n  stringBuilder.append(\"<th>JOB</th>\");\r\n  stringBuilder.append(\"<th>START DATE</th>\");\r\n  stringBuilder.append(\"<th>DURATION</th>\");\r\n  stringBuilder.append(\"<th>NB PROCESS</th>\");\r\n  stringBuilder.append(\"<th>NB SUCESS</th>\");\r\n  stringBuilder.append(\"<th>NB ERRORS</th>\");\r\n  stringBuilder.append(\"<th>NB WARNINGS</th>\");\r\n  stringBuilder.append(\"<th>TPS</th>\");\r\n  stringBuilder.append(\"</tr>\");\r\n  stringBuilder.append(\"</thead>\");\r\n  stringBuilder.append(\"<tbody>\");\r\n  Set<Entry<String, Date>> entrySet = jobDateMap.entrySet();\r\n  for (Entry<String, Date> entry : entrySet) {\r\n   stringBuilder.append(\"<tr>\");\r\n   String key = entry.getKey();\r\n   stringBuilder.append(\"<td>\" + key + \"</td>\");\r\n   stringBuilder.append(\"<td>\" + entry.getValue() + \"</td>\");\r\n   stringBuilder.append(\"<td>\" + String.format(\"%1.0f\",jobDuration.get(key)) + \"</td>\");\r\n   stringBuilder.append(\"<td>\" + jobProcess.get(key) + \"</td>\");\r\n   stringBuilder.append(\"<td>\" + jobSuccess.get(key) + \"</td>\");\r\n   stringBuilder.append(\"<td>\" + jobErrors.get(key) + \"</td>\");\r\n   stringBuilder.append(\"<td>\" + jobWarnings.get(key) + \"</td>\");\r\n   stringBuilder.append(\"<td>\" + String.format(\"%1.0f\",(nbBA.doubleValue()/jobDuration.get(key))) + \"</td>\");\r\n   stringBuilder.append(\"<tr>\");\r\n  }\r\n\r\n  stringBuilder.append(\"</tbody>\");\r\n  stringBuilder.append(\"</table>\");\r\n\r\n  stringBuilder.append(\"</br>\");\r\n\r\n  stringBuilder.append(\"<p>Nota : <em>Duration is in second and TPS is number of Treatements Per Second</em></p>\");\r\n\r\n  stringBuilder.append(\"</body>\");\r\n  stringBuilder.append(\"</html>\");\r\n\r\n  Map<String, Object> emailParams = new HashMap<String, Object>();\r\n  emailParams.put(\"JobStartDate\", jobDateMap);\r\n  emailParams.put(\"JobDuration\", jobDateMap);\r\n  emailParams.put(\"nbBA\", nbBA);\r\n\r\n  String from = \"bot@opencellsoft.com\";\r\n  String replyTo = \"no-reply@opencellsoft.com\";\r\n  String to1 = \"{{EMAIL1}}\";\r\n  String to2 = \"wassim.drira@opencellsoft.com\";\r\n  String to3 = \"antoine.michea@opencellsoft.com\";\r\n  String cc = \"chamseddine.chrifa@opencellsoft.com\";\r\n\r\n  try {\r\n   emailSender.send(from, Arrays.asList(replyTo), Arrays.asList(to1), cc == null ? null : Arrays.asList(cc),\r\n     null, \"Test Perfs Result\", null, stringBuilder.toString(), null, new Date(), true);\r\n   methodContext.put(Script.RESULT_VALUE, \"Email sent\");\r\n\r\n  } catch (Exception e) {\r\n   e.printStackTrace();\r\n  }\r\n\r\n }\r\n}]]></script>\r\n</ScriptInstance>"
						},
						"url": {
							"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCRIPT|CDRScript|Generate Customers and CDR files|FROM|NB_cust|NB_SUBS|NB_Files|",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if( pm.response.code == 200 ) { \r",
									"    tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors==null ||JSON.parse(responseBody).compilationErrors.length === 0; \r",
									"    }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ScriptInstance>\r\n    <code>org.meveo.service.script.CDRScript</code>\r\n    <description>CDR creator Script</description>\r\n    <type>JAVA</type>\r\n    <script>\r\n        <![CDATA[                                   package org.meveo.service.script;\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Map;\r\nimport java.util.Random;\r\nimport java.util.List;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.commons.utils.EjbUtils;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.service.medina.impl.AccessService;\r\nimport org.meveo.service.billing.impl.UserAccountService;\r\nimport org.meveo.admin.util.pagination.PaginationConfiguration;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.model.billing.UserAccount;\r\n\r\npublic class CDRScript extends Script {\r\n\r\n    /** default folder where stores generated files. */\r\n    private static String pathCDR = \"imports/metering/input/\"; // Find the cdrs path to not get the error on the logs\r\n\r\n\r\n\r\n    /**\r\n     * @param days Number of days to generate CDRs for each Access point\r\n     * @param cdrsPerDay how many CDRs are generated per day\r\n     * @param periodBtwCDRs period between CDRs in the same day in minutes (1 by default)\r\n     * @param nbFiles Number of files to split CDRs accross\r\n     */\r\n    private void genCDR(int days, int cdrsPerDay, int periodBtwCDRs, int nbFiles) {\r\n        ParamBean paramBean = ParamBean.getInstance();\r\n        String rootDir = paramBean.getProperty(\"providers.rootDir\", \"\");\r\n        String providerDir = paramBean.getProperty(\"provider.rootDir\", \"\");\r\n\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.add(Calendar.DATE, -(days + 36)); // @todo -2 au lieu de 0\r\n        Date calendarStartTime = calendar.getTime();\r\n      \r\n        if (periodBtwCDRs == 0) {\r\n            periodBtwCDRs = 1;\r\n        }\r\n      \r\n        File f = new File(rootDir + \"/\" + providerDir + \"/\" + pathCDR);\r\n        if (!f.exists()) {\r\n            f.mkdirs();\r\n        }\r\n\r\n        Random random = new Random();\r\n        AccessService accessService = (AccessService) EjbUtils.getServiceInterface(\"AccessService\");\r\n\r\n        int minApId = ((Long)((List)accessService.executeSelectQuery(\"select min(id) from Access\", null)).get(0)).intValue();\r\n        int maxApId = ((Long)((List)accessService.executeSelectQuery(\"select max(id) from Access\", null)).get(0)).intValue();\r\n\r\n        int countPerFile = (maxApId - minApId + nbFiles - 1) / nbFiles;\r\n\r\n        int minFileApId = minApId;\r\n\r\n        log.info(\"Will generate CDRs for access points {} - {} in {} files\", minApId, maxApId, nbFiles);\r\n      \r\n        for (int fileIndex = 1; fileIndex <= nbFiles; fileIndex++) {\r\n\r\n            int maxFileApId = minApId + countPerFile * fileIndex;\r\n            maxFileApId = maxFileApId > maxApId ? maxApId : maxFileApId;\r\n\r\n            String fileName = rootDir + \"/\" + providerDir + \"/\" + pathCDR + \"/CDR_\" + minFileApId + \"_\" + maxFileApId + \"Test.csv\";\r\n          \r\n            log.debug(\"Generating CDR file {}\", fileName);\r\n            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {\r\n\r\n                for (int apIndex = minFileApId; apIndex <= maxFileApId; apIndex++) {\r\n                  \r\n                    calendar.setTime(calendarStartTime);\r\n                  \r\n                    for (int d = 1; d <= days; d++) {\r\n                        for (int i = 1; i <= cdrsPerDay; i++) {\r\n                            calendar.set(Calendar.HOUR_OF_DAY, random.nextInt(23));\r\n                            calendar.set(Calendar.MINUTE, random.nextInt(59));\r\n                            calendar.set(Calendar.SECOND, random.nextInt(59));\r\n                            int duration = random.nextInt(4000);\r\n                            if (duration == 0) {\r\n                                duration = 100;\r\n                            }\r\n                            writer.write(formatDateWithPattern(calendar.getTime(), \"yyyy-MM-dd'T'hh:mm:ss.S'Z'\") + \";\" + duration + \";acc_\" + apIndex + \";UNIT\");\r\n                            writer.newLine();\r\n                        }\r\n                        calendar.add(Calendar.DATE, 1);\r\n                    }\r\n                }\r\n\r\n                writer.close();\r\n\r\n                minFileApId = minApId + 1 + countPerFile * fileIndex;\r\n                if (minFileApId > maxApId) {\r\n                    break;\r\n                }\r\n\r\n            } catch (Exception e) {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param value\r\n     * @param pattern\r\n     * @return\r\n     */\r\n    public static String formatDateWithPattern(Date value, String pattern) {\r\n        if (value == null) {\r\n            return \"\";\r\n        }\r\n        String result = null;\r\n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\r\n\r\n        try {\r\n            result = sdf.format(value);\r\n        } catch (Exception e) {\r\n            System.out.println(\"Error format\" + e.getMessage());\r\n            result = \"\";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @param args array of input arguments\r\n     * @throws Exception throwing exception if error happens\r\n     */\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\r\n\r\n        // Number of days to produce CDRs for each access point\r\n        int days = {{performance_CDR_DAYS}};\r\n        \r\n        // Number of CDRs per day\r\n        int cdrsPerDay = {{performance_CDR_PER_DAY}};\r\n        \r\n        // Number of minutes between CDRs\r\n        int periodBtwCDRs = {{performance_MINUTES_BETWEEN_CDRS}};\r\n\r\n        // number of files to be generated\r\n        int nbFiles = {{performance_NR_OF_CDR_FILES}};\r\n        \r\n        // Generate days*cdrsPerDay per access point\r\n        genCDR(days, cdrsPerDay, periodBtwCDRs, nbFiles);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n]]></script>\r\n</ScriptInstance>"
						},
						"url": {
							"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "SCRIPT|CRMsScript|Generate Customers|NB_CUST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ScriptInstance>\r\n    <code>org.meveo.service.script.CRMScript</code>\r\n    <description>CRM population Script</description>\r\n    <type>JAVA</type>\r\n    <script>\r\n        <![CDATA[        package org.meveo.service.script;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.persistence.EntityManager;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.commons.utils.StringUtils;\r\nimport org.meveo.service.base.BaseEntityService;\r\nimport org.meveo.model.billing.RatedTransaction;\r\nimport org.meveo.model.jobs.JobInstance;\r\nimport org.meveo.service.base.BaseEntityService;\r\nimport org.meveo.service.billing.impl.RatedTransactionService;\r\nimport org.meveo.service.job.JobExecutionService;\r\nimport org.meveo.service.job.JobInstanceService;\r\nimport org.meveo.service.script.Script;\r\n\r\n/**\r\n * Populate accounts and hierarchy \r\n */\r\npublic class CRMScript extends Script {\r\n\r\n    private static final long serialVersionUID = 3527194041810338108L;\r\n\t\r\n  private static final String CREATE_PG_PROCEDURE = \"  -- crm customer procedure \\n\" +\r\n            \"CREATE OR REPLACE PROCEDURE insert_crm_customer(param_max_customers integer, param_step_to_run varchar)\\n\" +\r\n            \"language plpgsql\\n\" +\r\n            \"AS $$\\n\" +\r\n            \"declare \\n\" +\r\n            \"    counter integer \\\\:= 0;\\n\" +\r\n            \"var_seller_id integer \\\\:= 15;\\n\" +\r\n            \"var_customer_brand_id integer \\\\:= 0;\\n\" +\r\n            \"var_customer_category_id integer \\\\:= 0;\\n\" +\r\n            \"var_billing_cycle_id integer \\\\:= 0;\\n\" +\r\n            \"var_offer_id integer \\\\:= 0;\\n\" +\r\n            \"var_offer_code varchar \\\\:='OF_BASIC';\\n\" +\r\n            \"var_oss_charge_id integer \\\\:= 0;\\n\" +\r\n            \"var_oss_charge_code varchar \\\\:= 'ISCAT_OSS';\\n\" +\r\n            \"var_ost_charge_id integer \\\\:= 0;\\n\" +\r\n            \"var_rec_charge_id integer \\\\:= 0;\\n\" +\r\n            \"var_rec_charge_code varchar \\\\:= 'ISCAT_REC';\\n\" +\r\n            \"var_usg_charge_id integer \\\\:= 0;\\n\" +\r\n            \"var_service_template_id integer \\\\:= 0;\\n\" +\r\n            \"var_trading_country_id integer \\\\:= 0;\\n\" +\r\n            \"var_trading_language_id integer \\\\:= 0;\\n\" +\r\n            \"var_trading_currency_id integer \\\\:= 0;\\n\" +\r\n            \"var_tax_id integer \\\\:= 0;\\n\" +\r\n            \"var_tax_class_id integer \\\\:= 0;\\n\" +\r\n            \"var_tax_cat_id integer \\\\:= 0;\\n\" +\r\n            \"var_currency_id integer \\\\:= 0;\\n\" +\r\n            \"var_invoice_subcat_id integer \\\\:= 0;\\n\" +\r\n            \"var_foo integer \\\\:= 0;\\n\" +\r\n            \"var_bc_id integer \\\\:= 1;\\n\" +\r\n            \"var_title_id integer \\\\:= 0;\\n\" +\r\n            \"var_rec_cal_id integer \\\\:= 0;\\n\" +\r\n            \"var_customer_iterations integer \\\\:= 1;\\n\" +\r\n            \"var_max_ae_id integer \\\\:= 1;\\n\" +\r\n            \"var_schema_name varchar \\\\:= 'public';\\n\" +\r\n            \"var_rec record;\\n\" +\r\n            \"var_first_customer_id integer \\\\:= null;\\n\" +\r\n            \"\\n\" +\r\n            \"BEGIN\\n\" +\r\n            \"for var_rec IN (\\n\" +\r\n            \"SELECT table_name FROM information_schema.tables WHERE table_schema = var_schema_name and table_type='BASE TABLE'\\n\" +\r\n            \"\\n\" +\r\n            \")  LOOP\\n\" +\r\n            \"       EXECUTE format ('ALTER TABLE %I DISABLE TRIGGER ALL',var_rec.table_name );\\n\" +\r\n            \"\\n\" +\r\n            \"  END LOOP;\\n\" +\r\n            \"\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL THEN\\n\" +\r\n            \"--update billing_invoice set recorded_invoice_id = null;\\n\" +\r\n            \"delete from ar_account_operation;\\n\" +\r\n            \"delete from billing_rated_transaction;\\n\" +\r\n            \"delete from billing_invoice_agregate;\\n\" +\r\n            \"delete from billing_invoice;\\n\" +\r\n            \"delete from billing_wallet_operation;\\n\" +\r\n            \"delete from billing_chrginst_wallet;\\n\" +\r\n            \"delete from BILLING_CHARGE_INSTANCE;\\n\" +\r\n            \"delete from billing_service_instance;\\n\" +\r\n            \"delete from medina_access;\\n\" +\r\n            \"delete from rating_cdr;\\n\" +\r\n            \"delete from rating_edr;\\n\" +\r\n            \"delete from billing_subscription;\\n\" +\r\n            \"--update billing_user_account set wallet_id=null;\\n\" +\r\n            \"delete from billing_wallet;\\n\" +\r\n            \"delete from billing_user_account;\\n\" +\r\n            \"delete from billing_billing_account ;\\n\" +\r\n            \"delete from ar_payment_token;\\n\" +\r\n            \"delete from ar_customer_account;\\n\" +\r\n            \"delete from crm_customer;\\n\" +\r\n            \"delete from job_execution;\\n\" +\r\n            \"delete from billing_billing_run;\\n\" +\r\n            \"delete from audit_log;\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"select max(id) into var_seller_id from crm_seller;\\n\" +\r\n            \"select id into var_offer_id from cat_offer_template where code='OF_BASIC';\\n\" +\r\n            \"select id into var_title_id from adm_title where code='MR';\\n\" +\r\n            \"select id into var_service_template_id from cat_service_template where code='SE_OSS_OST_USG_RECU';\\n\" +\r\n            \"select id into var_oss_charge_id from cat_charge_template where code='CH_OSS';\\n\" +\r\n            \"select id into var_ost_charge_id from cat_charge_template where code='CH_OST';\\n\" +\r\n            \"select id into var_rec_charge_id from cat_charge_template where code='CH_REC_BUILD_RUN_ADV';\\n\" +\r\n            \"select id into var_usg_charge_id from cat_charge_template where code='CH_USG_UNIT';\\n\" +\r\n            \"select max(id) into var_trading_currency_id from billing_trading_currency;\\n\" +\r\n            \"select max(id) into var_trading_country_id from billing_trading_country;\\n\" +\r\n            \"select max(id) into var_trading_language_id from billing_trading_language;\\n\" +\r\n            \"select id into var_tax_id from billing_tax where code='TAX_10';\\n\" +\r\n            \"select id into var_tax_cat_id from billing_tax_category where code='REGULAR';\\n\" +\r\n            \"select id into var_tax_class_id from billing_tax_class where code='NORMAL';\\n\" +\r\n            \"select id into var_currency_id from adm_currency where currency_code='EUR';\\n\" +\r\n            \"select id into var_bc_id from billing_cycle where code='INV_MT_1';\\n\" +\r\n            \"select id into var_customer_category_id from crm_customer_category where code='CLIENT';\\n\" +\r\n            \"select id into var_customer_brand_id from crm_customer_brand where code='DEFAULT';\\n\" +\r\n            \"\\n\" +\r\n            \"-- select max(id) into var_invoice_subcat_id from billing_invoice_sub_cat;\\n\" +\r\n            \"select id into var_rec_cal_id from cat_calendar where code='CAL_MONTHLY_1ST';\\n\" +\r\n            \"\\n\" +\r\n            \"\\n\" +\r\n            \"-- \\\"Customer\\\"\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='customer' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"select ceil(log(2,param_max_customers)) into var_customer_iterations;\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO crm_customer(id, version, created, updated, code, description, address_1, address_2, address_3, address_city, address_country_id, address_state, address_zipcode, default_level, external_ref_1, external_ref_2, firstname, lastname, provider_contact, creator, updater, title_id, primary_contact, uuid, bam_id, cf_values, job_title, email, fax, mobile, phone, vat_no, registration_no, minimum_amount_el, minimum_label_el, minimum_charge_template_id, customer_brand_id, customer_category_id, seller_id, additional_details_id, address_book_id,minimum_target_account_id,invoicing_threshold, check_threshold,threshold_per_entity)\\n\" +\r\n            \"(select nextval('account_entity_seq'),0,now(),null,'cust_'||currval('account_entity_seq'),'Demo Distributor',null,null,null,null,null,null,null,1,null,null,'firstname_'||currval('account_entity_seq'),'lastname_'||currval('account_entity_seq'),null,null,null,var_title_id,null,'cust_'||currval('account_entity_seq')||currval('account_entity_seq'),null,null,null,null,null,null,null,null,null,null,null,null,var_customer_brand_id, var_customer_category_id, var_seller_id, null, null, null, null, null, 0);\\n\" +\r\n            \"\\n\" +\r\n            \"select currval('account_entity_seq') into var_first_customer_id;\\n\" +\r\n            \"\\n\" +\r\n            \"while counter < var_customer_iterations loop\\n\" +\r\n            \"            INSERT INTO crm_customer(id, version, created, updated, code, description, address_1, address_2, address_3, address_city, address_country_id, address_state, address_zipcode, default_level, external_ref_1, external_ref_2, firstname, lastname, provider_contact, creator, updater, title_id, primary_contact, uuid, bam_id, cf_values, job_title, email, fax, mobile, phone, vat_no, registration_no, minimum_amount_el, minimum_label_el, minimum_charge_template_id, customer_brand_id, customer_category_id, seller_id, additional_details_id, address_book_id,minimum_target_account_id,invoicing_threshold, check_threshold,threshold_per_entity)\\n\" +\r\n            \"                        (select nextval('account_entity_seq'),0,now(),null,'cust_'||currval('account_entity_seq'),'Demo Distributor',null,null,null,null,null,null,null,1,null,null,'firstname_'||currval('account_entity_seq'),'lastname_'||currval('account_entity_seq'),null,null,null,var_title_id,null,'cust_'||currval('account_entity_seq')||currval('account_entity_seq'),null,null,null,null,null,null,null,null,null,null,null,null,var_customer_brand_id, var_customer_category_id, var_seller_id, null, null, null, null, null, 0 from crm_customer);\\n\" +\r\n            \"        \\n\" +\r\n            \"            counter \\\\:= counter + 1;\\n\" +\r\n            \"end loop;     \\n\" +\r\n            \"\\n\" +\r\n            \"-- Remove customers exceeding the number needed\\n\" +\r\n            \"    delete from crm_customer where id >= (var_first_customer_id + param_max_customers);\\n\" +\r\n            \"\\n\" +\r\n            \"    select setval('account_entity_seq', (select max(id)+1 from crm_customer), false) into var_foo;\\n\" +\r\n            \"  \\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"\\n\" +\r\n            \"-- \\\"Customer account\\\"\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='ca' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO ar_customer_account(id, version, created, updated, code, description, address_1, address_2, address_3, address_city, address_country_id, address_state, address_zipcode, default_level, external_ref_1, external_ref_2, firstname, lastname, provider_contact, creator, updater, title_id, primary_contact, uuid, bam_id, cf_values, job_title, email, fax, mobile, phone, vat_no, registration_no, minimum_amount_el, minimum_label_el, minimum_charge_template_id, date_dunning_level, date_status, dunning_level, pswd, status, customer_id, trading_currency_id, trading_language_id, credit_category_id, due_date_delay_el, excluded_from_payment, crm_address_book_id, minimum_target_account_id, invoicing_threshold, check_threshold, threshold_per_entity) \\n\" +\r\n            \"(select nextval('account_entity_seq'),0,now(),null,'ca_'||currval('account_entity_seq'),'Demo Distributor',null,null,null,null,null,null,null,1,null,null,'firstname_'||currval('account_entity_seq'),'lastname_'||currval('account_entity_seq'),null,null,null,var_title_id,null,'ca_'||currval('account_entity_seq')||currval('account_entity_seq'),null,null,null,null,null,null,null,null,null,null,null,null,NOW(),NOW(),'R0','password','ACTIVE',id,var_trading_currency_id,var_trading_language_id,null,null,0,null,null,null,null,0 from crm_customer);\\n\" +\r\n            \"\\n\" +\r\n            \"  INSERT INTO ar_payment_token (id, version, created, updated, disabled, alias, is_default, bank_name, bank_code ,account_number,iban, bic,mandate_date,mandate_identification, customer_account_id, token_type)\\n\" +\r\n            \"(select nextval('ar_payment_token_seq'), 0, now(), now(), 0, 'SEPA', 1,'Some Bank','12456','...','FR123456789123456789','BDNFR123456',TO_DATE('2020-01-10','YYYY-MM-DD'),'G', ca.id, 'DIRECTDEBIT' from ar_customer_account ca); \\n\" +\r\n            \"\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"-- \\\"Billing account\\\"\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='ba' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO billing_billing_account(id, version, created, updated, code, description, address_1, address_2, address_3, address_city, address_country_id, address_state, address_zipcode, default_level, external_ref_1, external_ref_2, firstname, lastname, provider_contact, creator, updater, title_id, primary_contact, uuid, bam_id, cf_values, job_title, email, fax, mobile, phone, vat_no, registration_no, minimum_amount_el, minimum_label_el, minimum_charge_template_id, br_amount_with_tax, br_amount_without_tax, discount_rate, electronic_billing, invoice_prefix, next_invoice_date, status, status_date, subscription_date, termination_date, billing_cycle, billing_run, customer_account_id, termin_reason_id, trading_country_id, trading_language_id, trading_currency_id, invoicing_threshold, mailing_type, cced_emails, email_template_id, minimum_invoice_sub_category_id, tax_category_id, check_threshold, payment_method_id, threshold_per_entity) \\n\" +\r\n            \"(select nextval('account_entity_seq'),0,now(),null,'ba_'||currval('account_entity_seq'),'Demo Distributor',null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,'ba_'||currval('account_entity_seq')||currval('account_entity_seq'),null,null,null,null,null,null,null,null,null,null,null,null, null, null, null, 0, 'test', now() ,'ACTIVE', NOW(), TO_DATE('2021-03-01','YYYY-MM-DD'), null, var_bc_id, null, id, null, var_trading_country_id, var_trading_language_id, var_trading_currency_id, null, null, null, null, null, var_tax_cat_id, null, null, 0 from ar_customer_account);\\n\" +\r\n            \"raise notice 'Value of var_trading_country_id : %', var_trading_country_id;\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"-- \\\"User account\\\"\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='ua' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO billing_user_account(id, version, created, updated, code, description, address_1, address_2, address_3, address_city, address_country_id, address_state, address_zipcode, default_level, external_ref_1, external_ref_2, firstname, lastname, provider_contact, creator, updater, title_id, primary_contact, uuid, bam_id, cf_values, job_title, email, fax, mobile, phone, vat_no, registration_no, minimum_amount_el, minimum_label_el, minimum_charge_template_id, status, status_date, subscription_date, termination_date, billing_account_id, termin_reason_id, wallet_id) \\n\" +\r\n            \"(select nextval('account_entity_seq'),0,now(),null,'ua_'||currval('account_entity_seq'),'Demo Distributor',null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,'ua_'||currval('account_entity_seq')||currval('account_entity_seq'),null,null,null,null,null,null,null,null,null,null,null,null, 'ACTIVE', NOW(), NOW(), null, id, null, currval('account_entity_seq') from billing_billing_account);\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO billing_wallet(id,version,created, updated, code, description,user_account_id)\\n\" +\r\n            \"(select id, 0, now(), now(), 'PRINCIPAL', null, id from billing_user_account);\\n\" +\r\n            \"\\n\" +\r\n            \"select setval('account_entity_seq', (select max(id)+1 from billing_wallet), false) into var_foo;\\n\" +\r\n            \"\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"-- \\\"Subscriptions\\\"\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='subscription' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO billing_subscription (id, version, created, updated, code, description, subscription_date, user_account_id, uuid, seller_id, offer_id, auto_renew, initial_term_type, renewal_term_type, status, status_date)\\n\" +\r\n            \"(select nextval('billing_subscription_seq'), 0, now(), now(), 'sub_'||currval('billing_subscription_seq'), null, date_trunc('month', now()) - interval '1 month', ua.id,'sub_'||currval('billing_subscription_seq'),var_seller_id,var_offer_id,0,'RECURRING','RECURRING','ACTIVE', now() from billing_user_account ua);\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO medina_access (id, version, disabled, acces_user_id, end_date, start_date, subscription_id, uuid, creator, updater, created, updated, cf_values)\\n\" +\r\n            \"(select nextval('medina_access_seq'), 0, 0, 'acc_'||currval('medina_access_seq'), null, null, sub.id, 'acc_'||currval('medina_access_seq'), null, null, now(), null, null from billing_subscription sub );\\n\" +\r\n            \"\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"-- \\\"Service instantiation\\\" \\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='service' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO BILLING_SERVICE_INSTANCE (id, version,description, created, code, quantity, status, status_date, subscription_date, service_template_id, subscription_id, uuid, cf_values) \\n\" +\r\n            \"(select nextval('billing_service_instance_seq'),0,null, NOW(),'SE_OSS_OST_USG_RECU', 2, 'ACTIVE', now(),date_trunc('month', now()) - interval '1 month',var_service_template_id,id,'serv'||currval('billing_service_instance_seq'),null from billing_subscription);\\n\" +\r\n            \"\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"-- For subscription charge:\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='subscription_charge' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO BILLING_CHARGE_INSTANCE(id, version, created, code, description,  is_prepaid, status, status_date, charge_template_id, trading_country, trading_currency, seller_id, subscription_id, user_account_id, charge_type, quantity, service_instance_id, uuid, calendar_id, apply_in_advance, subscription_date, charge_date, next_charge_date, charged_to_date, priority)\\n\" +\r\n            \"(select nextval('billing_charge_instance_seq'), 0, NOW(), 'CH_OSS', null,  0, 'CLOSED', NOW(), var_oss_charge_id,var_trading_country_id, var_trading_currency_id,var_seller_id,sub.id, sub.user_account_id,'S', 2,  serv.id, 'ch_'||currval('billing_charge_instance_seq'), null, 1,sub.subscription_date, sub.subscription_date, null, null, 1 from BILLING_SERVICE_INSTANCE serv join billing_subscription sub on serv.subscription_id=sub.id);\\n\" +\r\n            \"\\n\" +\r\n            \"-- For Subscription charge wallet operation\\n\" +\r\n            \"select id into var_invoice_subcat_id from billing_invoice_sub_cat where code = var_oss_charge_code;\\n\" +\r\n            \"\\n\" +\r\n            \"insert into billing_wallet_operation (id, version, accounting_code_id, amount_tax, amount_with_tax, amount_without_tax, cf_values, charge_instance_id, code, counter_id, created, currency_id, description, edr_id, end_date, input_quantity, input_unit_description, input_unitofmeasure, invoice_sub_category_id, invoicing_date, offer_code, offer_id, operation_date, order_number, parameter_1, parameter_2, parameter_3, parameter_extra, priceplan_id, quantity, rated_transaction_id, rating_unit_description, rating_unitofmeasure, raw_amount_with_tax, raw_amount_without_tax, reject_reason, reratedWalletOperation_id, seller_id, service_instance_id, sort_index, start_date, status, subscription_id, subscription_date, tax_id, tax_class_id, tax_percent, credit_debit_flag, unit_amount_tax, unit_amount_with_tax, unit_amount_without_tax, updated, uuid, wallet_id, operation_type, user_account_id, billing_account_id) \\n\" +\r\n            \"(select nextval('billing_wallet_operation_seq'), 0, null, 2, 12, 10, null, ch.id, ch.code, null, now(), var_currency_id, ch.description, null, null, null, null, null, var_invoice_subcat_id, null, var_offer_code, var_offer_id, date_trunc('month', now()) - interval '1 month', null, null, null, null, null, null, ch.quantity, null, null, null, null, null, null, null, var_seller_id, ch.service_instance_id, 0, null, 'OPEN', ch.subscription_id, ch.subscription_date, var_tax_id, var_tax_class_id, 0, 'DEBIT', 1, 6, 5, null, 'wo_'||currval('billing_wallet_operation_seq'),ch.user_account_id, 'W', ch.user_account_id, ua.billing_account_id from billing_charge_instance ch join billing_user_account ua on ch.user_account_id=ua.id where ch.code = 'CH_OSS');\\n\" +\r\n            \"\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"-- For recurring charge: \\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='recurring_charge' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO BILLING_CHARGE_INSTANCE(id, version, created, code, description,  is_prepaid, status, status_date, charge_template_id, trading_country, trading_currency, seller_id, subscription_id, user_account_id, charge_type, quantity, service_instance_id, uuid, calendar_id, apply_in_advance,  subscription_date, charge_date, next_charge_date, charged_to_date, priority)\\n\" +\r\n            \"(select nextval('billing_charge_instance_seq'), 0, NOW(), 'CH_REC_BUILD_RUN_ADV', null,  0, 'ACTIVE', NOW(), var_rec_charge_id,var_trading_country_id, var_trading_currency_id,var_seller_id,sub.id, sub.user_account_id,'R', 2,  serv.id, 'ch_'||currval('billing_charge_instance_seq'), var_rec_cal_id, 1,sub.subscription_date, null, null, null, 1 from BILLING_SERVICE_INSTANCE serv join billing_subscription sub on serv.subscription_id=sub.id);\\n\" +\r\n            \"\\n\" +\r\n            \"-- For recurring charge wallet operation\\n\" +\r\n            \"--select id into var_invoice_subcat_id from billing_invoice_sub_cat where code = var_rec_charge_code;\\n\" +\r\n            \"\\n\" +\r\n            \"--insert into billing_wallet_operation (id, version, accounting_code_id, amount_tax, amount_with_tax, amount_without_tax, cf_values, charge_instance_id, code, counter_id, created, currency_id, description, edr_id, end_date, input_quantity, input_unit_description, input_unitofmeasure, invoice_sub_category_id, invoicing_date, offer_code, offer_id, operation_date, order_number, parameter_1, parameter_2, parameter_3, parameter_extra, priceplan_id, quantity, rated_transaction_id, rating_unit_description, rating_unitofmeasure, raw_amount_with_tax, raw_amount_without_tax, reject_reason, reratedWalletOperation_id, seller_id, service_instance_id, sort_index, start_date, status, subscription_id, subscription_date, tax_id, tax_class_id, tax_percent, credit_debit_flag, unit_amount_tax, unit_amount_with_tax, unit_amount_without_tax, updated, uuid, wallet_id, operation_type, user_account_id, billing_account_id) \\n\" +\r\n            \"--(select nextval('billing_wallet_operation_seq'), 0, null, 2, 12, 10, null, ch.id, ch.code, null, now(), var_currency_id, ch.description, null, null, null, null, null, var_invoice_subcat_id, null, var_offer_code, var_offer_id, date_trunc('month', now()) - interval '1 month', null, null, null, null, null, null, ch.quantity, null, null, null, null, null, null, null, var_seller_id, ch.service_instance_id, 0, null, 'OPEN', ch.subscription_id, ch.subscription_date, var_tax_id, var_tax_class_id, 0, 'DEBIT', 1, 6, 5, null, 'wo_'||currval('billing_wallet_operation_seq'),ch.user_account_id, 'W', ch.user_account_id, ua.billing_account_id from billing_charge_instance ch join billing_user_account ua on ch.user_account_id=ua.id  where ch.code = 'CH_REC_BUILD_RUN_ADV');\\n\" +\r\n            \"\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"    -- For usage charge:\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='usage_charge' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO BILLING_CHARGE_INSTANCE(id, version, created, code, description,  is_prepaid, status, status_date, charge_template_id, trading_country, trading_currency, seller_id, subscription_id, user_account_id, charge_type, quantity, service_instance_id, uuid, calendar_id, apply_in_advance,  subscription_date, charge_date, next_charge_date, charged_to_date, priority)\\n\" +\r\n            \"(select nextval('billing_charge_instance_seq'), 0, NOW(), 'CH_USG_UNIT', null,  0, 'ACTIVE', NOW(), var_usg_charge_id,var_trading_country_id, var_trading_currency_id,var_seller_id,sub.id, sub.user_account_id,'U', 2,  serv.id, 'ch_'||currval('billing_charge_instance_seq'), null, 1,sub.subscription_date, sub.subscription_date, null, null, 1 from BILLING_SERVICE_INSTANCE serv join billing_subscription sub on serv.subscription_id=sub.id);\\n\" +\r\n            \"\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"-- For termination charge:\\n\" +\r\n            \"\\n\" +\r\n            \"IF param_step_to_run IS NULL or lower(param_step_to_run) ='termination_charge' THEN\\n\" +\r\n            \"\\n\" +\r\n            \"INSERT INTO BILLING_CHARGE_INSTANCE(id, version, created, code, description,  is_prepaid, status, status_date, charge_template_id, trading_country, trading_currency, seller_id, subscription_id, user_account_id, charge_type, quantity, service_instance_id, uuid, calendar_id, apply_in_advance,  subscription_date, charge_date, next_charge_date, charged_to_date, priority)\\n\" +\r\n            \"(select nextval('billing_charge_instance_seq'), 0, NOW(), 'CH_OST', null,  0, 'INACTIVE', NOW(), var_ost_charge_id,var_trading_country_id, var_trading_currency_id,var_seller_id,sub.id, sub.user_account_id,'T', 2,  serv.id, 'ch_'||currval('billing_charge_instance_seq'), null, 1, sub.subscription_date, sub.subscription_date, null, null, 1 from BILLING_SERVICE_INSTANCE serv join billing_subscription sub on serv.subscription_id=sub.id);\\n\" +\r\n            \"\\n\" +\r\n            \"END IF;\\n\" +\r\n            \"\\n\" +\r\n            \"\\n\" +\r\n            \"for var_rec IN (\\n\" +\r\n            \"SELECT table_name FROM information_schema.tables WHERE table_schema = var_schema_name and table_type='BASE TABLE'\\n\" +\r\n            \"\\n\" +\r\n            \")  LOOP\\n\" +\r\n            \"       EXECUTE format ('ALTER TABLE %I ENABLE TRIGGER ALL',var_rec.table_name );\\n\" +\r\n            \"\\n\" +\r\n            \"  END LOOP;\\n\" +\r\n            \"\\n\" +\r\n            \"\\n\" +\r\n            \"end$$;\\n\" +\r\n            \"CALL insert_crm_customer({{NB_CUST}}, null);\" +\r\n            \"--CALL insert_crm_customer({{NB_CUST}}, 'customer');\" +\r\n            \"--CALL insert_crm_customer({{NB_CA}}, 'ca');\" +\r\n            \"--CALL insert_crm_customer({{NB_BA}}, 'ba');\" +\r\n            \"--CALL insert_crm_customer({{NB_UA}}, 'ua');\" +\r\n            \"--CALL insert_crm_customer({{NB_SU}}, 'subscription');\" +\r\n            \"--CALL insert_crm_customer({{NB_SE}}, 'service');\" +\r\n            \"--CALL insert_crm_customer({{NB_CHARGE}}, 'usage_charge');\" +\r\n            \"--CALL insert_crm_customer({{NB_CHARGE}}, 'recurring_charge');\" +\r\n            \"--CALL insert_crm_customer({{NB_CHARGE}}, 'subscription_charge');\" +\r\n            \"--CALL insert_crm_customer({{NB_CHARGE}}, 'termination_charge');\";\r\n  \r\n\tprivate final BaseEntityService baseEntityService = (BaseEntityService) getServiceInterface(BaseEntityService.class.getSimpleName());\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> context) throws BusinessException {\r\n        try {\r\n            log.info(\"===================== Send insert_crm_customer Script =====================\");\r\n\r\n            final EntityManager entityManager = baseEntityService.getEntityManager();\r\n\r\n            \r\n            log.debug(\"PG FUNCTION :\" + CREATE_PG_PROCEDURE);\r\n            entityManager.createNativeQuery(CREATE_PG_PROCEDURE).executeUpdate();\r\n            log.info(\"===================== Finish insert_crm_customer Script =====================\");\r\n\r\n        } catch (final Exception e) {\r\n            log.error(\"Failed to cancel edr, wo and rt \", e);\r\n            throw new BusinessException(e.getMessage());\r\n        }\r\n    }\r\n}\r\n]]></script>\r\n</ScriptInstance>"
						},
						"url": {
							"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create|code=SendResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"SendResults\",\n        \"disabled\": false,\n        \"jobCategory\": \"MEDIATION\",\n        \"jobTemplate\": \"ScriptingJob\",\n        \"active\": true,\n        \"customFields\": {\n            \"customField\": [\n                {\n                    \"code\": \"ScriptingJob_script\",\n                    \"description\": \"Script to run\",\n                    \"fieldType\": \"ENTITY\",\n                    \"entityReferenceValue\": {\n                        \"classname\": \"org.meveo.model.scripts.ScriptInstance\",\n                        \"classnameCode\": null,\n                        \"code\": \"org.meveo.service.script.MailNotificationScript\"\n                    },\n                    \"guiPosition\": \"tab:Configuration:0;field:0\"\n                }\n            ]\n        },\n        \"limitToSingleNode\": true,\n        \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "DDREQUEST CReation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fromDueDate\": \"2010-03-28T00:00:00Z\",\r\n    \"toDueDate\": \"2026-05-18T00:00:00Z\",\r\n    \"ddrequestOp\": \"CREATE\",\r\n    \"status\": \"WAIT\",\r\n    \"ddRequestBuilderCode\": \"SEPA_STD\"\r\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/payment/ddrequestLotOp",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"payment",
								"ddrequestLotOp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create|code=A_SEPA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"A_SEPA\",\n    \"jobCategory\": \"PAYMENT\",\n    \"jobTemplate\": \"SepaDirectDebitJob\",\n    \"customFields\": {\n            \"customField\": [\n                {\n                    \"code\": \"SepaJob_ddRequestBuilder\",\n                    \"description\": \"DDRequest builder\",\n                    \"fieldType\": \"ENTITY\",\n                    \"entityReferenceValue\": {\n                        \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\n                        \"classnameCode\": null,\n                        \"code\": \"Sepa_STD\"\n                    },\n                    \"guiPosition\": \"tab:Configuration:0;field:2\"\n                }\n            ]\n        },\n    \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=AO_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"AO_Job\",\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\n    \"jobTemplate\": \"AccountOperationsGenerationJob\",\n    \"followingJob\": \"A_SEPA\",\n    \"active\": true,\n    \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=PDF_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"PDF_Job\",\n    \"disabled\": false,\n    \"jobCategory\": \"INVOICING\",\n    \"jobTemplate\": \"PDFInvoiceGenerationJob\",\n    \"followingJob\": \"AO_Job\",\n    \"active\": true,\n    \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=XML_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"XML_Job\",\n    \"jobCategory\": \"INVOICING\",\n    \"jobTemplate\": \"XMLInvoiceGenerationJob\",\n    \"active\": true,\n    \"followingJob\": \"PDF_Job\",\n    \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=Inv_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"Inv_Job\",\n    \"jobCategory\": \"INVOICING\",\n    \"jobTemplate\": \"InvoicingJob\",\n    \"followingJob\": \"XML_Job\",\n    \"active\": true,\n    \"verboseReport\": true\n}\n"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=BillingRunJob",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"pm.globals.set('firstofthecurrentmonth', moment().startOf('month').format(('YYYY-MM-DD')));\r",
									"var dateFrom = moment(dateFrom).subtract(1,'months').endOf('month').format('YYYY-MM-DD');\r",
									"pm.globals.set('lastofthepastmonth', dateFrom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"BillingRunJob\",\n    \"disabled\": false,\n    \"jobCategory\": \"INVOICING\",\n    \"jobTemplate\": \"BillingRunJob\",\n    \"active\": true,\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"BillingRunJob_lastTransactionDate\",\n                \"description\": \"Last Transaction Date\",\n                \"fieldType\": \"DATE\", \n                \"dateValue\": \"{{lastofthepastmonth}}T00:00:00Z\",\n                \"guiPosition\": \"tab:Configuration:0;field:0\"\n            },\n            {\n                \"code\": \"BillingRunJob_billingCycle\",\n                \"description\": \"Billing Cycles\",\n                \"fieldType\": \"ENTITY\",\n                \"guiPosition\": \"tab:Configuration:0;field:2\",\n                \"value\": [\n                    {\n                        \"value\": {\n                            \"entityReferenceValue\": {\n                                \"classname\": \"org.meveo.model.billing.BillingCycle\",\n                                \"classnameCode\": null,\n                                \"code\": \"INV_MT_1\"\n                            }\n                        }\n                    }\n                ]\n            },\n            {\n                \"code\": \"BillingRunJob_invoiceDate\",\n                \"description\": \"invoice Date\",\n                \"fieldType\": \"DATE\",\n                \"dateValue\": \"{{firstofthecurrentmonth}}T00:00:00Z\",\n                \"guiPosition\": \"tab:Configuration:0;field:1\"\n            }\n        ]\n    },\n    \"followingJob\":\"Inv_Job\",\n    \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=RT_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"RT_Job\",\n    \"disabled\": false,\n    \"jobCategory\": \"INVOICING\",\n    \"jobTemplate\": \"RatedTransactionsJob\",\n    \"followingJob\": \"BillingRunJob\",\n    \"active\": true,\n    \"verboseReport\": true,\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"batchSize\",\n                \"longValue\": 10000\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=RR_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"RR_Job\",\n    \"disabled\": false,\n    \"jobCategory\": \"RATING\",\n    \"jobTemplate\": \"RecurringRatingJob\",\n    \"followingJob\": \"RT_Job\",\n    \"active\": true,\n    \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=U_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"U_Job\",\n    \"jobCategory\": \"RATING\",\n    \"jobTemplate\": \"UsageRatingJob\",\n    \"followingJob\": \"RR_Job\",\n    \"active\": true,\n    \"limitToSingleNode\": true,\n    \"verboseReport\": true,\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"batchSize\",\n                \"longValue\": 100\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update|code=M_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"M_Job\",\n    \"disabled\": false,\n    \"jobCategory\": \"MEDIATION\",\n    \"jobTemplate\": \"MediationJob\",\n    \"followingJob\": \"U_Job\",\n    \"limitToSingleNode\": true,\n    \"verboseReport\": true,\n    \"active\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create|code=CDR_GEN_JOB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"CDR_GEN_JOB\",\n    \"disabled\": false,\n    \"jobCategory\": \"MEDIATION\",\n    \"jobTemplate\": \"ScriptingJob\",\n    \"active\": true,\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"ScriptingJob_script\",\n                \"entityReferenceValue\": {\n                    \"classname\": \"org.meveo.model.scripts.ScriptInstance\",\n                    \"classnameCode\": null,\n                    \"code\": \"org.meveo.service.script.CDRScript\"\n                }\n            }\n        ]\n    },\n    \"limitToSingleNode\": true,\n    \"followingJob\": \"M_Job\",\n    \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create|code=CRM_GEN_JOB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"CRM_GEN_JOB\",\n    \"disabled\": false,\n    \"jobCategory\": \"MEDIATION\",\n    \"jobTemplate\": \"ScriptingJob\",\n    \"active\": true,\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"ScriptingJob_script\",\n                \"description\": \"Script to run\",\n                \"fieldType\": \"ENTITY\",\n                \"entityReferenceValue\": {\n                    \"classname\": \"org.meveo.model.scripts.ScriptInstance\",\n                    \"classnameCode\": null,\n                    \"code\": \"org.meveo.service.script.CRMScript\"\n                },\n                \"guiPosition\": \"tab:Configuration:0;field:0\"\n            }\n        ]\n    },\n    \"limitToSingleNode\": true,\n    \"followingJob\": \"CDR_GEN_JOB\",\n    \"verboseReport\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update cacheCFT to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if( pm.response.code == 200 ) { \r",
									"    tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors==null ||JSON.parse(responseBody).compilationErrors.length === 0; \r",
									"    }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "opencell.superadmin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "opencell.superadmin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"property\": \"cache.cacheCFT\",\r\n    \"value\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{opencell.url}}/configurations",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"configurations"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "opencell.admin",
				"type": "string"
			},
			{
				"key": "username",
				"value": "opencell.admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Initialize variables",
					"var now=new Date();",
					"pm.globals.set(\"timestamp.iso\", now.toISOString());",
					"pm.globals.set(\"request.label\", pm.info.requestName);",
					"",
					"var parts = pm.info.requestName.split(\"|\");",
					"",
					"for(let i=0; i<parts.length; i++) {",
					"    pm.globals.set(\"wait\", 0);",
					"    pm.globals.set(\"request.label.\"+i, parts[i]);",
					"",
					"    if(parts[i].indexOf(\"=\") != -1 ){",
					"        propName = parts[i].split(\"=\")[0].trim();",
					"        propValue = parts[i].split(\"=\")[1];",
					"        pm.globals.set(propName, propValue);",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var wait = pm.variables.get(\"wait\");",
					"if (wait > 0) {",
					"    // utils.sleep(wait); doesn't seem to work",
					"    console.log(\"Waiting for \" + pm.variables.get(\"request.label.0\") + \" for \" + wait + \" seconds...\");",
					"    setTimeout(function () { }, wait * 1000);",
					"}",
					"",
					"if (pm.response.code == 401) {",
					"    console.log(\"Unauthorized[401] : access_token may be invalid -> deleting token. Please retry...\");",
					"    pm.variables.unset(\"access_token\");",
					"    console.log(\"Jumping to \" + pm.info.requestName);",
					"    postman.setNextRequest(pm.info.requestName);",
					"}else if (pm.response.code == 409) {",
					"    tests[\"is.fail\"] = (pm.response.code == 409);",
					"} else {",
					"    tests[\"is.success\"] = (pm.response.code == 200 || pm.response.code == 204);",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "provider.code",
			"value": "DEMO",
			"type": "string"
		},
		{
			"key": "template.code",
			"value": "BASE",
			"type": "string"
		},
		{
			"key": "template.label",
			"value": "Démo Opencell",
			"type": "string"
		},
		{
			"key": "seller.code",
			"value": "OPENCELL",
			"type": "string"
		},
		{
			"key": "offer.code",
			"value": "OF",
			"type": "string"
		},
		{
			"key": "project.code",
			"value": "Basic-001",
			"type": "string"
		},
		{
			"key": "project.description",
			"value": "Basic Offer for Base Conf",
			"type": "string"
		},
		{
			"key": "project.type",
			"value": "Setup",
			"type": "string"
		},
		{
			"key": "project.version",
			"value": "9.4+",
			"type": "string"
		},
		{
			"key": "NB_cust",
			"value": "20000",
			"type": "string"
		},
		{
			"key": "NB_SUBS",
			"value": "1",
			"type": "string"
		},
		{
			"key": "CDRs_per_cust",
			"value": "1",
			"type": "string"
		},
		{
			"key": "NB_Files",
			"value": "6",
			"type": "string"
		},
		{
			"key": "FROM",
			"value": "1",
			"type": "string"
		},
		{
			"key": "EMAIL1",
			"value": "\"thang.nguyen@opencellsoft.com\"",
			"type": "string"
		},
		{
			"key": "DAYS",
			"value": "1",
			"type": "string"
		},
		{
			"key": "count",
			"value": "3",
			"type": "string"
		}
	]
}