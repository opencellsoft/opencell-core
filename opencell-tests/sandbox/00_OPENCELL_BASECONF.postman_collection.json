{
	"info": {
		"_postman_id": "f987083d-6a00-4202-9dc9-b8f51a4fee25",
		"name": "00_OPENCELL_V15.X - 202310",
		"description": "# Introduction\r\n\r\nThis configuration file is designed to be a basis for all configurations provided by Opencell.\r\nIt merely contains most common general settings and a catalog of services implementing various rating models.\r\n\r\n# Configuring Opencell\r\n\r\nThere are 2 main ways for configuring ***Opencell***:\r\n* GUI (*Administration GUI* and *Marketing Manager*)\r\n* API (all Opencell configuration and operations can be performed using our extensive API library)\r\n\r\nThe most flexible way is using APIs which currently are available as **Rest** and **Soap**.\r\nThe **Soap** API are deprecated, so will won't mention them anymore.\r\n\r\n## Tools\r\n\r\nAny tools able to send HTTP requests will do.\r\nOne could even just script *curl* calls using shell script.\r\nBut of course, a more user friendly tool will make things easier.\r\n\r\nHere at ***Opencell***, we prefer **Postman** (https://getpostman.com):\r\n* it has a modern, friendly interface\r\n* Sets of API request can be organized into collections, themselves structured into a folder tree.\r\n* Collections can be exported as _JSON_ files or shared with other team members using collaboration features (payed version)\r\n* it allows to uses variables at different levels (collection, environement, global) and to execute *Javascript* scripts before and after executing API calls which allows great flexibility and API response testing.\r\n\r\n\r\n\r\n# Configuration documentation guidelines\r\n\r\nIn order to document our configuration, we make full used of the internal documentation capabilities of the Markdown fields on Postman Objects\r\n\r\n## Default template for *Collection* documentation\r\n\r\n## Default template for *Folder* documentation\r\n\r\n## Default template for *Request* documentation\r\n\r\n\r\n\r\n# Tips & guidelines\r\n\r\nHere follow a few tips for understanding this collection.\r\n\r\n## Collection pre-request script\r\n\r\n```javascript\r\npm.globals.set(\"timestamp.iso\", (new Date()).toISOString());\r\npm.globals.set(\"request.label\", pm.info.requestName);\r\n\r\nvar parts = pm.info.requestName.split(\"|\");\r\n\r\nfor(let i=0; i<parts.length; i++) {\r\n    pm.globals.set(\"request.label.\"+i, parts[i]);\r\n}\r\n```\r\n\r\n## Configuration guidelines\r\n\r\n## Entities\r\n\r\n<entity>_<project_code>_XXX\r\n\r\n### Custom Fields\r\n\r\nCF_<entity>_<project_code>_ XXX\r\n\r\n<entity> will be discarded for inherited\r\n\r\n#### Custom field visibility\r\n\r\nSE_<entity>_<project_code>_<markers>_XXX\r\n\r\n<markers> are used in CFT.applicableOnEl to show CFT on entities\r\n\r\n\r\n## Entity abbreviation\r\n\r\n| code  | entity                        |\r\n|:-----:|:------------------------------|\r\n|   P   | Provider                      |\r\n|   S   | Seller                        |\r\n|   C   | Customer                      |\r\n|  CA   | Customer Account              |\r\n|  BA   | Billing Account               |\r\n|  UA   | User Account                  |\r\n|  SU   | Subscription                  |\r\n|  AP   | Access Point                  |\r\n|  OF   | Offer Template                |\r\n|  SE   | Service Template and Instance |\r\n|  CH   | Charge Template               |\r\n|  PP   | Price Plan                    |\r\n|  CN   | Counter                       |\r\n| ICAT  | Invoice Category              |\r\n| ISCAT | Invoice SubCategory           |\r\n|  CAL  | Calendar                      |\r\n|  BC   | Billing Cycle                 |\r\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2006058"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Settings",
					"item": [
						{
							"name": "Trading Currency",
							"item": [
								{
									"name": "Update Currency|AUD|Dollar australien",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"decimalPlaces\": \"2\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/currency/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currency",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Currency|CAD|Dollar Canadien",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"decimalPlaces\": \"2\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/currency/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currency",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Regional settings Copy",
							"item": [
								{
									"name": "tradingCountry|code=AU|desc=Australie|cur=AUD",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n  \"countryCode\": \"{{code}}\",\n  \"name\": \"{{desc}}\",\n  \"currencyCode\":\"{{cur}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/country/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"country",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "tradingCountry|code=AU",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{opencell.url}}/country?countryCode={{code}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"country"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "{{code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "country|code=CA|desc=Canada|cur=CAD|lang=ENG",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n  \"countryCode\": \"{{code}}\",\n  \"name\": \"{{desc}}\",\n  \"currencyCode\":\"{{cur}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/country/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"country",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Provider & Seller",
							"item": [
								{
									"name": "Seller hierarchy",
									"item": [
										{
											"name": "Clean global variables",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "test"
												},
												{
													"script": {
														"exec": [
															"// clean all global variables",
															"Object.keys(pm.globals.toObject()).forEach(item => {",
															"        pm.globals.unset(item);",
															"});",
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"type": "text",
														"value": "application/json",
														"key": "Content-Type"
													},
													{
														"type": "text",
														"value": "application/json",
														"key": "Accept"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/provider/version",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"provider",
														"version"
													]
												}
											},
											"response": []
										},
										{
											"name": "S|{{seller.code}}|{{seller.code}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{request.label.2}}\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"countryCode\": \"FR\",\r\n    \"languageCode\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": \"Esc. A\",\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": null\r\n    },\r\n    \"isoICDCode\": \"0002\",\r\n    \"registrationNo\": \"123123123123\",\r\n    \"contactInformation\": {\r\n        \"email\": \"billing@opencellsoft.com\",\r\n        \"phone\": \"0123456789\",\r\n        \"mobile\": \"0678912345\",\r\n        \"fax\": null\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "S|{{seller.code}}_US|{{seller.code}} US|US",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{request.label.2}}\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"{{request.label.3}}\",\r\n    \"languageCode\": \"ENG\",\r\n    \"address\": {\r\n        \"address1\": \"7007 Sea World Dr\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"32821\",\r\n        \"city\": \"Orlando\",\r\n        \"country\": \"US\",\r\n        \"state\": \"FL\"\r\n    },\r\n    \"isoICDCode\": \"0002\",\r\n    \"registrationNo\": \"123123123123\",\r\n    \"contactInformation\": {\r\n        \"email\": \"billing@opencellsoft.com\",\r\n        \"phone\": \"0123456789\",\r\n        \"mobile\": \"0678912345\",\r\n        \"fax\": null\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "S|{{seller.code}}_AU|{{seller.code}} AU|AU",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{request.label.2}}\",\r\n    \"currencyCode\": \"AUD\",\r\n    \"countryCode\": \"{{request.label.3}}\",\r\n    \"languageCode\": \"ENG\",\r\n    \"address\": {\r\n        \"address1\": \"xxx xxxxxxx\",\r\n        \"address2\": \"xx\",\r\n        \"address3\": null,\r\n        \"zipCode\": \"xxxx\",\r\n        \"city\": \"Sydney\",\r\n        \"country\": \"UA\",\r\n        \"state\": null\r\n    },\r\n    \"isoICDCode\": \"0002\",\r\n    \"registrationNo\": \"123123123123\",\r\n    \"contactInformation\": {\r\n        \"email\": \"billing@opencellsoft.com\",\r\n        \"phone\": \"0123456789\",\r\n        \"mobile\": \"0678912345\",\r\n        \"fax\": null\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "S|{{seller.code}}_CA|{{seller.code}} CA|CA",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{request.label.2}}\",\r\n    \"currencyCode\": \"CAD\",\r\n    \"countryCode\": \"{{request.label.3}}\",\r\n    \"languageCode\": \"ENG\",\r\n    \"address\": {\r\n        \"address1\": \"xxx xxxxxxx\",\r\n        \"address2\": \"xx\",\r\n        \"address3\": null,\r\n        \"zipCode\": \"xxxx\",\r\n        \"city\": \"Montreal\",\r\n        \"country\": \"CA\",\r\n        \"state\": null\r\n    },\r\n    \"isoICDCode\": \"0002\",\r\n    \"registrationNo\": \"123123123123\",\r\n    \"contactInformation\": {\r\n        \"email\": \"billing@opencellsoft.com\",\r\n        \"phone\": \"0123456789\",\r\n        \"mobile\": \"0678912345\",\r\n        \"fax\": null\r\n    }\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "S|SELLER_LVL1|Seller {{seller.code}} level 1|{{seller.code}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Proxy-Authorization",
														"value": "{{proxy.auth}}",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"parentSeller\": \"{{request.label.3}}\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"contactInformation\": null,\n    \"address\": {\n        \"address1\": \"52 rue Kléber\",\n        \"address2\": null,\n        \"address3\": null,\n        \"zipCode\": \"92300\",\n        \"city\": \"Levallois-Perret\",\n        \"country\": \"FR\",\n        \"state\": null\n    },\n    \"isoICDCode\": \"0002\",\n    \"registrationNo\": \"123123123123\",\n    \"invoiceTypeSequences\": {\n        \"COM\": {\n            \"prefixEL\": \"{{request.label.1}}\",\n            \"sequenceSize\": 6\n        }\n    },\n    \"customFields\": {\n        \"customField\": []\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "S|SELLER_LVL2|Seller Opencell level 2|SELLER_LVL1",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"parentSeller\": \"{{request.label.3}}\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"contactInformation\": null,\n    \"isoICDCode\": \"0002\",\n    \"registrationNo\": \"123123123123\",\n    \"vatNo\": \"VAT999999999\",\n    \"address\": {\n        \"address1\": \"52 rue Kléber\",\n        \"address2\": null,\n        \"address3\": null,\n        \"zipCode\": \"92300\",\n        \"city\": \"Levallois-Perret\",\n        \"country\": \"FR\",\n        \"state\": null\n    },\n    \"customFields\": {\n        \"customField\": []\n    }\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/seller/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "SELLER_FR",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/seller/SELLER_FR",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"SELLER_FR"
													]
												}
											},
											"response": []
										},
										{
											"name": "SELLER_US",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/seller/SELLER_US",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"seller",
														"SELLER_US"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Funct currrency",
									"item": [
										{
											"name": "Update Currency",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\":\"EUR\"\n}\n"
												},
												"url": {
													"raw": "{{opencell.url}}/currency/addFunctionalCurrency",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"currency",
														"addFunctionalCurrency"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Provider",
									"item": [
										{
											"name": "Update Provider",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{provider.code}}\",\n    \"description\": \"{{template.label}}\",\n    \"enterprise\": \"true\",\n    \"currency\": \"EUR\",\n    \"rounding\": 6,\n    \"roundingMode\": \"NEAREST\",\n    \"invoiceRounding\": 2,\n    \"invoiceRoundingMode\": \"NEAREST\",\n    \"invoiceConfiguration\": {\n        \"displaySubscriptions\": \"true\",\n        \"displayServices\": \"true\",\n        \"displayOffers\": \"true\",\n        \"displayEdrs\": \"true\",\n        \"displayProvider\": \"true\",\n        \"displayCfAsXML\": \"true\",\n        \"displayPricePlans\": \"true\",\n        \"displayDetail\": \"true\",\n        \"displayChargesPeriods\": \"true\",\n        \"displayFreeTransacInInvoice\": \"true\",\n        \"displayBillingCycle\": \"true\",\n        \"displayUserAccountHierarchy\": \"true\",\n        \"displayTaxDetails\": \"true\",\n        \"displayWalletOperations\": \"false\",\n        \"displayOrders\": \"true\"\n    }\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/provider/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"provider",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Portal Message",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"portalMessage\": \"<div style='border: 2px dotted red; background-color:yellow; opacity:0.8'><p style='font-family:Monospace;font-size:200%;font-weight:normal;background-color:yellow;padding:10px'>Style  <i style='color:gray'>(using Italique)</i> / <b>Bold</b>: MESSAGE /  URL : <a href=\\\"https://opencellsoft.com\\\" target=\\\"_blank\\\">opencellsoft</a>  </p></div>\"\n    \n}"
												},
												"url": {
													"raw": "{{opencell.url}}/v2/admin/providers/{{provider.code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"admin",
														"providers",
														"{{provider.code}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CF_PROV_PROJECT_VERSION",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label}}_{{$timestamp}}\",\r\n    \"description\": \"{{project.code}} {{project.type}} {{project.version}}\",\r\n    \"fieldType\": \"STRING\",\r\n    \"appliesTo\": \"Provider\",\r\n    \"defaultValue\": \"{{timestamp.iso}}\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \"versionable\": false,\r\n    \"allowEdit\": false,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"guiPosition\": \"tab:Project versions:999\"\r\n}\r\n"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "User",
									"item": [
										{
											"name": "User opencell.us.admin",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"opencell.us.admin\",\n    \"password\": \"opencell.us.admin\",\n    \"email\": \"us@fr.fr\",\n    \"firstName\": \"opencell.us.admin\",\n    \"lastName\": \"opencell.us.admin\",\n    \"userRole\": [\n        \"administrator\",\n        \"default-roles-opencell\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{seller.code}}_US\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/user/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"user",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "User opencell.au.admin",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"opencell.au.admin\",\n    \"password\": \"opencell.au.admin\",\n    \"email\": \"au@fr.fr\",\n    \"firstName\": \"opencell.au.admin\",\n    \"lastName\": \"opencell.au.admin\",\n    \"userRole\": [\n        \"administrator\",\n        \"default-roles-opencell\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{seller.code}}_AU\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/user/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"user",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "User opencell.ca.admin",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"opencell.ca.admin\",\n    \"password\": \"opencell.ca.admin\",\n    \"email\": \"ca@fr.fr\",\n    \"firstName\": \"opencell.ca.admin\",\n    \"lastName\": \"opencell.ca.admin\",\n    \"userRole\": [\n        \"administrator\",\n        \"default-roles-opencell\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{seller.code}}_CA\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/user/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"user",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "User opencell.all.admin",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"opencell.all.admin\",\n    \"password\": \"opencell.all.admin\",\n    \"email\": \"all@fr.fr\",\n    \"firstName\": \"opencell.all.admin\",\n    \"lastName\": \"opencell.all.admin\",\n    \"userRole\": [\n        \"administrator\",\n        \"default-roles-opencell\"\n    ],\n    \"accessibleEntity\": []\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/user/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"user",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Calendars",
							"item": [
								{
									"name": "CAL_PERIOD_MONTHLY",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CAL_PERIOD_MONTHLY\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 1,\n    \"periodUnit\": \"MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "FR_BANKING_CAL_2018",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"FR_BANKING_CAL_2018\",\n    \"description\": \"France bank calendar 2018\",\n    \"calendarType\": \"BANKING\",\n    \"weekendBegin\": 6,\n    \"weekendEnd\": 7,\n    \"endDate\": 1546210800000,\n    \"startDate\": 1514761200000,\n    \"holidays\": [\n        {\n            \"holidayBegin\": 101,\n            \"holidayEnd\": 101\n        },\n        {\n            \"holidayBegin\": 330,\n            \"holidayEnd\": 330\n        },\n        {\n            \"holidayBegin\": 402,\n            \"holidayEnd\": 402\n        },\n        {\n            \"holidayBegin\": 501,\n            \"holidayEnd\": 501\n        },\n        {\n            \"holidayBegin\": 1225,\n            \"holidayEnd\": 1226\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "FR_BANKING_CAL_2019",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n        \"code\": \"FR_BANKING_CAL_2019\",\n        \"description\": \"France bank calendar 2019\",\n        \"calendarType\": \"BANKING\",\n        \"weekendBegin\": 6,\n        \"weekendEnd\": 7,\n        \"endDate\": 1577746800000,\n        \"startDate\": 1546297200000,\n        \"holidays\": [\n            {\n                \"holidayBegin\": 101,\n                \"holidayEnd\": 101\n            },\n            {\n                \"holidayBegin\": 419,\n                \"holidayEnd\": 419\n            },\n            {\n                \"holidayBegin\": 422,\n                \"holidayEnd\": 422\n            },\n            {\n                \"holidayBegin\": 501,\n                \"holidayEnd\": 501\n            },\n            {\n                \"holidayBegin\": 1225,\n                \"holidayEnd\": 1226\n            }\n        ]\n    }\n"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_YEARLY",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CAL_PERIOD_YEARLY\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 12,\n    \"periodUnit\": \"MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_DAILY_ONCE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CAL_PERIOD_DAILY_ONCE\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 1,\n    \"periodUnit\": \"DAY_OF_MONTH\",\n    \"nbPeriods\": 1\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_5DAYS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CAL_PERIOD_5DAYS\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 5,\n    \"periodUnit\": \"DAY_OF_MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_MONTHLY_1ST",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"CAL_MONTHLY_1ST\",\n  \"description\": \"1st of the month\",\n  \"calendarType\": \"YEARLY\",\n  \"days\": [\n  {\n    \"day\": \"1\",\n    \"month\": \"JANUARY\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"FEBRUARY\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"MARCH\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"APRIL\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"MAY\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"JUNE\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"JULY\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"AUGUST\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"SEPTEMBER\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"OCTOBER\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"NOVEMBER\"\n  },\n  {\n    \"day\": \"1\",\n    \"month\": \"DECEMBER\"\n  }\n  ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_JANUARY_3RD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"CAL_JANUARY_3RD\",\n  \"description\": \"January 3rd\",\n  \"calendarType\": \"YEARLY\",\n  \"days\": [\n\t  {\n\t    \"day\": \"3\",\n\t    \"month\": \"JANUARY\"\n\t  }\n  ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_NEVER",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CAL_NEVER\",\n    \"description\": \"Never happens\",\n    \"calendarType\": \"INTERSECT\",\n    \"joinCalendar1Code\": \"CAL_MONTHLY_1ST\",\n    \"joinCalendar2Code\": \"CAL_JANUARY_3RD\"\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_DAILY",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CAL_PERIOD_DAILY\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 1,\n    \"periodUnit\": \"DAY_OF_MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_5MONTHS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CAL_PERIOD_5MONTHS\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 5,\n    \"periodUnit\": \"MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CAL_PERIOD_2MONTHS",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CAL_PERIOD_2MONTHS\",\n    \"calendarType\": \"PERIOD\",\n    \"periodLength\": 2,\n    \"periodUnit\": \"MONTH\",\n    \"nbPeriods\": 0\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE Multi Period",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{opencell.url}}/calendar/Multi period",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"Multi period"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE One period",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{opencell.url}}/calendar/One period",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"One period"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Billing cycles",
							"item": [
								{
									"name": "BC_PERIOD_DAILY_ONCE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"BC_PERIOD_DAILY_ONCE\",\n  \"description\": \"One day period, only once\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"30\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"0\",\n  \"invoicingThreshold\": 0.01,\n  \"calendar\": \"CAL_PERIOD_DAILY_ONCE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "BC_MONTHLY_1ST",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"BC_MONTHLY_1ST\",\n  \"description\": \"Monthly 1st\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"30\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"1\",\n  \"invoicingThreshold\": null,\n  \"calendar\": \"CAL_MONTHLY_1ST\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "BC_MONTHLY_PERIOD",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"BC_MONTHLY_PERIOD\",\n  \"description\": \"Monthly period\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"30\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"2\",\n  \"invoicingThreshold\": null,\n  \"calendar\": \"CAL_PERIOD_MONTHLY\",\n  \"referenceDate\": \"NEXT_INVOICE_DATE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "BC_PARTNER_RETRIIBUTION",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"BC_PARTNER_RETRIIBUTION\",\n  \"description\": \"Partner Retribution period\",\n  \"billingTemplateName\": null,\n  \"invoiceDateDelay\": \"0\",\n  \"dueDateDelay\": \"30\",\n  \"invoiceDateProductionDelay\": \"0\",\n  \"transactionDateDelay\": \"2\",\n  \"invoicingThreshold\": null,\n  \"calendar\": \"CAL_PERIOD_MONTHLY\",\n  \"referenceDate\": \"NEXT_INVOICE_DATE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CYC_INV_MT_1",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{opencell.url}}/billingCycle/CYC_INV_MT_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"CYC_INV_MT_1"
											]
										}
									},
									"response": []
								},
								{
									"name": "CYC_INV_MT_2",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{opencell.url}}/billingCycle/CYC_INV_MT_2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"CYC_INV_MT_2"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE Monthly calendar",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{opencell.url}}/calendar/MONTHLY",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"MONTHLY"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Taxes",
							"item": [
								{
									"name": "Tax rates",
									"item": [
										{
											"name": "tax|code=TAX_20|desc=VAT 20%|percentage=20|accCode=445710000",
											"event": [
												{
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"accountingCode\": \"{{accCode}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/tax/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"tax",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "tax|code=TAX_10|desc=VAT 10%|percentage=10|accCode=445710000",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"tax_10.id\",pm.response.json().entityId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"accountingCode\": \"{{accCode}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/tax/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"tax",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "tax|code=TAX_5_5|desc=VAT 5,5%|percentage=5.5|accCode=445710000",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"tax_5_5.id\",pm.response.json().entityId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"accountingCode\": \"{{accCode}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/tax/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"tax",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "tax|code=NO_TAX|desc=No tax|percentage=0|accCode=445710000",
											"event": [
												{
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"accountingCode\": \"{{accCode}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/tax/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"tax",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Tax composite",
									"item": [
										{
											"name": "tax|code=TAX_COMPOSE_15_5|desc=VAT composed 15.5%|percentage=15.5|accCode=",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"tax_compose.id\",pm.response.json().entityId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"percent\": \"{{percentage}}\",\n    \"accountingCode\": \"{{accCode}}\",\n    \"composite\":true,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ],\n    \"subTaxes\": [\n        {\n            \"id\": {{tax_10.id}}\n        },\n        {\n            \"id\": {{tax_5_5.id}}\n        }\n    ]\n}\n\n\n{\"description\":\"Tax special Compose\",\"percent\":15.5,\"composite\":true,\"accountingCode\":null,\"languageDescriptions\":[],\"subTaxes\":[{\"id\":4},{\"id\":-4}],\"code\":\"TAX_COMPOSE\"}"
												},
												"url": {
													"raw": "{{opencell.url}}/tax/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"tax",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Tax categories (account)",
									"item": [
										{
											"name": "taxCat|code=REGULAR|desc=Regular accounts",
											"event": [
												{
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxCat|code=EXEMPTED|desc=Exempted accounts",
											"event": [
												{
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Tax classes (charge)",
									"item": [
										{
											"name": "taxClass|code=NORMAL|desc=Product with normal tax",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxClass|code=AVALATAX|desc=Product with avalatax tax",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxClass|code=SPECIAL_COMPOSITE|desc=Product with composite Tax",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"taxclass_compose.id\",pm.response.json().entityId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxClass|code=SPECIAL_COMPOSITE|desc=Product with composite Tax Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"taxclass_compose.id\",pm.response.json().dto.id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/taxClass?code=SPECIAL_COMPOSITE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass"
													],
													"query": [
														{
															"key": "code",
															"value": "SPECIAL_COMPOSITE"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "taxClass|code=STANDARD|desc=Product with normal tax",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxClass|code=REDUCED|desc=Products with reduced tax",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxClass|code=NO_TAX|desc=Products with no VAT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxClass/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxClass",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Tax Assignement",
									"item": [
										{
											"name": "taxMapping|priority=100|taxCat=EXEMPTED|taxClass=|buyer=|tax=NO_TAX",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"validFrom\": \"1900-01-01T00:00:00+01:00\",\n    \"validTo\": \"9999-01-01T00:00:00+01:00\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=20|taxCat=REGULAR|taxClass=NO_TAX|buyer=|tax=NO_TAX",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"validFrom\": \"1900-01-01T00:00:00+01:00\",\n    \"validTo\": \"9999-01-01T00:00:00+01:00\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=1|taxCat=REGULAR|taxClass=NORMAL|buyer=|tax=TAX_20",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"validFrom\": \"1900-01-01T00:00:00+01:00\",\n    \"validTo\": \"9999-01-01T00:00:00+01:00\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=1|taxCat=REGULAR|taxClass=SPECIAL_COMPOSITE|buyer=|tax=TAX_COMPOSE_15_5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"validFrom\": \"1900-01-01T00:00:00+01:00\",\n    \"validTo\": \"9999-01-01T00:00:00+01:00\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=2|taxCat=REGULAR|taxClass=REDUCED|buyer=|tax=TAX_10",
											"event": [
												{
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"validFrom\": \"1900-01-01T00:00:00+01:00\",\n    \"validTo\": \"9999-01-01T00:00:00+01:00\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										},
										{
											"name": "taxMapping|priority=10|taxCat=REGULAR|taxClass=NORMAL|buyer=US|tax=TAX_10",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"validFrom\": \"1900-01-01T00:00:00+01:00\",\n    \"validTo\": \"9999-01-01T00:00:00+01:00\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/taxMapping",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"taxMapping"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Account",
							"item": [
								{
									"name": "title|code=SIR|desc=Sir.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"isCompany\": \"false\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "title|code=CIE-SANDBOX|desc=Company",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"isCompany\": \"false\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "custCat|code=CLIENT|taxCat=REGULAR",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"Client\",\r\n    \"accountingCode\": \"410000000\",\r\n    \"taxCategoryCode\": \"{{taxCat}}\",\r\n    \"defaultSellerCode\": \"{{seller.code}}\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "custCat|code=PROSPECT|taxCat=REGULAR",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"Prospect\",\r\n    \"taxCategoryCode\": \"{{taxCat}}\",\r\n    \"defaultSellerCode\": \"{{seller.code}}\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "custCat|code=ASSOCIATION|taxCat=EXEMPTED",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"Association\",\r\n    \"taxCategoryCode\": \"{{taxCat}}\",\r\n    \"defaultSellerCode\": \"{{seller.code}}\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice",
							"item": [
								{
									"name": "Invoice Categories",
									"item": [
										{
											"name": "invoiceCategory|code=ICAT_PRD|desc={{ICAT_PRD Label}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_PRD",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"ISCAT_PRD\",\n    \"description\": \"Product sub-category\",\n    \"invoiceCategory\": \"ICAT_PRD\",\n    \"accountingCode\": \"\",\n    \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "invoiceCategory|code=ICAT_REC|desc={{ICAT_REC Label}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_REC",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"ISCAT_REC\",\n    \"description\": \"Recurring\",\n    \"invoiceCategory\": \"ICAT_REC\",\n    \"accountingCode\": \"\",\n    \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "invoiceCategory|code=ICAT_OSH|desc={{ICAT_OSH Label}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_OSS",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"ISCAT_OSS\",\n    \"description\": \"Oneshot\",\n    \"invoiceCategory\": \"ICAT_OSH\",\n    \"accountingCode\": \"\",\n    \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_OST",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\": \"ISCAT_OST\",\n  \"description\": \"Oneshot Termination\",\n  \"invoiceCategory\": \"ICAT_OSH\",\n  \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_OSO",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"ISCAT_OSO\",\n    \"description\": \"Oneshot Other\",\n    \"invoiceCategory\": \"ICAT_OSH\",\n    \"accountingCode\": \"\",\n    \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "invoiceCategory|code=ICAT_USG|desc={{ICAT_USG Label}}",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "ISCAT_USG",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"ISCAT_USG\",\n    \"description\": \"Echéancier\",\n    \"invoiceCategory\": \"ICAT_USG\",\n    \"accountingCode\": \"\",\n    \"customFields\": null\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceSubCategory",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Invoice Type",
									"item": [
										{
											"name": "invoiceType|code=COM|desc=Invoice",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"name": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"{{code}}\",\r\n  \"description\": \"{{desc}}\",\r\n  \"occTemplateCode\": \"INV_STD\",\r\n  \"occTemplateNegativeCode\": null,\r\n  \"billingTemplateName\": \"\",\r\n  \"sequenceDto\": {\r\n    \"prefixEL\": \"INV_\",\r\n    \"sequenceSize\": 4,\r\n    \"currentInvoiceNb\":null\r\n  },\r\n  \"xmlFilenameEL\": \"XML_INV_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n  \"pdfFilenameEL\": \"PDF_INV_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n  \"sellerSequence\": null,\r\n  \"appliesTo\": [\r\n    \"COM\",\r\n    \"ADJ\"\r\n  ],\r\n  \"matchingAuto\": false,\r\n  \"useSelfSequence\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceType",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "invoiceType|code=DEPOT|desc=Depot de fond",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"name": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"occTemplateCode\": \"CRD_TRS\",\r\n    \"occTemplateNegativeCode\": null,\r\n    \"billingTemplateNameEL\": \"\",\r\n    \"matchingAuto\": false,\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"DEPOT_\",\r\n        \"sequenceSize\": 4,\r\n        \"currentInvoiceNb\": null\r\n    },\r\n    \"xmlFilenameEL\": \"XML_DEPOT_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n    \"pdfFilenameEL\": \"PDF_DEPOT_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n    \"sellerSequence\": null,\r\n    \r\n    \"excludeFromAgedTrialBalance\": false,\r\n    \"appliesTo\": [\r\n        \"COM\",\r\n        \"ADJ\"\r\n    ],\r\n    \"useSelfSequence\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceType",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "invoiceType|code=REB|desc=Invoice Retribution",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"name": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"{{code}}\",\r\n  \"description\": \"{{desc}}\",\r\n  \"occTemplateCode\": \"INV_REB\",\r\n  \"occTemplateNegativeCode\": null,\r\n  \"billingTemplateName\": \"\",\r\n  \"sequenceDto\": {\r\n    \"prefixEL\": \"REB_\",\r\n    \"sequenceSize\": 4,\r\n    \"currentInvoiceNb\":null\r\n  },\r\n  \"xmlFilenameEL\": \"XML_REB_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n  \"pdfFilenameEL\": \"PDF_REB_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n  \"sellerSequence\": null,\r\n  \"appliesTo\": [\r\n    \"COM\",\r\n    \"ADJ\"\r\n  ],\r\n  \"matchingAuto\": false,\r\n  \"useSelfSequence\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceType",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "invoiceType|code=ADJ|desc=Adjustment",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"name": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"{{code}}\",\r\n  \"description\": \"{{desc}}\",\r\n  \"occTemplateCode\": \"INV_CRN\",\r\n  \"occTemplateNegativeCode\": null,\r\n  \"billingTemplateName\": \"\",\r\n  \"sequenceDto\": {\r\n    \"prefixEL\": \"ADJ_\",\r\n    \"sequenceSize\": 4,\r\n    \"currentInvoiceNb\":null\r\n  },\r\n  \"xmlFilenameEL\": \"XML_ADJ_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n  \"pdfFilenameEL\": \"PDF_ADJ_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMM') }/#{ invoice.invoiceNumber }_#{ mv:formatDate(invoice.getInvoiceDate(),'yyyyMMdd') }\",\r\n  \"sellerSequence\": null,\r\n  \"appliesTo\": [\r\n    \"COM\"\r\n  ],\r\n  \"matchingAuto\": false,\r\n  \"useSelfSequence\": true\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceType",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "invoiceType|code=QUOTE|desc=Quote",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"name": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"QUOTE_\",\r\n        \"sequenceSize\": 9\r\n    },\r\n    \"appliesTo\": [],\r\n    \"matchingAuto\": false,\r\n    \"billingTemplateNameEL\": \"quote_new\",\r\n    \"useSelfSequence\": false,\r\n    \"sellerSequence\": {}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"invoiceType",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Termination reasons",
							"item": [
								{
									"name": "TR_NONE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"TR_NONE\",\n\t\"description\": \"Termination with no action (no fees, no reimbursment)\",\n\t\"applyAgreement\": false,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": false,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TR_AGREEMENT",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"TR_AGREEMENT\",\n\t\"description\": \"Termination with Charge Agreement\",\n\t\"applyAgreement\": true,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": false,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TR_REIMBURSE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{request.label}}\",\n    \"description\": \"Termination with Reimbursment\",\n    \"applyAgreement\": false,\n    \"applyReimbursment\": true,\n    \"applyTerminationCharges\": false,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TR_FEE",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{request.label}}\",\n\t\"description\": \"Termination fee\",\n\t\"applyAgreement\": false,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": true,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TERM_REASON_1",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{request.label}}\",\n\t\"description\": \"Termination fee\",\n\t\"applyAgreement\": false,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": true,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/TERM_REASON_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"TERM_REASON_1"
											]
										}
									},
									"response": []
								},
								{
									"name": "TERM_REASON_2",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{request.label}}\",\n\t\"description\": \"Termination fee\",\n\t\"applyAgreement\": false,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": true,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/TERM_REASON_2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"TERM_REASON_2"
											]
										}
									},
									"response": []
								},
								{
									"name": "TERM_REASON_3",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{request.label}}\",\n\t\"description\": \"Termination fee\",\n\t\"applyAgreement\": false,\n\t\"applyReimbursment\": false,\n\t\"applyTerminationCharges\": true,\n    \"reimburseOneshots\": false,\n    \"overrideProrata\": \"NO_OVERRIDE\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason/TERM_REASON_3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason",
												"TERM_REASON_3"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Channels",
							"item": [
								{
									"name": "chan|code=PHONE|desc=Telephone",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{code}}\",\n\t\"description\": \"{{desc}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "chan|code=EMAIL|desc=E-mail",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{code}}\",\n\t\"description\": \"{{desc}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "chan|code=WEB|desc=Online store",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{code}}\",\n\t\"description\": \"{{desc}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "chan|code=RETAIL|desc=Retail store",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{code}}\",\n\t\"description\": \"{{desc}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Notifications Access Sub creation",
							"item": [
								{
									"name": "SCRIPT|CreateAccess|Creates an access on Subscription creation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code == 200 ) { tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors.length === 0; }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"name": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<ScriptInstance code=\"org.meveo.service.script.{{request.label.1}}\" description=\"{{request.label.2}} {{$timestamp}}\">\r\n        <type>JAVA</type>\r\n        <script><![CDATA[\r\npackage org.meveo.service.script;\r\n\r\nimport java.util.Date;\r\nimport java.util.Map;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.admin.User;\r\nimport org.meveo.model.billing.Subscription;\r\nimport org.meveo.model.mediation.Access;\r\n\r\nimport org.meveo.service.medina.impl.AccessService;\r\nimport org.meveo.service.script.Script;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class CreateAccess extends Script {    \r\n    private static final Logger log = LoggerFactory.getLogger(CreateAccess.class);        \r\n\r\n    private AccessService accessService = (AccessService) getServiceInterface(\"AccessService\");\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> context) throws BusinessException {\r\n        log.info(\"EXECUTE context={}\", context);\r\n\r\n        Subscription subscription = (Subscription) context.get(\"entity\");\r\n        if(subscription == null){\r\n            throw new BusinessException(\"subscription is null\");\r\n        }\r\n        log.debug(\"subscription={}\", subscription);\r\n\r\n        Access access = new Access();\r\n        access.setSubscription(subscription);\r\n        access.setAccessUserId(subscription.getCode());\r\n        access.setStartDate(null);\r\n        access.setEndDate(null);\r\n        accessService.create(access);\r\n    }\r\n}]]></script>\r\n</ScriptInstance>"
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "notifSubscriptionCreate",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"updatedCode\": null,\r\n    \"code\": \"subscriptionCreate\",\r\n    \"classNameFilter\": \"org.meveo.model.billing.Subscription\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.CreateAccess\",\r\n    \"scriptParams\": {\r\n      \"entity\": \"#{event}\"\r\n    },\r\n    \"counterTemplate\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Medias",
							"item": [
								{
									"name": "Media|code=OC_LOGO|desc=OC Licence",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"media1.id\",pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"mediaName\": \"{{desc}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"main\": false,\r\n    \"mediaType\": \"IMAGE\",\r\n    \"mediaPath\": \"https://www.capitalgrandest.eu/wp-content/uploads/2020/01/opencell_log-1.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/media",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"media"
											]
										}
									},
									"response": []
								},
								{
									"name": "Media|code=OC_TRAINING|desc=OC Training",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"media2.id\",pm.response.json().mediaDto.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"mediaName\": \"{{desc}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"main\": false,\r\n    \"mediaType\": \"IMAGE\",\r\n    \"mediaPath\": \"https://www.capitalgrandest.eu/wp-content/uploads/2020/01/opencell_log-1.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/media",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"media"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read The 1st Media",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/media/OC_TRAINING",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"media",
												"OC_TRAINING"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Catalog",
					"item": [
						{
							"name": "Custom Table",
							"item": [
								{
									"name": "Create CT multiple entry",
									"item": [
										{
											"name": "Create Table",
											"item": [
												{
													"name": "CET|CT_STRING|CT String|String CustomTable",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.3}}\",\n    \"disabled\": false,\n    \"name\": \"{{request.label.2}}\",\n    \"storeAsTable\": true,\n    \"field\": [\n        {\n            \"code\": \"aString\",\n            \"description\": \"A string\",\n            \"disabled\": false,\n            \"languageDescriptions\": [],\n            \"fieldType\": \"STRING\",\n            \"appliesTo\": \"CE_{{request.label.1}}\",\n            \"useInheritedAsDefaultValue\": false,\n            \"storageType\": \"SINGLE\",\n            \"valueRequired\": false,\n            \"versionable\": false,\n            \"triggerEndPeriodEvent\": false,\n            \"allowEdit\": true,\n            \"hideOnNew\": false,\n            \"maxValue\": 2000,\n            \"guiPosition\": \"tab:Test:0;field:6\",\n            \"indexType\": \"INDEX\",\n            \"uniqueConstraint\": null\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{opencell.url}}/entityCustomization/entity/createOrUpdate",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"entityCustomization",
																"entity",
																"createOrUpdate"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Loop create CT_STRING records Copy",
											"item": [
												{
													"name": "INIT|55",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.globals.set(\"i\", pm.variables.get(\"request.label.1\"));",
																	"",
																	"console.log(\"Looping: init (\"+pm.variables.get(\"request.label.1\")+\")\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{opencell.url}}/provider/version",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"provider",
																"version"
															]
														}
													},
													"response": []
												},
												{
													"name": "CT|CT_STRING|overwrite=false|field=astring|value={{i}}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);",
																	"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";",
																	"",
																	"// loop",
																	"var i=pm.variables.get(\"i\") - 1;",
																	"pm.globals.set(\"i\", i);",
																	"",
																	"if( i > 0 ) {",
																	"    postman.setNextRequest(\"CT|CT_STRING|overwrite=false|field=astring|value={{i}}\");",
																	"    console.log(\"Looping: loop (\"+i+\")\");",
																	"} else {",
																	"    console.log(\"Looping: exit (\"+i+\")\");    ",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"name": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customTableCode\": \"{{request.label.1}}\",\n    \"overwrite\": {{overwrite}},\n    \"record\": [\n        {\n            \"values\": {\n                \"{{field}}\": \"{{value}}_{{$randomPassword}}\"\n            }\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{opencell.url}}/customTable",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"customTable"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Create CT _ 1 ENTRY",
									"item": [
										{
											"name": "Create Table",
											"item": [
												{
													"name": "CET|CT_STRING_ONE_ENTRY|CT String with one entry|String CustomTable",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.3}}\",\n    \"disabled\": false,\n    \"name\": \"{{request.label.2}}\",\n    \"storeAsTable\": true,\n    \"field\": [\n        {\n            \"code\": \"aString\",\n            \"description\": \"A string\",\n            \"disabled\": false,\n            \"languageDescriptions\": [],\n            \"fieldType\": \"STRING\",\n            \"appliesTo\": \"CE_{{request.label.1}}\",\n            \"useInheritedAsDefaultValue\": false,\n            \"storageType\": \"SINGLE\",\n            \"valueRequired\": false,\n            \"versionable\": false,\n            \"triggerEndPeriodEvent\": false,\n            \"allowEdit\": true,\n            \"hideOnNew\": false,\n            \"maxValue\": 2000,\n            \"guiPosition\": \"tab:Test:0;field:6\",\n            \"indexType\": \"INDEX\",\n            \"uniqueConstraint\": null\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{opencell.url}}/entityCustomization/entity/createOrUpdate",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"entityCustomization",
																"entity",
																"createOrUpdate"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Loop create CT_STRING records 2",
											"item": [
												{
													"name": "INIT|1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.globals.set(\"i\", pm.variables.get(\"request.label.1\"));",
																	"",
																	"console.log(\"Looping: init (\"+pm.variables.get(\"request.label.1\")+\")\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{opencell.url}}/provider/version",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"provider",
																"version"
															]
														}
													},
													"response": []
												},
												{
													"name": "CT|CT_STRING_ONE_ENTRY|overwrite=false|field=astring|value={{i}}",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);",
																	"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";",
																	"",
																	"// loop",
																	"var i=pm.variables.get(\"i\") - 1;",
																	"pm.globals.set(\"i\", i);",
																	"",
																	"if( i > 0 ) {",
																	"    postman.setNextRequest(\"CT|CT_STRING|overwrite=false|field=astring|value={{i}}\");",
																	"    console.log(\"Looping: loop (\"+i+\")\");",
																	"} else {",
																	"    console.log(\"Looping: exit (\"+i+\")\");    ",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"type": "text",
																"name": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customTableCode\": \"{{request.label.1}}\",\n    \"overwrite\": {{overwrite}},\n    \"record\": [\n        {\n            \"values\": {\n                \"{{field}}\": \"{{value}}_{{$randomPassword}}\"\n            }\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{opencell.url}}/customTable",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"customTable"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Index Bâtiment BT45",
									"item": [
										{
											"name": "Create Table",
											"item": [
												{
													"name": "CET|ct_ref_index_bt47|CT String with one entry|Index Elec BT47",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.3}}\",\n    \"disabled\": false,\n    \"name\": \"{{request.label.2}}\",\n    \"storeAsTable\": true,\n    \"versioned\": true,\n    \"field\": [\n        {\n            \"code\": \"index\",\n            \"description\": \"index\",\n            \"disabled\": false,\n            \"languageDescriptions\": [],\n            \"fieldType\": \"DOUBLE\",\n            \"appliesTo\": \"CE_{{request.label.1}}\",\n            \"useInheritedAsDefaultValue\": false,\n            \"storageType\": \"SINGLE\",\n            \"valueRequired\": false,\n            \"versionable\": false,\n            \"triggerEndPeriodEvent\": false,\n            \"allowEdit\": true,\n            \"hideOnNew\": false,\n            \"nbDecimal\":2,\n            \"roundingMode\": \"HALF_EVEN\",\n            \"maxValue\": 2000,\n            \"guiPosition\": \"tab:Test:0;field:6\",\n            \"indexType\": \"INDEX\",\n            \"uniqueConstraint\": null\n        },\n        {\n            \"code\": \"published_date\",\n            \"description\": \"publishing date\",\n            \"disabled\": false,\n            \"languageDescriptions\": [],\n            \"fieldType\": \"DATE\",\n            \"appliesTo\": \"CE_{{request.label.1}}\",\n            \"useInheritedAsDefaultValue\": false,\n            \"storageType\": \"SINGLE\",\n            \"valueRequired\": false,\n            \"versionable\": false,\n            \"triggerEndPeriodEvent\": false,\n            \"allowEdit\": true,\n            \"hideOnNew\": false,\n            \"maxValue\": 2000,\n            \"guiPosition\": \"tab:Test:0;field:6\",\n            \"indexType\": \"INDEX\",\n            \"uniqueConstraint\": null\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{opencell.url}}/entityCustomization/entity/createOrUpdate",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"entityCustomization",
																"entity",
																"createOrUpdate"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Fill the table",
											"item": [
												{
													"name": "CET|ct_ref_index_bt47|CT String with one entry|Index Elec BT47",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"customTableCode\": \"{{request.label.1}}\",\n    \"overwrite\": false,\n    \"record\": [\n                {\n            \"tableName\": \"{{request.label.1}}\",\n            \"values\": {\n                \"index\": 122.4,\n                \"published_date\": \"2023-08-18T14:02:00Z\",\n                \"valid_from\": \"2023-09-01T00:02:00Z\",\n                \"valid_priority\": null,\n                \"valid_to\": \"2023-09-30T23:59:00Z\"\n            }\n        },{\n            \"tableName\": \"{{request.label.1}}\",\n            \"values\": {\n                \"index\": 124.6,\n                \"published_date\": \"2023-09-18T14:02:00Z\",\n                \"valid_from\": \"2023-10-01T00:02:00Z\",\n                \"valid_priority\": null,\n                \"valid_to\": \"2023-10-31T23:59:00Z\"\n            }\n        },\n        {\n            \"tableName\": \"{{request.label.1}}\",\n            \"values\": {\n                \"index\": 125.1,\n                \"published_date\": \"2023-10-12T14:02:00Z\",\n                \"valid_from\": \"2023-11-01T00:02:00Z\",\n                \"valid_priority\": null,\n                \"valid_to\": \"2023-11-30T23:59:00Z\"\n            }\n        },\n        {\n            \"tableName\": \"{{request.label.1}}\",\n            \"values\": {\n                \"index\": 125.9,\n                \"published_date\": \"2023-11-15T14:02:00Z\",\n                \"valid_from\": \"2023-12-01T14:02:00Z\",\n                \"valid_priority\": null,\n                \"valid_to\": \"2023-12-31T23:59:00Z\"\n            }\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{opencell.url}}/customTable",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"customTable"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Custom Fields",
							"item": [
								{
									"name": "OfferTemplate",
									"item": [
										{
											"name": "CF|code=CF_OF_STRING|target=OfferTemplate|type=STRING|storage=SINGLE",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"A {{storage}} {{type}} on {{target}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"from CFT on {{target}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"maxValue\": 200,\n    \"guiPosition\": \"tab:Tab:0;group:Group;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ProductTemplate",
									"item": [
										{
											"name": "CF|code=CF_PR_STRING|target=Product|type=STRING|storage=SINGLE",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{code}}: a {{storage}} {{type}} on {{target}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"from CFT on {{target}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"maxValue\": 200,\n    \"guiPosition\": \"tab:Tab:0;group:Group;field:1\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customFieldTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Counter",
							"item": [
								{
									"name": "Usage",
									"item": [
										{
											"name": "counter|CN_USG_COUNTER|Counter",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\" : \"{{request.label.1}}\",\r\n  \"description\" : \"{{request.label.2}}\",\r\n  \"calendar\": \"CAL_MONTHLY_1ST\",\r\n  \"unity\": null,\r\n  \"type\": \"USAGE\",\r\n  \"ceiling\": 1000,\r\n  \"disabled\": false,\r\n  \"counterLevel\": \"UA\",\r\n  \"ceilingExpressionEl\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"counterTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENERGY CHARGING",
									"item": [
										{
											"name": "counter|CN_ENERGY_USAGE|Energy Charging Usage",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\" : \"{{request.label.1}}\",\r\n  \"description\" : \"{{request.label.2}}\",\r\n  \"calendar\": \"CAL_MONTHLY_1ST\",\r\n  \"unity\": null,\r\n  \"type\": \"USAGE\",\r\n  \"ceiling\": \"\",\r\n  \"disabled\": false,\r\n  \"counterLevel\": \"UA\",\r\n  \"ceilingExpressionEl\": \"#{mv:parseNumber(mv:getProductAttributeValue(ci.serviceInstance, \\\"MAX_CONSO_OPTION\\\"))}\"\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"counterTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "OfferTemplateCategory",
							"item": [
								{
									"name": "ocat|code=OCAT_ROOT|parent=|name=Root",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Offer category {{code}}\",\n    \"disabled\": false,\n    \"name\": \"{{name}}\",\n    \"offerTemplateCategoryCode\": \"{{parent}}\",\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "ocat|code=OCAT_CHILD|parent=OCAT_ROOT|name=Child",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Offer category {{code}}\",\n    \"disabled\": false,\n    \"name\": \"{{name}}\",\n    \"offerTemplateCategoryCode\": \"{{parent}}\",\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "ocat|code=OCAT_REC|parent=OCAT_ROOT|name=Recurring",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Offer category {{code}}\",\n    \"disabled\": false,\n    \"name\": \"{{name}}\",\n    \"offerTemplateCategoryCode\": \"{{parent}}\",\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "ocat|code=OCAT_USG|parent=OCAT_ROOT|name=Usage",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Offer category {{code}}\",\n    \"disabled\": false,\n    \"name\": \"{{name}}\",\n    \"offerTemplateCategoryCode\": \"{{parent}}\",\n    \"active\": true\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Attributes",
							"item": [
								{
									"name": "Attributes  CPQ",
									"item": [
										{
											"name": "Create Build / Run Period",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"Project phase\",\r\n    \"description\": \"Key accounts project phases\",\r\n    \"disabled\": false,\r\n    \"attributeType\": \"LIST_TEXT\",\r\n    \"allowedValues\": [\r\n        \"Build\",\r\n        \"Run\"\r\n    ],\r\n    \"priority\": 0,\r\n    \"selectable\": true,\r\n    \"ruled\": false,\r\n    \"unitNbDecimal\": 12,\r\n    \"tags\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Read Build / Run Period",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/attributes/Project phase",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes",
														"Project phase"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										}
									]
								},
								{
									"name": "Attributes  PASS_CARD",
									"item": [
										{
											"name": "Create Pass card type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"MEAL_PASS\",\r\n    \"description\": \"Pass Type\",\r\n    \"disabled\": false,\r\n    \"attributeType\": \"LIST_TEXT\",\r\n    \"allowedValues\": [\r\n        \"CARD\",\r\n        \"CHECK\"\r\n    ],\r\n    \"priority\": 0,\r\n    \"selectable\": true,\r\n    \"ruled\": false,\r\n    \"unitNbDecimal\": 12,\r\n    \"tags\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create Boolean Attribute - DELIVERY_FEES",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"MEAL_PASS_DELIVERY_FEES\",\r\n  \"description\": \"Meal Pass Delivery Fees\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute -DELIVERY_FEES_PROMO_VALUE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"MEAL_PASS_DELIVERY_FEES_PROMO_VALUE\",\r\n  \"description\": \"% Promotion Meal Pass  Delivery\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute MEAL_PASS_CARD_RETRIBUTION_PERC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"MEAL_PASS_CARD_RETRIBUTION_PERC\",\r\n  \"description\": \"% Retributoion Meal Pass Card\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute MEAL_PASS_CHECK_RETRIBUTION_PERC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"MEAL_PASS_CHECK_RETRIBUTION_PERC\",\r\n  \"description\": \"% Retributoion Meal Pass Check\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										}
									]
								},
								{
									"name": "Attributes  CPQ RENT",
									"item": [
										{
											"name": "Create Boolean Attribute - Insurance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"INSURANCE\",\r\n  \"description\": \"Insurance\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create Boolean Attribute - FUEL_REFILL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"FUEL_REFILL\",\r\n  \"description\": \"Fuel Refill\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create Boolean Attribute - UNLIMITED_KM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"UNLIMITED_KM\",\r\n  \"description\": \"Unlimited KM\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create Boolean Attribute - CHILD_SEAT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"CHILD_SEAT\",\r\n  \"description\": \"Child Seat\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - Distance KM",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"DISTANCE\",\r\n  \"description\": \"Distance\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - CHILD_SEAT_FEE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"CHILD_SEAT_FEE\",\r\n  \"description\": \"Child seat fee\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create List Attribute - VEHICLE CATEGORY",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"VEHICLE_CATEGORY\",\r\n    \"description\": \"Véhicle Category\",\r\n    \"disabled\": false,\r\n    \"attributeType\": \"LIST_TEXT\",\r\n    \"allowedValues\": [\r\n        \"CATA\",\r\n        \"CATB\",\r\n        \"CATC\"\r\n    ],\r\n    \"priority\": 0,\r\n    \"selectable\": true,\r\n    \"ruled\": false,\r\n    \"unitNbDecimal\": 12,\r\n    \"tags\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create List Attribute - VEHICLE DELIVERY",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"VEHICLE_DELIVERY\",\r\n    \"description\": \"Véhicle Delivery\",\r\n    \"disabled\": false,\r\n    \"attributeType\": \"LIST_TEXT\",\r\n    \"allowedValues\": [\r\n        \"NONE\",\r\n        \"FORMULE_1\",\r\n        \"FORMULE_2\",\r\n        \"FORMULE_3\"\r\n    ],\r\n    \"priority\": 0,\r\n    \"selectable\": true,\r\n    \"ruled\": false,\r\n    \"unitNbDecimal\": 12,\r\n    \"tags\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create List Attribute - PREMIUM_BOOKING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"PREMIUM_BOOKING\",\r\n  \"description\": \"Premimum Booking\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create EL Attribute - DISTANCE EL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"DISTANCE_EL\",\r\n  \"description\": \"Distance EL\",\r\n  \"attributeType\": \"EXPRESSION_LANGUAGE\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create EL Attribute - FROM_ZONE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"FROM_ZONE_EL\",\r\n  \"description\": \"From Zone EL\",\r\n  \"attributeType\": \"EXPRESSION_LANGUAGE\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create EL Attribute - TO_ZONE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"TO_ZONE_EL\",\r\n  \"description\": \"To zone EL\",\r\n  \"attributeType\": \"EXPRESSION_LANGUAGE\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create TEXT Attribute USER_CONTRACT_CODE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"USER_CONTRACT_CODE\",\r\n    \"description\": \"User contract reference\",\r\n    \"attributeType\": \"TEXT\",\r\n    \"disabled\": false,\r\n    \"priority\": 0,\r\n    \"mediaCodes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										}
									]
								},
								{
									"name": "Attributes Signature",
									"item": [
										{
											"name": "Create List Attribute - SIGNATURE_PACK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"SIGNATURE_PACK\",\r\n    \"description\": \"Select your pack\",\r\n    \"disabled\": false,\r\n    \"attributeType\": \"LIST_NUMERIC\",\r\n    \"allowedValues\": [\r\n        250,\r\n        500,\r\n        1000\r\n        \r\n    ],\r\n    \"priority\": 0,\r\n    \"selectable\": true,\r\n    \"ruled\": false,\r\n    \"unitNbDecimal\": 12,\r\n    \"tags\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute -SIGNATURE_PACK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"SIGNATURE_PACK_DISCOUNT_VALUE\",\r\n  \"description\": \"Exceptional % Discount\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										}
									]
								},
								{
									"name": "Attributes Campaing Fees",
									"item": [
										{
											"name": "Create NUMERIC Attribute - CAMPAIGN_FEES",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"CAMPAIGN_FEES\",\r\n  \"description\": \"Campaign Fees\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										}
									]
								},
								{
									"name": "Attributes ENERGY CHARGING",
									"item": [
										{
											"name": "Create NUMERIC Attribute - SETUP_FEES_STEP1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"SETUP_FEES_STEP1\",\r\n  \"description\": \"Setup Fees - step1\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - SETUP_FEES_STEP2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"SETUP_FEES_STEP2\",\r\n  \"description\": \"Setup Fees - step2\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - SETUP_FEES_STEP3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"SETUP_FEES_STEP3\",\r\n  \"description\": \"Setup Fees - step3\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - User Number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"USER_NUMBER\",\r\n    \"description\": \"Nombre utilisateur\",\r\n    \"attributeType\": \"LIST_NUMERIC\",\r\n    \"allowedValues\": [\r\n        2,\r\n        5,\r\n        10,\r\n        15\r\n    ],\r\n    \"selectable\": true,\r\n    \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - power",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"POWER_OPTION\",\r\n    \"description\": \"Puissance Kwh\",\r\n    \"attributeType\": \"LIST_NUMERIC\",\r\n    \"allowedValues\": [\r\n        3.5,\r\n        7.4\r\n    ],\r\n    \"selectable\": true,\r\n    \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - charging point",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"CHARGING_POINT_NUMBER\",\r\n  \"description\": \"Point de charge\",\r\n    \"attributeType\": \"LIST_NUMERIC\",\r\n    \"allowedValues\": [\r\n        2,\r\n        4\r\n    ],\r\n    \"selectable\": true,\r\n        \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - Max conso option",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"MAX_CONSO_OPTION\",\r\n    \"description\": \"Palier de consommation\",\r\n    \"attributeType\": \"LIST_TEXT\",\r\n    \"allowedValues\": [\r\n        \"600\",\r\n        \"750\",\r\n        \"900\",\r\n        \"1200\"\r\n    ],\r\n    \"selectable\": true,\r\n    \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create NUMERIC Attribute - COMMISSION_FEES",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"COMMISSION_FEES\",\r\n  \"description\": \"Comission Fees\",\r\n  \"attributeType\": \"NUMERIC\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										}
									]
								},
								{
									"name": "BASIC",
									"item": [
										{
											"name": "Create LIST NUMERIC Attribute 1 - BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"EXAMPLE_LIST_NUMERIC_ATTRIBUTE\",\r\n    \"description\": \"List Attribute example\",\r\n    \"attributeType\": \"LIST_NUMERIC\",\r\n    \"allowedValues\": [\r\n        100,\r\n        200,\r\n        1000\r\n    ],\r\n    \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create LIST NUMERIC Attribute 2- BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"EXAMPLE_LIST_NUMERIC_ATTRIBUTE_2\",\r\n    \"description\": \"List Attribute example\",\r\n    \"attributeType\": \"LIST_NUMERIC\",\r\n    \"allowedValues\": [\r\n        45.2,\r\n        78.2,\r\n        47.1,\r\n        44.4\r\n    ],\r\n    \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create LIST NUMERIC Attribute 3- BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"EXAMPLE_LIST_NUMERIC_ATTRIBUTE_3\",\r\n    \"description\": \"List Attribute example\",\r\n    \"attributeType\": \"LIST_NUMERIC\",\r\n    \"allowedValues\": [\r\n        450.2,\r\n        780.2,\r\n        470.1,\r\n        440.4\r\n    ],\r\n    \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create LIST TEXT Attribute - BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"EXAMPLE_TEXT_LIST_ATTRIBUTE\",\r\n    \"description\": \"List Attribute example\",\r\n    \"attributeType\": \"LIST_TEXT\",\r\n    \"allowedValues\": [\r\n        \"TEST_1\",\r\n        \"TEST_2\"\r\n    ],\r\n    \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create LIST TEXT Attribute 2- BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"EXAMPLE_TEXT_LIST_ATTRIBUTE_2\",\r\n    \"description\": \"List Attribute example 2\",\r\n    \"attributeType\": \"LIST_TEXT\",\r\n    \"allowedValues\": [\r\n        \"TEST_1_2\",\r\n        \"TEST_2_2\"\r\n    ],\r\n    \"disabled\": false,\r\n    \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create BOOLEAN Attribute - BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"EXAMPLE_BOOLEAN_ATTRIBUTE\",\r\n  \"description\": \"Boolean Attribute example\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create BOOLEAN Attribute -TO HIDE BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"EXAMPLE_HIDDEN_BOOLEAN_ATTRIBUTE\",\r\n  \"description\": \"Boolean Hidden Attribute example\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create BOOLEAN Attribute -TO HIDE BASIC 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"EXAMPLE_HIDDEN_BOOLEAN_ATTRIBUTE_2\",\r\n  \"description\": \"Boolean Hidden Attribute example\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create BOOLEAN Attribute -TO READ ONLY BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"EXAMPLE_READ_ONLY_BOOLEAN_ATTRIBUTE\",\r\n  \"description\": \"Boolean Read Only Attribute example\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create BOOLEAN Attribute -TO READ ONLY BASIC Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\": \"EXAMPLE_READ_ONLY_BOOLEAN_ATTRIBUTE_2\",\r\n  \"description\": \"Boolean Read Only Attribute example 2\",\r\n  \"attributeType\": \"BOOLEAN\",\r\n  \"disabled\": false,\r\n  \"priority\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										},
										{
											"name": "Create TEXT Attribute - BASIC",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"EXAMPLE_TEXT_ATTRIBUTE\",\r\n    \"description\": \"Text Attribute Example\",\r\n    \"attributeType\": \"TEXT\",\r\n    \"disabled\": false,\r\n    \"priority\": 0,\r\n    \"mediaCodes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/attributes",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"attributes"
													]
												},
												"description": "Creating a new tag type"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "TriggeredEdr",
							"item": [
								{
									"name": "TriggeredEdr contribution for user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"code\": \"TRG_EDR_CUSTOMER_CONTRIBUTION\",\n        \"description\": \"Customer Contribution\",\n        \"subscriptionEl\": \"#{mv:getProductAttributeValue(op.serviceInstance, \\\"USER_CONTRACT_CODE\\\")}\",\n        \"conditionEl\": \"#{ (op.quantity != 0)}\",\n        \"quantityEl\": \"#{ op.quantity }\",\n        \"param1El\": \"CONTRIBUTION\",\n        \"param2El\": \"#{50/100 * mv:getProductAttributeValue(op.serviceInstance, \\\"CHILD_SEAT_FEE\\\")}\",\n        \"param3El\": \"Customer Contribution 50   %\",\n        \"param4El\": \"#{ op.description }\"\n    }"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/triggeredEdr/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"triggeredEdr",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TriggeredEdr Campaign fees",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"TRG_EDR_CAMPAIGN_FEES\",\n    \"description\": \"Campain Fees\",\n    \"subscriptionEl\": \"#{ op.subscription.code }\",\n    \"conditionEl\": \"#{ (op.quantity != 0) && (op.amountWithoutTax != 0) && (mv:getProductAttributeValue(op.serviceInstance, \\\"CAMPAIGN_FEES\\\") != 0)}\",\n    \"quantityEl\": \"#{ op.quantity }\",\n    \"param1El\": \"CAMPAIGN_FEES\",\n    \"param2El\": \"#{(op.amountWithoutTax/op.quantity) *( mv:getProductAttributeValue(op.serviceInstance, \\\"CAMPAIGN_FEES\\\") / 100 )}\",\n    \"param3El\": \"Campain management fees of #{mv:getProductAttributeValue(op.serviceInstance, \\\"CAMPAIGN_FEES\\\")}% \",\n    \"param4El\": \"#{ op.description }\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/triggeredEdr/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"triggeredEdr",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "TriggeredEdr Meal Pass User Partner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"code\": \"TRG_EDR_PARTNER_PASS_USE\",\n        \"description\": \"Partner Pass Use \",\n        \"subscriptionEl\": \"#{ op.parameter1 }\",\n        \"conditionEl\": \"#{ (op.quantity != 0)}\",\n        \"quantityEl\": \"#{ op.quantity }\",\n        \"param1El\": \"#{ op.parameter3 }\",\n        \"param2El\": \"#{ op.parameter2 }\",\n        \"param3El\": \"Meal Pass Retribution % :  #{ (mv:getProductAttributeValue(op.serviceInstance, 'MEAL_PASS_CARD_RETRIBUTION_PERC')/100)}\",\n        \"param4El\": \"Original amount : #{ op.parameter2 } \"\n    }"
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/triggeredEdr/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"triggeredEdr",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Charges",
							"item": [
								{
									"name": "Charge CPQ  ONE SHOT SUB",
									"item": [
										{
											"name": "charge|CH_OSS_TRAINING|Certified Training Courses",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ RECURRING",
									"item": [
										{
											"name": "charge|CH_SIMPLE_RECURRING|desc=Simple Recurring Offer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{auth}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"taxClassCode\": \"NORMAL\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 6,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": 24,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"filterExpression\": \"\",\r\n    \"triggeredEdrs\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"recurringChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ BUILD AND RUN RECURRING",
									"item": [
										{
											"name": "charge|CH_BUILD_RUN_RECURRING|desc=Simple Recurring Offer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{auth}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"taxClassCode\": \"NORMAL\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 6,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": 24,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"filterExpression\": \"\",\r\n    \"triggeredEdrs\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"recurringChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ USAGE",
									"item": [
										{
											"name": "charge|CH_USG_PS|Professional Service Usage",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"PS\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ USAGE WITH AMOUNT",
									"item": [
										{
											"name": "charge|CH_USG_AMOUNT|Usage Amount without Tax",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"USAGE_AMOUNT\",\n     \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"TRG_EDR_CAMPAIGN_FEES\"\n            }\n        ]\n    },\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ Contribution",
									"item": [
										{
											"name": "charge|CH_USG_CONTRIBUTION|Contribution",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"CONTRIBUTION\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ Campain addionnal fees",
									"item": [
										{
											"name": "charge|CH_USG_TRIGGER_CAMPAIGN_FEE|Campain fee",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"CAMPAIGN_FEES\",\n   \n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ RENT",
									"item": [
										{
											"name": "charge|CH_USG_RENT|Usage Rent",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"usageQuantityAttributeCode\":\"DISTANCE_EL\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_INSURANCE|Insurance",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"linkedAttributes\": [\n        \"INSURANCE\"\n    ],\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_CHILD_SEAT|Child Seat",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"linkedAttributes\": [\n        \"CHILD_SEAT\"\n    ],\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"TRG_EDR_CUSTOMER_CONTRIBUTION\"\n            }\n        ]\n    },\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_FUEL_REFILL|Fuel Refill",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"linkedAttributes\": [\n        \"FUEL_REFILL\"\n    ],\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_BOOKING|Premium booking",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"linkedAttributes\": [\n        \"PREMIUM_BOOKING\"\n    ],\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_VEHICLE_DELIVERY| Delivery Fees",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"NORMAL\",\n    \"filterExpression\": \"#{mv:getProductAttributeValue(ci.serviceInstance, \\\"VEHICLE_DELIVERY\\\") != 'NONE'}\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"linkedAttributes\": [],\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ PASS_CARD",
									"item": [
										{
											"name": "charge|CH_OSS_PASS_CARD| Meal Pass",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_CARD_PASS_DELIVERY_FEES|Delivery Fees",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"linkedAttributes\": [\n        \n    ],\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_MEAD_PASS|Meal Pass Usage",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"TRG_EDR_PARTNER_PASS_USE\"\n            }\n        ]\n    },\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_PARTNER_MEAD_PASS|Partner Meal Pass retribution",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_PARTNER_MEAD_PASS_CARD|Partner Card Meal Pass retribution",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggerNextCharge\":true,\n    \"filterParam1\": \"CARD\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_PARTNER_MEAD_PASS_CHECK|Partner Card Meal Pass Check retribution",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"CHECK\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CPQ MARKETING",
									"item": [
										{
											"name": "charge|CH_USG_MKT_VIEW|Marketing View Action",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n        ]\n    },\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"VIEW\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_MKT_CLICK|Marketing Click Action",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n\n        ]\n    },\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"CLICK\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_MKT_SALES|Marketing Sale Action",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            \n        ]\n    },\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"SALES\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_REC_MKT|desc=Recurring Marketing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{auth}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"taxClassCode\": \"NORMAL\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 6,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": \"\",\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"filterExpression\": \"\",\r\n    \"triggeredEdrs\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"recurringChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge Signature",
									"item": [
										{
											"name": "charge|CH_SIGNATURE_RECURRING|desc=Signature",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{auth}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"taxClassCode\": \"NORMAL\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 6,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": 12,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"filterExpression\": \"\",\r\n    \"triggeredEdrs\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"recurringChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_SIGNATURE_USG|Signature Usage",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"SIGNATURE\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_SIGNATURE_USG_2|Signature Usage",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"SIGNATURE\",\n    \"priority\": 20\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_SIGNATURE_CACHET_USG|Signature Cachet Usage",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"SIGNATURE_CACHET\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge ENERGY CHARGING",
									"item": [
										{
											"name": "charge|CH_OSS_SETUP1|Setup Fees",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"filterExpression\": \"   #{mv:getProductAttributeValue(ci.serviceInstance, \\\"SETUP_FEES_STEP1\\\")>0} \" , \n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_SETUP2|Setup Fees",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"filterExpression\": \"   #{mv:getProductAttributeValue(ci.serviceInstance, \\\"SETUP_FEES_STEP2\\\")>0} \",\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_SETUP3|Setup Fees",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSS\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"filterExpression\": \"   #{mv:getProductAttributeValue(ci.serviceInstance, \\\"SETUP_FEES_STEP3\\\")>0} \",\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_LICENCE_RECURRING|desc=Maintenance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{auth}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"taxClassCode\": \"NORMAL\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 6,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": 12,\r\n    \"subscriptionProrata\": false,\r\n    \"terminationProrata\": false,\r\n    \"applyInAdvance\": true,\r\n    \"filterExpression\": \"\",\r\n    \"triggeredEdrs\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"recurringChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_USER_RECURRING|desc=Utilisateurs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{auth}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"taxClassCode\": \"NORMAL\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 6,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": 12,\r\n    \"subscriptionProrata\": false,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"filterExpression\": \"\",\r\n    \"triggeredEdrs\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"recurringChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_RECURRING|desc=Minima Usage",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{auth}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"taxClassCode\": \"NORMAL\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 6,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": 12,\r\n    \"subscriptionProrata\": false,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"filterExpression\": \"\",\r\n    \"triggeredEdrs\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"recurringChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_USG_1|Energy Charging Usage",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"ENERGY_CHARGING\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_USG_2|Energy Charging Usage",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"ENERGY_CHARGING\",\n    \"priority\": 20\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge ENERGY CHARGING COMMISSION",
									"item": [
										{
											"name": "charge|CH_ENERGY_CHARGING_COM_FEES_USG|Energy Charging Commission fees",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggerNextCharge\":true,\n    \"filterParam1\": \"ENERGY_CHARGING_COM\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_COM_ELEC_USG|Energy Charging Elec Price",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggerNextCharge\":false,\n    \"filterParam1\": \"ENERGY_CHARGING_COM\",\n    \"priority\": 10\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CQP ONE SHOT OTHER",
									"item": [
										{
											"name": "charge|CH_OS_OTHER|Exceptional Other Charge",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"charge_oneshot_other_id\",pm.response.json().entityId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"OTHER\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSO\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"internalNote\":\"<p><span style=\\\"color: rgb(0,0,139);\\\">Lorem ipsum dolor sit amet, <b>consectetur</b> adipiscing elit. Nunc lectus purus, accumsan id mauris sit amet, ultricies congue leo. Nullam tempus, nisl vel ultrices laoreet, tellus nulla tempus odio, ut consectetur dui sapien sit amet elit. Nulla elementum cursus iaculis. Nunc consectetur neque imperdiet augue <u>condimentum tincidunt</u>. Proin lacinia non mi sit amet eleifend. Duis pretium, nisl vel eleifend molestie, justo turpis rutrum velit, et a</span></p>\",\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Charge CQP INVOICE PLAN",
									"item": [
										{
											"name": "charge|CH_OS_INVOICING_PLAN|Invoicing Plan Charge",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"charge_oneshot_other_id\",pm.response.json().entityId);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"oneShotChargeTemplateType\": \"INVOICING_PLAN\",\n    \"immediateInvoicing\": false,\n    \"invoiceSubCategory\": \"ISCAT_OSO\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"unitNbDecimal\": 4,\n    \"roundingModeDtoEnum\": \"NEAREST\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"oneShotChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Price Plans",
							"item": [
								{
									"name": "PP CPQ ONE SHOT",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OSS_TRAINING\",\n    \"eventCode\": \"CH_OSS_TRAINING\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OSS_TRAINING\",\n    \"label\": \"Default Training pricing\",\n    \"amountWithoutTax\": 1000,\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OSS_TRAINING/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OSS_TRAINING",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ ONE SHOT Other",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OS_OTHER\",\n    \"eventCode\": \"CH_OS_OTHER\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 8000\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OS_OTHER\",\n    \"label\": \"Default Other pricing\",\n    \"amountWithoutTax\": 8000,\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OS_OTHER/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OS_OTHER",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Contribution",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_CONTRIBUTION\",\n    \"eventCode\": \"CH_USG_CONTRIBUTION\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_CONTRIBUTION\",\n    \"label\": \"Contribution  pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* op.parameter2}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_CONTRIBUTION/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_CONTRIBUTION",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Insurance",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OSS_INSURANCE\",\n    \"eventCode\": \"CH_OSS_INSURANCE\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OSS_INSURANCE\",\n    \"label\": \"Default Insurance pricing\",\n    \"amountWithoutTax\": 12,\n    \"priceEL\": \"#{ 1* 12}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OSS_INSURANCE/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OSS_INSURANCE",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Child seat",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OSS_CHILD_SEAT\",\n    \"eventCode\": \"CH_OSS_CHILD_SEAT\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OSS_CHILD_SEAT\",\n    \"label\": \"Default Child seat pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 50/100* mv:getProductAttributeValue(op.serviceInstance, \\\"CHILD_SEAT_FEE\\\")}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OSS_CHILD_SEAT/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OSS_CHILD_SEAT",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Fuel Refill",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OSS_FUEL_REFILL\",\n    \"eventCode\": \"CH_OSS_FUEL_REFILL\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OSS_FUEL_REFILL\",\n    \"label\": \"Default Fuel Refill pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* 9}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OSS_FUEL_REFILL/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OSS_FUEL_REFILL",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Booking",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OSS_BOOKING\",\n    \"eventCode\": \"CH_OSS_BOOKING\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OSS_BOOKING\",\n    \"label\": \"Default Booking pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* 10}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OSS_BOOKING/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OSS_BOOKING",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Vehicle Delivery",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OSS_VEHICLE_DELIVERY\",\n    \"eventCode\": \"CH_OSS_VEHICLE_DELIVERY\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OSS_VEHICLE_DELIVERY\",\n    \"label\": \"Default Booking pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* 7}\",\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"Mode\",\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_VEHICLE_DELIVERY\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"VEHICLE_DELIVERY\",\n            \"position\": 1,\n            \"type\": \"String\",\n            \"isRange\": false\n        }\n    ],\n    \"lines\": [\n        {\n            \"priceWithoutTax\": 9.500000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_VEHICLE_DELIVERY\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Mode\",\n                    \"stringValue\": \"FORMULE_1\"\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        },\n         {\n            \"priceWithoutTax\": 14.500000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_VEHICLE_DELIVERY\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Mode\",\n                    \"stringValue\": \"FORMULE_2\"\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        },\n         {\n            \"priceWithoutTax\": 27.500000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_VEHICLE_DELIVERY\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Mode\",\n                    \"stringValue\": \"FORMULE_3\"\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        }\n        \n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OSS_VEHICLE_DELIVERY/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OSS_VEHICLE_DELIVERY",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ RECURRING",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_SIMPLE_RECURRING\",\n    \"eventCode\": \"CH_SIMPLE_RECURRING\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_SIMPLE_RECURRING\",\n    \"label\": \"Default Recurring pricing\",\n    \"amountWithoutTax\": 7500,\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_SIMPLE_RECURRING/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_SIMPLE_RECURRING",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ RECURRING BUILD - RUN",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_BUILD_RUN_RECURRING\",\n    \"eventCode\": \"CH_BUILD_RUN_RECURRING\",\n    \"priority\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_BUILD_RUN_RECURRING\",\n    \"label\": \"Build and Run Recurring pricing\",\n    \"amountWithoutTax\": 500,\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"Phase\",\n            \"pricePlanMatrixCode\": \"PP_CH_BUILD_RUN_RECURRING\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"Project phase\",\n            \"position\": 0,\n            \"type\": \"String\",\n            \"isRange\": false\n        }\n    ],\n    \"lines\": [\n        {\n            \"ppmLineId\": 1,\n            \"priceWithoutTax\": 5000.000000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_BUILD_RUN_RECURRING\",\n            \"pricePlanMatrixVersion\": 1,\n            \"description\": \"Build phase license\",\n            \"pricePlanMatrixValues\": [\n                {\n                    \n                    \"ppmColumnCode\": \"Phase\",\n                    \"stringValue\": \"Build\"\n                }\n            ],\n            \"priority\": 1\n        },\n        {\n            \"ppmLineId\": 2,\n            \"priceWithoutTax\": 12000.000000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_BUILD_RUN_RECURRING\",\n            \"pricePlanMatrixVersion\": 1,\n            \"description\": \"Run phase license\",\n            \"pricePlanMatrixValues\": [\n                {\n                    \n                    \"ppmColumnCode\": \"Phase\",\n                    \"stringValue\": \"Run\"\n                }\n            ],\n            \"priority\": 2\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_BUILD_RUN_RECURRING/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_BUILD_RUN_RECURRING",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ USAGE PS",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_PS\",\n    \"eventCode\": \"CH_USG_PS\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_PS\",\n    \"label\": \"Default Professional service  pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* 850}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_PS/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_PS",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Rent",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_RENT\",\n    \"eventCode\": \"CH_USG_RENT\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_RENT\",\n    \"statusEnum\": \"DRAFT\",\n    \"version\": 1,\n    \"label\": \"Default Rent Usage pricing\",\n    \"priceEL\": \"#{amount*mv:parseNumber(op.edr.parameter2)}\",\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"From\",\n            \"pricePlanMatrixCode\": \"PP_CH_USG_RENT\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"FROM_ZONE_EL\",\n            \"position\": 1,\n            \"type\": \"String\",\n            \"isRange\": false\n        },\n        {\n            \"code\": \"Distance\",\n            \"pricePlanMatrixCode\": \"PP_CH_USG_RENT\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"DISTANCE_EL\",\n            \"position\": 2,\n            \"type\": \"Range_Numeric\",\n            \"isRange\": true\n        }\n    ],\n    \"lines\": [\n        {\n            \"priceWithoutTax\": 1.400000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_USG_RENT\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"From\",\n                    \"stringValue\": \"FRA\"\n                },\n                {\n                    \"ppmColumnCode\": \"Distance\",\n                    \"fromDoubleValue\": 99.0,\n                    \"toDoubleValue\": 199.0\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        },\n        {\n            \"priceWithoutTax\": 1.500000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_USG_RENT\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Distance\",\n                    \"fromDoubleValue\": 1.0,\n                    \"toDoubleValue\": 99.0\n                },\n                {\n                    \"ppmColumnCode\": \"From\",\n                    \"stringValue\": \"FRA\"\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        },\n        {\n            \"priceWithoutTax\": 2.200000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_USG_RENT\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Distance\",\n                    \"fromDoubleValue\": 99.0,\n                    \"toDoubleValue\": 199.0\n                },\n                {\n                    \"ppmColumnCode\": \"From\",\n                    \"stringValue\": \"BEL\"\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        },\n        {\n            \"priceWithoutTax\": 2.300000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_USG_RENT\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Distance\",\n                    \"fromDoubleValue\": 1.0,\n                    \"toDoubleValue\": 99.0\n                },\n                {\n                    \"ppmColumnCode\": \"From\",\n                    \"stringValue\": \"BEL\"\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_RENT/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_RENT",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Pass Card",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OSS_PASS_CARD\",\n    \"eventCode\": \"CH_OSS_PASS_CARD\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OSS_PASS_CARD\",\n    \"label\": \"Default Meal pass  pricing\",\n    \"amountWithoutTax\": 1,\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"Type\",\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_PASS_CARD\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"MEAL_PASS\",\n            \"position\": 1,\n            \"type\": \"String\",\n            \"isRange\": false\n        }\n    ],\n    \"lines\": [\n        {\n            \"priceWithoutTax\": 1.500000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_PASS_CARD\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Type\",\n                    \"stringValue\": \"CARD\"\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        },\n         {\n            \"priceWithoutTax\": 1.900000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_PASS_CARD\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Type\",\n                    \"stringValue\": \"CHECK\"\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 0\n        }\n        \n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OSS_PASS_CARD/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OSS_PASS_CARD",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Pass Card delivery fees",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OSS_CARD_PASS_DELIVERY_FEES\",\n    \"eventCode\": \"CH_OSS_CARD_PASS_DELIVERY_FEES\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OSS_CARD_PASS_DELIVERY_FEES\",\n    \"label\": \"Default Meal pass delivery pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{(1-mv:getProductAttributeValue(op.serviceInstance, 'MEAL_PASS_DELIVERY_FEES_PROMO_VALUE')/100)* amount}\",\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"Quantity\",\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_CARD_PASS_DELIVERY_FEES\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"product_quantity\",\n            \"position\": 2,\n            \"type\": \"Range_Numeric\",\n            \"isRange\": true\n\n        }\n    ],\n    \"lines\": [\n        {\n            \"priceWithoutTax\": 1.500000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_CARD_PASS_DELIVERY_FEES\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Quantity\",\n                    \"fromDoubleValue\": 1.0,\n                    \"toDoubleValue\": 99.0\n                }\n            ],\n            \"description\": \"Level 1\",\n            \"priority\": 0\n        },\n        {\n            \"priceWithoutTax\": 1.400000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_CARD_PASS_DELIVERY_FEES\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Quantity\",\n                    \"fromDoubleValue\": 99.0,\n                    \"toDoubleValue\": 199.0\n                }\n            ],\n            \"description\": \"Level 2\",\n            \"priority\": 0\n        },\n        {\n            \"priceWithoutTax\": 1.300000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_OSS_CARD_PASS_DELIVERY_FEES\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Quantity\",\n                    \"fromDoubleValue\": 199.0,\n                    \"toDoubleValue\": 9999.0\n                }\n            ],\n            \"description\": \"Level 3\",\n            \"priority\": 0\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OSS_CARD_PASS_DELIVERY_FEES/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OSS_CARD_PASS_DELIVERY_FEES",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP SIGNATURE RECURRING",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_SIGNATURE_RECURRING\",\n    \"eventCode\": \"CH_SIGNATURE_RECURRING\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_RECURRING\",\n    \"label\": \"Signature pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ ((1-mv:getProductAttributeValue(op.serviceInstance, 'SIGNATURE_PACK_DISCOUNT_VALUE')/100)* amount)}\",\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"Choix\",\n            \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_RECURRING\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"SIGNATURE_PACK\",\n            \"position\": 1,\n            \"type\": \"Long\",\n            \"isRange\": false\n        }\n    ],\n    \"lines\": [\n        {\n            \"priceWithoutTax\": 475,\n            \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_RECURRING\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Choix\",\n                    \"longValue\": 250\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 1\n        },\n         {\n            \"priceWithoutTax\": 900,\n            \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_RECURRING\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Choix\",\n                    \"longValue\": 500\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 2\n        \n        },\n         {\n            \"priceWithoutTax\": 2000,\n            \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_RECURRING\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Choix\",\n                    \"longValue\": 1000\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 3\n        }\n        \n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_SIGNATURE_RECURRING/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_SIGNATURE_RECURRING",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP SIGNATURE USAGE",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_SIGNATURE_USG\",\n    \"eventCode\": \"CH_SIGNATURE_USG\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_USG\",\n    \"label\": \"Usage Signature fees\",\n    \"amountWithoutTax\": 0,\n    \"priceEL\": null,\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": false,\n    \"priority\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_SIGNATURE_USG/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_SIGNATURE_USG",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP SIGNATURE USAGE 2",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_SIGNATURE_USG_2\",\n    \"eventCode\": \"CH_SIGNATURE_USG_2\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_USG_2\",\n    \"label\": \"Usage Signature fees\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\":null,\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"Pack\",\n            \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_USG_2\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"SIGNATURE_PACK\",\n            \"position\": 2,\n            \"type\": \"Long\",\n            \"isRange\": false\n        }\n    ],\n    \"lines\": [\n        {\n            \"priceWithoutTax\": 2.300000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_USG_2\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Pack\",\n                    \"longValue\": 250\n                }\n            ],\n            \"description\": \"Pack 1\",\n            \"priority\": 0\n        },\n        {\n            \"priceWithoutTax\": 2.200000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_USG_2\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Pack\",\n                    \"longValue\": 500\n                }\n            ],\n            \"description\": \"Pack 2\",\n            \"priority\": 0\n        },\n        {\n            \"priceWithoutTax\": 2.100000000000,\n            \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_USG_2\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Pack\",\n                    \"longValue\": 1000\n                }\n            ],\n            \"description\": \"Pack 3\",\n            \"priority\": 0\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_SIGNATURE_USG_2/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_SIGNATURE_USG_2",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP SIGNATURE CACHET USAGE",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_SIGNATURE_CACHET_USG\",\n    \"eventCode\": \"CH_SIGNATURE_CACHET_USG\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_SIGNATURE_CACHET_USG\",\n    \"label\": \"Usage Signature Cachet fees\",\n    \"amountWithoutTax\": 1,\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": false,\n    \"priority\": 0\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_SIGNATURE_CACHET_USG/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_SIGNATURE_CACHET_USG",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Meal Pass USAGE",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_MEAD_PASS\",\n    \"eventCode\": \"CH_USG_MEAD_PASS\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_MEAD_PASS\",\n    \"label\": \"Meal Pass Usage pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* op.parameter2}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_MEAD_PASS/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_MEAD_PASS",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Usage Amount",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_AMOUNT\",\n    \"eventCode\": \"CH_USG_AMOUNT\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_AMOUNT\",\n    \"label\": \"Explicit Amount Usage pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* op.parameter2}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_AMOUNT/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_AMOUNT",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Trigger Campain Fees",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_TRIGGER_CAMPAIGN_FEE\",\n    \"eventCode\": \"CH_USG_TRIGGER_CAMPAIGN_FEE\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_TRIGGER_CAMPAIGN_FEE\",\n    \"label\": \"Campaing fee pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* op.parameter2}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_TRIGGER_CAMPAIGN_FEE/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_TRIGGER_CAMPAIGN_FEE",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Mkt View",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_MKT_VIEW\",\n    \"eventCode\": \"CH_USG_MKT_VIEW\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_MKT_VIEW\",\n    \"label\": \"Marketing View\",\n    \"amountWithoutTax\": 1,\n   \n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_MKT_VIEW/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_MKT_VIEW",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Mkt Click",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_MKT_CLICK\",\n    \"eventCode\": \"CH_USG_MKT_CLICK\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_MKT_CLICK\",\n    \"label\": \"Marketing Click\",\n    \"amountWithoutTax\": 2,\n\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_MKT_CLICK/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_MKT_CLICK",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Mkt Sales",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_USG_MKT_SALES\",\n    \"eventCode\": \"CH_USG_MKT_SALES\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_USG_MKT_SALES\",\n    \"label\": \"Marketing Sales\",\n    \"amountWithoutTax\": 5,\n\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_USG_MKT_SALES/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_USG_MKT_SALES",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Mkt Recurring",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_REC_MKT\",\n    \"eventCode\": \"CH_REC_MKT\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_REC_MKT\",\n    \"label\": \"Default Recurring Marketing\",\n    \"amountWithoutTax\": 2.99,\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_REC_MKT/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_REC_MKT",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Meal Pass USG Partner Retribution CARD",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_PARTNER_MEAD_PASS_CARD\",\n    \"eventCode\": \"CH_PARTNER_MEAD_PASS_CARD\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_PARTNER_MEAD_PASS_CARD\",\n    \"label\": \"Meal Pass Usage retribution Card\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ (1-mv:getProductAttributeValue(op.serviceInstance, 'MEAL_PASS_CARD_RETRIBUTION_PERC')/100)* op.parameter2}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_PARTNER_MEAD_PASS_CARD/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_PARTNER_MEAD_PASS_CARD",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Meal Pass USG Partner Retribution CHECK",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_PARTNER_MEAD_PASS_CHECK\",\n    \"eventCode\": \"CH_PARTNER_MEAD_PASS_CHECK\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_PARTNER_MEAD_PASS_CHECK\",\n    \"label\": \"Meal Pass Usage retribution Check\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ (1-mv:getProductAttributeValue(op.serviceInstance, 'MEAL_PASS_CHECK_RETRIBUTION_PERC')/100)* op.parameter2}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_PARTNER_MEAD_PASS_CHECK/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_PARTNER_MEAD_PASS_CHECK",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PP CPQ Invoicing Plan",
									"item": [
										{
											"name": "Create Price Plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"PP_CH_OS_INVOICING_PLAN\",\n    \"eventCode\": \"CH_OS_INVOICING_PLAN\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 500\n    \n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Price Plan Matrix Version 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"pricePlanMatrixCode\": \"PP_CH_OS_INVOICING_PLAN\",\n    \"label\": \"Default invoicing plan pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* 1000}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"pricePlanMatrixVersion"
													]
												}
											},
											"response": []
										},
										{
											"name": "Publish Price Plan Matrix Version 1",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/PP_CH_OS_INVOICING_PLAN/pricePlanMatrixVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"PP_CH_OS_INVOICING_PLAN",
														"pricePlanMatrixVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENERGY CHARGING",
									"item": [
										{
											"name": "PP CH_OSS_SETUP1",
											"item": [
												{
													"name": "priceplan|PP_CH_OSS_SETUP1|CH_OSS_SETUP1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_OSS_SETUP1|CH_OSS_SETUP1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Setup\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* mv:getProductAttributeValue(op.serviceInstance, \\\"SETUP_FEES_STEP1\\\")}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_OSS_SETUP1|CH_OSS_SETUP1",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PP CH_OSS_SETUP2",
											"item": [
												{
													"name": "priceplan|PP_CH_OSS_SETUP2|CH_OSS_SETUP2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_OSS_SETUP2|CH_OSS_SETUP2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Setup\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* mv:getProductAttributeValue(op.serviceInstance, \\\"SETUP_FEES_STEP2\\\")}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_OSS_SETUP2|CH_OSS_SETUP2",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PP CH_OSS_SETUP3",
											"item": [
												{
													"name": "priceplan|PP_CH_OSS_SETUP3|CH_OSS_SETUP3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_OSS_SETUP3|CH_OSS_SETUP3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Setup\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ 1* mv:getProductAttributeValue(op.serviceInstance, \\\"SETUP_FEES_STEP3\\\")}\",\n    \"version\": 1,\n    \"isMatrix\": false,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_OSS_SETUP3|CH_OSS_SETUP3",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PP_CH_ERNEGY_LICENCE_RECURRING",
											"item": [
												{
													"name": "priceplan|PP_CH_ENERGY_LICENCE_RECURRING|CH_ENERGY_LICENCE_RECURRING",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_LICENCE_RECURRING|CH_ENERGY_LICENCE_RECURRING",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Recurring pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\":\"#{ amount * (mv:getCTValueForDate(\\\"ct_ref_index_bt47\\\", \\\"index\\\",op.operationDate,\\\"\\\",\\\"\\\",null,null,null,null,null,null,null,null)/(mv:getCTValueForDate(\\\"ct_ref_index_bt47\\\", \\\"index\\\",(mv:addToDate(op.operationDate,2,-1)),\\\"\\\",\\\"\\\",null,null,null,null,null,null,null,null)))}\",\n\n        \"version\": 1,\n        \"validity\": {\n            \"from\": \"2020-01-01\",\n            \"to\": \"2030-12-30\"\n        },\n        \"isMatrix\": true,\n        \"priority\": 0,\n        \"columns\": [\n            {\n                \"code\": \"Nombre_point\",\n                \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n                \"pricePlanMatrixVersion\": 1,\n                \"attributeCode\": \"CHARGING_POINT_NUMBER\",\n                \"position\": 1,\n                \"type\": \"Long\",\n                \"isRange\": false\n            },\n            {\n                \"code\": \"Puissance\",\n                \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n                \"pricePlanMatrixVersion\": 1,\n                \"attributeCode\": \"POWER_OPTION\",\n                \"position\": 1,\n                \"type\": \"Double\",\n                \"isRange\": false\n            }\n        ],\n        \"lines\": [\n            {\n                \"priceWithoutTax\": 12.2,\n                \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n                \"pricePlanMatrixVersion\": 1,\n                \"pricePlanMatrixValues\": [\n                    {\n                        \"ppmColumnCode\": \"Nombre_point\",\n                        \"longValue\": 2\n                    },\n                    {\n                        \"ppmColumnCode\": \"Puissance\",\n                        \"doubleValue\": 3.5\n                    }\n                ],\n                \"description\": \"test\",\n                \"priority\": 1\n            },\n            {\n                \"priceWithoutTax\": 24.5,\n                \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n                \"pricePlanMatrixVersion\": 1,\n                \"pricePlanMatrixValues\": [\n                    {\n                        \"ppmColumnCode\": \"Nombre_point\",\n                        \"longValue\": 2\n                    },\n                    {\n                        \"ppmColumnCode\": \"Puissance\",\n                        \"doubleValue\": 7.4\n                    }\n                ],\n                \"description\": \"test\",\n                \"priority\": 2\n            },\n            {\n                \"priceWithoutTax\": 5.2,\n                \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n                \"pricePlanMatrixVersion\": 1,\n                \"pricePlanMatrixValues\": [\n                    {\n                        \"ppmColumnCode\": \"Nombre_point\",\n                        \"longValue\": 4\n                    },\n                    {\n                        \"ppmColumnCode\": \"Puissance\",\n                        \"doubleValue\": 3.5\n                    }\n                ],\n                \"description\": \"test\",\n                \"priority\": 3\n            },\n            {\n                \"priceWithoutTax\": 7.2,\n                \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n                \"pricePlanMatrixVersion\": 1,\n                \"pricePlanMatrixValues\": [\n                    {\n                        \"ppmColumnCode\": \"Nombre_point\",\n                        \"longValue\": 4\n                    },\n                    {\n                        \"ppmColumnCode\": \"Puissance\",\n                        \"doubleValue\": 7.4\n                    }\n                ],\n                \"description\": \"test\",\n                \"priority\": 4\n            }\n        ]\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_LICENCE_RECURRING|CH_ENERGY_LICENCE_RECURRING",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PP_CH_ERNEGY_USER_RECURRING",
											"item": [
												{
													"name": "priceplan|PP_CH_ENERGY_USER_RECURRING|CH_ENERGY_USER_RECURRING",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_USER_RECURRING|CH_ENERGY_USER_RECURRING",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Recurring pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\":\"#{ amount * (mv:getCTValueForDate(\\\"ct_ref_index_bt47\\\", \\\"index\\\",op.operationDate,\\\"\\\",\\\"\\\",null,null,null,null,null,null,null,null)/(mv:getCTValueForDate(\\\"ct_ref_index_bt47\\\", \\\"index\\\",(mv:addToDate(op.operationDate,2,-1)),\\\"\\\",\\\"\\\",null,null,null,null,null,null,null,null)))}\",\n\n\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"Nombre_utilisateur\",\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"USER_NUMBER\",\n            \"position\": 1,\n            \"type\": \"Long\",\n            \"isRange\": false\n        }\n    ],\n    \"lines\": [\n        {\n            \"priceWithoutTax\": 13.1,\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Nombre_utilisateur\",\n                    \"longValue\": 2\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 1\n        },\n        {\n            \"priceWithoutTax\": 12.50,\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                   {\n                    \"ppmColumnCode\": \"Nombre_utilisateur\",\n                    \"longValue\": 5\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 2\n        },\n        {\n            \"priceWithoutTax\": 11.30,\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                      {\n                    \"ppmColumnCode\": \"Nombre_utilisateur\",\n                    \"longValue\": 10\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 3\n        },\n        {\n            \"priceWithoutTax\": 9.8,\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                      {\n                    \"ppmColumnCode\": \"Nombre_utilisateur\",\n                    \"longValue\": 15\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 4\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_USER_RECURRING|CH_ENERGY_USER_RECURRING",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PP_CH_ENERGY_CHARGING_RECURRING",
											"item": [
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_RECURRING|CH_ENERGY_CHARGING_RECURRING",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_RECURRING|CH_ENERGY_CHARGING_RECURRING",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Recurring pricing\",\n    \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{ op.code == \\\"CH_ENERGY_CHARGING_RECURRING\\\"?(mv:parseNumber(mv:getProductAttributeValue(op.serviceInstance, \\\"MAX_CONSO_OPTION\\\")) * amount * (mv:getCTValueForDate(\\\"ct_ref_index_bt47\\\", \\\"index\\\",op.operationDate,\\\"\\\",\\\"\\\",null,null,null,null,null,null,null,null)/(mv:getCTValueForDate(\\\"ct_ref_index_bt47\\\", \\\"index\\\",(mv:addToDate(op.operationDate,2,-1)),\\\"\\\",\\\"\\\",null,null,null,null,null,null,null,null)))):(amount *  (mv:getCTValueForDate(\\\"ct_ref_index_bt47\\\", \\\"index\\\",op.operationDate,\\\"\\\",\\\"\\\",null,null,null,null,null,null,null,null)/(mv:getCTValueForDate(\\\"ct_ref_index_bt47\\\", \\\"index\\\",(mv:addToDate(op.operationDate,2,-1)),\\\"\\\",\\\"\\\",null,null,null,null,null,null,null,null)) ))}\",\n    \"version\": 1,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": true,\n    \"priority\": 0,\n    \"columns\": [\n        {\n            \"code\": \"Max_consommation\",\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"attributeCode\": \"MAX_CONSO_OPTION\",\n            \"position\": 1,\n            \"type\": \"Long\",\n            \"isRange\": false\n        }\n    ],\n    \"lines\": [\n        {\n            \"priceWithoutTax\": 15,\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                {\n                    \"ppmColumnCode\": \"Max_consommation\",\n                    \"longValue\": 600\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 1\n        },\n        {\n            \"priceWithoutTax\": 13,\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                   {\n                    \"ppmColumnCode\": \"Max_consommation\",\n                    \"longValue\": 750\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 2\n        },\n        {\n            \"priceWithoutTax\": 12,\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                      {\n                    \"ppmColumnCode\": \"Max_consommation\",\n                    \"longValue\": 900\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 3\n        },\n        {\n            \"priceWithoutTax\": 11.5,\n            \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n            \"pricePlanMatrixVersion\": 1,\n            \"pricePlanMatrixValues\": [\n                      {\n                    \"ppmColumnCode\": \"Max_consommation\",\n                    \"longValue\": 1200\n                }\n            ],\n            \"description\": \"test\",\n            \"priority\": 4\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_RECURRING|CH_ENERGY_CHARGING_RECURRING",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												},
												{
													"name": "charge|CH_ENERGY_CHARGING_USG_2|Energy Charging Usage 2",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"ISCAT_USG\",\n    \"taxClassCode\": \"NORMAL\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"ENERGY_CHARGING\",\n    \"priority\": 20,\n    \"pricePlanCodes\": [\n        \"PP_CH_ENERGY_CHARGING_RECURRING\"\n    ]\n}"
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"usageChargeTemplate",
																"createOrUpdate"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PP_CH_ENERGY_CHARGING_USG_1",
											"item": [
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_USG_1|CH_ENERGY_CHARGING_USG_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_USG_1|CH_ENERGY_CHARGING_USG_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Recurring pricing\",\n    \"amountWithoutTax\": 0,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": false,\n    \"priority\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_USG_1|CH_ENERGY_CHARGING_USG_1",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PP_CH_ENERGY_CHARGING_COM_FEES_USG",
											"item": [
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_COM_FEES_USG|CH_ENERGY_CHARGING_COM_FEES_USG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_COM_FEES_USG|CH_ENERGY_CHARGING_COM_FEES_USG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Recurring pricing\",\n    \"amountWithoutTax\": 0.047,\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": false,\n    \"priority\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_COM_FEES_USG|CH_ENERGY_CHARGING_COM_FEES_USG",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PP_CH_ENERGY_CHARGING_COM_ELEC_USG",
											"item": [
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_COM_ELEC_USG|CH_ENERGY_CHARGING_COM_ELEC_USG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"eventCode\": \"{{request.label.2}}\",\n    \"priority\": 0,\n    \"amountWithoutTax\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_COM_ELEC_USG|CH_ENERGY_CHARGING_COM_ELEC_USG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.collectionVariables.set(\"ppmOsVersion\",pm.response.json().pricePlanVersion.version);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"pricePlanMatrixCode\": \"{{request.label.1}}\",\n    \"label\": \"Recurring pricing\",\n      \"amountWithoutTax\": 1,\n    \"priceEL\": \"#{mv:getProductAttributeValue(op.serviceInstance, 'COMMISSION_FEES')}\",\n    \"validity\": {\n        \"from\": \"2020-01-01\",\n        \"to\": \"2030-12-30\"\n    },\n    \"isMatrix\": false,\n    \"priority\": 0\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/pricePlanMatrixVersion",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"pricePlanMatrixVersion"
															]
														}
													},
													"response": []
												},
												{
													"name": "priceplan|PP_CH_ENERGY_CHARGING_COM_ELEC_USG|CH_ENERGY_CHARGING_COM_ELEC_USG",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/pricePlan/{{request.label.1}}/pricePlanMatrixVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"pricePlan",
																"{{request.label.1}}",
																"pricePlanMatrixVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Charge Activation",
							"item": [
								{
									"name": "ENERGY CHARGING",
									"item": [
										{
											"name": "charge|CH_ENERGY_LICENCE_RECURRING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_USER_RECURRING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_RECURRING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_USG_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_USG_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_SETUP1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_SETUP2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_SETUP3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_COM_FEES_USG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_ENERGY_CHARGING_COM_ELEC_USG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Other",
									"item": [
										{
											"name": "charge|CH_OSS_TRAINING|Certified Training Courses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OS_OTHER|Exceptional Other Charge",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_SIMPLE_RECURRING|desc=Simple Recurring Offer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_BUILD_RUN_RECURRING|desc=Simple Recurring Offer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_PS|Professional Service Usage",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_CONTRIBUTION|Contribution Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_RENT|Usage Rent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_INSURANCE|Insurance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_CHILD_SEAT|Child Seat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_FUEL_REFILL|Fuel Refill",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_BOOKING|Premium booking",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_VEHICLE_DELIVERY| Delivery Fees",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_PASS_CARD| Pass Type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OSS_CARD_PASS_DELIVERY_FEES| Pass Delivery fees",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_MEAD_PASS| Pass Usage",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_PARTNER_MEAD_PASS_CARD| Pass Retribution Partner",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_PARTNER_MEAD_PASS_CHECK| Pass Retribution Partner Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_REC_MKT| Marketing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_MKT_VIEW| CH_USG_MKT_VIEW",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_MKT_SALES| CH_USG_MKT_SALES",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_MKT_CLICK| CH_USG_MKT_CLICK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_SIGNATURE_RECURRING| CH_SIGNATURE_RECURRING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_SIGNATURE_USG| CH_SIGNATURE_USG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_SIGNATURE_USG_2| CH_SIGNATURE_USG_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_SIGNATURE_CACHET_USG| CH_SIGNATURE_CACHET_USG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_AMOUNT|CH_USG_AMOUNT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_TRIGGER_CAMPAIGN_FEE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_OS_INVOICING_PLAN",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{opencell.url}}/catalog/chargeTemplates/{{request.label.1}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"chargeTemplates",
														"{{request.label.1}}",
														"status",
														"ACTIVE"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Service and Product",
							"item": [
								{
									"name": "Product CPQ ONE SHOT",
									"item": [
										{
											"name": "PR|code=PR_TRAINING|desc={{SE_OSS Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product1.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products1.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_OSS_TRAINING\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_TRAINING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_TRAINING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_TRAINING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ RECURRING",
									"item": [
										{
											"name": "PR|code=PR_RECURRING|desc={{SE_REC_ADV Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product2.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products2.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_LOGO\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_SIMPLE_RECURRING\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_RECURRING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_RECURRING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_RECURRING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ BUILD and RUN RECURRING",
									"item": [
										{
											"name": "PR|code=PR_BUILD_RUN_RECURRING|desc={{SE_REC_ADV Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product3.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products3.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"DRAFT\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_LOGO\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"Project phase\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 0,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"Build\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_BUILD_RUN_RECURRING\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_BUILD_RUN_RECURRING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_BUILD_RUN_RECURRING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_BUILD_RUN_RECURRING",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ USAGE",
									"item": [
										{
											"name": "PR|code=PR_USAGE|desc={{SE_USG Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product4.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products4.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_USG_PS\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ  USAGE - Location",
									"item": [
										{
											"name": "PR|code=PR_USAGE_RENT|desc=Rent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product5.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products5.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"INSURANCE\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 0,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": true\r\n            },\r\n            {\r\n                \"attributeCode\": \"FUEL_REFILL\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": false\r\n            },\r\n            {\r\n                \"attributeCode\": \"CHILD_SEAT\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 2,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": false\r\n            },\r\n            {\r\n                \"attributeCode\": \"CHILD_SEAT_FEE\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 3,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"25\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"USER_CONTRACT_CODE\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 4,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"UNLIMITED_KM\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 5,\r\n                \"readOnly\": true,\r\n                \"defaultValue\": true\r\n            },\r\n            {\r\n                \"attributeCode\": \"VEHICLE_CATEGORY\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 6,\r\n                \"readOnly\": true,\r\n                \"defaultValue\": \"CATA\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"VEHICLE_DELIVERY\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 7,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"FORMULE_1\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"PREMIUM_BOOKING\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 8,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": false\r\n            },\r\n            {\r\n                \"attributeCode\": \"FROM_ZONE_EL\",\r\n                \"mandatory\": true,\r\n                \"display\": false,\r\n                \"sequence\": 0,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"#{op.edr.parameter1}\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"TO_ZONE_EL\",\r\n                \"mandatory\": true,\r\n                \"display\": false,\r\n                \"sequence\": 0,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"#{op.edr.parameter3}\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"DISTANCE_EL\",\r\n                \"mandatory\": true,\r\n                \"display\": false,\r\n                \"sequence\": 0,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"#{mv:parseNumber(op.edr.parameter2)}\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_USG_RENT\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_OSS_INSURANCE\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_OSS_CHILD_SEAT\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_OSS_FUEL_REFILL\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_OSS_BOOKING\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_OSS_VEHICLE_DELIVERY\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE_RENT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE_RENT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE_RENT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ CONTRIBUTION",
									"item": [
										{
											"name": "PR|code=PR_CONTRIBUTION|desc=Contribution",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product6.cpq.code\", pm.globals.get(\"code\"));\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products6.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_USG_CONTRIBUTION\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_CONTRIBUTION",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_CONTRIBUTION",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_CONTRIBUTION",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ  MEAL CARD",
									"item": [
										{
											"name": "PR|code=PR_MEAL_PASS|desc=Meal Pass",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product7.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products7.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"MEAL_PASS\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"CARD\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"MEAL_PASS_DELIVERY_FEES\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 2,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": true\r\n            },\r\n            {\r\n                \"attributeCode\": \"MEAL_PASS_DELIVERY_FEES_PROMO_VALUE\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 3,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"10\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_OSS_PASS_CARD\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_OSS_CARD_PASS_DELIVERY_FEES\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MEAL_PASS",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MEAL_PASS",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MEAL_PASS",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ  MEAL CARD USAGE",
									"item": [
										{
											"name": "PR|code=PR_MEAL_PASS_USAGE_AMOUNT|desc=Meal Pass USage",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product8.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products8.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n            \r\n        },\r\n        \"productAttributes\": [\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_USG_MEAD_PASS\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MEAL_PASS_USAGE_AMOUNT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MEAL_PASS_USAGE_AMOUNT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MEAL_PASS_USAGE_AMOUNT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ  MEAL CARD RETRIBUTION",
									"item": [
										{
											"name": "PR|code=PR_PARTNER_MEAL_PASS_RETRIBUTION|desc=Meal Pass Partner retribution",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product9.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products9.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n            \r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"MEAL_PASS_CHECK_RETRIBUTION_PERC\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 3,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"7\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"MEAL_PASS_CARD_RETRIBUTION_PERC\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 3,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"3.5\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_PARTNER_MEAD_PASS_CARD\"\r\n        },\r\n           {\r\n            \"chargeCode\": \"CH_PARTNER_MEAD_PASS_CHECK\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_PARTNER_MEAL_PASS_RETRIBUTION",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_PARTNER_MEAL_PASS_RETRIBUTION",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_PARTNER_MEAL_PASS_RETRIBUTION",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ  Marketing",
									"item": [
										{
											"name": "PR|code=PR_MARKETING|desc=Marketing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product10.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products10.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n            \r\n        },\r\n        \"productAttributes\": [],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_REC_MKT\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_USG_MKT_SALES\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_USG_MKT_CLICK\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_USG_MKT_VIEW\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MARKETING|desc=Marketing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MARKETING|desc=Marketing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_MARKETING|desc=Marketing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product SIGNATURE",
									"item": [
										{
											"name": "PR|code=PR_SIGNATURE|desc=Signature Pack",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product11.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products11.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n            \r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"SIGNATURE_PACK\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": 250\r\n            },\r\n            {\r\n                \"attributeCode\": \"SIGNATURE_PACK_DISCOUNT_VALUE\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 2,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": 0\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_SIGNATURE_RECURRING\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_SIGNATURE_USG\",\r\n            \"counterCode\": \"CN_USG_COUNTER\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_SIGNATURE_USG_2\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_SIGNATURE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_SIGNATURE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_SIGNATURE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product SIGNATURE CACHET",
									"item": [
										{
											"name": "PR|code=PR_SIGNATURE_CACHET|desc=Unitary  signature",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product12.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products12.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n            \r\n        },\r\n        \"productAttributes\": null,\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_SIGNATURE_CACHET_USG\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_SIGNATURE_CACHET",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_SIGNATURE_CACHET",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_SIGNATURE_CACHET",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ  USAGE - Amount & Campaign fees",
									"item": [
										{
											"name": "PR|code=PR_USAGE_AMOUNT_AND_CAMPAIGN|desc=Amount Usage And Campaign fees",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product13.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products13.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"CAMPAIGN_FEES\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 3,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"5\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_USG_AMOUNT\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_USG_TRIGGER_CAMPAIGN_FEE\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE_AMOUNT_AND_CAMPAIGN",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE_AMOUNT_AND_CAMPAIGN",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_USAGE_AMOUNT_AND_CAMPAIGN",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ One Shot Other",
									"item": [
										{
											"name": "PR|code=PR_OS_OTHER|desc=One shot Other",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product14.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products14.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_TEXT_LIST_ATTRIBUTE\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_LIST_NUMERIC_ATTRIBUTE_2\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 2,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_BOOLEAN_ATTRIBUTE\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 3,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_HIDDEN_BOOLEAN_ATTRIBUTE\",\r\n                \"mandatory\": false,\r\n                \"display\": false,\r\n                \"sequence\": 4,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_READ_ONLY_BOOLEAN_ATTRIBUTE\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 5,\r\n                \"readOnly\": true,\r\n                \"defaultValue\": true\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_TEXT_ATTRIBUTE\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 6,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_LIST_NUMERIC_ATTRIBUTE\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 7,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_LIST_NUMERIC_ATTRIBUTE_3\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 8,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": 450.2\r\n            },  {\r\n                \"attributeCode\": \"EXAMPLE_TEXT_LIST_ATTRIBUTE_2\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 9,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": \"TEST_1_2\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_HIDDEN_BOOLEAN_ATTRIBUTE_2\",\r\n                \"mandatory\": false,\r\n                \"display\": false,\r\n                \"sequence\": 10,\r\n                \"readOnly\": false,\r\n                \"defaultValue\": true\r\n            },\r\n            {\r\n                \"attributeCode\": \"EXAMPLE_READ_ONLY_BOOLEAN_ATTRIBUTE_2\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 11,\r\n                \"readOnly\": true,\r\n                \"defaultValue\": true\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_OS_OTHER\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_OS_OTHER",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_OS_OTHER",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_OS_OTHER",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "Product CPQ One Shot Invoicing plan",
									"item": [
										{
											"name": "PR|code=PR_OS_INVOICING_PLAN|desc=One shot Invoicing Plan",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"product15.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"products15.id\",pm.response.json().id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_OS_INVOICING_PLAN\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/products",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_OS_INVOICING_PLAN",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_OS_INVOICING_PLAN",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"productVersions",
														"1",
														"status",
														"PUBLISHED"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=PR_OS_INVOICING_PLAN",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"products",
														"{{code}}",
														"status",
														"ACTIVE"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									]
								},
								{
									"name": "ENERGY CHARGING",
									"item": [
										{
											"name": "Product Energy charging",
											"item": [
												{
													"name": "PR|code=PR_ENERGY_CHARGING_SETUP_FEES|desc=Setup",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"product16.cpq.code\", pm.globals.get(\"code\"));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.set(\"products16.id\",pm.response.json().id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"SETUP_FEES_STEP1\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\":\"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"SETUP_FEES_STEP2\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\":\"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"SETUP_FEES_STEP3\",\r\n                \"mandatory\": false,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\":\"\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_OSS_SETUP1\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_OSS_SETUP2\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_OSS_SETUP3\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/products",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_CHARGING_SETUP_FEES|desc=Setup",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_CHARGING_SETUP_FEES|desc=Setup",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}",
																"productVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_CHARGING_SETUP_FEES|desc=Setup",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}",
																"status",
																"ACTIVE"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												}
											]
										},
										{
											"name": "Product Energy charging Recurring",
											"item": [
												{
													"name": "PR|code=PR_ENERGY_LICENCE_RECCURING|desc=Licence Recurring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"product17.cpq.code\", pm.globals.get(\"code\"));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.set(\"products17.id\",pm.response.json().id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"USER_NUMBER\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\":\"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"POWER_OPTION\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\":\"\"\r\n            },\r\n            {\r\n                \"attributeCode\": \"CHARGING_POINT_NUMBER\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\":\"\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_ENERGY_LICENCE_RECURRING\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_ENERGY_USER_RECURRING\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/products",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_LICENCE_RECCURING|desc=Licence Recurring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_LICENCE_RECCURING|desc=Licence Recurring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}",
																"productVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_LICENCE_RECCURING|desc=Licence Recurring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}",
																"status",
																"ACTIVE"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												}
											]
										},
										{
											"name": "Product Energy charging Usage",
											"item": [
												{
													"name": "PR|code=PR_ENERGY_POWER_USAGE|desc=Power Usage",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"product18.cpq.code\", pm.globals.get(\"code\"));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.set(\"products18.id\",pm.response.json().id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"MAX_CONSO_OPTION\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\":\"600\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_ENERGY_CHARGING_RECURRING\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_ENERGY_CHARGING_USG_1\",\r\n                 \"counterCode\": \"CN_ENERGY_USAGE\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_ENERGY_CHARGING_USG_2\"\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/products",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_POWER_USAGE|desc=Power Usage",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_POWER_USAGE|desc=Power Usage",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}",
																"productVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_POWER_USAGE|desc=Power Usage",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}",
																"status",
																"ACTIVE"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												}
											]
										},
										{
											"name": "Product Energy charging Commission",
											"item": [
												{
													"name": "PR|code=PR_ENERGY_POWER_COMMISSION|desc=Power Commission",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.globals.set(\"product19.cpq.code\", pm.globals.get(\"code\"));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.environment.set(\"products19.id\",pm.response.json().id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"discountList\": [],\r\n    \"code\": \"{{code}}\",\r\n    \"label\": \"{{desc}}\",\r\n    \"status\": \"ACTIVE\",\r\n    \"modelChildren\": [],\r\n    \"discountFlag\": false,\r\n    \"packageFlag\": false,\r\n    \"discountListCodes\": [],\r\n    \"isModel\": false,\r\n    \"mediaCodes\": [\r\n        \"OC_TRAINING\"\r\n    ],\r\n    \"currentProductVersion\": {\r\n        \"productCode\": \"{{code}}\",\r\n        \"shortDescription\": \"{{desc}}\",\r\n        \"currentVersion\": 0,\r\n        \"status\": \"DRAFT\",\r\n        \"longDescription\": \"This is a long test description for product version\",\r\n        \"validity\": {\r\n            \"from\": \"2022-01-01\"\r\n        },\r\n        \"productAttributes\": [\r\n            {\r\n                \"attributeCode\": \"COMMISSION_FEES\",\r\n                \"mandatory\": true,\r\n                \"display\": true,\r\n                \"sequence\": 1,\r\n                \"readOnly\": false,\r\n                \"defaultValue\":\"0.012\"\r\n            }\r\n        ],\r\n        \"tagCodes\": null\r\n    },\r\n    \"productChargeTemplateMappingDto\": [\r\n        {\r\n            \"chargeCode\": \"CH_ENERGY_CHARGING_COM_FEES_USG\"\r\n        },\r\n        {\r\n            \"chargeCode\": \"CH_ENERGY_CHARGING_COM_ELEC_USG\"\r\n           \r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/catalog/products",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_POWER_COMMISSION|desc=Power Commission",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_POWER_COMMISSION|desc=Power Commission",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}/productVersions/1/status/PUBLISHED",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}",
																"productVersions",
																"1",
																"status",
																"PUBLISHED"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												},
												{
													"name": "PR|code=PR_ENERGY_POWER_COMMISSION|desc=Power Commission",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{opencell.url}}/catalog/products/{{code}}/status/ACTIVE",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"catalog",
																"products",
																"{{code}}",
																"status",
																"ACTIVE"
															]
														},
														"description": "Creation of the product"
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Articles",
							"item": [
								{
									"name": "Articles CPQ ONE SHOT",
									"item": [
										{
											"name": "PR|code=TRAINING_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art1.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article1.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"One shot article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 5\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=TRAINING_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article1.id}}\n    },\n    \"product\": {\n        \"id\": {{products1.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles CPQ RECURRING",
									"item": [
										{
											"name": "PR|code=RECURRING_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art2.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article2.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Recurring article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 4\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=RECURRING_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {}\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article2.id}}\n    },\n    \"product\": {\n        \"id\": {{products2.id}}\n    }\n\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines BUILD and RUN",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article2.id}}\n    },\n    \"product\": {\n        \"id\": {{products3.id}}\n    },\n    \"attributesMapping\": [\n        {\n            \"attribute\": {\n                \"id\": 1\n            },\n            \"attributeValue\": \"Build\"\n        },\n               {\n            \"attribute\": {\n                \"id\": 1\n            },\n            \"attributeValue\": \"Run\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines RUN",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article2.id}}\n    },\n    \"product\": {\n        \"id\": {{products3.id}}\n    },\n    \"attributesMapping\": [\n        {\n            \"attribute\": {\n                \"id\": 1\n            },\n            \"attributeValue\": \"Run\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles CPQ USAGE",
									"item": [
										{
											"name": "PR|code=USAGE_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art4.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article4.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Usage article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 8\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=USAGE_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article4.id}}\n    },\n    \"product\": {\n        \"id\": {{products4.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles CPQ USAGE Location",
									"item": [
										{
											"name": "PR|code=USAGE_RENT_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art5.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article5.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Usage Rent article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 8\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=USAGE_RENT_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article5.id}}\n    },\n    \"product\": {\n        \"id\": {{products5.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles CPQ Contribution",
									"item": [
										{
											"name": "PR|code=CONTRIBUTION_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art6.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article6.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Usage article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 8\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "CONTRIBUTION_ARTICLE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountingArticle\": {\n        \"id\": {{article6.id}}\n    },\n    \"product\": {\n        \"id\": {{products6.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles CPQ Meal pass",
									"item": [
										{
											"name": "PR|code=MEAL_PASS_ARTICLE|desc=Meal Pass Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art7.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article7.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 8\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=MEAL_PASS_ARTICLE|desc=Meal Pass Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article7.id}}\n    },\n    \"product\": {\n        \"id\": {{products7.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines _usage",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article7.id}}\n    },\n    \"product\": {\n        \"id\": {{products8.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines Retribution",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article7.id}}\n    },\n    \"product\": {\n        \"id\": {{products9.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles Signature",
									"item": [
										{
											"name": "PR|code=SIGNATURE_ARTICLE|desc=Signature Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art11.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article11.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 8\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=SIGNATURE_ARTICLE|desc=Signature Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accountingArticle\": {\n        \"id\": {{article11.id}}\n    },\n    \"product\": {\n        \"id\": {{products11.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles CPQ ONE SHOT Other",
									"item": [
										{
											"name": "PR|code=OTHER_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art12.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article12.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"One shot Other article\",\n    \"taxClass\": {\n        \"id\": {{taxclass_compose.id}}\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 7\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=OTHER_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article12.id}}\n    },\n    \"charge\": {\n        \"id\": {{charge_oneshot_other_id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles CPQ USAGE amount & campaign fee",
									"item": [
										{
											"name": "PR|code=USAGE_AMOUNT_CAMPAIGN_ARTICLE|desc=Usage Amount and Campaign Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art13.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article13.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"One shot Other article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 7\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=USAGE_AMOUNT_CAMPAIGN_ARTICLE|desc={{PR_PRD Label}}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article13.id}}\n    },\n   \"product\": {\n        \"id\": {{products13.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles CPQ One shot Invoicing plan",
									"item": [
										{
											"name": "PR|code=INVOICING_PLAN_ARTICLE|desc=Invoicing plan Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art14.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article14.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"One shot Invoicing plan article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 7\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=INVOICING_PLAN_ARTICLE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article14.id}}\n    },\n   \"product\": {\n        \"id\": {{products15.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles Energy charging Setup",
									"item": [
										{
											"name": "PR|code=ENERGY_SETUP_ARTICLE|desc=Energy Setup Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art15.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article15.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Energy setup article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 7\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=ENERGY_SETUP_ARTICLE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article15.id}}\n    },\n   \"product\": {\n        \"id\": {{products16.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles Energy charging Recurring",
									"item": [
										{
											"name": "PR|code=ENERGY_REC_ARTICLE|desc=Energy Recurring Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art16.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article16.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Energy Recurring article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 7\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=ENERGY_REC_ARTICLE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article16.id}}\n    },\n   \"product\": {\n        \"id\": {{products17.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles Energy charging Usage",
									"item": [
										{
											"name": "PR|code=ENERGY_USG_ARTICLE|desc=Energy Usage Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art17.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article17.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Energy Recurring article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 7\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=ENERGY_USG_ARTICLE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article17.id}}\n    },\n   \"product\": {\n        \"id\": {{products18.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Articles Energy charging Commission",
									"item": [
										{
											"name": "PR|code=ENERGY_COM_ARTICLE|desc=Energy Commission Article",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.globals.set(\"art18.cpq.code\", pm.globals.get(\"code\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"article18.id\",pm.response.json().id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"Energy Recurring article\",\n    \"taxClass\": {\n        \"id\": -5\n    },\n    \"invoiceSubCategory\": {\n        \"id\": 7\n    },\n    \"accountingCode\": {\n        \"id\": -1\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "PR|code=ENERGY_COM_ARTICLE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"filters\": {\n            }\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articles/{{code}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articles",
														"{{code}}"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										},
										{
											"name": "Create Article Mapping Lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\n    \"accountingArticle\": {\n        \"id\": {{article18.id}}\n    },\n   \"product\": {\n        \"id\": {{products19.id}}\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/v2/articleMappingLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"v2",
														"articleMappingLines"
													]
												},
												"description": "Creation of the product"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Offers",
							"item": [
								{
									"name": "OF|code=OF_BASIC|name=Licence Basic Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer.cpq..code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product1.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 0\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product2.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 1\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product3.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 2\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product4.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 3\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product14.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 4\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product15.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 5\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_BASIC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer.cpq..code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{code}}/update/status?status=ACTIVE&validFrom=2022-01-01",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{code}}",
												"update",
												"status"
											],
											"query": [
												{
													"key": "status",
													"value": "ACTIVE"
												},
												{
													"key": "validFrom",
													"value": "2022-01-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_RENT|name=Rental car Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer2.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product5.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_RENT_CONTRIBUTION|name=Rent Contribution Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer3.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product6.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_MEAL_PASS|name=Meal Pass Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer4.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product7.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 0\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product8.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_MEAL_PASS_RETRIBUTION|name=Meal Pass Retribution Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer5.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product9.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_MARKETING|name=Marketing Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer6.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product10.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_SIGNATURE|name=Signature Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer7.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product11.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product12.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": false,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_ENERGY_CHARGING|name=Energy Charging",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer7.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product16.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product17.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        },\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product18.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_ENERGY_CHARGING_COMMISSION|name=Energy Charging Commission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer7.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product19.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_CAMPAIGN|name=Campaign Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"offer7.cpq.code\", pm.globals.get(\"code\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"isModel\": true,\r\n    \"offerProducts\": [\r\n        {\r\n            \"product\": {\r\n                \"code\": \"{{product13.cpq.code}}\",\r\n                \"discountFlag\": false,\r\n                \"packageFlag\": false\r\n            },\r\n            \"commercialRules\": [],\r\n            \"mandatory\": true,\r\n            \"sequence\": 0\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "OF|code=OF_EMPTY|name=Empty Draft Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{name}}\",\r\n    \"disabled\": false,\r\n    \"validFrom\": \"2022-01-01\",\r\n    \"lifeCycleStatus\": \"IN_DESIGN\",\r\n    \"offerProducts\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Jasper Template Invoice and Adj",
					"item": [
						{
							"name": "createDir|path=/jasper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{path}}"
								},
								"url": {
									"raw": "{{opencell.url}}/admin/files/createDir",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"files",
										"createDir"
									]
								}
							},
							"response": []
						},
						{
							"name": "uploadZippedFileBase64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filepath\": \"{{path}}/%\",\n    \"content\": \"\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/admin/files/uploadZippedFileBase64",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"files",
										"uploadZippedFileBase64"
									]
								}
							},
							"response": []
						},
						{
							"name": "uploadZippedFileBase64 - multitax",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filepath\": \"{{path}}/%\",\n    \"content\": \"\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/admin/files/uploadZippedFileBase64",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"files",
										"uploadZippedFileBase64"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Jasper Template Quote",
					"item": [
						{
							"name": "createDir|path=/quotes/jasper",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{path}}"
								},
								"url": {
									"raw": "{{opencell.url}}/admin/files/createDir",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"files",
										"createDir"
									]
								}
							},
							"response": []
						},
						{
							"name": "uploadZippedFileBase64",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"filepath\": \"{{path}}/%\",\n    \"content\": \"\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/admin/files/uploadZippedFileBase64",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"files",
										"uploadZippedFileBase64"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "AO Matching Scripting Job",
					"item": [
						{
							"name": "createDir|path=/imports/payment/input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{path}}"
								},
								"url": {
									"raw": "{{opencell.url}}/admin/files/createDir",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"files",
										"createDir"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDir|path=/imports/payment/output",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{path}}"
								},
								"url": {
									"raw": "{{opencell.url}}/admin/files/createDir",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"files",
										"createDir"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDir|path=/imports/payment/reject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 200) {",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{path}}"
								},
								"url": {
									"raw": "{{opencell.url}}/admin/files/createDir",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"files",
										"createDir"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCRIPT|AoMatchingScript|AoMatchingScript",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code == 200 ) { tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors.length === 0; }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"name": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<ScriptInstance>\r\n        <code>org.meveo.service.script.{{request.label.1}}</code>\r\n        <description>{{request.label.2}} {{$timestamp}}</description>\r\n        <type>JAVA</type>\r\n        <script><![CDATA[\r\n        \r\npackage org.meveo.service.script.rating;\r\n\r\nimport org.apache.commons.csv.CSVFormat;\r\nimport org.apache.commons.csv.CSVParser;\r\nimport org.apache.commons.csv.CSVPrinter;\r\nimport org.apache.commons.csv.CSVRecord;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\nimport org.meveo.model.billing.TradingCurrency;\r\nimport org.meveo.model.payments.AccountOperation;\r\nimport org.meveo.model.payments.AccountOperationStatus;\r\nimport org.meveo.model.payments.CustomerAccount;\r\nimport org.meveo.model.payments.MatchingStatusEnum;\r\nimport org.meveo.model.payments.OperationCategoryEnum;\r\nimport org.meveo.model.payments.Payment;\r\nimport org.meveo.model.payments.PaymentMethodEnum;\r\nimport org.meveo.model.payments.RecordedInvoice;\r\nimport org.meveo.service.admin.impl.TradingCurrencyService;\r\nimport org.meveo.service.payments.impl.AccountOperationService;\r\nimport org.meveo.service.payments.impl.CustomerAccountService;\r\nimport org.meveo.service.payments.impl.OCCTemplateService;\r\nimport org.meveo.service.payments.impl.RecordedInvoiceService;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.api.dto.payment.PaymentDto;\r\nimport org.meveo.api.exception.BusinessApiException;\r\nimport org.meveo.api.payment.PaymentApi;\r\n\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.math.BigDecimal;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.inject.Inject;\r\n\r\npublic class AoMatchingScript extends Script {\r\n    \r\n  \tprivate final transient ParamBeanFactory paramBeanFactory = (ParamBeanFactory) getServiceInterface(ParamBeanFactory.class.getSimpleName());    \r\n    private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(AccountOperationService.class.getSimpleName());\r\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(CustomerAccountService.class.getSimpleName());\r\n    private TradingCurrencyService tradingCurrencyService = (TradingCurrencyService) getServiceInterface(TradingCurrencyService.class.getSimpleName());\r\n    private PaymentApi paymentApi = (PaymentApi) getServiceInterface(PaymentApi.class.getSimpleName());\r\n    private RecordedInvoiceService recordedInvoiceService = (RecordedInvoiceService) getServiceInterface(RecordedInvoiceService.class.getSimpleName());\r\n    \r\n    \r\n    \r\n\r\n    @Override\r\n    public void execute(Map<String, Object> context) throws BusinessException {\r\n\r\n        ParamBean param = paramBeanFactory.getInstance();\r\n        String importDir = paramBeanFactory.getChrootDir() + File.separator + \"imports\" + File.separator + \"payment\" + File.separator;\r\n        String dirIN = importDir + \"input\";\r\n\r\n        log.info(\"dirIN=\" + dirIN);\r\n\r\n        String dirOK = importDir + \"output\";\r\n        String dirKO = importDir + \"reject\";\r\n\r\n        File inputDirectory = new File(dirIN);\r\n        File[] files = inputDirectory.listFiles();\r\n\r\n        if (files != null) {\r\n            for (File file : files) {\r\n                if (file.isFile()) {\r\n                    processCsvFile(file, dirOK, dirKO);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void processCsvFile(File inputFile, String outputDir, String rejectDir) {\r\n    \tSimpleDateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\"); // Date format pattern\r\n\r\n        try (FileReader reader = new FileReader(inputFile)) {\r\n\r\n            CSVParser csvParser = CSVFormat.DEFAULT.withDelimiter(';').withTrim().parse(reader);\r\n\r\n            List<String> header = new ArrayList<>(); // Store the header row\r\n\r\n            boolean hasErrors = false; // Flag to track if any errors were encountered\r\n\r\n            for (CSVRecord csvRecord : csvParser) {\r\n                // Check and process each record\r\n                String customerAccountCode = csvRecord.get(0); // Customer Account Code\r\n                String reference = csvRecord.get(1); // Référence\r\n                String dateOperationStr = csvRecord.get(2); // Date operation\r\n                String montantStr = csvRecord.get(3); // Montant\r\n                String description = csvRecord.get(4); // Description\r\n\r\n                List<String> errors = new ArrayList<>(); // To accumulate errors\r\n\r\n                // Parse the date field\r\n                Date dateOperation = null;\r\n                try {\r\n                    dateOperation = dateFormat.parse(dateOperationStr);\r\n                } catch (ParseException e) {\r\n                    // Handle date parsing error\r\n                    errors.add(\"Error parsing date: \" + dateOperationStr);\r\n                    log.error(\"Error parsing date\");\r\n                }\r\n\r\n                // Validate Référence and Montant fields\r\n                if (reference == null || reference.isEmpty()) {\r\n                \tlog.error(\"Error: Référence is null or empty.\");\r\n                    errors.add(\"Error: Référence is null or empty.\");\r\n                }\r\n\r\n                BigDecimal montant = null;\r\n                if (montantStr == null || montantStr.isEmpty()) {\r\n                \tlog.error(\"Error: Montant is null or empty.\");\r\n                    errors.add(\"Error: Montant is null or empty.\");\r\n                } else {\r\n                    // Parse Montant to BigDecimal\r\n                    try {\r\n                        montant = new BigDecimal(montantStr);\r\n                        log.info(\"montant\"+montant);\r\n                    } catch (NumberFormatException e) {\r\n                        // Handle parsing error\r\n                        errors.add(\"Error parsing Montant: \" + montantStr);\r\n                        log.error(\"Error parsing the amount\");\r\n                    }\r\n                }\r\n\r\n                if (errors.isEmpty()) {\r\n                    // If no errors, create AccountOperation\r\n                \tPaymentDto accountOperation = new PaymentDto();\r\n                    //Payment accountOperation = new Payment();\r\n                    accountOperation.setDescription(description);\r\n                    accountOperation.setBankCollectionDate(dateOperation);\r\n                    accountOperation.setReference(reference);\r\n                    accountOperation.setAmount(montant);\r\n                    accountOperation.setTransactionDate(new Date());\r\n                    //TradingCurrency tradingCurrency = tradingCurrencyService.findById(-2L);\r\n                    accountOperation.setTransactionalcurrency(\"EUR\");\r\n                    accountOperation.setPaymentMethod(PaymentMethodEnum.DIRECTDEBIT);\r\n                    accountOperation.setCustomerAccountCode(customerAccountCode);\r\n                    accountOperation.setOccTemplateCode(\"PAY_DDT\");\r\n                    if(customerAccountCode != null && !customerAccountCode.isEmpty()) {                 \r\n                    \t\taccountOperation.setToMatching(true);\r\n                    }\r\n                    \r\n                    if(reference !=null || !reference.isEmpty()) {\r\n\t    \t\t        List<RecordedInvoice> accountOperationToMatch = recordedInvoiceService.getRecordedInvoice(reference);\r\n\t    \t\t        if (accountOperationToMatch == null || accountOperationToMatch.isEmpty()) {\r\n\t    \t\t        \taccountOperation.setListOCCReferenceforMatching(null);\r\n\t    \t\t        } else {\r\n\t    \t\t        \taccountOperation.setListOCCReferenceforMatching(Arrays.asList(reference));\r\n\t    \t\t        }\r\n                    }\r\n                    accountOperation.setDueDate(dateOperation);\r\n                    \r\n                    try {\r\n                    \tpaymentApi.createPayment(accountOperation);\r\n                    \tlog.info(\"Payment and matching done succesfully\");\r\n                    }catch(Exception e) {\r\n                    \tlog.info(e.getMessage());\r\n                      throw new BusinessException(e.getMessage());\r\n                    }\r\n\r\n                   /* CustomerAccount customerAccount = customerAccountService.findByCode(customerAccountCode);\r\n                    if (customerAccount != null) {\r\n                        accountOperation.setCustomerAccount(customerAccount);\r\n                    }\r\n                    accountOperationService.createAndReturnId(accountOperation);*/\r\n                } else {\r\n                    // If there are errors, set the flag to indicate errors\r\n                    hasErrors = true;\r\n                    log.error(\"there are errors in the file\");\r\n                    // Add error messages as a new column at the end of the record in the \"Errors\" column\r\n                    // Create a new list that includes the original fields and the error message\r\n                    List<String> recordWithErrors = new ArrayList<>();\r\n                    recordWithErrors.add(customerAccountCode);\r\n                    recordWithErrors.add(reference);\r\n                    recordWithErrors.add(dateOperationStr);\r\n                    recordWithErrors.add(montantStr);\r\n                    recordWithErrors.add(description);\r\n                    recordWithErrors.add(String.join(\"; \", errors)); // Add the error message in the last column\r\n\r\n                    try (FileWriter rejectWriter = new FileWriter(new File(rejectDir, inputFile.getName()), true)) {\r\n                        CSVPrinter rejectCsvPrinter = new CSVPrinter(rejectWriter, CSVFormat.DEFAULT.withDelimiter(';'));\r\n                        rejectCsvPrinter.printRecord(recordWithErrors);\r\n                        rejectCsvPrinter.close();\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!hasErrors) {\r\n                // If there are no errors in the file, move it to the output folder\r\n                File outputFile = new File(outputDir, inputFile.getName());\r\n                if (inputFile.renameTo(outputFile)) {\r\n                    log.info(\"Moved file to output folder: \" + outputFile.getName());\r\n                } else {\r\n                    log.error(\"Failed to move file to output folder: \" + inputFile.getName());\r\n                }\r\n            }else {\r\n                // If there are errors, delete the input file\r\n                if (inputFile.delete()) {\r\n                    log.info(\"Deleted input file: \" + inputFile.getName());\r\n                } else {\r\n                    log.error(\"Failed to delete input file: \" + inputFile.getName());\r\n                }\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n]]></script>\r\n</ScriptInstance>"
								},
								"url": {
									"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"scriptInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "JOB for AO Matching",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"name": "Content-Type",
										"value": "application/xml",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"AO_AUTO_MATCHING_JOB\",\r\n    \"disabled\": false,\r\n    \"jobCategory\": \"MEDIATION\",\r\n    \"jobTemplate\": \"ScriptingJob\",\r\n    \"active\": true,\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"ScriptingJob_script\",\r\n                \"description\": \"Script to run\",\r\n                \"fieldType\": \"ENTITY\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.scripts.ScriptInstance\",\r\n                    \"classnameCode\": null,\r\n                    \"code\": \"org.meveo.service.script.rating.AoMatchingScript\"\r\n                },\r\n                \"guiPosition\": \"tab:Configuration:0;field:0\"\r\n            },\r\n            {\r\n                \"code\": \"ScriptingJob_TransactionType\",\r\n                \"description\": \"Transaction type\",\r\n                \"fieldType\": \"LIST\",\r\n                \"stringValue\": \"REQUIRES_NEW\",\r\n                \"guiPosition\": \"tab:Configuration:0;field:2\"\r\n            }\r\n        ]\r\n    },\r\n    \"limitToSingleNode\": true,\r\n    \"verboseReport\": true,\r\n    \"jobSpeed\": \"NORMAL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/job/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Discount plan 10PERC",
					"item": [
						{
							"name": "discountPlan|DP_GLOBAL_10PERC",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"Discount plan {{request.label.1}}\",\r\n    \"defaultDuration\": null,\r\n    \"discountPlanType\": \"OFFER\",\r\n    \"durationUnit\": null,\r\n    \"startDate\": \"2022-01-01\",\r\n    \"endDate\": null,\r\n    \"customFields\": null\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "discountPlanItem|DP_GLOBAL_10PERC|DPI_GLOBAL_10PERC|PERCENTAGE|10",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{request.label.2}}\",\r\n    \"description\": \"Discount plan {{request.label.2}}\",\r\n    \"discountPlanCode\": \"{{request.label.1}}\",\r\n    \"accountingArticleCode\":\"DISC-STD\",\r\n    \"disabled\": false,\r\n    \"discountPlanItemType\": \"{{request.label.3}}\",\r\n    \"discountValue\": {{request.label.4}},\r\n    \"customFields\": null\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlanItem/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlanItem",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "discountPlan|DP_GLOBAL_10PERC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"discountPlan10PERC.id\",pm.response.json().discountPlanDto.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{request.label.1}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									],
									"query": [
										{
											"key": "discountPlanCode",
											"value": "{{request.label.1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "discountPlan|DP_GLOBAL_10PERC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"Discount plan {{request.label.1}}\",\r\n    \"discountPlanType\": \"OFFER\",\r\n       \"applicableOnDiscountedPrice\": true,\r\n    \"applicableOnOverriddenPrice\": true,\r\n    \"status\": \"ACTIVE\"\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Discount plan 5PERC",
					"item": [
						{
							"name": "discountPlan|DP_GLOBAL_5PERC",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"Discount plan {{request.label.1}}\",\r\n    \"defaultDuration\": null,\r\n    \"discountPlanType\": \"OFFER\",\r\n    \"durationUnit\": null,\r\n    \"startDate\": \"2022-01-01\",\r\n    \"endDate\": null,\r\n    \"customFields\": null\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "discountPlanItem|DP_GLOBAL_5PERC|DPI_GLOBAL_5PERC|PERCENTAGE|5",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{request.label.2}}\",\r\n    \"description\": \"Discount plan {{request.label.2}}\",\r\n    \"discountPlanCode\": \"{{request.label.1}}\",\r\n    \"accountingArticleCode\":\"DISC-STD\",\r\n    \"disabled\": false,\r\n    \"discountPlanItemType\": \"{{request.label.3}}\",\r\n    \"discountValue\": {{request.label.4}},\r\n    \"customFields\": null\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlanItem/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlanItem",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "discountPlan|DP_GLOBAL_5PERC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"discountPlan5PERC.id\",pm.response.json().discountPlanDto.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{request.label.1}}",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									],
									"query": [
										{
											"key": "discountPlanCode",
											"value": "{{request.label.1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "discountPlan|DP_GLOBAL_5PERC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{discountPlan5PERC.id}},\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"Discount plan {{request.label.1}}\",\r\n    \"discountPlanType\": \"OFFER\",\r\n    \"applicableOnDiscountedPrice\": true,\r\n    \"applicableOnOverriddenPrice\": true,\r\n    \"status\": \"ACTIVE\"\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Demo",
					"item": [
						{
							"name": "CF",
							"item": [
								{
									"name": "CFT|code=aString|type=STRING|target=PaymentMethod|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "opencell.admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "opencell.admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\": \"{{filterEL}}\",\n    \"indexType\": null,\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString|type=STRING|target=Invoice|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "opencell.admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "opencell.admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\": \"{{filterEL}}\",\n    \"indexType\": null,\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString|type=STRING|target=CommercialOrder|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "opencell.admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "opencell.admin",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\": \"{{filterEL}}\",\n    \"indexType\": null,\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString|type=STRING|target=SUB|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\":\"{{filterEL}}\",\n    \"indexType\":null,\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString|type=STRING|target=Customer|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\":\"{{filterEL}}\",\n    \"indexType\":null,\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString|type=STRING|target=CustomerAccount|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\":\"{{filterEL}}\",\n    \"indexType\":null,\n        \"guiPosition\": \"tab:CustomTab:1;fieldGroup:CustomGroup1;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString2|type=STRING|target=CustomerAccount|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\":\"{{filterEL}}\",\n    \"indexType\":null,\n        \"guiPosition\": \"tab:CustomTab:1;fieldGroup:CustomGroup2;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString3|type=STRING|target=CustomerAccount|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\":\"{{filterEL}}\",\n    \"indexType\":null,\n        \"guiPosition\": \"tab:CustomTab2:1;fieldGroup:CustomGroup1.2;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString|type=STRING|target=BillingAccount|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\":\"{{filterEL}}\",\n    \"indexType\":null,\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString|type=STRING|target=BillingAccount|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true} Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\":\"{{filterEL}}\",\n    \"indexType\":null,\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate?customFieldTemplateCode={{code}}&appliesTo={{target}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate"
											],
											"query": [
												{
													"key": "customFieldTemplateCode",
													"value": "{{code}}"
												},
												{
													"key": "appliesTo",
													"value": "{{target}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aString|type=STRING|target=Subscription|desc=A {{type}} on {{target}}|value=A {{type}} on {{target}} true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"fieldType\": \"{{type}}\",\n    \"appliesTo\": \"{{target}}\",\n    \"defaultValue\": \"{{value}}\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": false,\n    \"maxValue\": 100,\n    \"versionable\": false,\n    \"triggerEndPeriodEvent\": false,\n    \"allowEdit\": true,\n    \"hideOnNew\": false,\n    \"cacheValue\": false,\n    \"applicableOnEl\":\"{{filterEL}}\",\n    \"indexType\":null,\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aBoolean|type=BOOLEAN|target=BillingAccount|desc=A {{type}} on {{target}}|value=true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"fieldType\": \"{{type}}\",\r\n    \"appliesTo\": \"{{target}}\",\r\n    \"defaultValue\": {{value}},\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \r\n    \"versionable\": false,\r\n    \"triggerEndPeriodEvent\": false,\r\n    \"allowEdit\": true,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"applicableOnEl\":\"{{filterEL}}\",\r\n    \"indexType\":null,\r\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aBoolean|type=BOOLEAN|target=CommercialOrder|desc=A {{type}} on {{target}}|value=true|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"fieldType\": \"{{type}}\",\r\n    \"appliesTo\": \"{{target}}\",\r\n    \"defaultValue\": {{value}},\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \r\n    \"versionable\": false,\r\n    \"triggerEndPeriodEvent\": false,\r\n    \"allowEdit\": true,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"applicableOnEl\":\"{{filterEL}}\",\r\n    \"indexType\":null,\r\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aDouble|type=DOUBLE|target=BillingAccount|desc=A {{type}} on {{target}}|value=10.00|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"fieldType\": \"{{type}}\",\r\n    \"appliesTo\": \"{{target}}\",\r\n    \"defaultValue\": {{value}},\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \"maxValue\": 100.00,\r\n    \"versionable\": false,\r\n    \"triggerEndPeriodEvent\": false,\r\n    \"allowEdit\": true,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"applicableOnEl\":\"{{filterEL}}\",\r\n    \"indexType\":null,\r\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aDouble|type=DOUBLE|target=CommercialOrder|desc=A {{type}} on {{target}}|value=10.00|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"fieldType\": \"{{type}}\",\r\n    \"appliesTo\": \"{{target}}\",\r\n    \"defaultValue\": {{value}},\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \"maxValue\": 100.00,\r\n    \"versionable\": false,\r\n    \"triggerEndPeriodEvent\": false,\r\n    \"allowEdit\": true,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"applicableOnEl\":\"{{filterEL}}\",\r\n    \"indexType\":null,\r\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=aLong|type=LONG|target=BillingAccount|desc=A {{type}} on {{target}}|value=100|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"fieldType\": \"{{type}}\",\r\n    \"appliesTo\": \"{{target}}\",\r\n    \"defaultValue\": {{value}},\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \"maxValue\": 1000,\r\n    \"versionable\": false,\r\n    \"triggerEndPeriodEvent\": false,\r\n    \"allowEdit\": true,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"applicableOnEl\":\"{{filterEL}}\",\r\n    \"indexType\":null,\r\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CFT|code=anURL|type=URL|target=Invoice|desc=A {{type}} on {{target}}|value=https://opencellsoft.com/fr/|filterEL=#{true}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");\r",
													"var index = pm.globals.get(\"index\");\r",
													"\r",
													"if (typeof index === 'undefined') {\r",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");\r",
													"    pm.globals.set(\"index\", \"00\");\r",
													"    index = \"00\";\r",
													"}\r",
													"\r",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";\r",
													"var suffix = \" \" + prefix + index;\r",
													"\r",
													"switch (parts.length) {\r",
													"    case 1:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 2:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", \"\");\r",
													"        pm.globals.set(\"account.lastname\", \"\");\r",
													"        break;\r",
													"    case 3:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[1]);\r",
													"        pm.globals.set(\"account.lastname\", parts[2]);\r",
													"        break;\r",
													"    case 4:\r",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);\r",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);\r",
													"        pm.globals.set(\"account.firstname\", parts[2]);\r",
													"        pm.globals.set(\"account.lastname\", parts[3]);\r",
													"        break;\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"{{desc}}\",\r\n    \"fieldType\": \"{{type}}\",\r\n    \"appliesTo\": \"{{target}}\",\r\n    \"defaultValue\": \"{{value}}\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \"maxValue\": 1000,\r\n    \"versionable\": false,\r\n    \"triggerEndPeriodEvent\": false,\r\n    \"allowEdit\": true,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"applicableOnEl\":\"{{filterEL}}\",\r\n    \"indexType\":null,\r\n    \"guiPosition\": \"tab:CF_DEMO:0;field:1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 000  - Basic",
							"item": [
								{
									"name": "00|MarcBasic|LicenceD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue du passage des clous\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "TEST Boolean on BA Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{account.code}}\",\r\n    \"customerAccount\": \"{{account.code}}\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"isCompany\": true,\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"aBoolean\",\r\n                \"booleanValue\": true\r\n            }\r\n        ]\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\":\"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n        \"bankCoordinates\": {\n            \"bankCode\": \"BANK\",\n            \"branchCode\": \"BRANC\",\n            \"accountNumber\": \"ACCOUNT_NUM\",\n            \"key\": \"KE\",\n            \"iban\": \"IBAN_NEW\",\n            \"bic\": \"BIC\",\n            \"accountOwner\": \"ACCOUNT_OWNER\",\n            \"bankName\": \"BANK_NAME\",\n            \"bankId\": \"ID\",\n            \"issuerNumber\": \"ISSUER_NUMBER\",\n            \"issuerName\": \"ISSUER_NAME\",\n            \"ics\": \"ICS\"\n        },\n    \"mandateIdentification\": \"RUM\",\n    \"customFields\":{\n        \"customField\": [\n            {\n            \"code\":\"aString\",\n            \"stringValue\": \"IBAN_TEST\"\n            }\n        ]\n    },\n    \"mandateDate\": \"2017-10-01\"\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod WIRETRANSFERT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\":\"{{account.code}}\",\n    \"paymentMethodType\": \"WIRETRANSFER\",\n    \"alias\": \"PAY_WIRETRANSFERT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n        \"bankCoordinates\": {\n            \"bankCode\": \"BANK\",\n            \"branchCode\": \"BRANC\",\n            \"accountNumber\": \"ACCOUNT_NUM\",\n            \"key\": \"KE\",\n            \"iban\": \"IBAN_NEW\",\n            \"bic\": \"BIC\",\n            \"accountOwner\": \"ACCOUNT_OWNER\",\n            \"bankName\": \"BANK_NAME\",\n            \"bankId\": \"ID\",\n            \"issuerNumber\": \"ISSUER_NUMBER\",\n            \"issuerName\": \"ISSUER_NAME\",\n            \"ics\": \"ICS\"\n        },\n    \"mandateIdentification\": \"RUM\",\n    \"customFields\":{\n        \"customField\": [\n            {\n            \"code\":\"aString\",\n            \"stringValue\": \"IBAN_TEST\"\n            }\n        ]\n    },\n    \"mandateDate\": \"2017-10-01\"\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\":\"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n        \"bankCoordinates\": {\n            \"bankCode\": \"BANK\",\n            \"branchCode\": \"BRANC\",\n            \"accountNumber\": \"ACCOUNT_NUM\",\n            \"key\": \"KE\",\n            \"iban\": \"IBAN\",\n            \"bic\": \"BIC\",\n            \"accountOwner\": \"ACCOUNT_OWNER\",\n            \"bankName\": \"BANK_NAME\",\n            \"bankId\": \"ID\",\n            \"issuerNumber\": \"ISSUER_NUMBER\",\n            \"issuerName\": \"ISSUER_NAME\",\n            \"ics\": \"ICS\"\n        },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod?id={{paymentMethod.id}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											],
											"query": [
												{
													"key": "id",
													"value": "{{paymentMethod.id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "QUOTE000",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"quote.code\", pm.globals.get(\"account.code\")+\"-\"+pm.globals.get(\"request.label.0\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"quotecode\",pm.response.json().quoteDto.code);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{quote.code}}\",\r\n    \"description\": \"This is a quote test description\",\r\n    \"quoteDate\": \"2020-12-14\",\r\n    \"applicantAccountCode\": \"{{account.code}}\",\r\n    \"billableAccountCode\": \"{{account.code}}\",\r\n    \"userAccountCode\": \"{{account.code}}\",\r\n    \"sellerCode\": \"{{seller.code}}\",\r\n    \"quoteVersion\": {\r\n        \"shortDescription\": \"Quote version description\",\r\n        \"currentVersion\": 1,\r\n        \"statusDate\": \"2020-12-14\",\r\n        \"startDate\": \"2020-12-14\",\r\n        \"endDate\": \"2020-12-31\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Quote Items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"offerOneId}\",pm.response.json().quoteOfferDto.quoteOfferId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quoteCode\": \"{{quote.code}}\",\r\n    \"quoteVersion\": 1,\r\n    \"offerCode\": \"{{offer.cpq..code}}\",\r\n    \"products\": [\r\n        {\r\n            \"quoteCode\": \"{{quote.code}}\",\r\n            \"productCode\": \"{{product1.cpq.code}}\",\r\n            \"quoteVersion\": 0,\r\n            \"productVersion\": 1,\r\n            \"quantity\": 1.000000000000,\r\n            \"productAttributes\": [],\r\n            \"accountingArticlePrices\": []\r\n        },\r\n        {\r\n            \"quoteCode\": \"{{quote.code}}\",\r\n            \"productCode\": \"{{product2.cpq.code}}\",\r\n            \"quoteVersion\": 0,\r\n            \"productVersion\": 1,\r\n            \"quantity\": 1.000000000000,\r\n            \"productAttributes\": [],\r\n            \"accountingArticlePrices\": []\r\n        },\r\n        {\r\n            \"quoteCode\": \"{{quote.code}}\",\r\n            \"productCode\": \"{{product3.cpq.code}}\",\r\n            \"quoteVersion\": 0,\r\n            \"productVersion\": 1,\r\n            \"quantity\": 1.000000000000,\r\n            \"productAttributes\": [\r\n                {\r\n                    \"quoteAttributeCode\": \"Project phase\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"Build\"\r\n                }\r\n            ],\r\n            \"accountingArticlePrices\": []\r\n        },\r\n        {\r\n            \"quoteCode\": \"{{quote.code}}\",\r\n            \"productCode\": \"{{product4.cpq.code}}\",\r\n            \"quoteVersion\": 0,\r\n            \"productVersion\": 1,\r\n            \"quantity\": 1.000000000000,\r\n            \"productAttributes\": [],\r\n            \"accountingArticlePrices\": []\r\n        },\r\n        {\r\n            \"quoteCode\": \"{{quote.code}}\",\r\n            \"productCode\": \"{{product14.cpq.code}}\",\r\n            \"quoteVersion\": 0,\r\n            \"productVersion\": 1,\r\n            \"quantity\": 1.000000000000,\r\n            \"productAttributes\": [],\r\n            \"accountingArticlePrices\": []\r\n        }\r\n    ],\r\n    \"offerAttributes\": [],\r\n    \"prices\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/quoteItems",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"quoteItems"
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish The Quote Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/quoteVersions/{{quote.code}}/1/status/PUBLISHED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"quoteVersions",
												"{{quote.code}}",
												"1",
												"status",
												"PUBLISHED"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve The Quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/{{quote.code}}/status/APPROVED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"{{quote.code}}",
												"status",
												"APPROVED"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept the quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/{{quote.code}}/status/ACCEPTED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"{{quote.code}}",
												"status",
												"ACCEPTED"
											]
										}
									},
									"response": []
								},
								{
									"name": "List All Commercial Orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"orderid\",pm.response.json().commercialOrderDtos[0].id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"quoteCode\": \"{{quote.code}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Commercial Order User000",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"orderTwoNumber\", pm.response.json().commercialOrderDto.orderNumber);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders/{{orderid}}/orderValidation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders",
												"{{orderid}}",
												"orderValidation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get subscription ID user 00",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"subscription.code.user000\",pm.response.json().data[0].code);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"genericFields\": [\r\n        \"code\",\r\n        \"status\",\r\n        \"subscriptionDate\",\r\n        \"endAgreementDate\",\r\n        \"description\",\r\n        \"validity.from\",\r\n        \"validity.to\",\r\n        \"versionNumber\",\r\n        \"id\"\r\n    ],\r\n    \"nestedEntities\": [],\r\n    \"filters\": {\r\n        \"userAccount.billingAccount.code\": \"OPENSOFT-00\"\r\n    },\r\n    \"limit\": 1,\r\n    \"offset\": 0,\r\n    \"sortBy\": \"id\",\r\n    \"sortOrder\": \"ASCENDING\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/v2/generic/all/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"generic",
												"all",
												"subscription"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 001 -  Rent Contribution",
							"item": [
								{
									"name": "01|FinalUserRent|ContributionToRent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue Guerdou\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\":\"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n        \"bankCoordinates\": {\n            \"bankCode\": \"BANK\",\n            \"branchCode\": \"BRANC\",\n            \"accountNumber\": \"ACCOUNT_NUM\",\n            \"key\": \"KE\",\n            \"iban\": \"IBAN\",\n            \"bic\": \"BIC\",\n            \"accountOwner\": \"ACCOUNT_OWNER\",\n            \"bankName\": \"BANK_NAME\",\n            \"bankId\": \"ID\",\n            \"issuerNumber\": \"ISSUER_NUMBER\",\n            \"issuerName\": \"ISSUER_NAME\",\n            \"ics\": \"ICS\"\n        },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "QUOTE01",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"quote.code\", pm.globals.get(\"account.code\")+\"-\"+pm.globals.get(\"request.label.0\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"quotecode\",pm.response.json().quoteDto.code);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{quote.code}}\",\r\n    \"description\": \"This is a quote test description\",\r\n    \"quoteDate\": \"2020-12-14\",\r\n    \"applicantAccountCode\": \"{{account.code}}\",\r\n    \"billableAccountCode\": \"{{account.code}}\",\r\n    \"userAccountCode\": \"{{account.code}}\",\r\n    \"sellerCode\": \"{{seller.code}}\",\r\n    \"quoteVersion\": {\r\n        \"shortDescription\": \"Quote version description\",\r\n        \"currentVersion\": 1,\r\n        \"statusDate\": \"2020-12-14\",\r\n        \"startDate\": \"2020-12-14\",\r\n        \"endDate\": \"2020-12-31\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Quote Items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"offerOneId}\",pm.response.json().quoteOfferDto.quoteOfferId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quoteCode\": \"{{quote.code}}\",\r\n    \"quoteVersion\": 1,\r\n    \"offerCode\": \"{{offer3.cpq.code}}\",\r\n    \"products\": [\r\n        {\r\n            \"quoteCode\": \"{{quote.code}}\",\r\n            \"productCode\": \"{{product6.cpq.code}}\",\r\n            \"quoteVersion\": 0,\r\n            \"productVersion\": 1,\r\n            \"quantity\": 1.000000000000,\r\n            \"productAttributes\": [],\r\n            \"accountingArticlePrices\": []\r\n        }\r\n    ],\r\n    \"offerAttributes\": [],\r\n    \"prices\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/quoteItems",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"quoteItems"
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish The Quote Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/quoteVersions/{{quote.code}}/1/status/PUBLISHED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"quoteVersions",
												"{{quote.code}}",
												"1",
												"status",
												"PUBLISHED"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve The Quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/{{quote.code}}/status/APPROVED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"{{quote.code}}",
												"status",
												"APPROVED"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept the quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/{{quote.code}}/status/ACCEPTED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"{{quote.code}}",
												"status",
												"ACCEPTED"
											]
										}
									},
									"response": []
								},
								{
									"name": "List All Commercial Orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"orderid\",pm.response.json().commercialOrderDtos[0].id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"quoteCode\": \"{{quote.code}}\"\r\n    },\r\n    \"fields\":\"commercialOrderDtos.id\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Commercial Order User001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"orderTwoNumber\", pm.response.json().commercialOrderDto.orderNumber);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders/{{orderid}}/orderValidation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders",
												"{{orderid}}",
												"orderValidation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the Commercial Orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders/{{orderTwoNumber}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders",
												"{{orderTwoNumber}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get subscription ID user 001",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"subscription.code.user001\",pm.response.json().data[0].code);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"genericFields\": [\r\n        \"code\",\r\n        \"status\",\r\n        \"subscriptionDate\",\r\n        \"endAgreementDate\",\r\n        \"description\",\r\n        \"validity.from\",\r\n        \"validity.to\",\r\n        \"versionNumber\",\r\n        \"id\"\r\n    ],\r\n    \"nestedEntities\": [],\r\n    \"filters\": {\r\n        \"userAccount.billingAccount.code\": \"OPENSOFT-01\"\r\n    },\r\n    \"limit\": 1,\r\n    \"offset\": 0,\r\n    \"sortBy\": \"id\",\r\n    \"sortOrder\": \"ASCENDING\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/v2/generic/all/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"generic",
												"all",
												"subscription"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 002 - Rent Usage",
							"item": [
								{
									"name": "Contract",
									"item": [
										{
											"name": "02|UserCompanyRent|TransportM3",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var parts = pm.variables.get(\"request.label\").split(\"|\");",
															"var index = pm.globals.get(\"index\");",
															"",
															"if (typeof index === 'undefined') {",
															"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
															"    pm.globals.set(\"index\", \"00\");",
															"    index = \"00\";",
															"}",
															"",
															"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
															"var suffix = \" \" + prefix + index;",
															"",
															"switch (parts.length) {",
															"    case 1:",
															"        pm.globals.set(\"account.code\", prefix + parts[0]);",
															"        pm.globals.set(\"account.description\", parts[0] + suffix);",
															"        pm.globals.set(\"account.firstname\", \"\");",
															"        pm.globals.set(\"account.lastname\", \"\");",
															"        break;",
															"    case 2:",
															"        pm.globals.set(\"account.code\", prefix + parts[0]);",
															"        pm.globals.set(\"account.description\", parts[1] + suffix);",
															"        pm.globals.set(\"account.firstname\", \"\");",
															"        pm.globals.set(\"account.lastname\", \"\");",
															"        break;",
															"    case 3:",
															"        pm.globals.set(\"account.code\", prefix + parts[0]);",
															"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
															"        pm.globals.set(\"account.firstname\", parts[1]);",
															"        pm.globals.set(\"account.lastname\", parts[2]);",
															"        break;",
															"    case 4:",
															"        pm.globals.set(\"account.code\", prefix + parts[0]);",
															"        pm.globals.set(\"account.description\", parts[1] + suffix);",
															"        pm.globals.set(\"account.firstname\", parts[2]);",
															"        pm.globals.set(\"account.lastname\", parts[3]);",
															"        break;",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue nuage\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"account",
														"accountHierarchy",
														"createOrUpdateCRMAccountHierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create New Contract",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"CONTRACT_AGREEMENT\",\r\n    \"description\": \"This is the contract \",\r\n    \"contractAccountLevel\": \"CUSTOMER_ACCOUNT\",\r\n    \"accountCode\": \"{{account.code}}\",\r\n    \"contractDate\": \"2021-01-01\",\r\n    \"beginDate\": \"2021-01-01\",\r\n    \"endDate\": \"2030-12-31\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/cpq/contracts",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"cpq",
														"contracts"
													]
												},
												"description": "Creating a new contract"
											},
											"response": []
										},
										{
											"name": "Find The Contract",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/cpq/contracts/CONTRACT_AGREEMENT",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"cpq",
														"contracts",
														"CONTRACT_AGREEMENT"
													]
												},
												"description": "Find a Contract type by contractCode"
											},
											"response": []
										},
										{
											"name": "Create Contract Line CH_OSS_BOOKING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"CONTRACT_AGREEMENT_LINE_1\",\r\n    \"description\": \"The contract line test description\",\r\n    \"contractCode\": \"CONTRACT_AGREEMENT\",\r\n    \"offerTemplateCode\": \"{{offer2.cpq.code}}\",\r\n    \"productCode\": \"PR_USAGE_RENT\",\r\n    \"chargeTemplateCode\": \"CH_OSS_BOOKING\",\r\n    \"rate\": 50,\r\n    \"contractRateType\": \"PERCENTAGE\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/cpq/contracts/contractLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"cpq",
														"contracts",
														"contractLines"
													]
												},
												"description": "Creating a new contract Line"
											},
											"response": []
										},
										{
											"name": "Create Contract Line CH_OSS_INSURANCE",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"code\": \"CONTRACT_AGREEMENT_LINE_2\",\r\n    \"description\": \"The contract line test description\",\r\n    \"contractCode\": \"CONTRACT_AGREEMENT\",\r\n    \"offerTemplateCode\": \"{{offer2.cpq.code}}\",\r\n    \"productCode\": \"PR_USAGE_RENT\",\r\n    \"chargeTemplateCode\": \"CH_OSS_INSURANCE\",\r\n    \"rate\": 0,\r\n    \"amountWithoutTax\": 6.000000000000,\r\n    \"contractRateType\": \"FIXED\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/cpq/contracts/contractLines",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"cpq",
														"contracts",
														"contractLines"
													]
												},
												"description": "Creating a new contract Line"
											},
											"response": []
										},
										{
											"name": "Activate The Contract",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{opencell.url}}/cpq/contracts/CONTRACT_AGREEMENT/status/ACTIVE",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"cpq",
														"contracts",
														"CONTRACT_AGREEMENT",
														"status",
														"ACTIVE"
													]
												},
												"description": "Find a Contract type by contractCode"
											},
											"response": []
										}
									]
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\":\"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n        \"bankCoordinates\": {\n            \"bankCode\": \"BANK\",\n            \"branchCode\": \"BRANC\",\n            \"accountNumber\": \"ACCOUNT_NUM\",\n            \"key\": \"KE\",\n            \"iban\": \"IBAN\",\n            \"bic\": \"BIC\",\n            \"accountOwner\": \"ACCOUNT_OWNER\",\n            \"bankName\": \"BANK_NAME\",\n            \"bankId\": \"ID\",\n            \"issuerNumber\": \"ISSUER_NUMBER\",\n            \"issuerName\": \"ISSUER_NAME\",\n            \"ics\": \"ICS\"\n        },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "QUOTE02",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"quote.code\", pm.globals.get(\"account.code\")+\"-\"+pm.globals.get(\"request.label.0\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"quotecode\",pm.response.json().quoteDto.code);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{quote.code}}\",\r\n    \"description\": \"This is a quote test description\",\r\n    \"quoteDate\": \"2020-12-14\",\r\n    \"applicantAccountCode\": \"{{account.code}}\",\r\n    \"billableAccountCode\": \"{{account.code}}\",\r\n    \"userAccountCode\": \"{{account.code}}\",\r\n    \"sellerCode\": \"{{seller.code}}\",\r\n    \"quoteVersion\": {\r\n        \"shortDescription\": \"Quote version description\",\r\n        \"currentVersion\": 1,\r\n        \"statusDate\": \"2020-12-14\",\r\n        \"startDate\": \"2020-12-14\",\r\n        \"endDate\": \"2020-12-31\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Quote Items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"offerOneId}\",pm.response.json().quoteOfferDto.quoteOfferId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quoteCode\": \"{{quote.code}}\",\r\n    \"quoteVersion\": 1,\r\n    \"offerCode\": \"{{offer2.cpq.code}}\",\r\n    \"products\": [\r\n        {\r\n            \"quoteCode\": \"{{quote.code}}\",\r\n            \"productCode\": \"{{product5.cpq.code}}\",\r\n            \"quoteVersion\": 0,\r\n            \"productVersion\": 1,\r\n            \"quantity\": 1.000000000000,\r\n            \"productAttributes\": [\r\n                {\r\n                    \"quoteAttributeCode\": \"VEHICLE_CATEGORY\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"CATA\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"CHILD_SEAT\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"true\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"UNLIMITED_KM\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"true\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"CHILD_SEAT_FEE\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"doubleValue\": 29.0\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"INSURANCE\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"true\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"VEHICLE_DELIVERY\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"FORMULE_1\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"PREMIUM_BOOKING\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"true\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"USER_CONTRACT_CODE\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"{{subscription.code.user001}}\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"FUEL_REFILL\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"false\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"FROM_ZONE_EL\",\r\n                    \"stringValue\": \"#{op.edr.parameter1}\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"TO_ZONE_EL\",\r\n                    \"stringValue\": \"#{op.edr.parameter3}\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"DISTANCE_EL\",\r\n                    \"stringValue\": \"0\"\r\n                }\r\n            ],\r\n            \"accountingArticlePrices\": []\r\n        }\r\n    ],\r\n    \"offerAttributes\": [],\r\n    \"prices\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/quoteItems",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"quoteItems"
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish The Quote Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/quoteVersions/{{quote.code}}/1/status/PUBLISHED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"quoteVersions",
												"{{quote.code}}",
												"1",
												"status",
												"PUBLISHED"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve The Quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/{{quote.code}}/status/APPROVED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"{{quote.code}}",
												"status",
												"APPROVED"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept the quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/{{quote.code}}/status/ACCEPTED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"{{quote.code}}",
												"status",
												"ACCEPTED"
											]
										}
									},
									"response": []
								},
								{
									"name": "List All Commercial Orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"orderid\",pm.response.json().commercialOrderDtos[0].id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"quoteCode\": \"{{quote.code}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Commercial Order User002",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"orderTwoNumber\", pm.response.json().commercialOrderDto.orderNumber);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders/{{orderid}}/orderValidation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders",
												"{{orderid}}",
												"orderValidation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get subscription ID user 002",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"subscription.code.user002\",pm.response.json().data[0].code);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"genericFields\": [\r\n        \"code\",\r\n        \"status\",\r\n        \"subscriptionDate\",\r\n        \"endAgreementDate\",\r\n        \"description\",\r\n        \"validity.from\",\r\n        \"validity.to\",\r\n        \"versionNumber\",\r\n        \"id\"\r\n    ],\r\n    \"nestedEntities\": [],\r\n    \"filters\": {\r\n        \"userAccount.billingAccount.code\": \"OPENSOFT-02\"\r\n    },\r\n    \"limit\": 1,\r\n    \"offset\": 0,\r\n    \"sortBy\": \"id\",\r\n    \"sortOrder\": \"ASCENDING\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/v2/generic/all/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"generic",
												"all",
												"subscription"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 003 - Meal Pass ( Final Company)",
							"item": [
								{
									"name": "03|MealPassCatCare|Company",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue Jean \",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\": \"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n    \"bankCoordinates\": {\n        \"bankCode\": \"BANK\",\n        \"branchCode\": \"BRANC\",\n        \"accountNumber\": \"ACCOUNT_NUM\",\n        \"key\": \"KE\",\n        \"iban\": \"IBAN_2\",\n        \"bic\": \"BIC\",\n        \"accountOwner\": \"ACCOUNT_OWNER\",\n        \"bankName\": \"BANK_NAME\",\n        \"bankId\": \"ID\",\n        \"issuerNumber\": \"ISSUER_NUMBER\",\n        \"issuerName\": \"ISSUER_NAME\",\n        \"ics\": \"ICS\"\n    },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\":\"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n        \"bankCoordinates\": {\n            \"bankCode\": \"BANK\",\n            \"branchCode\": \"BRANC\",\n            \"accountNumber\": \"ACCOUNT_NUM\",\n            \"key\": \"KE\",\n            \"iban\": \"IBAN\",\n            \"bic\": \"BIC\",\n            \"accountOwner\": \"ACCOUNT_OWNER\",\n            \"bankName\": \"BANK_NAME\",\n            \"bankId\": \"ID\",\n            \"issuerNumber\": \"ISSUER_NUMBER\",\n            \"issuerName\": \"ISSUER_NAME\",\n            \"ics\": \"ICS\"\n        },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}\n"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod?id={{paymentMethod.id}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											],
											"query": [
												{
													"key": "id",
													"value": "{{paymentMethod.id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "QUOTE03",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"quote.code\", pm.globals.get(\"account.code\")+\"-\"+pm.globals.get(\"request.label.0\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"quotecode\",pm.response.json().quoteDto.code);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{quote.code}}\",\r\n    \"description\": \"This is a quote test description\",\r\n    \"quoteDate\": \"2020-12-14\",\r\n    \"applicantAccountCode\": \"{{account.code}}\",\r\n    \"billableAccountCode\": \"{{account.code}}\",\r\n    \"userAccountCode\": \"{{account.code}}\",\r\n    \"sellerCode\": \"{{seller.code}}\",\r\n    \"quoteVersion\": {\r\n        \"shortDescription\": \"Quote version description\",\r\n        \"currentVersion\": 1,\r\n        \"statusDate\": \"2020-12-14\",\r\n        \"startDate\": \"2020-12-14\",\r\n        \"endDate\": \"2020-12-31\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Quote Items",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"offerOneId}\",pm.response.json().quoteOfferDto.quoteOfferId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"quoteCode\": \"{{quote.code}}\",\r\n    \"quoteVersion\": 1,\r\n    \"offerCode\": \"{{offer4.cpq.code}}\",\r\n    \"products\": [\r\n        {\r\n            \"quoteCode\": \"{{quote.code}}\",\r\n            \"productCode\": \"{{product7.cpq.code}}\",\r\n            \"quoteVersion\": 0,\r\n            \"productVersion\": 1,\r\n            \"quantity\": 50.000000000000,\r\n            \"productAttributes\": [\r\n                {\r\n                    \"quoteAttributeCode\": \"MEAL_PASS\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"CARD\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"MEAL_PASS_DELIVERY_FEES\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"stringValue\": \"true\"\r\n                },\r\n                {\r\n                    \"quoteAttributeCode\": \"MEAL_PASS_DELIVERY_FEES_PROMO_VALUE\",\r\n                    \"linkedQuoteAttribute\": [],\r\n                    \"doubleValue\": 10.0\r\n                }\r\n            ],\r\n            \"accountingArticlePrices\": []\r\n        }\r\n    ],\r\n    \"offerAttributes\": [],\r\n    \"prices\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/quoteItems",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"quoteItems"
											]
										}
									},
									"response": []
								},
								{
									"name": "Publish The Quote Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/quoteVersions/{{quote.code}}/1/status/PUBLISHED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"quoteVersions",
												"{{quote.code}}",
												"1",
												"status",
												"PUBLISHED"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve The Quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/{{quote.code}}/status/APPROVED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"{{quote.code}}",
												"status",
												"APPROVED"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept the quote",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/cpq/quotes/{{quote.code}}/status/ACCEPTED",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"cpq",
												"quotes",
												"{{quote.code}}",
												"status",
												"ACCEPTED"
											]
										}
									},
									"response": []
								},
								{
									"name": "List All Commercial Orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"orderid\",pm.response.json().commercialOrderDtos[0].id);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"quoteCode\": \"{{quote.code}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Commercial Order 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"orderTwoNumber\", pm.response.json().commercialOrderDto.orderNumber);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders/{{orderid}}/orderValidation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders",
												"{{orderid}}",
												"orderValidation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the Commercial Orders",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{opencell.url}}/orderManagement/commercialOrders/{{orderTwoNumber}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"commercialOrders",
												"{{orderTwoNumber}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get subscription ID user 003",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"subscription.code.user003\",pm.response.json().data[0].code);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"genericFields\": [\r\n        \"code\",\r\n        \"status\",\r\n        \"subscriptionDate\",\r\n        \"endAgreementDate\",\r\n        \"description\",\r\n        \"validity.from\",\r\n        \"validity.to\",\r\n        \"versionNumber\",\r\n        \"id\"\r\n    ],\r\n    \"nestedEntities\": [],\r\n    \"filters\": {\r\n        \"userAccount.billingAccount.code\": \"OPENSOFT-03\"\r\n    },\r\n    \"limit\": 1,\r\n    \"offset\": 0,\r\n    \"sortBy\": \"id\",\r\n    \"sortOrder\": \"ASCENDING\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/v2/generic/all/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"generic",
												"all",
												"subscription"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 003.1 -  Meal Pass Restaurant USAGE",
							"item": [
								{
									"name": "03.1|MealPassSushi|Restaurant",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue des version\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\": \"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n    \"bankCoordinates\": {\n        \"bankCode\": \"BANK\",\n        \"branchCode\": \"BRANC\",\n        \"accountNumber\": \"ACCOUNT_NUM\",\n        \"key\": \"KE\",\n        \"iban\": \"IBAN_2\",\n        \"bic\": \"BIC\",\n        \"accountOwner\": \"ACCOUNT_OWNER\",\n        \"bankName\": \"BANK_NAME\",\n        \"bankId\": \"ID\",\n        \"issuerNumber\": \"ISSUER_NUMBER\",\n        \"issuerName\": \"ISSUER_NAME\",\n        \"ics\": \"ICS\"\n    },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER003.1\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_MEAL_PASS\",\n    \"subscriptionDate\": \"2022-09-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n        {\n            \"productCode\": \"PR_MEAL_PASS_USAGE_AMOUNT\",\n            \"quantity\": 1.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER003.1\",\n    \"subscriptionValidityDate\": \"2022-09-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_MEAL_PASS_USAGE_AMOUNT\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 003.2 -  Meal Pass Partner Retribution",
							"item": [
								{
									"name": "03.2|MealPassPartner|Retribution",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue des version\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\": \"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n    \"bankCoordinates\": {\n        \"bankCode\": \"BANK\",\n        \"branchCode\": \"BRANC\",\n        \"accountNumber\": \"ACCOUNT_NUM\",\n        \"key\": \"KE\",\n        \"iban\": \"IBAN_2\",\n        \"bic\": \"BIC\",\n        \"accountOwner\": \"ACCOUNT_OWNER\",\n        \"bankName\": \"BANK_NAME\",\n        \"bankId\": \"ID\",\n        \"issuerNumber\": \"ISSUER_NUMBER\",\n        \"issuerName\": \"ISSUER_NAME\",\n        \"ics\": \"ICS\"\n    },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER003.2\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_MEAL_PASS_RETRIBUTION\",\n    \"subscriptionDate\": \"2022-09-01\",\n    \"status\": \"ACTIVE\",\n\n\n    \"productToInstantiateDto\": [\n        {\n            \"productCode\": \"PR_PARTNER_MEAL_PASS_RETRIBUTION\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"MEAL_PASS_CARD_RETRIBUTION_PERC\",\n                    \"stringValue\": \"2.5\"\n                },\n                {\n                    \"orderAttributeCode\": \"MEAL_PASS_CHECK_RETRIBUTION_PERC\",\n                    \"stringValue\": \"6\"\n                }\n            ]\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER003.2\",\n    \"subscriptionValidityDate\": \"2022-09-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_PARTNER_MEAL_PASS_RETRIBUTION\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 004 - GoForVersion",
							"item": [
								{
									"name": "04|GoForVersion|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue des version\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\": \"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n    \"bankCoordinates\": {\n        \"bankCode\": \"BANK\",\n        \"branchCode\": \"BRANC\",\n        \"accountNumber\": \"ACCOUNT_NUM\",\n        \"key\": \"KE\",\n        \"iban\": \"IBAN_2\",\n        \"bic\": \"BIC\",\n        \"accountOwner\": \"ACCOUNT_OWNER\",\n        \"bankName\": \"BANK_NAME\",\n        \"bankId\": \"ID\",\n        \"issuerNumber\": \"ISSUER_NUMBER\",\n        \"issuerName\": \"ISSUER_NAME\",\n        \"ics\": \"ICS\"\n    },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER004_VERSION1\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_BASIC\",\n    \"subscriptionDate\": \"2022-09-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n        {\n            \"productCode\": \"PR_TRAINING\",\n            \"quantity\": 10.000000000000\n        },\n        {\n            \"productCode\": \"PR_USAGE\",\n            \"quantity\": 1.000000000000\n        },\n        {\n            \"productCode\": \"PR_BUILD_RUN_RECURRING\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"Project phase\",\n                    \"stringValue\": \"Build\"\n                }\n            ]\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER004_VERSION1\",\n    \"subscriptionValidityDate\": \"2022-09-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_BUILD_RUN_RECURRING\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            },\n            {\n                \"code\": \"PR_TRAINING\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            },\n            {\n                \"code\": \"PR_USAGE\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Path Subscription Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"newSubscriptionCode\": \"MANUAL_SUB_CUSTOMER004_VERSION1\",\n    \"terminateOldSubscription\": true,\n    \"updateSubscriptionDate\": true,\n    \"offerTemplate\": \"OF_BASIC\",\n    \"terminationReason\": \"TR_NONE\",\n    \"effectiveDate\":\"2022-09-05\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_TRAINING\",\n                \"quantity\": 2.000000000000,\n                \"attributeInstances\": []\n            },\n            {\n                \"code\": \"PR_BUILD_RUN_RECURRING\",\n                \"quantity\": 1.000000000000,\n                \"attributeInstances\": [\n                    {\n                        \"attributeCode\": \"Project phase\",\n                        \"stringValue\": \"Run\"\n                    }\n                ]\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/MANUAL_SUB_CUSTOMER004_VERSION1/offer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"MANUAL_SUB_CUSTOMER004_VERSION1",
												"offer"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 005 - WorkForSignature",
							"item": [
								{
									"name": "05|WorkForSignature|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue des Signature\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\": \"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n    \"bankCoordinates\": {\n        \"bankCode\": \"BANK\",\n        \"branchCode\": \"BRANC\",\n        \"accountNumber\": \"ACCOUNT_NUM\",\n        \"key\": \"KE\",\n        \"iban\": \"IBAN_2\",\n        \"bic\": \"BIC\",\n        \"accountOwner\": \"ACCOUNT_OWNER\",\n        \"bankName\": \"BANK_NAME\",\n        \"bankId\": \"ID\",\n        \"issuerNumber\": \"ISSUER_NUMBER\",\n        \"issuerName\": \"ISSUER_NAME\",\n        \"ics\": \"ICS\"\n    },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER005\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_SIGNATURE\",\n    \"subscriptionDate\": \"2022-09-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n        {\n            \"productCode\": \"PR_SIGNATURE\",\n            \"quantity\": 1.000000000000, \n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"SIGNATURE_PACK\",\n                    \"stringValue\": \"1000\"\n                },{\n                    \"orderAttributeCode\": \"SIGNATURE_PACK_DISCOUNT_VALUE\",\n                    \"stringValue\": \"10\"\n                }\n            ]\n        },\n        {\n            \"productCode\": \"PR_SIGNATURE_CACHET\",\n            \"quantity\": 1.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER005\",\n    \"subscriptionValidityDate\": \"2022-09-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_SIGNATURE\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            },\n            {\n                \"code\": \"PR_SIGNATURE_CACHET\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 006 - Campaign Boost",
							"item": [
								{
									"name": "Subscription",
									"item": [
										{
											"name": "06|CampainBoost|Cie",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var parts = pm.variables.get(\"request.label\").split(\"|\");",
															"var index = pm.globals.get(\"index\");",
															"",
															"if (typeof index === 'undefined') {",
															"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
															"    pm.globals.set(\"index\", \"00\");",
															"    index = \"00\";",
															"}",
															"",
															"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
															"var suffix = \" \" + prefix + index;",
															"",
															"switch (parts.length) {",
															"    case 1:",
															"        pm.globals.set(\"account.code\", prefix + parts[0]);",
															"        pm.globals.set(\"account.description\", parts[0] + suffix);",
															"        pm.globals.set(\"account.firstname\", \"\");",
															"        pm.globals.set(\"account.lastname\", \"\");",
															"        break;",
															"    case 2:",
															"        pm.globals.set(\"account.code\", prefix + parts[0]);",
															"        pm.globals.set(\"account.description\", parts[1] + suffix);",
															"        pm.globals.set(\"account.firstname\", \"\");",
															"        pm.globals.set(\"account.lastname\", \"\");",
															"        break;",
															"    case 3:",
															"        pm.globals.set(\"account.code\", prefix + parts[0]);",
															"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
															"        pm.globals.set(\"account.firstname\", parts[1]);",
															"        pm.globals.set(\"account.lastname\", parts[2]);",
															"        break;",
															"    case 4:",
															"        pm.globals.set(\"account.code\", prefix + parts[0]);",
															"        pm.globals.set(\"account.description\", parts[1] + suffix);",
															"        pm.globals.set(\"account.firstname\", parts[2]);",
															"        pm.globals.set(\"account.lastname\", parts[3]);",
															"        break;",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue des Signature\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"account",
														"accountHierarchy",
														"createOrUpdateCRMAccountHierarchy"
													]
												}
											},
											"response": []
										},
										{
											"name": "paymentMethod DIRECTDEBIT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\": \"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n    \"bankCoordinates\": {\n        \"bankCode\": \"BANK\",\n        \"branchCode\": \"BRANC\",\n        \"accountNumber\": \"ACCOUNT_NUM\",\n        \"key\": \"KE\",\n        \"iban\": \"IBAN_2\",\n        \"bic\": \"BIC\",\n        \"accountOwner\": \"ACCOUNT_OWNER\",\n        \"bankName\": \"BANK_NAME\",\n        \"bankId\": \"ID\",\n        \"issuerNumber\": \"ISSUER_NUMBER\",\n        \"issuerName\": \"ISSUER_NAME\",\n        \"ics\": \"ICS\"\n    },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}"
												},
												"url": {
													"raw": "{{opencell.url}}/payment/paymentMethod",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"payment",
														"paymentMethod"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Subscription",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER006\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_CAMPAIGN\",\n    \"subscriptionDate\": \"2022-09-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n        {\n            \"productCode\": \"PR_USAGE_AMOUNT_AND_CAMPAIGN\",\n            \"quantity\": 1.000000000000, \n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"CAMPAIGN_FEES\",\n                    \"stringValue\": \"10\"\n                }\n            ]\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"billing",
														"subscription",
														"subscribeAndInstantiateProducts"
													]
												}
											},
											"response": []
										},
										{
											"name": "Activate Service",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER006\",\n    \"subscriptionValidityDate\": \"2022-09-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_USAGE_AMOUNT_AND_CAMPAIGN\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/billing/subscription/activateServices",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"billing",
														"subscription",
														"activateServices"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Mediation",
									"item": [
										{
											"name": "chargeCDR Customer 06",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if( pm.response.code === 200) {\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    \r",
															"}\r",
															"\r",
															"  setTimeout(function(){\r",
															"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
															"  }, 1000);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "2022-12-12T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER006;USAGE_AMOUNT;16600;;;;"
												},
												"url": {
													"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=true&maxDepth=0",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"billing",
														"mediation",
														"chargeCdr"
													],
													"query": [
														{
															"key": "returnWalletOperations",
															"value": "false"
														},
														{
															"key": "isVirtual",
															"value": "false"
														},
														{
															"key": "rateTriggeredEdr",
															"value": "true"
														},
														{
															"key": "maxDepth",
															"value": "0"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Account 007 - Marketing",
							"item": [
								{
									"name": "07-11|IneedMarketing|Ofcourse",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"       //   console.log(\"1 account code\" +  prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"     //   console.log(\"2 account code\" +  prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"      //  console.log(\"3 account code\" +  prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"     //   console.log(\"4 account code\" +  prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue des Signature\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "paymentMethod DIRECTDEBIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
													"pm.globals.set(\"paymentMethod.id\", jsonData.paymentMethod.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"disabled\": false,\n    \"customerAccountCode\": \"{{account.code}}\",\n    \"paymentMethodType\": \"DIRECTDEBIT\",\n    \"alias\": \"PAY_DIRECT\",\n    \"preferred\": true,\n    \"owner\": \"OWNER\",\n    \"info1\": \"info1\",\n    \"info2\": \"info2\",\n    \"info3\": \"info3\",\n    \"info4\": \"info4\",\n    \"info5\": \"info5\",\n    \"bankCoordinates\": {\n        \"bankCode\": \"BANK\",\n        \"branchCode\": \"BRANC\",\n        \"accountNumber\": \"ACCOUNT_NUM\",\n        \"key\": \"KE\",\n        \"iban\": \"IBAN_2\",\n        \"bic\": \"BIC\",\n        \"accountOwner\": \"ACCOUNT_OWNER\",\n        \"bankName\": \"BANK_NAME\",\n        \"bankId\": \"ID\",\n        \"issuerNumber\": \"ISSUER_NUMBER\",\n        \"issuerName\": \"ISSUER_NAME\",\n        \"ics\": \"ICS\"\n    },\n    \"mandateIdentification\": \"RUM\",\n    \"mandateDate\": \"2017-10-01\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentMethod",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentMethod"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER007\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_MARKETING\",\n    \"subscriptionDate\": \"2022-09-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n\n        {\n            \"productCode\": \"PR_MARKETING\",\n            \"quantity\": 1.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER007\",\n    \"subscriptionValidityDate\": \"2022-09-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_MARKETING\",\n                \"subscriptionDate\": \"2022-09-01\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 008 - AmericanDealProduct",
							"item": [
								{
									"name": "08|AmericanDealProduct_SellerUS|BigPoint",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"timestampMs\", new Date().getTime());",
													"",
													"",
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"seller\": \"{{seller.code}}_US\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"558 Broadway\",\r\n        \"address2\": \"\",\r\n        \"address3\": \"\",\r\n        \"zipCode\": \"10012-3912\",\r\n        \"city\": \"New York\",\r\n        \"state\": \"NY\",\r\n        \"country\": \"US\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"USD\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER008_{{timestampMs}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_BASIC\",\n    \"subscriptionDate\": \"2023-01-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n\n        {\n            \"productCode\": \"PR_TRAINING\",\n            \"quantity\": 10.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT_US\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER008_{{timestampMs}}\",\n    \"subscriptionValidityDate\": \"2023-01-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_TRAINING\",\n                \"subscriptionDate\": \"2023-01-01\",\n                \"quantity\": 10\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User with specific Role",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{account.code}}\",\n    \"password\": \"{{account.code}}\",\n    \"email\": \"{{account.code}}@fr.fr\",\n    \"firstName\": \"{{account.code}}\",\n    \"lastName\": \"{{account.code}}\",\n    \"userRole\": [\n        \"administrator\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{account.code}}\",\n            \"entityClass\": \"org.meveo.model.crm.customer\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/user/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 009 - AustraliaForEverTrip",
							"item": [
								{
									"name": "09|AustraliaForEverTrip_SellerUS|OneLife",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"timestampMs\", new Date().getTime());",
													"",
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"seller\": \"{{seller.code}}_US\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"613 Great N Rd\",\r\n        \"address2\": \"\",\r\n        \"address3\": \"\",\r\n        \"zipCode\": \"2046\",\r\n        \"city\": \"Abbotsford\",\r\n        \"state\": \"NSW\",\r\n        \"country\": \"AU\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"AUD\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"AU\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER009_{{timestampMs}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_BASIC\",\n    \"subscriptionDate\": \"2023-01-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n        {\n            \"productCode\": \"PR_TRAINING\",\n            \"quantity\": 10.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT_US\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER009_{{timestampMs}}\",\n    \"subscriptionValidityDate\": \"2023-01-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_TRAINING\",\n                \"subscriptionDate\": \"2023-01-01\",\n                \"quantity\": 10\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 010 - CanadianMapple",
							"item": [
								{
									"name": "10|CanadianMapple_SellerUS|DeliciousSirup",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"timestampMs\", new Date().getTime());",
													"",
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"seller\": \"{{seller.code}}_US\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"110 Notre-Dame St W\",\r\n        \"address2\": \"\",\r\n        \"address3\": \"\",\r\n        \"zipCode\": \"2046\",\r\n        \"city\": \"Montreal\",\r\n        \"state\": \"QUEBEC\",\r\n        \"country\": \"CA\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"CAD\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"CA\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER010_{{timestampMs}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_BASIC\",\n    \"subscriptionDate\": \"2023-01-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n\n        {\n            \"productCode\": \"PR_TRAINING\",\n            \"quantity\": 10.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT_US\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER010_{{timestampMs}}\",\n    \"subscriptionValidityDate\": \"2023-01-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_TRAINING\",\n                \"subscriptionDate\": \"2023-01-01\",\n                \"quantity\": 20\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 011 - AmericanDealProduct_SELLER_AU",
							"item": [
								{
									"name": "11|AmericanScreen_SellerAU|OledComp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"timestampMs\", new Date().getTime());",
													"",
													"",
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"seller\": \"{{seller.code}}_AU\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"558 Broadway\",\r\n        \"address2\": \"\",\r\n        \"address3\": \"\",\r\n        \"zipCode\": \"10012-3912\",\r\n        \"city\": \"New York\",\r\n        \"state\": \"NY\",\r\n        \"country\": \"US\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"USD\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER008_{{timestampMs}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_BASIC\",\n    \"subscriptionDate\": \"2023-01-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n\n        {\n            \"productCode\": \"PR_TRAINING\",\n            \"quantity\": 10.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT_AU\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER008_{{timestampMs}}\",\n    \"subscriptionValidityDate\": \"2023-01-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_TRAINING\",\n                \"subscriptionDate\": \"2023-01-01\",\n                \"quantity\": 10\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User with specific Role",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{account.code}}\",\n    \"password\": \"{{account.code}}\",\n    \"email\": \"{{account.code}}@fr.fr\",\n    \"firstName\": \"{{account.code}}\",\n    \"lastName\": \"{{account.code}}\",\n    \"userRole\": [\n        \"administrator\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{account.code}}\",\n            \"entityClass\": \"org.meveo.model.crm.customer\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/user/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 012 - AustriaKangorouPhoto_SELLER_CA",
							"item": [
								{
									"name": "12|AustriaKangorouPhoto_SellerCA|PhotoMarathon",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"timestampMs\", new Date().getTime());",
													"",
													"",
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"seller\": \"{{seller.code}}_CA\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"613 Great N Rd\",\r\n        \"address2\": \"\",\r\n        \"address3\": \"\",\r\n        \"zipCode\": \"2046\",\r\n        \"city\": \"Abbotsford\",\r\n        \"state\": \"NSW\",\r\n        \"country\": \"AU\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"AUD\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER008_{{timestampMs}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_BASIC\",\n    \"subscriptionDate\": \"2023-01-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n\n        {\n            \"productCode\": \"PR_TRAINING\",\n            \"quantity\": 10.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT_CA\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER008_{{timestampMs}}\",\n    \"subscriptionValidityDate\": \"2023-01-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_TRAINING\",\n                \"subscriptionDate\": \"2023-01-01\",\n                \"quantity\": 10\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User with specific Role",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{account.code}}\",\n    \"password\": \"{{account.code}}\",\n    \"email\": \"{{account.code}}@fr.fr\",\n    \"firstName\": \"{{account.code}}\",\n    \"lastName\": \"{{account.code}}\",\n    \"userRole\": [\n                \"administrator\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{account.code}}\",\n            \"entityClass\": \"org.meveo.model.crm.customer\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/user/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 013 - TaxManagement_SELLER_CA",
							"item": [
								{
									"name": "13|TaxManagement_SellerCA|BestTax",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"timestampMs\", new Date().getTime());",
													"",
													"",
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"seller\": \"{{seller.code}}_CA\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"21 Rue de Charonne\",\r\n        \"address2\": \"\",\r\n        \"address3\": \"\",\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"state\": \"\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER008_{{timestampMs}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_BASIC\",\n    \"subscriptionDate\": \"2023-01-01\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n\n        {\n            \"productCode\": \"PR_TRAINING\",\n            \"quantity\": 10.000000000000\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT_CA\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER008_{{timestampMs}}\",\n    \"subscriptionValidityDate\": \"2023-01-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_TRAINING\",\n                \"subscriptionDate\": \"2023-01-01\",\n                \"quantity\": 10\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User with specific Role",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{account.code}}\",\n    \"password\": \"{{account.code}}\",\n    \"email\": \"{{account.code}}@fr.fr\",\n    \"firstName\": \"{{account.code}}\",\n    \"lastName\": \"{{account.code}}\",\n    \"userRole\": [\n                \"administrator\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{account.code}}\",\n            \"entityClass\": \"org.meveo.model.crm.customer\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/user/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 014  - Intermarché FR",
							"item": [
								{
									"name": "14|Intermarché|Evian",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue du passage des clous\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER014\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_ENERGY_CHARGING_COMMISSION\",\n    \"subscriptionDate\": \"2023-10-11\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n\n        {\n            \"productCode\": \"PR_ENERGY_POWER_COMMISSION\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"COMMISSION_FEES\",\n                    \"doubleValue\": 0.115\n                }\n            ]\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER014\",\n    \"subscriptionValidityDate\": \"2022-09-01\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_ENERGY_POWER_COMMISSION\",\n                \"subscriptionDate\": \"2023-10-11\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 015 - Super U",
							"item": [
								{
									"name": "15|super U|Rouen",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue du passage des clous\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "15|Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER0{{request.label.0}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_ENERGY_CHARGING\",\n    \"subscriptionDate\": \"2023-10-11\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n        {\n            \"productCode\": \"{{product16.cpq.code}}\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"SETUP_FEES_STEP1\",\n                    \"doubleValue\": 1200\n                }\n            ]\n        },\n        {\n            \"productCode\": \"{{product17.cpq.code}}\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"USER_NUMBER\",\n                    \"doubleValue\": 2\n                },\n                {\n                    \"orderAttributeCode\": \"POWER_OPTION\",\n                    \"doubleValue\": 7.4\n                },\n                {\n                    \"orderAttributeCode\": \"CHARGING_POINT_NUMBER\",\n                    \"doubleValue\": 2\n                }\n            ]\n        },\n        {\n            \"productCode\": \"{{product18.cpq.code}}\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"MAX_CONSO_OPTION\",\n                    \"stringValue\": \"750\"\n                }\n            ]\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "15|Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER0{{request.label.0}}\",\n    \"subscriptionValidityDate\": \"2023-10-11\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{product16.cpq.code}}\",\n                \"subscriptionDate\": \"2023-10-11\",\n                \"quantity\": 1\n            },\n            {\n                \"code\": \"{{product17.cpq.code}}\",\n                \"subscriptionDate\": \"2023-10-11\",\n                \"quantity\": 1\n            },\n            {\n                \"code\": \"{{product18.cpq.code}}\",\n                \"subscriptionDate\": \"2023-10-11\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 016 - Leclerc",
							"item": [
								{
									"name": "16|Leclerc|Nice",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue du passage des clous\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "16|Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MANUAL_SUB_CUSTOMER0{{request.label.0}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_ENERGY_CHARGING\",\n    \"subscriptionDate\": \"2023-10-12\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n        {\n            \"productCode\": \"{{product16.cpq.code}}\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"SETUP_FEES_STEP1\",\n                    \"doubleValue\": 1200\n                }\n            ]\n        },\n        {\n            \"productCode\": \"{{product17.cpq.code}}\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"USER_NUMBER\",\n                    \"doubleValue\": 2\n                },\n                {\n                    \"orderAttributeCode\": \"POWER_OPTION\",\n                    \"doubleValue\": 7.4\n                },\n                {\n                    \"orderAttributeCode\": \"CHARGING_POINT_NUMBER\",\n                    \"doubleValue\": 2\n                }\n            ]\n        },\n        {\n            \"productCode\": \"{{product18.cpq.code}}\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"MAX_CONSO_OPTION\",\n                    \"stringValue\": \"750\"\n                }\n            ]\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "16|Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER0{{request.label.0}}\",\n    \"subscriptionValidityDate\": \"2023-10-12\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{product16.cpq.code}}\",\n                \"subscriptionDate\": \"2023-10-12\",\n                \"quantity\": 1\n            },\n            {\n                \"code\": \"{{product17.cpq.code}}\",\n                \"subscriptionDate\": \"2023-10-12\",\n                \"quantity\": 1\n            },\n            {\n                \"code\": \"{{product18.cpq.code}}\",\n                \"subscriptionDate\": \"2023-10-12\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Account 017  - Aldi",
							"item": [
								{
									"name": "17|Aldi|Dijon",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue du passage des clous\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "17|Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"MANUAL_SUB_CUSTOMER0{{request.label.0}}\",\n    \"userAccount\": \"{{account.code}}\",\n    \"offerTemplate\": \"OF_ENERGY_CHARGING_COMMISSION\",\n    \"subscriptionDate\": \"2023-10-12\",\n    \"status\": \"ACTIVE\",\n    \"productToInstantiateDto\": [\n\n        {\n            \"productCode\": \"PR_ENERGY_POWER_COMMISSION\",\n            \"quantity\": 1.000000000000,\n            \"attributeInstances\": [\n                {\n                    \"orderAttributeCode\": \"COMMISSION_FEES\",\n                    \"doubleValue\": 0.115\n                }\n            ]\n        }\n    ],\n    \"renewed\": false,\n    \"renewalRule\": {},\n    \"seller\": \"OPENSOFT\",\n    \"autoEndOfEngagement\": false,\n    \"electronicBilling\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndInstantiateProducts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndInstantiateProducts"
											]
										}
									},
									"response": []
								},
								{
									"name": "17|Activate Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"MANUAL_SUB_CUSTOMER0{{request.label.0}}\",\n    \"subscriptionValidityDate\": \"2023-10-12\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"PR_ENERGY_POWER_COMMISSION\",\n                \"subscriptionDate\": \"2023-10-12\",\n                \"quantity\": 1\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Free User Testing",
							"item": [
								{
									"name": "FREE001|Free User 001|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "FREE002|Free User 002|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "FREE003|Free User 003|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "FREE004|Free User 004|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "FREE005|Free User 005|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "FREE006|Free User 006|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "FREE007|Free User 007|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"CIE-SANDBOX\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Mediation Billed",
					"item": [
						{
							"name": "Energy Charging",
							"item": [
								{
									"name": "v2/mediation/cdrs/chargeCdrList customer 14",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cdrs\": [\r\n        \"2023-10-11T01:00:00.000Z;10000;MANUAL_SUB_CUSTOMER014;ENERGY_CHARGING_COM;;;;;\",\r\n        \"2023-10-11T01:00:00.000Z;200;MANUAL_SUB_CUSTOMER014;ENERGY_CHARGING_COM;;;;;\"\r\n    ],\r\n    \"isRateTriggeredEdr\": \"true\",\r\n    \"maxDepth\": \"2\",\r\n    \"mode\": \"ROLLBACK_ON_ERROR\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/v2/mediation/cdrs/chargeCdrList",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"mediation",
												"cdrs",
												"chargeCdrList"
											]
										}
									},
									"response": []
								},
								{
									"name": "v2/mediation/cdrs/chargeCdrList customer 15",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cdrs\": [\r\n        \"2023-10-12T01:00:00.000Z;150;MANUAL_SUB_CUSTOMER015;ENERGY_CHARGING;PARTENAIRE_1;;;\"\r\n        \r\n    ],\r\n    \"isRateTriggeredEdr\": \"true\",\r\n    \"maxDepth\": \"2\",\r\n    \"mode\": \"ROLLBACK_ON_ERROR\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/v2/mediation/cdrs/chargeCdrList",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"mediation",
												"cdrs",
												"chargeCdrList"
											]
										}
									},
									"response": []
								},
								{
									"name": "v2/mediation/cdrs/chargeCdrList customer 16",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cdrs\": [\r\n        \"2023-10-12T01:00:00.000Z;150;MANUAL_SUB_CUSTOMER016;ENERGY_CHARGING;PARTENAIRE_2;;;\",\r\n        \"2023-10-12T01:00:00.000Z;800;MANUAL_SUB_CUSTOMER016;ENERGY_CHARGING;PARTENAIRE_2;;;\"\r\n        \r\n    ],\r\n    \"isRateTriggeredEdr\": \"true\",\r\n    \"maxDepth\": \"2\",\r\n    \"mode\": \"ROLLBACK_ON_ERROR\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/v2/mediation/cdrs/chargeCdrList",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"mediation",
												"cdrs",
												"chargeCdrList"
											]
										}
									},
									"response": []
								},
								{
									"name": "v2/mediation/cdrs/chargeCdrList customer 17",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cdrs\": [\r\n        \"2023-10-12T01:00:00.000Z;10000;MANUAL_SUB_CUSTOMER017;ENERGY_CHARGING_COM;;;;;\"\r\n    ],\r\n    \"isRateTriggeredEdr\": \"true\",\r\n    \"maxDepth\": \"2\",\r\n    \"mode\": \"ROLLBACK_ON_ERROR\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/v2/mediation/cdrs/chargeCdrList",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"mediation",
												"cdrs",
												"chargeCdrList"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "registerCdrList CLIENT000",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mode\": \"PROCESS_ALL\",\n    \"cdrs\": [\n        \"2022-10-05T01:00:00.000Z;1;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;2;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;3;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;4;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;5;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;6;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;7;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;8;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;9;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;10;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;11;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;12;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;13;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;14;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;15;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;16;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;17;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;18;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;19;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;20;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;21;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;22;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;23;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;24;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;25;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;26;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;27;{{subscription.code.user000}};PS;AA;KEY0002;;;\",\n        \"2022-10-05T01:00:00.000Z;28;{{subscription.code.user000}};PS;AA;KEY0002;;;\"\n    ]\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/v2/mediation/cdrs/registerCdrList",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"v2",
										"mediation",
										"cdrs",
										"registerCdrList"
									],
									"query": [
										{
											"key": "mode",
											"value": "STOP_ON_FIRST_FAIL",
											"disabled": true
										},
										{
											"key": "mode",
											"value": "PROCESS_ALL",
											"disabled": true
										},
										{
											"key": "mode",
											"value": "ROLL_BACK_ON_ERROR",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "v2/mediation/cdrs/chargeCdrList",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"}\r",
											"\r",
											"  setTimeout(function(){\r",
											"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
											"  }, 1000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cdrs\": [\r\n        \"2023-02-07T01:00:00.000Z;3;{{subscription.code.user000}};PS;AA;KEY0002;;;\"\r\n    ],\r\n    \"isRateTriggeredEdr\": \"true\",\r\n    \"maxDepth\": \"2\",\r\n    \"mode\": \"ROLLBACK_ON_ERROR\"\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/v2/mediation/cdrs/chargeCdrList",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"v2",
										"mediation",
										"cdrs",
										"chargeCdrList"
									]
								}
							},
							"response": []
						},
						{
							"name": "registerCdrList CLIENT002",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mode\": \"PROCESS_ALL\",\n    \n    \"cdrs\": [\n        \"2022-09-09T00:00:00.000Z;1;{{subscription.code.user002}};FRA;189;;;;\",\n        \"2022-09-09T00:00:00.000Z;1;{{subscription.code.user002}};BEL;29;;;;\",\n        \"2022-09-09T00:00:00.000Z;1;{{subscription.code.user002}};FRA;159;;;;\"\n    ]\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/v2/mediation/cdrs/registerCdrList",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"v2",
										"mediation",
										"cdrs",
										"registerCdrList"
									],
									"query": [
										{
											"key": "mode",
											"value": "STOP_ON_FIRST_FAIL",
											"disabled": true
										},
										{
											"key": "mode",
											"value": "PROCESS_ALL",
											"disabled": true
										},
										{
											"key": "mode",
											"value": "ROLL_BACK_ON_ERROR",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "chargeCDR Fromt CLIENT3.1  TO CLIENT3.2 CARD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"}\r",
											"\r",
											"  setTimeout(function(){\r",
											"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
											"  }, 1000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "2022-12-10T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER003.1;MANUAL_SUB_CUSTOMER003.2;250000;CARD;;;"
								},
								"url": {
									"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=false&maxDepth=0",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"mediation",
										"chargeCdr"
									],
									"query": [
										{
											"key": "returnWalletOperations",
											"value": "false"
										},
										{
											"key": "isVirtual",
											"value": "false"
										},
										{
											"key": "rateTriggeredEdr",
											"value": "false"
										},
										{
											"key": "maxDepth",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "chargeCDR Fromt CLIENT3.1  TO CLIENT3.2 CHECK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"}\r",
											"\r",
											"  setTimeout(function(){\r",
											"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
											"  }, 1000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "2022-12-11T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER003.1;MANUAL_SUB_CUSTOMER003.2;50000;CHECK;;;"
								},
								"url": {
									"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=false&maxDepth=0",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"mediation",
										"chargeCdr"
									],
									"query": [
										{
											"key": "returnWalletOperations",
											"value": "false"
										},
										{
											"key": "isVirtual",
											"value": "false"
										},
										{
											"key": "rateTriggeredEdr",
											"value": "false"
										},
										{
											"key": "maxDepth",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "chargeCDR CLIENT005",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"}\r",
											"\r",
											"  setTimeout(function(){\r",
											"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
											"  }, 1000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "2023-01-30T00:00:00.000Z;1301;MANUAL_SUB_CUSTOMER005;SIGNATURE;PACK_1000;FRA;;;"
								},
								"url": {
									"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=true&maxDepth=0",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"mediation",
										"chargeCdr"
									],
									"query": [
										{
											"key": "returnWalletOperations",
											"value": "false"
										},
										{
											"key": "isVirtual",
											"value": "false"
										},
										{
											"key": "rateTriggeredEdr",
											"value": "true"
										},
										{
											"key": "maxDepth",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "chargeCDR CLIENT005",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"}\r",
											"\r",
											"  setTimeout(function(){\r",
											"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
											"  }, 1000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "2022-09-08T00:00:00.000Z;1400;MANUAL_SUB_CUSTOMER005;SIGNATURE_CACHET;PACK_1000;FRA;;;"
								},
								"url": {
									"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=true&maxDepth=0",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"mediation",
										"chargeCdr"
									],
									"query": [
										{
											"key": "returnWalletOperations",
											"value": "false"
										},
										{
											"key": "isVirtual",
											"value": "false"
										},
										{
											"key": "rateTriggeredEdr",
											"value": "true"
										},
										{
											"key": "maxDepth",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "registerCdrList CLIENT007",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"}\r",
											"\r",
											"  setTimeout(function(){\r",
											"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
											"  }, 1000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mode\": \"PROCESS_ALL\",\r\n    \r\n    \"cdrs\": [\r\n        \"2022-10-10T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER007;VIEW;189;;;;\",\r\n        \"2022-10-10T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER007;CLICK;29;;;;\",\r\n        \"2022-10-10T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER007;SALES;159;;;;\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/v2/mediation/cdrs/registerCdrList",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"v2",
										"mediation",
										"cdrs",
										"registerCdrList"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rating and invoicing",
					"item": [
						{
							"name": "Run|M_Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
											"}",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 1 seconds before next request.\");",
											"  }, 1000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run|U_Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
											"}",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 1 seconds before next request.\");",
											"  }, 1000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run|RT_Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
											"}",
											"",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 5 seconds before next request.\");",
											"  }, 5000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run|AO_AUTO_MATCHING_JOB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
											"}",
											"",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 5 seconds before next request.\");",
											"  }, 5000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "billingRun|billingCycle=BC_MONTHLY_1ST|BC_MONTHLY_1ST|CYC_INV_MT_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"billingRun.id\", jsonData.message);",
											"}",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 9 seconds before next request.\");",
											"  }, 9000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.superadmin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.superadmin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"billingRunTypeEnum\": \"AUTOMATIC\",\n    \"referenceDate\": \"NEXT_INVOICE_DATE\",\n    \"generateAO\": true,\n    \"billingCycleCode\": \"{{billingCycle}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/billing/invoicing/createBillingRun",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"invoicing",
										"createBillingRun"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advance status for BR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"  setTimeout(function(){\r",
											"          console.log(\"Sleeping for 5 seconds before next request.\");\r",
											"  }, 5000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.superadmin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.superadmin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{opencell.url}}/v2/billing/invoicing/{{billingRun.id}}/advanceStatus?executeInvoicingJob=true",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"v2",
										"billing",
										"invoicing",
										"{{billingRun.id}}",
										"advanceStatus"
									],
									"query": [
										{
											"key": "executeInvoicingJob",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "billingRun|billingCycle=BC_PARTNER_RETRIIBUTION|BC_PARTNER_RETRIIBUTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"billingRun.id\", jsonData.message);",
											"}",
											"",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 8 seconds before next request.\");",
											"  }, 8000);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"billingCycleCode\" : \"{{billingCycle}}\",\n  \"billingRunTypeEnum\" : \"AUTOMATIC\",\n  \"referenceDate\" : \"NEXT_INVOICE_DATE\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/billing/invoicing/createBillingRun",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"invoicing",
										"createBillingRun"
									]
								}
							},
							"response": []
						},
						{
							"name": "Advance status for BR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"  setTimeout(function(){\r",
											"          console.log(\"Sleeping for 5 seconds before next request.\");\r",
											"  }, 5000);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.superadmin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.superadmin",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{opencell.url}}/v2/billing/invoicing/{{billingRun.id}}/advanceStatus?executeInvoicingJob=true",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"v2",
										"billing",
										"invoicing",
										"{{billingRun.id}}",
										"advanceStatus"
									],
									"query": [
										{
											"key": "executeInvoicingJob",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Run|Invoice_Lines_Job_V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
											"}",
											"",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 1 seconds before next request.\");",
											"  }, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run|Invoicing_Job_V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
											"}",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 1 seconds before next request.\");",
											"  }, 1000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run|XML_Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
											"}",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 1 seconds before next request.\");",
											"  }, 1000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Run|AO_Job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {",
											"    var jsonData = JSON.parse(responseBody);",
											"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
											"}",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 1 seconds before next request.\");",
											"  }, 1000);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/job/execute",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"job",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find invoice (CREATED)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.code = 200 ) {",
											"",
											"    var jsonData = JSON.parse(responseBody);",
											"",
											"//tests[\"is.good.status\"] = jsonData.invoices[0].status === \"VALIDATED\";",
											"//tests[\"is.good.dueDate\"] = jsonData.invoices[0].dueDate === \"2021-07-25T00:00:00+02:00\";",
											"//tests[\"is.good.amountWithoutTax\"] = jsonData.invoices[0].amountWithoutTax === 1416.850000000000;",
											"//tests[\"is.good.amountTax\"] = jsonData.invoices[0].amountTax === 283.370000000000;",
											"//tests[\"is.good.amountWithTax\"] = jsonData.invoices[0].amountWithTax === 1700.220000000000",
											"",
											"  setTimeout(function(){",
											"          console.log(\"Sleeping for 1 seconds before next request.\");",
											"  }, 1000);",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{opencell.url}}/invoice/list?query=invoiceNumber:INV_0001",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoice",
										"list"
									],
									"query": [
										{
											"key": "query",
											"value": "invoiceNumber:INV_0001"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exceptionnal Operations",
					"item": [
						{
							"name": "Invoice subtotal configuration",
							"item": [
								{
									"name": "Invoice subtotal Quantity",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoiceType\": {\r\n        \"code\": \"COM\"\r\n    },\r\n    \"subTotals\": [\r\n        {\r\n            \"el\": \"#{ invoiceLine.quantity >= 10 }\",\r\n            \"label\": \"Quantity ≥ 10\",\r\n            \"languageLabels\": [\r\n                {\r\n                    \"languageCode\": \"FRA\",\r\n                    \"description\": \"Quantité 10 ou plus\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"ENG\",\r\n                    \"description\": \"Quantity 10 or more\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"el\": \"#{ invoiceLine.quantity < 10 }\",\r\n            \"label\": \"Quantity < 10\",\r\n            \"languageLabels\": [\r\n                {\r\n                    \"languageCode\": \"FRA\",\r\n                    \"description\": \"Quantité Moins de 10\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"ENG\",\r\n                    \"description\": \"Quantity Less than 10\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/v2/billing/invoices/addSubTotals",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"billing",
												"invoices",
												"addSubTotals"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "RT List",
							"item": [
								{
									"name": "applyOneshotCharge OPENSOFT_OPENSOFT-00_1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"subscription\": \"{{subscription.code.user000}}\",\r\n  \"oneShotCharge\": \"CH_OS_OTHER\",\r\n  \"amountWithoutTax\": {{$randomInt}},\r\n  \"operationDate\": \"{{$timestamp}}000\",\r\n  \"description\": \"OSO {{$guid}}\",\r\n  \"criteria1\": \"P1\",\r\n  \"criteria2\": \"ADJ-SOL\",\r\n  \"criteria3\": \"TEST_PARAM3\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyOneShotChargeInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run|RT_Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "ratedTransaction|list",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"fullTextFilter\" : null,\r\n\t\"filters\" : {\r\n\t\t\"status\": \"OPEN\",\r\n\t\t\"toRange amountWithoutTax\": 8000.0\r\n\t},\r\n\t\"fields\" : null,\r\n\t\"loadReferenceDepth\": null,\r\n\t\"offset\" : null,\r\n\t\"limit\" : 5,\r\n\t\"sortBy\" : \"usageDate\",\r\n\t\"sortOrder\" : \"DESCENDING\"\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billing/ratedTransaction/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"ratedTransaction",
												"list"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice Validation",
							"item": [
								{
									"name": "SCRIPT|InvoiceValidationScriptExample|InvoiceValidationScriptExample",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code == 200 ) { tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors.length === 0; }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"name": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<ScriptInstance code=\"org.meveo.service.script.{{request.label.1}}\" description=\"{{request.label.2}}\">\r\n\r\n    <type>JAVA</type>\r\n    <script>\r\n        <![CDATA[\r\npackage org.meveo.service.script;\r\n\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.Map;\r\n\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.billing.Invoice;\r\n\r\n\r\npublic class InvoiceValidationScriptExample extends InvoiceValidationScript {\r\n\r\n    @Override\r\n    public void execute(Map < String, Object > methodContext) throws BusinessException {\r\n        Invoice invoice = (Invoice) methodContext.get(Script.CONTEXT_ENTITY);\r\n        if (invoice.getAmountWithTax().compareTo(new BigDecimal(2000)) < 0) {\r\n            markRejectInvoice(methodContext, \"markRejectInvoice Reject MESSAGe\");\r\n        } else if (invoice.getAmountWithTax().compareTo(new BigDecimal(4000)) > 0) {\r\n            markSuspectInvoice(methodContext, \"markSuspectInvoice Suspect MESSAGe\");\r\n        }\r\n    }\r\n}\r\n]]>\r\n    </script>\r\n</ScriptInstance>"
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Script",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance?scriptInstanceCode=org.meveo.service.script.InvoiceValidationScriptExample",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance"
											],
											"query": [
												{
													"key": "scriptInstanceCode",
													"value": "org.meveo.service.script.InvoiceValidationScriptExample"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SCRIPT|BillingRunValidationScript|BillingRunValidationScript",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code == 200 ) { tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors.length === 0; }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"name": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<ScriptInstance code=\"org.meveo.service.script.{{request.label.1}}\" description=\"{{request.label.2}}\">\r\n    <type>JAVA</type>\r\n    <script>\r\n        <![CDATA[\r\n        \r\npackage org.meveo.service.script;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.billing.BillingRun;\r\nimport org.meveo.model.billing.Invoice;\r\nimport org.meveo.model.billing.InvoiceStatusEnum;\r\nimport org.meveo.service.billing.impl.InvoiceService;\r\nimport org.meveo.service.script.InvoiceValidationScript;\r\nimport org.meveo.service.billing.impl.BillingRunService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n/**\r\n * This script allows to valid billingRun\r\n */\r\npublic class BillingRunValidationScript extends InvoiceValidationScript {\r\n\r\n  private static final Logger LOGGER = LoggerFactory.getLogger(BillingRunValidationScript.class);\r\n  private static final Integer INVOICE_NUMBER = 1000;\r\n  private InvoiceService invoiceService = (InvoiceService) getServiceInterface(\"InvoiceService\");\r\n  private BillingRunService billingRunService = (BillingRunService) getServiceInterface(\"BillingRunService\");\r\n  @Override public void execute(Map < String, Object > methodContext) throws BusinessException {\r\n    Integer offset = 0;\r\n    BillingRun billingRun = (BillingRun) methodContext.get(\"billingRun\");\r\n    List < Invoice > invoices = invoiceService.getInvoices(billingRun);\r\n\r\n    for (Invoice invoice: invoices) {\r\n    if (invoice.getAmountWithTax().doubleValue() < 3000d && !invoice.getStatus().equals(InvoiceStatusEnum.VALIDATED))\r\n    {\r\n        invoice.setStatus(InvoiceStatusEnum.REJECTED);\r\n        invoice.setRejectReason(\"invoice reject\");\r\n        billingRun.setRejectionReason(\"at least one invoice is rejected\");\r\n        invoiceService.update(invoice);\r\n      }\r\n          if (invoice.getAmountWithTax().doubleValue() > 4000d && !invoice.getStatus().equals(InvoiceStatusEnum.VALIDATED))\r\n    {\r\n        invoice.setStatus(InvoiceStatusEnum.SUSPECT);\r\n        invoice.setRejectReason(\"invoice Suspect\");\r\n        billingRun.setRejectionReason(\"at least one invoice is suspected\");\r\n        invoiceService.update(invoice);\r\n        \r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n    \r\n]]>\r\n    \r\n    </script>\r\n</ScriptInstance>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invoice Validation Standard",
							"item": [
								{
									"name": "invoicevalidationrules - reject base on amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"name": "Content-Type",
												"value": "application/xml",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"invoiceType\": \"COM\",\r\n    \"description\": \"Amount\",\r\n    \"priority\": 1,\r\n    \"validFrom\": 1672581840000,\r\n    \"validTo\": 1735653840000,\r\n    \"evaluationMode\": \"VALIDATION\",\r\n    \"failStatus\": \"REJECTED\",\r\n    \"type\": \"SCRIPT\",\r\n    \"validationScript\": \"org.meveo.service.script.CompareInvoiceAmountScript\",\r\n    \"ruleValues\": {\r\n        \"withOrWithoutTax\": \"without tax\",\r\n        \"operator\": \">\",\r\n        \"value\": 1000\r\n    },\r\n    \"code\": \"Amount\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/v2/billing/invoicevalidationrules",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"billing",
												"invoicevalidationrules"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "RT Cancel",
							"item": [
								{
									"name": "ratedTransaction|cancel",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"inList code\": [\r\n            \"CH_OS_OTHER\"\r\n        ]\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/billing/ratedTransaction/cancelRatedTransactions",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"ratedTransaction",
												"cancelRatedTransactions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mediation Open",
							"item": [
								{
									"name": "chargeCDR CLIENT000",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2022-09-10T00:00:00.000Z;600;{{subscription.code.user000}};PS;;;;;"
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=true&maxDepth=0",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											],
											"query": [
												{
													"key": "returnWalletOperations",
													"value": "false"
												},
												{
													"key": "isVirtual",
													"value": "false"
												},
												{
													"key": "rateTriggeredEdr",
													"value": "true"
												},
												{
													"key": "maxDepth",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "registerCdrList CLIENT002",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"mode\": \"PROCESS_ALL\",\n    \n    \"cdrs\": [\n        \"2022-09-10T00:00:00.000Z;1;{{subscription.code.user002}};FRA;199;;;;\",\n        \"2022-09-10T00:00:00.000Z;1;{{subscription.code.user002}};BEL;59;;;;\",\n        \"2022-09-10T00:00:00.000Z;1;{{subscription.code.user002}};FRA;119;;;;\"\n    ]\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/v2/mediation/cdrs/registerCdrList",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"mediation",
												"cdrs",
												"registerCdrList"
											],
											"query": [
												{
													"key": "mode",
													"value": "STOP_ON_FIRST_FAIL",
													"disabled": true
												},
												{
													"key": "mode",
													"value": "PROCESS_ALL",
													"disabled": true
												},
												{
													"key": "mode",
													"value": "ROLL_BACK_ON_ERROR",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "chargeCDR Fromt CLIENT3.1  TO CLIENT3.2 CARD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2022-12-11T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER003.1;MANUAL_SUB_CUSTOMER003.2;280000;CARD;;;"
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=false&maxDepth=0",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											],
											"query": [
												{
													"key": "returnWalletOperations",
													"value": "false"
												},
												{
													"key": "isVirtual",
													"value": "false"
												},
												{
													"key": "rateTriggeredEdr",
													"value": "false"
												},
												{
													"key": "maxDepth",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "chargeCDR Fromt CLIENT3.1  TO CLIENT3.2 CHECK",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2022-12-12T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER003.1;MANUAL_SUB_CUSTOMER003.2;58000;CHECK;;;"
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=false&maxDepth=0",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											],
											"query": [
												{
													"key": "returnWalletOperations",
													"value": "false"
												},
												{
													"key": "isVirtual",
													"value": "false"
												},
												{
													"key": "rateTriggeredEdr",
													"value": "false"
												},
												{
													"key": "maxDepth",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "chargeCDR CLIENT005",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2022-09-10T00:00:00.000Z;1300;MANUAL_SUB_CUSTOMER005;SIGNATURE;PACK_1000;FRA;;;"
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=true&maxDepth=0",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											],
											"query": [
												{
													"key": "returnWalletOperations",
													"value": "false"
												},
												{
													"key": "isVirtual",
													"value": "false"
												},
												{
													"key": "rateTriggeredEdr",
													"value": "true"
												},
												{
													"key": "maxDepth",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "chargeCDR CLIENT005",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2022-09-10T00:00:00.000Z;1200;MANUAL_SUB_CUSTOMER005;SIGNATURE_CACHET;PACK_1000;FRA;;;"
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr?returnWalletOperations=false&isVirtual=false&rateTriggeredEdr=true&maxDepth=0",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											],
											"query": [
												{
													"key": "returnWalletOperations",
													"value": "false"
												},
												{
													"key": "isVirtual",
													"value": "false"
												},
												{
													"key": "rateTriggeredEdr",
													"value": "true"
												},
												{
													"key": "maxDepth",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "registerCdrList CLIENT007",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"mode\": \"PROCESS_ALL\",\r\n    \r\n    \"cdrs\": [\r\n        \"2022-10-11T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER007;VIEW;159;;;;\",\r\n        \"2022-10-11T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER007;CLICK;89;;;;\",\r\n        \"2022-10-11T00:00:00.000Z;1;MANUAL_SUB_CUSTOMER007;SALES;4559;;;;\"\r\n    ]\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/v2/mediation/cdrs/registerCdrList",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"mediation",
												"cdrs",
												"registerCdrList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run|M_Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
													"}",
													"",
													"  setTimeout(function(){",
													"          console.log(\"Sleeping for 1 seconds before next request.\");",
													"  }, 1000);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run|U_Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
													"}",
													"",
													"  setTimeout(function(){",
													"          console.log(\"Sleeping for 1 seconds before next request.\");",
													"  }, 1000);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run|RT_Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Exceptional BR",
							"item": [
								{
									"name": "Exceptional BR  - Usage Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code === 200) {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    \r",
													"}\r",
													"\r",
													"  setTimeout(function(){\r",
													"          console.log(\"Sleeping for 1 seconds before next request.\");\r",
													"  }, 1000);\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"billingRunTypeEnum\": \"AUTOMATIC\",\r\n    \"invoiceDate\": \"2023-01-16\",\r\n    \"rejectAutoAction\": \"MOVE\",\r\n    \"suspectAutoAction\": \"MOVE\",\r\n    \"filters\": {\r\n        \"$filter1\": {\r\n            \"$operator\": \"AND\",\r\n            \"parameter1\": \"PS\",\r\n            \"fromRangeExclusive usageDate\": \"2022-06-08\"\r\n        }\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/v2/billing/invoicing/exceptionalBillingRun",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"v2",
												"billing",
												"invoicing",
												"exceptionalBillingRun"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Anonymize",
							"item": [
								{
									"name": "ANONYMIZE|ANONYMIZE User 001|Cie",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"Cie\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "OPENSOFT-ANONYMIZE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"seller.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0]);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode=OPENSOFT-ANONYMIZE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "OPENSOFT-ANONYMIZE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "anonymizeGdpr OPENSOFT-ANONYMIZE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{seller.code}}\",\r\n    \"code\": \"{{account.code}}\",\r\n    \"description\": \"{{request.label.1}}\",\r\n    \"isCompany\": true,\r\n    \"legalEntityType\": {\r\n        \"code\": \"CIE\"\r\n    },\r\n    \"name\": {\r\n        \"title\": \"Cie\",\r\n        \"firstName\": \"{{account.firstname}}\",\r\n        \"lastName\": \"{{account.lastname}}\"\r\n    },\r\n    \"vatNo\": \"FR12345678901234\",\r\n    \"registrationNo\": \"12354678901234\",\r\n    \"address\": {\r\n        \"address1\": \"3 rue passante\",\r\n        \"address2\": \"Bâtiment A\",\r\n        \"address3\": \"Bureau D42\",\r\n        \"zipCode\": \"75001\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{seller.code}}@exemple.com\",\r\n        \"mobile\": \"+33123546789\"\r\n    },\r\n    \"email\": \"fr.fr@fr.com\",\r\n    \"language\": \"FRA\",\r\n    \"paymentMethod\": \"CHECK\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"currency\": \"EUR\",\r\n    \"billingCycle\": \"BC_MONTHLY_1ST\",\r\n    \"country\": \"FR\",\r\n    \"electronicBilling\": \"true\",\r\n    \"customFields\": null\r\n}"
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/anonymizeGdpr?customerCode=OPENSOFT-ANONYMIZE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"anonymizeGdpr"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "OPENSOFT-ANONYMIZE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SCRIPT|AnonymizeScript|AnonymizeScript",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code == 200 ) { tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors.length === 0; }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"name": "Content-Type",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<ScriptInstance>\r\n        <code>org.meveo.service.script.{{request.label.1}}</code>\r\n        <description>{{request.label.2}} {{$timestamp}}</description>\r\n        <type>JAVA</type>\r\n        <script><![CDATA[\r\npackage org.meveo.service.script;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.model.billing.BillingAccount;\r\nimport org.meveo.model.crm.Customer;\r\nimport org.meveo.model.payments.CustomerAccount;\r\nimport org.meveo.service.crm.impl.CustomerService;\r\nimport org.meveo.service.dwh.GdprService;\r\n\r\nimport javax.inject.Inject;\r\nimport javax.persistence.EntityManager;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.UUID;\r\n\r\npublic class AnonymizeScript extends Script {\r\n\r\n    @Inject\r\n    private CustomerService customerService = (CustomerService) getServiceInterface(\"CustomerService\");\r\n\r\n    @Inject\r\n    private GdprService gdprService = (GdprService) getServiceInterface(\"GdprService\");\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> context) throws BusinessException {\r\n        EntityManager em = customerService.getEntityManager();\r\n\r\n        // Get list ids of all customers\r\n        List<Long> ids = em.createQuery(\"select c.id from Customer c\", Long.class)\r\n                .getResultList();\r\n\r\n        String randomCode;\r\n        for (int i = 0; i < ids.size(); i++) {\r\n            Long id = ids.get(i);\r\n            randomCode = UUID.randomUUID().toString();\r\n\r\n            Customer aCustomer = customerService.findById(id);\r\n            gdprService.anonymize(aCustomer);\r\n\r\n            // Anonymize field 'description' C -> CA -> BA and field 'registrationNo' and field 'vat_no'\r\n            aCustomer.setDescription(randomCode);\r\n            aCustomer.setRegistrationNo(randomCode);\r\n            aCustomer.setVatNo(randomCode);\r\n            for (CustomerAccount aCustomerAccount : aCustomer.getCustomerAccounts()) {\r\n                aCustomerAccount.setDescription(randomCode);\r\n                aCustomerAccount.setRegistrationNo(randomCode);\r\n                aCustomerAccount.setVatNo(randomCode);\r\n                for (BillingAccount aBillingAccount : aCustomerAccount.getBillingAccounts()) {\r\n                    aBillingAccount.setDescription(randomCode);\r\n                    aBillingAccount.setRegistrationNo(randomCode);\r\n                    aBillingAccount.setVatNo(randomCode);\r\n                }\r\n            }\r\n\r\n            if (i > 0 && i % 500 == 0) {\r\n                // flush a batch of updates and release memory\r\n                em.flush();\r\n                em.clear();\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n]]></script>\r\n</ScriptInstance>"
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Report Extract",
					"item": [
						{
							"name": "ENERGY_CHARGING_MONTHLY_CLIENT|Chiffre d'affaire par client",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"ENERGY_CHARGING_MONTHLY_CLIENT\",\r\n    \"description\": \"Chiffre d'affaire par client\",\r\n    \"disabled\": false,\r\n    \"scriptType\": \"SQL\",\r\n    \"filenameFormat\": \"energy_charging_monthly_[yyyyMMdd].html\",\r\n    \"fileSeparator\": \";\",\r\n    \"outputDir\": \"reports/bump\",\r\n    \"sqlQuery\": \"select \\r\\n    to_char(date_trunc('month', rt.usage_date), 'YYYY-MM-DD') as \\\"Mois\\\",\\r\\n    rt.parameter_2 as \\\"Partenaire\\\",\\r\\n    ba.code||' - '||ba.description as \\\"Client\\\",\\r\\n    to_char(sum(rt.quantity),'9999999999') as \\\"Quantité\\\",\\r\\n    to_char(sum(rt.amount_without_tax),'9999999999D99')||' €' as \\\"Montant HT\\\"\\r\\nfrom\\r\\n    billing_rated_transaction rt\\r\\n    inner join billing_billing_account ba\\r\\n        on ba.id = rt.billing_account__id\\r\\ngroup by\\r\\n    \\\"Mois\\\",\\r\\n    \\\"Partenaire\\\",\\r\\n    \\\"Client\\\"\\r\\norder by\\r\\n    \\\"Mois\\\" DESC,\\r\\n    \\\"Partenaire\\\" ASC,\\r\\n    \\\"Client\\\" ASC\\r\\n;\",\r\n    \"reportExtractResultType\": \"HTML\",\r\n    \"style\": \"body {font-family: monospace;}\\r\\ntable {border-collapse: collapse;}\\r\\ntd,th {border: 1px solid black; padding: 3px 10px; text-align: center;}\\r\\nth {font-weight: bold; background-color: #aaa}\\r\\ntr:nth-child(odd) {background-color: #fff}\\r\\ntr:nth-child(even) {background-color: #eee}\\r\\ntr:hover {background-color: #fdd;}\\r\\ntd:hover {background-color: #fcc;}\\r\\n\",\r\n    \"accumulate\": false,\r\n    \"generateEmptyReport\": false,\r\n    \"maximumLine\": 100,\r\n    \"includeHeaders\": true\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "ENERGY_CHARGING_YEARLY_PARTNER|Chiffre d'affaire par année par partenaire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code === 200) {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    \r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"ENERGY_CHARGING_YEARLY_PARTNER\",\r\n    \"description\": \"Chiffre d'affaire par année par partenaire\",\r\n    \"disabled\": false,\r\n    \"scriptType\": \"SQL\",\r\n    \"filenameFormat\": \"energy_charging_yearly_[yyyyMMdd].html\",\r\n    \"fileSeparator\": \";\",\r\n    \"outputDir\": \"reports/bump\",\r\n    \"sqlQuery\": \"select \\r\\n    to_char(date_trunc('year', rt.usage_date), 'YYYY') as \\\"Année\\\",\\r\\n    rt.parameter_2 as \\\"Partenaire\\\",\\r\\n    to_char(sum(rt.quantity),'9999999999') as \\\"Quantité\\\",\\r\\n    to_char(sum(rt.amount_without_tax),'9999999999D99')||' €' as \\\"Montant HT\\\"\\r\\nfrom\\r\\n    billing_rated_transaction rt\\r\\n    inner join billing_billing_account ba\\r\\n        on ba.id = rt.billing_account__id\\r\\ngroup by\\r\\n    \\\"Année\\\",\\r\\n    \\\"Partenaire\\\"\\r\\norder by\\r\\n    \\\"Année\\\" DESC,\\r\\n    \\\"Partenaire\\\" ASC\\r\\n;\",\r\n    \"reportExtractResultType\": \"HTML\",\r\n    \"style\": \"body {font-family: monospace;}\\r\\ntable {border-collapse: collapse;}\\r\\ntd,th {border: 1px solid black; padding: 3px 10px; text-align: center;}\\r\\nth {font-weight: bold; background-color: #aaa}\\r\\ntr:nth-child(odd) {background-color: #fff}\\r\\ntr:nth-child(even) {background-color: #eee}\\r\\ntr:hover {background-color: #fdd;}\\r\\ntd:hover {background-color: #fcc;}\\r\\n\",\r\n    \"accumulate\": false,\r\n    \"generateEmptyReport\": false,\r\n    \"maximumLine\": 100,\r\n    \"includeHeaders\": true\r\n}"
								},
								"url": {
									"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"finance",
										"reportExtracts",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "DD Request",
			"item": [
				{
					"name": "ddRequest|code=Sepa_STD",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ddrequestOp\": \"CREATE\",\n    \"fromDueDate\": \"1975-1-1\",\n    \"toDueDate\": \"2090-1-1\",\n    \"ddRequestBuilderCode\": \"{{code}}\",\n    \"paymentOrRefundEnum\": \"PAYMENT\",\n    \"recurrent\": false\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/payment/ddrequestLotOp",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"payment",
								"ddrequestLotOp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run|AO_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if( pm.response.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/execute",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"execute"
							]
						}
					},
					"response": []
				},
				{
					"name": "ddRequest|code=SEPA_PAYMENT_JOB|desc=SEPA payment job|target=SEPA_STD",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"jobCategory\": \"PAYMENT\",\n    \"jobTemplate\": \"SepaDirectDebitJob\",\n    \"active\": true,\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"SepaJob_ddRequestBuilder\",\n                \"entityReferenceValue\": {\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\n                    \"code\": \"{{target}}\"\n                }\n            }\n        ]\n    },\n    \"limitToSingleNode\": true\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/createOrUpdate",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Run|SEPA_PAYMENT_JOB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if( pm.response.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/execute",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"execute"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PDF JOB",
			"item": [
				{
					"name": "Run|PDF_Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if( pm.response.code === 200) {",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.globals.set(\"jobRun.id\", jsonData.actionStatus.message);",
									"}",
									"",
									"  setTimeout(function(){",
									"          console.log(\"Sleeping for 1 seconds before next request.\");",
									"  }, 1000);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}"
						},
						"url": {
							"raw": "{{opencell.url}}/job/execute",
							"host": [
								"{{opencell.url}}"
							],
							"path": [
								"job",
								"execute"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SCRIPT|rating.LogWalletOperation|Logs the WalletOperation Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if( pm.response.code == 200 ) { tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors.length === 0; }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"name": "Content-Type",
						"value": "application/xml"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ScriptInstance>\r\n        <code>org.meveo.service.script.{{request.label.1}}</code>\r\n        <description>{{request.label.2}} {{$timestamp}}</description>\r\n        <type>JAVA</type>\r\n        <script><![CDATA[\r\npackage org.meveo.service.script.rating;\r\n\r\nimport org.meveo.service.script.Script;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.Map;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.dto.billing.WalletOperationDto;\r\nimport org.meveo.model.billing.WalletOperation;\r\nimport org.meveo.model.billing.Tax;\r\n\r\nimport org.meveo.service.catalog.impl.TaxService;\r\nimport org.meveo.service.billing.impl.RatingService;\r\n\r\n/**\r\n * Logs the WalletOperation\r\n * @author schambrin\r\n */\r\npublic class LogWalletOperation extends org.meveo.service.script.Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(LogWalletOperation.class);\r\n\r\n    public void execute(Map<String, Object> context) throws BusinessException {\r\n        context.entrySet().stream().forEach(entry->{ log.info(\"{}={}\",entry.getKey(),entry.getValue()); });\r\n        TaxService taxService = (TaxService)getServiceInterface(\"TaxService\");\r\n        RatingService ratingService = (RatingService)getServiceInterface(\"RatingService\");\r\n        WalletOperation wo = (WalletOperation) context.get(Script.CONTEXT_ENTITY);\r\n\r\n        try {\r\n        \tlog.info(\"wo={}\",new WalletOperationDto(wo));\r\n        \tlog.info(\"wo.tax={}\", wo.getTax());\r\n\r\n        } catch(Exception e) {\r\n            log.error(\"Exception:\", e);\r\n            throw new BusinessException(e.getMessage());\r\n        }\r\n    }\r\n}\r\n]]></script>\r\n</ScriptInstance>"
				},
				"url": {
					"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
					"host": [
						"{{opencell.url}}"
					],
					"path": [
						"scriptInstance",
						"createOrUpdate"
					]
				}
			},
			"response": []
		},
		{
			"name": "script|LogContext|Logs context Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
							"tests[\"is.compiled\"] = jsonData.compilationErrors.length === 0;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"name": "Content-Type",
						"value": "application/xml"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ScriptInstance>\r\n        <code>org.meveo.service.script.{{request.label.1}}</code>\r\n        <description>{{request.label.2}} {{$timestamp}}</description>\r\n        <type>JAVA</type>\r\n        <script><![CDATA[\r\npackage org.meveo.service.script;\r\n\r\nimport java.util.Map;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\npublic class LogContext extends org.meveo.service.script.Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(LogContext.class);\r\n    \r\n    @Override\r\n    public void execute(Map<String, Object> context) {\r\n        log.info(\">>> Method context >>>\");\r\n        context.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(entry->{ log.info(\"{}={}\",entry.getKey(),entry.getValue()); });\r\n        \r\n        //log.info(\">>> System environment variables >>>\");\r\n        //System.getenv().entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(entry->{ log.info(\"{}={}\",entry.getKey(),entry.getValue()); });\r\n    }\r\n}\r\n]]></script>\r\n</ScriptInstance>"
				},
				"url": {
					"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
					"host": [
						"{{opencell.url}}"
					],
					"path": [
						"scriptInstance",
						"createOrUpdate"
					]
				}
			},
			"response": []
		}
	],
		"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "tokenType",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessToken",
				"value": "{{access_token}}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Initialize variables",
					"var now=new Date();",
					"var now_addXXdays=new Date();",
					"pm.globals.set(\"timestamp.iso\", now.toISOString());",
					"pm.globals.set(\"request.label\", pm.info.requestName);",
					"",
					"",
					"now_addXXdays.setDate(now.getDate() - 15);",
					"pm.environment.set(\"timestamp.iso.remove.15days\", now_addXXdays.toISOString());",
					"",
					"var now_addXXdays=new Date();",
					"now_addXXdays.setDate(now.getDate() - 1);",
					"pm.environment.set(\"timestamp.iso.remove.1days\", now_addXXdays.toISOString());",
					"",
					"var now_addXXdays=new Date();",
					"now_addXXdays.setDate(now.getDate() + 30);",
					"pm.environment.set(\"timestamp.iso.add.10days\", now_addXXdays.toISOString());",
					"// add a 30 day",
					"",
					"var now_addXXdays=new Date();",
					"now_addXXdays.setDate(now.getDate() + 30);",
					"pm.environment.set(\"timestamp.iso.add.30days\", now_addXXdays.toISOString());",
					"// add a 60 day",
					"",
					"var now_addXXdays=new Date();",
					"now_addXXdays.setDate(now.getDate() + 60);",
					"pm.environment.set(\"timestamp.iso.add.60days\", now_addXXdays.toISOString());",
					"",
					"var parts = pm.info.requestName.split(\"|\");",
					"",
					"for(let i=0; i<parts.length; i++) {",
					"    pm.globals.set(\"wait\", 0);",
					"    pm.globals.set(\"request.label.\"+i, parts[i]);",
					"",
					"    if(parts[i].indexOf(\"=\") != -1 ){",
					"        propName = parts[i].split(\"=\")[0].trim();",
					"        propValue = parts[i].split(\"=\")[1];",
					"        pm.globals.set(propName, propValue);",
					"    }",
					"}",
					"",
					"// Manage token auth",
					"var token = pm.variables.get(\"access_token\");",
					"//console.log(\"token=\"+token);",
					"",
					"if(!token || token === \"\" ) {",
					"    console.log(\"token is not defined\");",
					"    // Set some environment variables to use in the access token request. ",
					"    var client_id = pm.environment.get(\"client.id\");",
					"    var client_secret = pm.environment.get(\"client.secret\");",
					"    var opencell_url = pm.environment.get(\"opencell.base\");",
					"    //can use an external token url",
					"     ",
					"    var keycloak_token_url = pm.environment.get(\"keycloak.token.url\");",
					"    console.log(\"keycloak_token_url: \"+ keycloak_token_url);",
					"    ",
					"    if(!keycloak_token_url || keycloak_token_url === \"\" ) {",
					"        pm.globals.set(\"keycloak_token_url\", opencell_url + '/auth/realms/opencell/protocol/openid-connect/token');",
					"",
					"        keycloak_token_url = opencell_url + '/auth/realms/opencell/protocol/openid-connect/token';",
					"        console.log(\"new keycloak_token_url: \"+ keycloak_token_url);",
					"    }",
					"    ",
					"",
					"",
					"    var username = pm.environment.get(\"opencell.username\");",
					"    var password = pm.environment.get(\"opencell.password\");",
					"    var CryptoJS = require(\"crypto-js\")",
					"    // Encrypt the Client ID and Secret in base64 ",
					"    var rawStr = CryptoJS.enc.Utf8.parse(client_id + ':' + client_secret)",
					"    var client_cred = CryptoJS.enc.Base64.stringify(rawStr)",
					"    // Now let's get a new oauth2 access_token and set it in a variable ",
					"",
					"    pm.sendRequest(",
					"        { ",
					"            url: keycloak_token_url, ",
					"           //      url: opencell_url + '/auth/realms/opencell/protocol/openid-connect/token', ",
					"            method: 'POST', ",
					"            header: ",
					"            { ",
					"                //'Authorization': 'Basic ' + client_cred, ",
					"                'Cache-Control': 'no-cache', ",
					"                'Content-Type': 'application/x-www-form-urlencoded' ",
					"            }, body: ",
					"            { ",
					"                mode: 'urlencoded', ",
					"                urlencoded: ",
					"                [",
					"                    { ",
					"                        key: \"client_id\", ",
					"                        value: client_id ",
					"                    }, ",
					"                    { ",
					"                        key: \"username\", ",
					"                        value: username ",
					"                    },",
					"                    { ",
					"                        key: \"password\", ",
					"                        value: password ",
					"                    },",
					"                    { ",
					"                        key: \"grant_type\", ",
					"                        value: \"password\" ",
					"                    },",
					"                    { ",
					"                        key: \"client_secret\", ",
					"                        value: client_secret",
					"                    },",
					"                ] ",
					"            } ",
					"        }, ",
					"        function (err, response) { ",
					"           // console.log(\"AUTH_RETURN_CODE\", err);",
					"           // console.log(\"AUTH_RESPONSE\", response);",
					"            const jsonResponse = response.json();",
					"            console.log(\"Saving token to variables\")",
					"            pm.variables.set(\"access_token\", jsonResponse.access_token); ",
					"            pm.variables.set(\"test\", jsonResponse.access_token); ",
					"        }",
					"        );",
					"} else{",
					"    //console.log(\"token already exists\");",
					"}",
					"",
					"// Setup Function library",
					"utils = {",
					"  sleep: function(seconds) {",
					"    console.log(\"Waiting for \" + pm.variables.get(\"request.label.0\") + \" for \" + seconds + \" seconds...\");",
					"    setTimeout(function () { }, seconds * 1000);",
					"  }",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var wait = pm.variables.get(\"wait\");",
					"if (wait > 0) {",
					"    // utils.sleep(wait); doesn't seem to work",
					"    console.log(\"Waiting for \" + pm.variables.get(\"request.label.0\") + \" for \" + wait + \" seconds...\");",
					"    setTimeout(function () { }, wait * 1000);",
					"}",
					"",
					"if (pm.response.code == 401) {",
					"    console.log(\"Unauthorized[401] : access_token may be invalid -> deleting token. Please retry...\");",
					"    pm.variables.unset(\"access_token\");",
					"    console.log(\"Jumping to \" + pm.info.requestName);",
					"    postman.setNextRequest(pm.info.requestName);",
					"} else {",
					"    tests[\"is.success\"] = (pm.response.code == 200 || pm.response.code == 204 || pm.response.code == 201);",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "provider.code",
			"value": "DEMO"
		},
		{
			"key": "template.code",
			"value": "BASE"
		},
		{
			"key": "template.label",
			"value": "Démo OPENSOFT"
		},
		{
			"key": "seller.code",
			"value": "OPENSOFT"
		},
		{
			"key": "offer.code",
			"value": "OF"
		},
		{
			"key": "project.code",
			"value": "Basic-001"
		},
		{
			"key": "project.description",
			"value": "Basic Offer\n"
		},
		{
			"key": "project.type",
			"value": "Demo"
		},
		{
			"key": "project.version",
			"value": "10.0.3"
		},
		{
			"key": "offer_label",
			"value": "Basic Offer"
		},
		{
			"key": "SE_OSS Label",
			"value": "One-shot Training Service"
		},
		{
			"key": "SE_OST Label",
			"value": "One-shot termination service"
		},
		{
			"key": "SE_REC_ADV Label",
			"value": "Recurring Advance Service"
		},
		{
			"key": "SE_USG Label",
			"value": "Unit Professional Service"
		},
		{
			"key": "SE_USG_FREE Label",
			"value": "Free Usage Service"
		},
		{
			"key": "SE_USG_BAND Label",
			"value": "Band Usage Service"
		},
		{
			"key": "SE_USG_TIER Label",
			"value": "Tier Usage Service"
		},
		{
			"key": "SE_USG_VOLUME Label",
			"value": "Volume Usage Service"
		},
		{
			"key": "PR_PRD Label",
			"value": "Product "
		},
		{
			"key": "ICAT_PRD Label",
			"value": "Product"
		},
		{
			"key": "ICAT_REC Label",
			"value": "Recurring License"
		},
		{
			"key": "ICAT_OSH Label",
			"value": "Certified Training Course"
		},
		{
			"key": "ICAT_USG Label",
			"value": "Usage"
		},
		{
			"key": "discount_label",
			"value": "Discount"
		},
		{
			"key": "ppmOsVersion",
			"value": ""
		},
		{
			"key": "offerOneId}",
			"value": ""
		},
		{
			"key": "orderTwoNumber",
			"value": ""
		},
		{
			"value": ""
		}
	]
}