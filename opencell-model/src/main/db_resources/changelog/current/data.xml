<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

	<changeSet id="#4150_20190415 - Disable standard jobs" author="EdwardPLegaspi">
		<update tableName="meveo_job_instance">
			<column name="timerentity_id" value="NULL"></column>
			<column name="disabled" valueNumeric="0"></column>
		</update>
		<delete tableName="meveo_timer">
		</delete>
	</changeSet>

    <changeSet id="#INTRD-1166_20211018_Business_attributes" author="MohammedELAZZOUZI">
		<insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="product activation date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-1"></column>
        	<column name="code" value="product activation date"></column>
        	<column name="description" value="Product activation date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="product quantity" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-2"></column>
        	<column name="code" value="product quantity"></column>
        	<column name="description" value="Product quantity"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="usage date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-3"></column>
        	<column name="code" value="usage date"></column>
        	<column name="description" value="Usage date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="usage quantity" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-4"></column>
        	<column name="code" value="usage quantity"></column>
        	<column name="description" value="Usage quantity"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="renewal date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-5"></column>
        	<column name="code" value="renewal date"></column>
        	<column name="description" value="Renewal date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="delivery date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-6"></column>
        	<column name="code" value="delivery date"></column>
        	<column name="description" value="Delivery date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="quote validation date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-7"></column>
        	<column name="code" value="quote validation date"></column>
        	<column name="description" value="Quote validation date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="subscription date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-8"></column>
        	<column name="code" value="subscription date"></column>
        	<column name="description" value="Subscription date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="subscription age months" />
        	<column name="attribute_type" value="INTEGER"></column>
        	<column name="id" valueNumeric="-9"></column>
        	<column name="code" value="subscription age months"></column>
        	<column name="description" value="Subscription age months"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="subscription age days" />
        	<column name="attribute_type" value="INTEGER"></column>
        	<column name="id" valueNumeric="-10"></column>
        	<column name="code" value="subscription age days"></column>
        	<column name="description" value="Subscription age days"></column>
        </insert>
         <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 1" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-11"></column>
        	<column name="code" value="EDR text parameter 1"></column>
        	<column name="description" value="EDR text parameter 1"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 2" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-12"></column>
        	<column name="code" value="EDR text parameter 2"></column>
        	<column name="description" value="EDR text parameter 2"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 3" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-13"></column>
        	<column name="code" value="EDR text parameter 3"></column>
        	<column name="description" value="EDR text parameter 3"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 4" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-14"></column>
        	<column name="code" value="EDR text parameter 4"></column>
        	<column name="description" value="EDR text parameter 4"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 5" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-15"></column>
        	<column name="code" value="EDR text parameter 5"></column>
        	<column name="description" value="EDR text parameter 5"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 6" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-16"></column>
        	<column name="code" value="EDR text parameter 6"></column>
        	<column name="description" value="EDR text parameter 6"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 7" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-17"></column>
        	<column name="code" value="EDR text parameter 7"></column>
        	<column name="description" value="EDR text parameter 7"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 8" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-18"></column>
        	<column name="code" value="EDR text parameter 8"></column>
        	<column name="description" value="EDR text parameter 8"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 9" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-19"></column>
        	<column name="code" value="EDR text parameter 9"></column>
        	<column name="description" value="EDR text parameter 9"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 1" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-21"></column>
        	<column name="code" value="EDR date parameter 1"></column>
        	<column name="description" value="EDR date parameter 1"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 2" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-22"></column>
        	<column name="code" value="EDR date parameter 2"></column>
        	<column name="description" value="EDR date parameter 2"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 3" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-23"></column>
        	<column name="code" value="EDR date parameter 3"></column>
        	<column name="description" value="EDR date parameter 3"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 4" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-24"></column>
        	<column name="code" value="EDR date parameter 4"></column>
        	<column name="description" value="EDR date parameter 4"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 5" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-25"></column>
        	<column name="code" value="EDR date parameter 5"></column>
        	<column name="description" value="EDR date parameter 5"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 1" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-31"></column>
        	<column name="code" value="EDR numeric parameter 1"></column>
        	<column name="description" value="EDR numeric parameter 1"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 2" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-32"></column>
        	<column name="code" value="EDR numeric parameter 2"></column>
        	<column name="description" value="EDR numeric parameter 2"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 3" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-33"></column>
        	<column name="code" value="EDR numeric parameter 3"></column>
        	<column name="description" value="EDR numeric parameter 3"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 4" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-34"></column>
        	<column name="code" value="EDR numeric parameter 4"></column>
        	<column name="description" value="EDR numeric parameter 4"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 5" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-35"></column>
        	<column name="code" value="EDR numeric parameter 5"></column>
        	<column name="description" value="EDR numeric parameter 5"></column>
        </insert>
    </changeSet>
    
    <changeSet id="#INTRD-1166_20211110_Business_attributes" author="MohammedELAZZOUZI">
    	<sql>update cpq_attribute set code = replace(code, ' ', '_') where code like '% %'</sql>
    </changeSet>
    
    <changeSet id="#NTRD-2413_20211028_Business_attributes_add_el" author="MohammedELAZZOUZI">
		<update tableName="cpq_attribute"><column name="el_value">${serviceInstance.getActivationDate()}</column><where>id=-1</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${serviceInstance.getQuantity()}</column><where>id=-2</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getEventDate()}</column><where>id=-3</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getQuantity()}</column><where>id=-4</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${sub.getRenewalDate()}</column><where>id=-5</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${serviceInstance.getDeliveryDate()}</column><where>id=-6</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${quote.getValidationDate()}</column><where>id=-7</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${quote.getValidationDate()}</column><where>id=-8</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${sub.getSubscriptionMonthsAge()}</column><where>id=-9</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${sub.getSubscriptionDaysAge()}</column><where>id=-10</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter1()}</column><where>id=-11</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter2()}</column><where>id=-12</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter3()}</column><where>id=-13</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter4()}</column><where>id=-14</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter5()}</column><where>id=-15</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter6()}</column><where>id=-16</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter7()}</column><where>id=-17</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter8()}</column><where>id=-18</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter9()}</column><where>id=-19</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam1()}</column><where>id=-21</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam2()}</column><where>id=-22</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam3()}</column><where>id=-23</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam4()}</column><where>id=-24</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam5()}</column><where>id=-25</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam1()}</column><where>id=-31</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam2()}</column><where>id=-32</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam3()}</column><where>id=-33</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam4()}</column><where>id=-34</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam5()}</column><where>id=-35</where></update>
    </changeSet>

	<changeSet id="#4092_20190415 - Add SelfCare Settings" author="EdwardPLegaspi">
		<insert tableName="adm_permission">
            <column name="id" valueNumeric="-117" />
            <column name="name" value="API User" />
            <column name="permission" value="apiAccess" />
        </insert>
        <insert tableName="adm_permission">
            <column name="id" valueNumeric="-118" />
            <column name="name" value="Administration visualization" />
            <column name="permission" value="administrationVisualization" />
        </insert>
		<insert tableName="adm_role">
            <column name="id" valueNumeric="-112" />
            <column name="version" valueNumeric="0" />
            <column name="role_description" value="selfcareDefault" />
            <column name="role_name" value="selfcareDefault" />
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-112"></column>
            <column name="permission_id" value="-117"></column>
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-112"></column>
            <column name="permission_id" value="-118"></column>
        </insert>
        <insert tableName="adm_user">
            <column name="id" valueNumeric="-5" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="email" value="DEMO.selfcare.api@opencellsoft.com"/>
            <column name="firstname" value="selfcare.api"/>
            <column name="lastname" value="DEMO"/>
            <column name="username" value="DEMO.selfcare.api" />
            <column name="uuid" value="DEMO.selfcare.api" />
        </insert>
        <insert tableName="adm_user_role">
            <column name="user_id" value="-5"></column>
            <column name="role_id" value="-112"></column>
        </insert>

        <sql><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-20, 0, 0, ${db.current.time}, 'org.meveo.service.script.selfcare.CreateAccess', 'AddAccess', 'JAVA', '
			package org.meveo.service.script.selfcare;

			import java.util.Date;
			import java.util.Map;

			import org.meveo.admin.exception.BusinessException;
			import org.meveo.model.admin.User;
			import org.meveo.model.billing.Subscription;
			import org.meveo.service.medina.impl.AccessService;
			import org.meveo.service.script.module.ModuleScript;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;

			public class CreateAccess extends ModuleScript {
				private static final Logger log = LoggerFactory.getLogger(CreateAccess.class);

				@Override
			    public void execute(Map<String, Object> methodContext) throws BusinessException {
					AccessService accessService = (AccessService) getServiceInterface("AccessService");
					Subscription subscription = (Subscription) methodContext.get("subscription");
					if(subscription == null){
						throw new BusinessException("subscription is null");
					}
					log.debug("subscription.getCode() : "+subscription.getCode());
					org.meveo.model.mediation.Access access = new org.meveo.model.mediation.Access();
					access.setSubscription(subscription);
					access.setAccessUserId("ACC_"+subscription.getCode());
					access.setStartDate(new Date());
					access.setEndDate(null);
					accessService.create(access);
			    }
			}
        ');
        ]]></sql>

        <insert tableName="meveo_module">
        	<column name="id" valueNumeric="-1"></column>
        	<column name="version" value="0"></column>
        	<column name="disabled" value="0"></column>
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="code" value="AddAccessModule"></column>
        	<column name="description" value="AddAccessModule"></column>
        	<column name="module_license" value="GPL"></column>
        	<column name="installed" value="0"></column>
        	<column name="script_instance_id" valueNumeric="-20"></column>
        </insert>

        <sql>
        	<![CDATA[UPDATE ${db.schema.adapted}meveo_module
        		SET module_source='<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
				<Module license="GPL" code="AddAccessModule" description="AddAccessModule">
				    <script code="org.meveo.service.script.selfcare.CreateAccess" description="AddAccess"></script>
				    <moduleItems>
				        <notification code="AddAccessNotif">
				            <classNameFilter>org.meveo.model.billing.Subscription</classNameFilter>
				            <eventTypeFilter>CREATED</eventTypeFilter>
				            <elFilter></elFilter>
				            <scriptInstanceCode>org.meveo.service.script.selfcare.CreateAccess</scriptInstanceCode>
				            <scriptParams>
				                <entry>
				                    <key>subscription</key>
				                    <value>#{event}</value>
				                </entry>
				            </scriptParams>
				            <priority>0</priority>
				        </notification>
				    </moduleItems>
				</Module>
	        	'
			WHERE id=-1;]]>
        </sql>

        <sql><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-21, 0, 0, ${db.current.time}, 'org.meveo.service.script.SelfcareAccountScript', 'Script BAM for selfcare accounts', 'JAVA', '
			package org.meveo.service.script;
			import java.math.BigDecimal;
			import java.nio.charset.Charset;
			import java.security.MessageDigest;
			import java.security.NoSuchAlgorithmException;
			import java.util.List;
			import java.util.HashSet;
			import java.util.Map;
			import org.meveo.admin.exception.BusinessException;
			import org.meveo.api.dto.account.CRMAccountHierarchyDto;
			import org.meveo.api.dto.UserDto;
			import org.meveo.api.exception.MeveoApiException;
			import org.meveo.commons.utils.StringUtils;
			import org.meveo.model.admin.User;
			import org.meveo.service.script.account.AccountScript;
			import org.meveo.model.AccountEntity;
			import org.slf4j.Logger;
			import java.util.Set;
			import java.util.ArrayList;
			import org.meveo.model.security.Role;
			import org.meveo.service.crm.impl.CustomerService;
			import org.slf4j.LoggerFactory;
			import org.meveo.model.crm.Customer;
			import org.meveo.service.crm.impl.CustomFieldInstanceService;
			import org.meveo.api.UserApi;

			public class SelfcareAccountScript extends AccountScript {

				private static final Logger log = LoggerFactory.getLogger(SelfcareAccountScript.class);
				private Map<String, Object> initContext = null;

				static MessageDigest messageDigest = null;
				static {
					try {
						messageDigest = MessageDigest.getInstance("MD5");
					}
					catch (NoSuchAlgorithmException e) {
					}
				}
				CustomFieldInstanceService customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface("CustomFieldInstanceService");
				CustomerService customerService = (CustomerService) getServiceInterface("CustomerService");
				UserApi userApi = (UserApi) getServiceInterface("UserApi");

				@Override
				public void createAccount(Map<String, Object> methodContext) throws BusinessException {
					AccountEntity account = (AccountEntity) methodContext.get(Script.CONTEXT_ENTITY);
					UserDto user = new UserDto();
					CRMAccountHierarchyDto accountDto = (CRMAccountHierarchyDto) methodContext.get(AccountScript.CONTEXT_ACCOUNT_HIERARCHY_DTO);
					Customer customer = customerService.findByCode(accountDto.getCode());

					log.debug("accountCode : "+accountDto.getCode(), " crmAccountType :"+accountDto.getCrmAccountType());

					String email = accountDto.getContactInformation().getEmail();
					user.setEmail(email);
					if(accountDto.getName()!=null){
						user.setFirstName(accountDto.getName().getFirstName());
						user.setLastName(accountDto.getName().getLastName());
					}
					user.setUsername(accountDto.getCode());

					/*
					String password =(String) customFieldInstanceService.getCFValue(customer, "password");
					if( password != null )
					{
						user.setPassword(password);
					}
					else
					{
						log.warn("password CF is null, using username");
						user.setPassword(user.getUsername());
					}
					*/

					List<String> roles = new ArrayList<String>();
					roles.add("selfcareDefault");
					user.setRoles(roles);
					log.debug("lastName :"+user.getLastName() + " firstName : "+user.getFirstName() + " email : "+user.getEmail());
					try{
						userApi.createOrUpdate(user);
					}
					catch(MeveoApiException e){
						log.error("failed to create user ",e);
						e.printStackTrace();
					}
				}
			}
        ');
        ]]></sql>

        <sql><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-22, 0, 0, ${db.current.time}, 'org.meveo.service.script.selfcare.RegisterHierarchy', 'Register crm hierarchy', 'JAVA', '
			package org.meveo.service.script.selfcare;

			import java.util.Map;

			import org.meveo.admin.exception.BusinessException;
			import org.meveo.api.account.AccountHierarchyApi;
			import org.meveo.api.dto.account.CRMAccountHierarchyDto;
			import org.meveo.api.exception.MeveoApiException;
			import org.meveo.commons.utils.JsonUtils;
			import org.meveo.model.admin.User;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;

			public class RegisterHierarchy extends org.meveo.service.script.Script {
				private static final Logger log = LoggerFactory.getLogger(RegisterHierarchy.class);
				public void execute(Map<String, Object> initContext) throws BusinessException {
					log.info("Execute...");
					AccountHierarchyApi accountHierarchyApi = (AccountHierarchyApi) getServiceInterface("AccountHierarchyApi");
					String body = (String) initContext.get("body");
					log.info("body:"+body);
					CRMAccountHierarchyDto crmAccountHierarchyDto = JsonUtils.toObject(body, CRMAccountHierarchyDto.class);
					log.info("crmAccountHierarchyDto"+crmAccountHierarchyDto);

					try {
						accountHierarchyApi.createCRMAccountHierarchy(crmAccountHierarchyDto);
					} catch (MeveoApiException e) {
						e.printStackTrace();
					}
				}
			}
        ');
        ]]></sql>

        <insert tableName="meveo_module">
        	<column name="id" valueNumeric="-2"></column>
        	<column name="version" value="0"></column>
        	<column name="disabled" value="0"></column>
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="code" value="Client"></column>
        	<column name="description" value="Individual customer"></column>
        	<column name="module_license" value="GPL"></column>
        	<column name="installed" value="0"></column>
        	<column name="script_instance_id" valueNumeric="-21"></column>
        </insert>

        <insert tableName="crm_business_account_model">
        	<column name="id" valueNumeric="-2"></column>
        	<column name="hierarchy_type" value="C_UA"></column>
        </insert>

        <sql>
        	<![CDATA[UPDATE ${db.schema.adapted}meveo_module
        		SET module_source='<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
				<BusinessAccountModel license="GPL" code="Client" description="Individual customer">
				    <script code="org.meveo.service.script.SelfcareAccountScript" description="Script BAM for selfcare accounts"></script>
				    <moduleItems>
				        <emailNotif code="AccountCreationNotif">
				            <classNameFilter>org.meveo.model.admin.User</classNameFilter>
				            <eventTypeFilter>CREATED</eventTypeFilter>
				            <scriptParams/>
				            <priority>0</priority>
				            <emailFrom>bot@opencellsoft.com</emailFrom>
				            <emailToEl>#{event.email}</emailToEl>
				            <subject>Account creation confirmation</subject>
				            <body>Hello,
				                Your login has been created:
				                user name :  #{event.userName}
				                access url : http://opencell_url/frontend/DEMO/cc/index.html
								</body>
				        </emailNotif>
				        <notification code="SelfcareRegistration">
				            <classNameFilter>org.meveo.model.notification.InboundRequest</classNameFilter>
				            <eventTypeFilter>INBOUND_REQ</eventTypeFilter>
				            <elFilter>#{event.pathInfo.startsWith("/DEMO/registration")}</elFilter>
				            <scriptInstanceCode>org.meveo.service.script.selfcare.RegisterHierarchy</scriptInstanceCode>
				            <scriptParams>
				                <entry>
				                    <key>body</key>
				                    <value>#{event.getBody()}</value>
				                </entry>
				            </scriptParams>
				            <priority>0</priority>
				        </notification>
				        <script code="org.meveo.service.script.selfcare.RegisterHierarchy" description="Register crm hierarchy">
				            <type>JAVA</type>
				            <script>
								package org.meveo.service.script.selfcare;

								import java.util.Map;

								import org.meveo.admin.exception.BusinessException;
								import org.meveo.api.account.AccountHierarchyApi;
								import org.meveo.api.dto.account.CRMAccountHierarchyDto;
								import org.meveo.api.exception.MeveoApiException;
								import org.meveo.commons.utils.JsonUtils;
								import org.meveo.model.admin.User;
								import org.slf4j.Logger;
								import org.slf4j.LoggerFactory;

								public class RegisterHierarchy extends org.meveo.service.script.Script {
									private static final Logger log = LoggerFactory.getLogger(RegisterHierarchy.class);
									public void execute(Map&lt;String, Object&gt; initContext) throws BusinessException {
										log.info("Execute...");
										AccountHierarchyApi accountHierarchyApi = (AccountHierarchyApi) getServiceInterface("AccountHierarchyApi");
										String body = (String) initContext.get("body");
										log.info("body:"+body);
										CRMAccountHierarchyDto crmAccountHierarchyDto = JsonUtils.toObject(body, CRMAccountHierarchyDto.class);
										log.info("crmAccountHierarchyDto"+crmAccountHierarchyDto);
										try {
											accountHierarchyApi.createCRMAccountHierarchy(crmAccountHierarchyDto);
										} catch (MeveoApiException e) {
											e.printStackTrace();
										}
									}
								}
				           </script>
				        </script>
				    </moduleItems>
				    <hierarchyType>C_UA</hierarchyType>
				</BusinessAccountModel>
	        	'
			WHERE id=-2;]]>
        </sql>

	</changeSet>

	<changeSet author="EdwardPLegaspi" id="#4150_20190424 - Bring back the timers">
        <insert tableName="meveo_timer">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />
            <column name="sc_d_o_month" value="*" />
            <column name="sc_d_o_week" value="*" />
            <column name="sc_hour" value="*" />
            <column name="sc_min" value="0" />
            <column name="sc_month" value="*" />
            <column name="sc_sec" value="0" />
            <column name="sc_year" value="*" />
            <column name="code" value="Hourly" />

            <column name="created" valueDate="2015-03-19 00:04:19.913" />
        </insert>
        <insert tableName="meveo_timer">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="sc_d_o_month" value="Last" />
            <column name="sc_d_o_week" value="0" />
            <column name="sc_hour" value="23" />
            <column name="sc_min" value="59" />
            <column name="sc_month" value="*" />
            <column name="sc_sec" value="59" />
            <column name="sc_year" value="*" />
            <column name="code" value="Monthly" />

            <column name="created" valueDate="2015-03-19 00:04:19.913" />
        </insert>
        <insert tableName="meveo_timer">
            <column name="id" valueNumeric="-3" />
            <column name="version" valueNumeric="0" />
            <column name="sc_d_o_month" value="*" />
            <column name="sc_d_o_week" value="*" />
            <column name="sc_hour" value="23" />
            <column name="sc_min" value="59" />
            <column name="sc_month" value="*" />
            <column name="sc_sec" value="59" />
            <column name="sc_year" value="*" />
            <column name="code" value="Daily-midnight" />

            <column name="created" valueDate="2017-06-29 00:04:19.913" />
        </insert>
    </changeSet>

	<changeSet id="#4082_20190404" author="SaidRamli">
        <sql dbms="postgresql"><![CDATA[INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-23, 0, 0, ${db.current.time}, 'org.meveo.service.script.DeleteCustomersScript', 'DeleteCustomersScript', 'JAVA', '
package org.meveo.service.script;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

	private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
			AccountOperationService.class.getSimpleName());
	private final CustomerService customerService = (CustomerService) getServiceInterface(
			CustomerService.class.getSimpleName());
	private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
			InvoiceService.class.getSimpleName());
	private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			SubscriptionService.class.getSimpleName());
	private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
			RatedTransactionService.class.getSimpleName());
	private final WalletService walletService = (WalletService) getServiceInterface(
			WalletService.class.getSimpleName());
	private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
			RejectedBillingAccountService.class.getSimpleName());
	private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
			CounterInstanceService.class.getSimpleName());
	private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
			CounterPeriodService.class.getSimpleName());
	private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
			OrderItemService.class.getSimpleName());
	private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
			ProductInstanceService.class.getSimpleName());
	private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
			BusinessEntityService.class.getSimpleName());
	private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
			WalletOperationService.class.getSimpleName());
	private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			ServiceInstanceService.class.getSimpleName());

	private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

	@SuppressWarnings("rawtypes")
	private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
			ChargeInstanceService.class.getSimpleName());

	private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		log.debug(" >>> execute {} ", methodContext.entrySet());

		try {

			Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
			if (MapUtils.isEmpty(record)) {
				throw new BusinessException(String.format("Parameter RECORD is missing"));
			}

			final String customerCode = record.get("customerCode");
			Customer customer = customerService.findByCode(customerCode);
			if (customer == null) {
				throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
			}

			String noCheckVal = record.get("noCheck");
			if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
				throw new BusinessException(
						String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
			}
			boolean noCheck = "1".contentEquals(noCheckVal);

			if (!noCheck) {
				// If noCheck is 0 then the following conditions must be met in order to allow
				// deletion:
				// No unmatched AO
				// No open EDR/WO/RT

				this.checkUnmatchedAOs(customer);
				this.checkOpenEDRs(customer);
				this.checkOpenWOs(customer);
				this.checkOpenRTs(customer);
			}

			this.removeCustomerHirarchy(customer);

		} catch (BusinessException be) {
			throw be;
		} catch (Exception e) {
			log.error(" Error executing DeleteCustomersScript ", e);
			throw new BusinessException(e.getMessage());
		}
	}

	private void checkOpenEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenEDRs for customer = {} ", customer);
			String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Object count = edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId())
					.getSingleResult();
			log.debug(" count of open EDRs = {} ", count);
			log.debug(" End checkOpenEDRs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open EDRs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenWOs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenWOs for customer = {} ", customer);
			String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
			final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
					WalletOperationService.class.getSimpleName());

			Object count = walletOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open WOs = {} ", count);
			log.debug(" End checkOpenWOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open WOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenRTs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkOpenRTs for customer = {} ", customer);
			String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
			Object count = this.ratedTransactionService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open RTs = {} ", count);
			log.debug(" End checkOpenRTs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open RTs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkUnmatchedAOs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
			String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
			final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
					AccountOperationService.class.getSimpleName());
			Object count = accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of unmatched AOs = {} ", count);
			log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeCustomerHirarchy(Customer customer) throws BusinessException {
		log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

		//
		// A workaround for #4134 , no need for this method if #4134 is fixed (only
		// 6.1.X is concerned)!
		this.nullifyAOsSeller(customer);

      	this.removeWalletOperations(customer);
		this.removeChargeInstances(customer);
		// the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
		this.nullifySubCategoryInvoiceAgregatesWallet(customer);
		this.removeWalletInstances(customer);

		this.removePaymentHistory(customer);
		this.removeRatedTransactions(customer);
		this.removeInvoices(customer);


		this.removeServiceInstances(customer);
		this.removeAccess(customer);
		this.removeEDRs(customer);
		this.removeSubscriptions(customer);

		this.removeRejectedBAs(customer);

		this.removeCounterPeriods(customer);
		this.removeCounterInstances(customer);
		this.removeOrderItems(customer);
		this.removeProductInstances(customer);
		this.removeMatchingAmounts(customer);

		this.customerService.remove(customer);

		log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
	}

	private void removeEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);

			String query = "select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = edrService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} EDR to delete ", ids.size());

			for (Long id : ids) {
				edrService.remove(id);
			}

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeMatchingAmounts(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

			final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
			final String query = "select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = matchingAmountService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} MatchingAmount to delete ", ids.size());

			for (Long id : ids) {
				matchingAmountService.remove(id);
			}

			log.debug(" End removeMatchingAmounts for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeAccess(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeAccess for customer = {} ", customer);

			final AccessService accessService = (AccessService) getServiceInterface(
					AccessService.class.getSimpleName());

			final String query = "select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = accessService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} Access to delete ", ids.size());

			for (Long id : ids) {
				accessService.remove(id);
			}

			log.debug(" End removeAccess for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeServiceInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeServiceInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findServiceInstances(customer));
			log.debug(" {} ServiceInstance to delete ", ids.size());

			for (Long id : ids) {
				this.serviceInstanceService.remove(id);
			}

			log.debug(" End removeServiceInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findServiceInstances(Customer customer) {
		try {
			log.debug(" findServiceInstances for customer={} ", customer);
			String query = "select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.serviceInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findServiceInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeWalletOperations(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletOperations for customer = {} ", customer);

			Collection<Long> ids = safe(this.findWalletOperations(customer));
			log.debug(" {} WalletOperation to delete ", ids.size());

			for (Long id : ids) {
				this.walletOperationService.remove(id);
			}

			log.debug(" End removeWalletOperations for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findWalletOperations(Customer customer) {
		try {
			log.debug(" findWalletOperations for customer={} ", customer);
			String query = "select wo.id from WalletOperation wo where wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.walletOperationService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findWalletOperations : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void removePaymentHistory(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removePaymentHistory for customer = {} ", customer);

			String query = "delete from PaymentHistory ph1 where ph1.id in (select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode) ";
			int count = this.businessEntityService.getEntityManager().createQuery(query)
					.setParameter("customerCode", customer.getCode()).executeUpdate();

			log.debug(" {} PaymentHistory to delete ", count);
			log.debug(" End removePaymentHistory for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void nullifyAOsSeller(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

			String query = "UPDATE AccountOperation ao1 SET ao1.seller = null where ao1.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);

			StringBuilder query = new StringBuilder( "UPDATE SubCategoryInvoiceAgregate subCat SET subCat.wallet = null ")
					.append(" where subCat.id in (select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId) ");

			int count = this.accountOperationService.getEntityManager().createQuery(query.toString()).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", count);
			log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeProductInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeProductInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findProductInstances(customer));
			log.debug(" {} ProductInstance to delete ", ids.size());

			for (Long id : ids) {
				this.productInstanceService.remove(id);
			}

			log.debug(" End removeProductInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findProductInstances(Customer customer) {
		try {
			log.debug(" findProductInstances for customer={} ", customer);
			String query = "select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.productInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findProductInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeOrderItems(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeOrderItem for customer = {} ", customer);

			Collection<Long> ids = safe(this.findOrderItems(customer));
			log.debug(" {} OrderItem to delete ", ids.size());

			for (Long id : ids) {
				this.orderItemService.remove(id);
			}

			log.debug(" End removeOrderItem for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findOrderItems(Customer customer) {
		try {
			log.debug(" findOrderItems for customer={} ", customer);
			String query = "select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.orderItemService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeCounterPeriods(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterPeriods for customer = {} ", customer);

			Collection<Long> ids = safe(this.findCounterPeriods(customer));
			log.debug(" {} CounterPeriod to delete ", ids.size());

			for (Long id : ids) {
				this.counterPeriodService.remove(id);
			}

			log.debug(" End removeCounterPeriods for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findCounterPeriods(Customer customer) {
		try {
			log.debug(" findCounterPeriods for customer={} ", customer);
			String query = "select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.counterPeriodService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeCounterInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findCounterInstances(customer));
			log.debug(" {} CounterInstance to delete ", ids.size());

			for (Long id : ids) {
				this.counterInstanceService.remove(id);
			}

			log.debug(" End removeCounterInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findCounterInstances(Customer customer) {
		try {
			log.debug(" findCounterInstances for customer={} ", customer);
			String query = "select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.counterInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeRejectedBAs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRejectedBAs for customer = {} ", customer);

			Collection<Long> ids = safe(this.findRejectedBillingAccounts(customer));
			log.debug(" {} RejectedBillingAccount to delete ", ids.size());

			for (Long id : ids) {
				this.rejectedBillingAccountService.remove(id);
			}

			log.debug(" End removeRejectedBAs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findRejectedBillingAccounts(Customer customer) {
		try {
			log.debug(" findRejectedBillingAccounts for customer={} ", customer);
			String query = "select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.rejectedBillingAccountService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findRejectedBillingAccounts : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeInvoices(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeInvoices for customer = {} ", customer);

			Collection<Long> ids = safe(this.findInvoicesIds(customer));
			log.debug(" {} Invoices to delete ", ids.size());

			for (Long id : ids) {
				this.invoiceService.remove(id);
			}

			log.debug(" End removeInvoices for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeWalletInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findWalletInstances(customer));
			log.debug(" {} WalletInstance to delete ", ids.size());

			for (Long id : ids) {
				// a workaround for #4132
				WalletInstance wallet = this.walletService.findById(id);
				wallet.getUserAccount().setWallet(null);

				this.walletService.remove(id);
			}

			log.debug(" End removeWalletInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findWalletInstances(Customer customer) {
		try {
			log.debug(" findWalletInstances for customer={} ", customer);
			String query = "select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.walletService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findWalletInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeRatedTransactions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRatedTransactions for customer = {} ", customer);

			Collection<Long> ids = safe(this.findRatedTransactions(customer));
			log.debug(" {} RTs to delete ", ids.size());

			for (Long id : ids) {
				this.ratedTransactionService.remove(id);
			}

			log.debug(" End removeRatedTransactions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}

	private List<Long> findRatedTransactions(Customer customer) {
		try {
			log.debug(" findRatedTransactions for customer={} ", customer);
			String query = "select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.ratedTransactionService.executeSelectQuery(query, queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findRatedTransactions : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeChargeInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeChargeInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findChargeInstances(customer));
			log.debug(" {} ChargeInstance to delete ", ids.size());
			for (Long ciId : ids) {
				this.chargeInstanceService.remove(ciId);
			}
			log.debug(" End removeChargeInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findChargeInstances(Customer customer) {
		try {
			log.debug(" findChargeInstances for customer={} ", customer);
			String query = "select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.chargeInstanceService.executeSelectQuery(query, queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findChargeInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
			Collection<Long> ids = safe(this.findSubscriptions(customer));
			log.debug(" {} Subscription to delete ", ids.size());

			for (Long subscriptionId : ids) {
				this.subscriptionService.remove(subscriptionId);
			}
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findSubscriptions(Customer customer) {
		try {
			log.debug(" findSubscriptions for customer={} ", customer);
			StringBuffer query = new StringBuffer(
					"select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer ");

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customer", customer);
			Object ids = this.subscriptionService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findSubscriptions : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private List<Long> findInvoicesIds(Customer customer) {
		try {
			log.debug(" findInvoicesIds for customer={} ", customer);
			StringBuffer query = new StringBuffer(
					"select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer =:customer ");

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customer", customer);
			Object ids = this.invoiceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on getSubscription : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private <T> Collection<T> safe(Collection<T> collection) {
		return collection == null ? Collections.EMPTY_LIST : collection;
	}
}');]]>
		</sql>
<!--        escape a limit of insert with text bigger than 4000 chars-->
        <sql dbms="oracle" endDelimiter="/">
            <![CDATA[
             declare
                scriptData Clob;
            begin
                scriptData := to_clob('package org.meveo.service.script;
import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

	private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
			AccountOperationService.class.getSimpleName());
	private final CustomerService customerService = (CustomerService) getServiceInterface(
			CustomerService.class.getSimpleName());
	private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
			InvoiceService.class.getSimpleName());
	private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			SubscriptionService.class.getSimpleName());
	private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
			RatedTransactionService.class.getSimpleName());
	private final WalletService walletService = (WalletService) getServiceInterface(
			WalletService.class.getSimpleName());
	private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
			RejectedBillingAccountService.class.getSimpleName());
	private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
			CounterInstanceService.class.getSimpleName());
	private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
			CounterPeriodService.class.getSimpleName());
	private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
			OrderItemService.class.getSimpleName());
	private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
			ProductInstanceService.class.getSimpleName());
	private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
			BusinessEntityService.class.getSimpleName());
	private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
			WalletOperationService.class.getSimpleName());
	private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			ServiceInstanceService.class.getSimpleName());

	private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

	@SuppressWarnings("rawtypes")
	private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
			ChargeInstanceService.class.getSimpleName());

	private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		log.debug(" >>> execute {} ", methodContext.entrySet());

		try {

			Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
			if (MapUtils.isEmpty(record)) {
				throw new BusinessException(String.format("Parameter RECORD is missing"));
			}

			final String customerCode = record.get("customerCode");
			Customer customer = customerService.findByCode(customerCode);
			if (customer == null) {
				throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
			}

			String noCheckVal = record.get("noCheck");
			if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
				throw new BusinessException(
						String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
			}
			boolean noCheck = "1".contentEquals(noCheckVal);

			if (!noCheck) {
				// If noCheck is 0 then the following conditions must be met in order to allow
				// deletion:
				// No unmatched AO
				// No open EDR/WO/RT

				this.checkUnmatchedAOs(customer);
				this.checkOpenEDRs(customer);
				this.checkOpenWOs(customer);
				this.checkOpenRTs(customer);
			}

			this.removeCustomerHirarchy(customer);

		} catch (BusinessException be) {
			throw be;
		} catch (Exception e) {
			log.error(" Error executing DeleteCustomersScript ", e);
			throw new BusinessException(e.getMessage());
		}
	}

	private void checkOpenEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenEDRs for customer = {} ", customer);
			String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Object count = edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId())
					.getSingleResult();
			log.debug(" count of open EDRs = {} ", count);
			log.debug(" End checkOpenEDRs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open EDRs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenWOs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenWOs for customer = {} ", customer);
			String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
			final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
					WalletOperationService.class.getSimpleName());

			Object count = walletOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open WOs = {} ", count);
			log.debug(" End checkOpenWOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open WOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenRTs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkOpenRTs for customer = {} ", customer);
			String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
			Object count = this.ratedTransactionService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open RTs = {} ", count);
			log.debug(" End checkOpenRTs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open RTs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkUnmatchedAOs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
			String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
			final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
					AccountOperationService.class.getSimpleName());
			Object count = accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of unmatched AOs = {} ", count);
			log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeCustomerHirarchy(Customer customer) throws BusinessException {
		log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

		//
		// A workaround for #4134 , no need for this method if #4134 is fixed (only
		// 6.1.X is concerned)!
		this.nullifyAOsSeller(customer);

      	this.removeWalletOperations(customer);
		this.removeChargeInstances(customer);
		// the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
		this.nullifySubCategoryInvoiceAgregatesWallet(customer);
		this.removeWalletInstances(customer);

		this.removePaymentHistory(customer);
		this.removeRatedTransactions(customer);
		this.removeInvoices(customer);


		this.removeServiceInstances(customer);
		this.removeAccess(customer);
		this.removeEDRs(customer);
		this.removeSubscriptions(customer);

		this.removeRejectedBAs(customer);

		this.removeCounterPeriods(customer);
		this.removeCounterInstances(customer);
		this.removeOrderItems(customer);
		this.removeProductInstances(customer);
		this.removeMatchingAmounts(customer);

		this.customerService.remove(customer);

		log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
	}

	private void removeEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);

			String query = "select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = edrService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} EDR to delete ", ids.size());

			for (Long id : ids) {
				edrService.remove(id);
			}

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeMatchingAmounts(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

			final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
			final String query = "select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = matchingAmountService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} MatchingAmount to delete ", ids.size());

			for (Long id : ids) {
				matchingAmountService.remove(id);
			}

			log.debug(" End removeMatchingAmounts for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeAccess(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeAccess for customer = {} ", customer);

			final AccessService accessService = (AccessService) getServiceInterface(
					AccessService.class.getSimpleName());

			final String query = "select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = accessService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} Access to delete ", ids.size());

			for (Long id : ids) {
				accessService.remove(id);
			}

			log.debug(" End removeAccess for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeServiceInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeServiceInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findServiceInstances(customer));
			log.debug(" {} ServiceInstance to delete ", ids.size());

			for (Long id : ids) {
				this.serviceInstanceService.remove(id);
			}

			log.debug(" End removeServiceInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findServiceInstances(Customer customer) {
		try {
			log.debug(" findServiceInstances for customer={} ", customer);
			String query = "select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.serviceInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findServiceInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeWalletOperations(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletOperations for customer = {} ", customer);

			Collection<Long> ids = safe(this.findWalletOperations(customer));
			log.debug(" {} WalletOperation to delete ", ids.size());

			for (Long id : ids) {
				this.walletOperationService.remove(id);
			}

			log.debug(" End removeWalletOperations for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findWalletOperations(Customer customer) {
		try {
			log.debug(" findWalletOperations for customer={} ", customer);
			String query = "select wo.id from WalletOperation wo where wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.walletOperationService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findWalletOperations : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void removePaymentHistory(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removePaymentHistory for customer = {} ", customer);

			String query = "delete from PaymentHistory ph1 where ph1.id in (select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode) ";
			int count = this.businessEntityService.getEntityManager().createQuery(query)
					.setParameter("customerCode", customer.getCode()).executeUpdate();

			log.debug(" {} PaymentHistory to delete ", count);
			log.debug(" End removePaymentHistory for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void nullifyAOsSeller(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

			String query = "UPDATE AccountOperation ao1 SET ao1.seller = null where ao1.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);

			StringBuilder query = new StringBuilder( "UPDATE SubCategoryInvoiceAgregate subCat SET subCat.wallet = null ")
					.append(" where subCat.id in (select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId) ");

			int count = this.accountOperationService.getEntityManager().createQuery(query.toString()).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", count);
			log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeProductInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeProductInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findProductInstances(customer));
			log.debug(" {} ProductInstance to delete ", ids.size());

			for (Long id : ids) {
				this.productInstanceService.remove(id);
			}

			log.debug(" End removeProductInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findProductInstances(Customer customer) {
		try {
			log.debug(" findProductInstances for customer={} ", customer);
			String query = "select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.productInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findProductInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeOrderItems(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeOrderItem for customer = {} ", customer);

			Collection<Long> ids = safe(this.findOrderItems(customer));
			log.debug(" {} OrderItem to delete ", ids.size());

			for (Long id : ids) {
				this.orderItemService.remove(id);
			}

			log.debug(" End removeOrderItem for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findOrderItems(Customer customer) {
		try {
			log.debug(" findOrderItems for customer={} ", customer);
			String query = "select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.orderItemService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeCounterPeriods(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterPeriods for customer = {} ", customer);

			Collection<Long> ids = safe(this.findCounterPeriods(customer));
			log.debug(" {} CounterPeriod to delete ", ids.size());

			for (Long id : ids) {
				this.counterPeriodService.remove(id);
			}

			log.debug(" End removeCounterPeriods for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findCounterPeriods(Customer customer) {
		try {
			log.debug(" findCounterPeriods for customer={} ", customer);
			String query = "select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.counterPeriodService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeCounterInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findCounterInstances(customer));
			log.debug(" {} CounterInstance to delete ", ids.size());

			for (Long id : ids) {
				this.counterInstanceService.remove(id);
			}

			log.debug(" End removeCounterInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findCounterInstances(Customer customer) {
		try {
			log.debug(" findCounterInstances for customer={} ", customer);
			String query = "select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.counterInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeRejectedBAs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRejectedBAs for customer = {} ", customer);

			Collection<Long> ids = safe(this.findRejectedBillingAccounts(customer));
			log.debug(" {} RejectedBillingAccount to delete ", ids.size());

			for (Long id : ids) {
				this.rejectedBillingAccountService.remove(id);
			}

			log.debug(" End removeRejectedBAs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findRejectedBillingAccounts(Customer customer) {
		try {
			log.debug(" findRejectedBillingAccounts for customer={} ", customer);
			String query = "select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.rejectedBillingAccountService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findRejectedBillingAccounts : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeInvoices(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeInvoices for customer = {} ", customer);

			Collection<Long> ids = safe(this.findInvoicesIds(customer));
			log.debug(" {} Invoices to delete ", ids.size());

			for (Long id : ids) {
				this.invoiceService.remove(id);
			}

			log.debug(" End removeInvoices for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeWalletInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findWalletInstances(customer));
			log.debug(" {} WalletInstance to delete ", ids.size());

			for (Long id : ids) {
				// a workaround for #4132
				WalletInstance wallet = this.walletService.findById(id);
				wallet.getUserAccount().setWallet(null);

				this.walletService.remove(id);
			}

			log.debug(" End removeWalletInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findWalletInstances(Customer customer) {
		try {
			log.debug(" findWalletInstances for customer={} ", customer);
			String query = "select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.walletService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findWalletInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeRatedTransactions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRatedTransactions for customer = {} ", customer);

			Collection<Long> ids = safe(this.findRatedTransactions(customer));
			log.debug(" {} RTs to delete ", ids.size());

			for (Long id : ids) {
				this.ratedTransactionService.remove(id);
			}

			log.debug(" End removeRatedTransactions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}

	private List<Long> findRatedTransactions(Customer customer) {
		try {
			log.debug(" findRatedTransactions for customer={} ", customer);
			String query = "select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.ratedTransactionService.executeSelectQuery(query, queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findRatedTransactions : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeChargeInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeChargeInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findChargeInstances(customer));
			log.debug(" {} ChargeInstance to delete ", ids.size());
			for (Long ciId : ids) {
				this.chargeInstanceService.remove(ciId);
			}
			log.debug(" End removeChargeInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findChargeInstances(Customer customer) {
		try {
			log.debug(" findChargeInstances for customer={} ", customer);
			String query = "select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.chargeInstanceService.executeSelectQuery(query, queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findChargeInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
			Collection<Long> ids = safe(this.findSubscriptions(customer));
			log.debug(" {} Subscription to delete ", ids.size());

			for (Long subscriptionId : ids) {
				this.subscriptionService.remove(subscriptionId);
			}
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findSubscriptions(Customer customer) {
		try {
			log.debug(" findSubscriptions for customer={} ", customer);
			StringBuffer query = new StringBuffer(
					"select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer ");

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customer", customer);
			Object ids = this.subscriptionService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findSubscriptions : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private List<Long> findInvoicesIds(Customer customer) {
		try {
			log.debug(" findInvoicesIds for customer={} ", customer);
			StringBuffer query = new StringBuffer(
					"select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer =:customer ");

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customer", customer);
			Object ids = this.invoiceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on getSubscription : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private <T> Collection<T> safe(Collection<T> collection) {
		return collection == null ? Collections.EMPTY_LIST : collection;
	}
}');

INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script)
            VALUES (-23, 0, 0, ${db.current.time}, 'org.meveo.service.script.DeleteCustomersScript', 'DeleteCustomersScript', 'JAVA', scriptData);
]]>
        end;
        /
        </sql>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-26" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="DeleteCustomersScript_JOB" />
            <column name="description" value="DeleteCustomersScript_JOB" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="DeleteCustomersScript_JOB" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />

            <column name="cf_values">
	            <![CDATA[{"FlatFileProcessingJob_mappingConf":[{"string":"<beanio xmlns=\"http://www.beanio.org/2012/03\" \r\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n      xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n      <stream name=\"RECORD\" format=\"csv\" strict=\"true\">\r\n        <parser>\r\n          <property name=\"delimiter\" value=\";\" />\r\n        </parser>     \r\n        <record name=\"customer\"  minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">  \r\n           <field name=\"customerCode\" minOccurs=\"0\" position=\"0\" />\r\n           <field name=\"noCheck\" minOccurs=\"0\" position=\"1\"/>\r\n        </record> \r\n      </stream>\r\n    </beanio>"}]
						,"FlatFileProcessingJob_recordVariableName":[{"string":"RECORD"}]
						,"FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}]
						,"FlatFileProcessingJob_fileNameExtension":[{"string":"csv"}]
						,"FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.DeleteCustomersScript"}]
						,"FlatFileProcessingJob_inputDir":[{"string":"/batch/customer/delete"}]}]]>
            </column>
            <column name="verbose_report" value="1" />

          </insert>
	</changeSet>

     <changeSet id="3139_20190225" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-21" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-02-25 00:00:00.000" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="BillingRunJob" />
            <column name="code" value="BillingRunJob" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="timerentity_id" valueNumeric="-2" />
            <column name="uuid" value="JOB_BillingRunJob" />
        </insert>
    </changeSet>
    <changeSet id="4316_20190625_job" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-22" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-06-25 00:00:00.000" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="ScriptingJob" />
            <column name="code" value="ValidateBR_Job" />
            <column name="creator" value="opencell.admin" />
            <column name="following_job_id" valueNumeric="-11" />
            <column name="description" value="Validates *all* Billing Runs"></column>
            <column name="uuid" value="ValidateBR_Job" />
            <column name="cf_values" value='{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ValidateBRScript"}}]}'></column>
        </insert>
    </changeSet>
    <changeSet id="4316_20190625_script" author="horriKhalid">
        <sql><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-24, 0, 0, ${db.current.time}, 'org.meveo.service.script.ValidateBRScript', 'Validate Billing Runs', 'JAVA', '
			package org.meveo.service.script;

import java.util.List;
import java.util.Map;

import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.BillingRun;
import org.meveo.model.billing.BillingRunStatusEnum;
import org.meveo.service.billing.impl.BillingRunExtensionService;
import org.meveo.service.billing.impl.BillingRunService;

/**
 * @author phung
 *
 */
public class ValidateBRScript extends Script {

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		BillingRunService billingRunService = (BillingRunService) getServiceInterface("BillingRunService");

		BillingRunExtensionService billingRunExtensionService = (BillingRunExtensionService) getServiceInterface(
				"BillingRunExtensionService");

		if (billingRunService != null) {
			List<BillingRun> billingRuns = billingRunService.getbillingRuns(BillingRunStatusEnum.PREINVOICED,  BillingRunStatusEnum.POSTINVOICED);

			for (BillingRun billingRun : billingRuns) {

				try {
					billingRunExtensionService.updateBillingRun(billingRun.getId(), null, null,
							BillingRunStatusEnum.POSTVALIDATED, null);
				} catch (Exception e) {
					System.err.println("Error " + e.getMessage());
				}
			}

		}

	}
}

        ');
        ]]></sql>
    </changeSet>
    <changeSet id="4403_20190701_export_job" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-23" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-07-01 00:00:00.000" />
            <column name="job_category" value="IMPORT_HIERARCHY" />
            <column name="job_template" value="ExportMediationEntityJob" />
            <column name="code" value="ExportMediationEntityJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Export open EDR, WO, RTx"/>
            <column name="uuid" value="ExportMediationEntityJob" />
            <column name="cf_values" value='{"ExportMediationEntityJob_lastTransactionDate":[{"date":""}],"ExportMediationEntityJob_firstTransactionDate":[{"date":"2017-01-01T00:00:00Z"}],"ExportMediationEntityJob_rtCf":[{"boolean":true}],"ExportMediationEntityJob_edrCf":[{"boolean":true}],"ExportMediationEntityJob_woCf":[{"boolean":true}]}'></column>
        </insert>
    </changeSet>
    <changeSet id="4403_20190701_purge_job" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-24" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-07-01 00:00:00.000" />
            <column name="job_category" value="UTILS" />
            <column name="job_template" value="PurgeMediationDataJob" />
            <column name="code" value="PurgeMediationDataJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Purge not open EDR, WO, RTx"/>
            <column name="uuid" value="PurgeMediationDataJob" />
            <column name="cf_values" value='{"PurgeMediationDataJob_woCf":[{"boolean":true}],"PurgeMediationDataJob_firstTransactionDate":[{"date":"2017-01-01T00:00:00Z"}],"PurgeMediationDataJob_edrCf":[{"boolean":true}],"PurgeMediationDataJob_lastTransactionDate":[{"date":""}],"PurgeMediationDataJob_rtCf":[{"boolean":true}]}'></column>
        </insert>
    </changeSet>
    <changeSet id="4403_20190701_import_job" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-25" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-07-01 00:00:00.000" />
            <column name="job_category" value="IMPORT_HIERARCHY" />
            <column name="job_template" value="ImportMediationEntityJob" />
            <column name="code" value="ImportMediationEntityJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Import open EDR, WO, RTx"></column>
            <column name="uuid" value="ImportMediationEntityJob" />
        </insert>
    </changeSet>
    <changeSet id="#4150_20190717 - Error while running SALES_JOURNAL report extracts" author="Mohammed_EL-AZZOUZI">
		<update tableName="dwh_report_extract">
			<column name="sql_query" >
			                <![CDATA[SELECT
				    TO_CHAR(ao.invoice_date,'MM') AS "Mois",
				    TO_CHAR(ao.invoice_date,'DD/MM/YYYY') AS "Date facture",
				    text('HG') AS "Code comptable",
				    ae.code AS "Client facturé",
				    text('MAI') AS "Type article",
				    split_part(bac.code, ',', 6) AS "Famille statistique",
				    split_part(bac.code, ',', 2) AS "Article",
				    trim(TO_CHAR(ia.amount_without_tax,'9999990D00')) AS "Montant HT",
				    trim(TO_CHAR(ia.quantity,'9999990')) AS "Qté facturée",
				    ao.reference AS "No facture",
				    ao.description AS "Catégorie facture",
				    ao.code AS "Type de pièce",
				    text('VEN') AS "Journal"
				FROM
				    ar_customer_account ae
				INNER JOIN ar_account_operation ao ON ao.customer_account_id = ae.id
				INNER JOIN billing_invoice i ON i.invoice_number = ao.reference
				INNER JOIN billing_invoice_agregate ia ON (ia.invoice_id = i.id AND type = 'F')
				LEFT JOIN billing_accounting_code bac ON bac.id = ia.accounting_code_id
				WHERE :START_DATE<>:END_DATE
				AND ao.invoice_date >= to_date('01/' || TO_CHAR(CURRENT_DATE,'MM/YYYY'),'DD/MM/YYYY') + interval '-12 month'
				AND ao.invoice_date <= to_date('01/' || TO_CHAR(CURRENT_DATE,'MM/YYYY'),'DD/MM/YYYY') + interval '0 month'
				ORDER BY
				    ae.code,
				    ao.code,
				    split_part(bac.code, ',', 6),
				    split_part(bac.code, ',', 2)
			    ]]></column>
			    <where>code='SALES_JOURNAL'</where>
		</update>
	</changeSet>
    <changeSet id="#5417_20200929 - Error while running CUSTOMERS_PER_SELLER report extracts" author="Mohamed-Ali-HAMMAL">
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
					        , ce.description AS "Seller description"
					        , coalesce(ce.code, '') AS "Customer code"
					        , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
					from  crm_seller s left
					        OUTER JOIN crm_customer c  on c.seller_id = s.id left
					        OUTER JOIN account_entity ce  on c.id = ce.id
					where( ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
					order by ce.code
			    ]]></column>
            <where>code='CUSTOMERS_PER_SELLER'</where>
        </update>
    </changeSet>
    <changeSet id="#4449_20190724" author="AbdellatifBARI">
        <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-44" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="DBT_TRS" />
            <column name="description" value="Debit for credit transfer" />
            <column name="occ_category" value="DEBIT" />
        </insert>
        <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-45" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="CRD_TRS" />
            <column name="description" value="Credit for debit transfer" />
            <column name="occ_category" value="CREDIT" />
        </insert>
    </changeSet>

    <changeSet id="#4550_20190904" author="AbdellatifBARI">
        <update tableName="billing_trading_country">
            <column name="code" value="US"></column>
            <column name="description" value="United States"></column>
            <column name="uuid" value="Trading_Country_US"></column>
            <where>id=-1</where>
        </update>
        <update tableName="billing_trading_country">
            <column name="code" value="FR"></column>
            <column name="description" value="France"></column>
            <column name="uuid" value="Trading_Country_FR"></column>
            <where>id=-2</where>
        </update>
    </changeSet>

    <changeSet id="#4064_11092019" author="AbdelmounaimAkadid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-27" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-07-01 00:00:00.000" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="UpdateUnpaidInvoiceStatusJob" />
            <column name="code" value="UpdateUnpaidInvoiceStatusJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Update Status of Unpaid Invoices"></column>
            <column name="timerentity_id" valueNumeric="-3" />
            <column name="uuid" value="UpdateUnpaidInvoiceStatusJob" />
        </insert>
    </changeSet>

    <changeSet id="4804_20191205" author="MohamedSTITANE">
        <update tableName="meveo_job_instance" >
            <column name="cf_values"
                    value='{ "ExportMediationEntityJob_rtStatusCf": [ { "listString": [ "BILLED", "CANCELED", "OPEN", "REJECTED", "RERATED" ] } ], "ExportMediationEntityJob_maxResult": [ { "long": 1000 } ], "ExportMediationEntityJob_edrStatusCf": [ { "listString": [ "AGGREGATED", "MEDIATING", "OPEN", "RATED", "REJECTED" ] } ], "ExportMediationEntityJob_woStatusCf": [ { "listString": [ "CANCELED", "OPEN", "RERATED", "RESERVED", "SCHEDULED", "TO_RERATE", "TREATED" ] } ], "ExportMediationEntityJob_firstTransactionDate": [ { "date": "2017-12-01T00:00:00Z" } ] }'/>
            <where>id = -23</where>
        </update>
        <update tableName="meveo_job_instance" >
            <column name="cf_values"
                    value='{"PurgeMediationDataJob_edrStatusCf":[ { "listString":[ "AGGREGATED", "MEDIATING", "OPEN", "RATED", "REJECTED" ] } ], "PurgeMediationDataJob_firstTransactionDate":[ { "date":"2017-12-01T00:00:00Z" } ], "PurgeMediationDataJob_woStatusCf":[ { "listString":[ "CANCELED", "OPEN", "RERATED", "RESERVED", "SCHEDULED", "TO_RERATE", "TREATED" ] } ], "PurgeMediationDataJob_rtStatusCf":[ { "listString":[ "BILLED", "CANCELED", "OPEN", "REJECTED", "RERATED" ] } ] }'/>
            <where>id = -24</where>
        </update>
    </changeSet>


    <changeSet author="Mohammed_ELAZZOUZI" id="rebuild-data-cat_unit_of_measure">
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-1" />
            <column name="symbol" value="B" />
            <column name="code" value="byte" />
            <column name="description" value="Byte" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-2" />
            <column name="symbol" value="KB" />
            <column name="code" value="kilobyte" />
            <column name="description" value="Kilobyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-3" />
            <column name="symbol" value="MB" />
            <column name="code" value="megabyte" />
            <column name="description" value="Megabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-4" />
            <column name="symbol" value="GB" />
            <column name="code" value="gigabyte" />
            <column name="description" value="Gigabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-5" />
            <column name="symbol" value="TB" />
            <column name="code" value="terabyte" />
            <column name="description" value="Terabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000000000" />
        </insert>
                <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-6" />
            <column name="symbol" value="KiB" />
            <column name="code" value="kibi" />
            <column name="description" value="Kibibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1024" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-7" />
            <column name="symbol" value="MiB" />
            <column name="code" value="mebibyte" />
            <column name="description" value="Mebibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1048576" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-8" />
            <column name="symbol" value="GiB" />
            <column name="code" value="gibibyte" />
            <column name="description" value="Gibibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1073741824" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-9" />
            <column name="symbol" value="TiB" />
            <column name="code" value="tebibyte" />
            <column name="description" value="Tebibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1099511627776" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-10" />
            <column name="symbol" value="s" />
            <column name="code" value="second" />
            <column name="description" value="Second" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-11" />
            <column name="symbol" value="min" />
            <column name="code" value="minute" />
            <column name="description" value="Minute" />
            <column name="multiplicator" valueNumeric="60" />
            <column name="parent_id" valueNumeric="-10" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-12" />
            <column name="symbol" value="h" />
            <column name="code" value="hour" />
            <column name="description" value="Hour" />
            <column name="multiplicator" valueNumeric="3600" />
            <column name="parent_id" valueNumeric="-10" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-13" />
            <column name="symbol" value="msg" />
            <column name="code" value="message" />
            <column name="description" value="Message" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
    </changeSet>

    <changeSet id="500X_20200218_purge_job" author="mohamed.el.youssoufi">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-28" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-02-18 00:00:00.000" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="PurgeMediationDataJobV2" />
            <column name="code" value="PurgeMediationDataJobV2" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Purge not open EDR, WO, RTx"/>
            <column name="uuid" value="PurgeMediationDataJobV2" />
            <column name="cf_values" value='{"PurgeMediationDataJobV2_firstTransactionDate":[{"date":"2017-01-01T00:00:00Z"}]}'></column>
        </insert>
    </changeSet>

    <changeSet id="#4924_20200219" author="anasseh">
      <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="PAYPAL" />
        </insert>
      <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="STRIPE" />
        </insert>
   </changeSet>

    <changeSet id="#4924_20200219_2" author="anasseh">
       <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-46" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="PAY_PAL" />
            <column name="description" value="Payment Paypal" />
            <column name="occ_category" value="CREDIT" />
        </insert>
       <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-47" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="PAY_STP" />
            <column name="description" value="Payment Stripe" />
            <column name="occ_category" value="CREDIT" />
        </insert>
      </changeSet>

      <changeSet id="#5308_20200618 - Add script" author="AndriusKarpavicius">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.validation.CheckReferencesWhenDeletingScript" />
            <column name="src_type" value="JAVA_CLASS" />
            <column name="description" value="Data integrity check at deletion - reference to custom table"/>
            <column name="created" valueDate="${db.current.time}" />
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.validation.CheckValidityDatesScript" />
            <column name="src_type" value="JAVA_CLASS" />
            <column name="description" value="Data integrity check at create - update - record validity overlap"/>
            <column name="created" valueDate="${db.current.time}" />
        </insert>
      </changeSet>

	<changeSet id="#5303_20200707 - CDR and Mediation" author="AmineTazi">
		<insert tableName="adm_permission">
            <column name="id" valueNumeric="-119" />
            <column name="name" value="CDR Manager" />
            <column name="permission" value="cdrManager" />
        </insert>
        <insert tableName="adm_permission">
            <column name="id" valueNumeric="-120" />
            <column name="name" value="CDR Visualizer" />
            <column name="permission" value="cdrVisualizer" />
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-119"></column>
        </insert>
                <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-120"></column>
        </insert>
	</changeSet>
	<changeSet id="#5418_20201030" author="Mohammed_ELAZZOUZI">
	    <insert tableName="adm_role">
            <column name="id" valueNumeric="-200" />
            <column name="version" valueNumeric="0" />
            <column name="role_description" value="API v2 full access" />
            <column name="role_name" value="APIv2_FULL_ACCESS" />
        </insert>
        <insert tableName="adm_user_role">
            <column name="user_id" valueNumeric="-1" />
            <column name="role_id" valueNumeric="-200" />
        </insert>
        <insert tableName="adm_user_role">
            <column name="user_id" valueNumeric="-2" />
            <column name="role_id" valueNumeric="-200" />
        </insert>
	</changeSet>
 	<changeSet id="#5303_20200814 - CDR and Mediation" author="AmineTazi">
		<insert tableName="adm_permission">
            <column name="id" valueNumeric="-121" />
            <column name="name" value="CDR Rate Manager" />
            <column name="permission" value="cdrRateManager" />
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-121"></column>
        </insert>
	</changeSet>

    <changeSet id="#5425_20200930 - Failed to execute some report extract" author="Mohamed-Ali-HAMMAL">
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
					        , ce.description AS "Seller description"
					        , coalesce(ce.code, '') AS "Customer code"
					        , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
					from  crm_seller s left
					        OUTER JOIN crm_customer c  on c.seller_id = s.id left
					        OUTER JOIN account_entity ce  on c.id = ce.id
					where( ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
					order by ce.code
			    ]]></column>
            <where>code='CUSTOMERS_PER_SELLER'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , coalesce(ce.code, '') AS "Customer code"
                    , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
                    , coalesce(cae.code, '') AS "Customer Account code"
                    , coalesce(replace(cae.description, ',', ' '), '') AS "Customer Account description"
                    , coalesce(bae.code, '') AS "Billing Account code"
                    , coalesce(replace(bae.description, ',', ' '), '') AS "Billing Account description"
                    , coalesce(uae.code, '') AS "User Account code"
                    , coalesce(replace(uae.description, ',', ' '), '') AS "User Account description"
                    , coalesce(su.code, '') AS "Subscription code"
                    , coalesce(replace(su.description, ',', ' '), '') AS "Subscription description"
                    , coalesce(ap.acces_user_id, '') AS "Access Point id"
                from  crm_seller s full
                    OUTER JOIN crm_customer c  on c.seller_id = s.id full
                    OUTER JOIN account_entity ce  on c.id = ce.id full
                    OUTER JOIN ar_customer_account ca  on ca.customer_id = c.id full
                    OUTER JOIN account_entity cae  on ca.id = cae.id full
                    OUTER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id full
                    OUTER JOIN account_entity bae  on ba.id = bae.id full
                    OUTER JOIN billing_user_account ua  on ua.billing_account_id = ba.id full
                    OUTER JOIN account_entity uae  on ua.id = uae.id full
                    OUTER JOIN billing_subscription su  on su.user_account_id = ua.id full
                    OUTER JOIN medina_access ap  on ap.subscription_id = su.id
                where ce.code ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or cae.code ilike '%'
                    || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%'
                    || :SEARCH_CRITERION || '%'  or uae.code ilike '%' || :SEARCH_CRITERION
                    || '%'  or uae.description ilike '%' || :SEARCH_CRITERION || '%'  or su.code ilike '%'
                    || :SEARCH_CRITERION || '%'  or su.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ap.acces_user_id ilike '%' || :SEARCH_CRITERION || '%'
                order by ce.code
                    ,cae.code
                    ,bae.code
                    ,uae.code
                    ,su.code
                    ,ap.acces_user_id
			    ]]></column>
            <where>code='FULL_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
                    , ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , ce.code AS "Customer code"
                    , ce.description AS "Customer description"
                    , cae.code AS "Customer Account code"
                    , cae.description AS "Customer Account description"
                    , bae.code AS "Billing Account code"
                    , bae.description AS "Billing Account description"
                    , it.code AS "Invoice type code"
                    , it.description AS "Invoice type description"
                    , to_char(sum(i.amount_without_tax), '9999999990.00') AS "Amount without tax"
                    , to_char(sum(i.amount_with_tax), '9999999990.00') AS "Amount with tax"
                from crm_seller s
                    INNER JOIN crm_customer c  on c.seller_id = s.id
                    INNER JOIN account_entity ce  on c.id = ce.id
                    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                    INNER JOIN account_entity cae  on ca.id = cae.id
                    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                    INNER JOIN account_entity bae  on ba.id = bae.id
                    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or cae.code ilike '%' || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  )  group by date_trunc('month', i.invoice_date)
                    , it.code
                    , it.description
                    , ce.code
                    , ce.description
                    , cae.code
                    , cae.description
                    , bae.code
                    , bae.description order by date_trunc('month', i.invoice_date) DESC
                    , it.code DESC
                    , ce.code
                    , cae.code
                    , bae.code
			    ]]></column>
            <where>code='INVOICED_BA_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS  Month
                        , ce.code AS  "Seller code"
                        , ce.description AS  "Seller description"
                        , it.code AS  "Invoice type code"
                        , it.description AS  "Invoice type description"
                        , to_char(sum(i.amount_without_tax), '9999999990.00') AS  "Amount without tax"
                        , to_char(sum(i.amount_with_tax), '9999999990.00') AS  "Amount with tax"
                    from crm_seller s
                        INNER JOIN crm_customer c  on c.seller_id = s.id
                        INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                        INNER JOIN account_entity ce  on c.id = ce.id
                        INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                        INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                        INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                    where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || 'month' AS INTERVAL))
                    and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
                    group by date_trunc('month', i.invoice_date)
                        , it.code
                        , it.description
                        , ce.code
                        , ce.description order by date_trunc('month', i.invoice_date) DESC
                        , it.code DESC
                        , ce.code
			    ]]></column>
            <where>code='INVOICED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
                    , to_char(i.invoice_date, 'YYYY-MM-DD') AS "Invoice date"
                    , i.invoice_number AS "Invoice number"
                    , to_char(i.amount_without_tax, '9999999990.00') AS "Amount without tax"
                    , to_char(i.amount_with_tax, '9999999990.00') AS "Amount with tax"
                    , it.code AS "Invoice type code"
                    , it.description AS "Invoice type description"
                    , ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , ce.code AS "Customer code"
                    , ce.description AS "Customer description"
                    , cae.code AS "Customer Account code"
                    , cae.description AS "Customer Account description"
                    , bae.code AS "Billing Account code"
                    , bae.description AS "Billing Account description"
                from crm_seller s
                    INNER JOIN crm_customer c  on c.seller_id = s.id
                    INNER JOIN account_entity ce  on c.id = ce.id
                    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                    INNER JOIN account_entity cae  on ca.id = cae.id
                    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                    INNER JOIN account_entity bae  on ba.id = bae.id
                    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or cae.code ilike '%' || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  )
                order by date_trunc('month', i.invoice_date) DESC
                    , i.invoice_date DESC
                    , it.code
                    , i.invoice_number
			    ]]></column>
            <where>code='INVOICES'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
                ,ce.code AS "Customer code"
                ,ce.description AS "Customer description"
                ,cae.code AS "Customer Account code"
                ,cae.description AS "Customer Account description"
                ,bae.code AS "Billing Account code"
                ,bae.description AS "Billing Account description"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'DEBIT'
                                THEN ao.amount
                            ELSE 0
                            END), '99999999990.00') AS "Amount DEBIT"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'CREDIT'
                                THEN ao.amount
                            ELSE 0
                            END), '99999999990.00') AS "Amount CREDIT"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'DEBIT'
                                THEN ao.amount
                            ELSE - ao.amount
                            END), '99999999990.00') AS "Balance"
            FROM crm_seller s
                INNER JOIN crm_customer c ON c.seller_id = s.id
                INNER JOIN account_entity ce ON c.id = ce.id
                INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
                INNER JOIN account_entity cae ON ca.id = cae.id
                INNER JOIN billing_billing_account ba ON ba.customer_account_id = ca.id
                INNER JOIN account_entity bae ON ba.id = bae.id
                INNER JOIN billing_invoice i ON i.billing_account_id = ba.id
                INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
                    AND ao.reference = i.invoice_number
                    AND ao.invoice_date = i.invoice_date
                    AND ao.amount = abs(i.amount_with_tax)
            WHERE ao.invoice_date IS NOT NULL
                AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                AND (
                    ce.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR ce.description ilike '%' || :SEARCH_CRITERION || '%'
                    OR cae.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR cae.description ilike '%' || :SEARCH_CRITERION || '%'
                    OR bae.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR bae.description ilike '%' || :SEARCH_CRITERION || '%'
                    )
            GROUP BY date_trunc('month', ao.invoice_date)
                ,ce.code
                ,ce.description
                ,cae.code
                ,cae.description
                ,bae.code
                ,bae.description
            ORDER BY date_trunc('month', ao.invoice_date) DESC
                ,ce.code
                ,cae.code
                ,bae.code
			    ]]></column>
            <where>code='RECORDED_BA_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
                        ,ce.code AS "Seller code"
                        ,ce.description AS "Seller description"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'DEBIT'
                                        THEN ao.amount
                                    ELSE 0
                                    END), '99999999990.00') AS "Amount DEBIT"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'CREDIT'
                                        THEN ao.amount
                                    ELSE 0
                                    END), '99999999990.00') AS "Amount CREDIT"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'DEBIT'
                                        THEN ao.amount
                                    ELSE - ao.amount
                                    END), '99999999990.00') AS "Balance"
                    FROM crm_seller s
                        INNER JOIN crm_customer c ON c.seller_id = s.id
                        INNER JOIN account_entity ce on c.id = ce.id
                        INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
                        INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
                    WHERE ao.invoice_date IS NOT NULL
                        AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                        AND (
                            ce.code ilike '%' || :SEARCH_CRITERION || '%'
                            OR ce.description ilike '%' || :SEARCH_CRITERION || '%'
                            )
                    GROUP BY date_trunc('month', ao.invoice_date)
                        ,ce.code
                        ,ce.description
                    ORDER BY date_trunc('month', ao.invoice_date) DESC
                        ,ce.code
			    ]]></column>
            <where>code='RECORDED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"
                from  billing_wallet_operation wo
                    INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
                    INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
                    INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id
                    INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id
                    INNER JOIN crm_customer c  on c.id = ca.customer_id
                    INNER JOIN crm_seller s  on s.id = c.seller_id
                    INNER JOIN account_entity ce  on c.id = ce.id
                where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED'
                    and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
                group by ce.code, ce.description
                order by ce.code
			    ]]></column>
            <where>code='UNBILLED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                        , ce.description AS "Seller description"
                        , ce.code AS "Customer code"
                        , ce.description AS "Customer description"
                        , cae.code AS "Customer Account code"
                        , cae.description AS "Customer Account description"
                        , bae.code AS "Billing Account code"
                        , bae.description AS "Billing Account description"
                        , uae.code AS "User Account code"
                        , uae.description AS "User Account description"
                        , count(DISTINCT wo.id) AS "Transaction count"
                        , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                        , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"
                    from  billing_wallet_operation wo
                        INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
                        INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
                        INNER JOIN account_entity uae  on ua.id = uae.id
                        INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id
                        INNER JOIN account_entity bae  on ba.id = bae.id
                        INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id
                        INNER JOIN account_entity cae  on ca.id = cae.id
                        INNER JOIN crm_customer c  on c.id = ca.customer_id
                        INNER JOIN account_entity ce  on c.id = ce.id
                        INNER JOIN crm_seller s  on s.id = c.seller_id
                    where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED'
                        and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )
                    and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or ce.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or cae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION || '%'  or bae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION || '%'  or uae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or uae.description ilike '%' || :SEARCH_CRITERION || '%'  )
                    group by ce.code
                        , ce.description
                        , cae.code
                        , cae.description
                        , bae.code
                        , bae.description
                        , uae.code
                        , uae.description order by ce.code
                        , ce.code
                        , cae.code
                        , bae.code
                        , uae.code
			    ]]></column>
            <where>code='UNBILLED_UA_HIERARCHY'</where>
        </update>
    </changeSet>

	<changeSet id="#5486_remove_CF_for_old_RT_Aggregation" author="Mohammed_ELAZZOUZI">
		<sql>delete from ${db.schema.adapted}crm_custom_field_tmpl where applies_to='JobInstance_RatedTransactionsJob' and code in('activateAggregation','globalAggregation','aggregateByDay','aggregationLevel','aggregateByOrder','aggregateByParam1','aggregateByParam2','aggregateByParam3','aggregateByExtraParam','aggregateByUnitAmount')</sql>
	</changeSet>

    <changeSet id="5407_20201030" author="Mohammed_ELAZZOUZI">
    	<update tableName="billing_billing_run">
    	<column name="status" value="INVOICES_GENERATED"/>
    	<where>status='INVOICES_GENERRATED'</where>
    	</update>
    </changeSet>
    <changeSet id="#5610_20201102 - bad dept operation type" author="NabilOUACHI">
        <update tableName="ar_occ_template">
            <column name="occ_category" value="CREDIT"></column>
            <where>code='EXP_WRT'</where>
        </update>
    </changeSet>

    <changeSet id="5657_20201201" author="NabilOuachi">
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="SendInvoiceJob_billingRun"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="gui_position" value=""/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>

        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-3" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="invoiceDateRangeFrom"/>
            <column name="description" value="From invoice date EL"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>

        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-4" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="invoiceDateRangeTo"/>
            <column name="description" value="To invoice date EL"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>
    <changeSet id="#5632_20201207_RT_TYPE_DATA" author="NabilOUACHI">
        <update tableName="billing_rated_transaction">
            <column name="type" value="MINIMUM"/>
            <where>code like 'RT_MIN%' and wallet_id is null</where>
        </update>
    </changeSet>

    <changeSet id="#5116_10122020" author="AbdelmounaimAkadid">
     	<insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-30" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="APIv2PermissionsSyncJob" />
            <column name="description" value="APIv2PermissionsSyncJob" />
            <column name="job_category" value="UTILS" />
            <column name="job_template" value="APIv2PermissionsSyncJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="uuid" value="APIv2PermissionsSyncJob" />
       	</insert>
	</changeSet>

	<changeSet id="5743_20201215" author="AmineBENAICHA">
        <update tableName="meveo_job_instance" >
            <column name="cf_values"
                    value='{"PurgeMediationDataJob_edrStatusCf":[ { "listString":[ "AGGREGATED", "MEDIATING", "OPEN", "RATED", "REJECTED" ] } ], "PurgeMediationDataJob_firstTransactionDate":[ { "date":null } ], "PurgeMediationDataJob_woStatusCf":[ { "listString":[ "CANCELED", "OPEN", "RERATED", "RESERVED", "SCHEDULED", "TO_RERATE", "TREATED" ] } ], "PurgeMediationDataJob_rtStatusCf":[ { "listString":[ "BILLED", "CANCELED", "OPEN", "REJECTED", "RERATED" ] } ] }'/>
            <where>id = -24</where>
        </update>
    </changeSet>

    <changeSet id="5678_20210214" author="anasseh">
	      <sql><![CDATA[UPDATE ${db.schema.adapted}ar_payment_history set operation_category ='CREDIT' where payment_id is not null ]]> </sql>
	      <sql><![CDATA[UPDATE ${db.schema.adapted}ar_payment_history set operation_category ='DEBIT' where refund_id is not null ]]> </sql>
   </changeSet>


    <changeSet id="#5592-2021-02-02_41" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2015-03-19 00:04:19.913" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="ArticleMappingJob" />
            <column name="code" value="Article_Mapp_Job_V2" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="timerentity_id" valueNumeric="-1" />
            <column name="uuid" value="Article_Mapp_Job_V2" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ArticleMappingJob_billingRun"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FirstTransactionDate"/>
            <column name="description" value="First transaction date"/>
            <column name="field_type" value="DATE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="LastTransactionDate"/>
            <column name="description" value="Last transaction date"/>
            <column name="field_type" value="DATE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>
    <changeSet id="#5890-2021-02-02_42" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2015-03-19 00:04:19.913" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="InvoiceLinesJob" />
            <column name="code" value="Invoice_Lines_Job_V2" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="timerentity_id" valueNumeric="-1" />
            <column name="uuid" value="Invoice_Lines_Job_V2" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="InvoiceLinesJob_billingRun"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="AggregationOptions"/>
            <column name="description" value="Aggregation options"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>

     <changeSet id="#5916_20210128" author="MohammedELAZZOUZI">
       <insert tableName="billing_seq_invoice">
           <column name="id" valueNumeric="-5" />
           <column name="version" valueNumeric="0" />
           <column name="code" value="ADV" />
           <column name="description" value="Advanced Payment Invoice sequence" />
           <column name="sequence_size" valueNumeric="9" />
           <column name="created" valueDate="2021-02-03 00:00:00.000" />
           <column name="creator" value="OPENCELL.ADMIN" />
       </insert>
       <insert tableName="billing_invoice_type">
           <column name="id" valueNumeric="-5" />
           <column name="version" valueNumeric="0" />
           <column name="created" valueDate="2021-02-03 00:00:00.000" />
           <column name="code" value="ADV" />
           <column name="description" value="Advanced Payment Invoicee" />
           <column name="creator" value="OPENCELL.ADMIN" />
           <column name="invoice_sequence_id" valueNumeric="-5" />
           <column name="occ_template_id" valueNumeric="-25" />
           <column name="occ_templ_negative_id" value="-40" />
           <column name="matching_auto" valueNumeric="0" />
           <column name="prefix_el" value="ADV" />
           <column name="uuid" value="InvoiceType-ADV" />
       </insert>

      </changeSet>

<!-- TODO fix by abdelmounaim-->
<!--    <changeSet id="#5921-2021-02-02_43" author="ZBariki">-->
<!--        <insert tableName="meveo_job_instance">-->
<!--            <column name="id" valueSequenceNext="meveo_job_instance_seq" />-->
<!--            <column name="version" valueNumeric="0" />-->
<!--            <column name="disabled" valueNumeric="1" />-->
<!--            <column name="created" valueDate="2015-03-19 00:04:19.913" />-->
<!--            <column name="job_category" value="INVOICING" />-->
<!--            <column name="job_template" value="InvoicingJobV2" />-->
<!--            <column name="code" value="Invoicing_Job_V2" />-->
<!--            <column name="description" value="Invoicing Job V2"/>-->
<!--            <column name="creator" value="OPENCELL.ADMIN" />-->
<!--            <column name="timerentity_id" valueNumeric="-1" />-->
<!--            <column name="uuid" value="Invoicing_Job_V2" />-->
<!--        </insert>-->
<!--        <insert tableName="crm_custom_field_tmpl">-->
<!--            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />-->
<!--            <column name="version" valueNumeric="0" />-->
<!--            <column name="disabled" valueNumeric="0" />-->
<!--            <column name="created" valueDate="${db.current.time}" />-->
<!--            <column name="code" value="InvoicingJobV2_billingRun"/>-->
<!--            <column name="applies_to" value="JobInstance_InvoicingJobV2"/>-->
<!--            <column name="description" value="Billing Run"/>-->
<!--            <column name="field_type" value="ENTITY"/>-->
<!--            <column name="value_required" value="0"/>-->
<!--            <column name="creator" value="applicationInitializer"/>-->
<!--            <column name="versionable" value="0"/>-->
<!--            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>-->
<!--            <column name="storage_type" value="LIST"/>-->
<!--            <column name="allow_edit" value="1"/>-->
<!--            <column name="hide_on_new" value="0"/>-->
<!--            <column name="inh_as_def_value" value="0"/>-->
<!--            <column name="cf_protectable" value="0"/>-->
<!--        </insert>-->
<!--    </changeSet>

    <changeSet id="#5890-2021-02-05_43" author="ZBARIKI">
        <update tableName="crm_custom_field_tmpl">
            <column name="field_type" value="LIST"/>
            <where>code='AggregationOptions'</where>
        </update>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="NO_AGGREGATION"/>
            <column name="listvalues_key" value="NO_AGGREGATION"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="ARTICLE_LABEL"/>
            <column name="listvalues_key" value="ARTICLE_LABEL"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="UNIT_AMOUNT"/>
            <column name="listvalues_key" value="UNIT_AMOUNT"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="DATE"/>
            <column name="listvalues_key" value="DATE"/>
        </insert>
    </changeSet>-->

    <changeSet id="#5951_20210209_data" author="AbdelmounaimAkadid">
        <insert tableName="billing_tax_class">
        	<column name="id" value="-3"/>
            <column name="code" value="NO_TAX"/>
            <column name="description_i18n" value='{"FRA":"Pas de TVA","ENG":"No VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_no_tax" />
        </insert>
        <insert tableName="billing_tax_class">
        	<column name="id" value="-4"/>
            <column name="code" value="REDUCED"/>
            <column name="description_i18n" value='{"FRA":"TVA réduite","ENG":"Reduced VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_reduced" />
        </insert>
        <insert tableName="billing_tax_class">
        	<column name="id" value="-5"/>
            <column name="code" value="NORMAL"/>
            <column name="description_i18n" value='{"FRA":"TVA normale","ENG":"Normal VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_normal" />
        </insert>

        <insert tableName="billing_tax_category">
        	<column name="id" value="-2"/>
            <column name="code" value="EXEMPTED"/>
            <column name="description_i18n" value='{"FRA":"Exempté","ENG":"Exempted"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_category_exempted" />
        </insert>
        <insert tableName="billing_tax_category">
        	<column name="id" value="-3"/>
            <column name="code" value="REGULAR"/>
            <column name="description_i18n" value='{"FRA":"Standard","ENG":"Regular"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_category_regular" />
        </insert>

        <update tableName="billing_tax">
            <column name="tax_percentage" value="0"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 0%","ENG":"VAT 0%"}'/>
            <where>code='TAX_00'</where>
        </update>
        <insert tableName="billing_tax">
        	<column name="id" value="-4"/>
            <column name="code" value="TAX_10"/>
            <column name="tax_percentage" value="10"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 10%","ENG":"VAT 10%"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_tax_10" />
        </insert>
        <insert tableName="billing_tax">
        	<column name="id" value="-5"/>
            <column name="code" value="TAX_20"/>
            <column name="tax_percentage" value="20"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 20%","ENG":"VAT 20%"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_tax_20" />
        </insert>

        <insert tableName="billing_tax_mapping">
            <column name="id" value='-11'/>
            <column name="tax_category_id" value="-2"/>
            <column name="tax_id" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
		<insert tableName="billing_tax_mapping">
		    <column name="id" value='-12'/>
            <column name="tax_class_id" value="-3"/>
            <column name="tax_id" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-13'/>
            <column name="tax_category_id" value="-3"/>
            <column name="tax_class_id" value="-4"/>
            <column name="tax_id" value='-4'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-14'/>
            <column name="tax_category_id" value="-3"/>
            <column name="tax_class_id" value="-5"/>
            <column name="tax_id" value='-5'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>

        <insert tableName="billing_invoice_cat">
        	<column name="id" value='-3'/>
            <column name="code" value="ICAT_DEFAULT"/>
            <column name="description_i18n" value='{"FRA":"Rubrique facture par défaut","ENG":"Default invoice category"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_invoice_cat_icat_default" />
        </insert>
        <insert tableName="billing_invoice_sub_cat">
        	<column name="id" value='-3'/>
        	<column name="invoice_category_id" value='-3'/>
        	<column name="version" valueNumeric="0" />
            <column name="code" value="ISCAT_DEFAULT"/>
            <column name="description_i18n" value='{"FRA":"Sous-rubrique facture par défaut","ENG":"Default invoice sub-category"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_invoice_cat_iscat_default" />
        </insert>

        <insert tableName="billing_accounting_article">
        	<column name="id" value='-1'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="ADV-STD"/>
        	<column name="tax_class_id" value="-1"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Acompte","ENG":"Advance payment"}'/>
            <column name="description" value='Advance payment'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-ADV-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-2'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="DISC-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Remise de pied de facture","ENG":"Invoice discount"}'/>
            <column name="description" value='Invoice discount'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-DISC-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-3'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="ART-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Article standard","ENG":"Standard article"}'/>
            <column name="description" value='Standard article'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-ART-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
            <column name="id" value='-4'/>
            <column name="version" valueNumeric="0"/>
            <column name="code" value="MIN-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Complément du minimum de facturation","ENG":"Invoice minimum complement"}'/>
            <column name="description" value='Invoice minimum complement'/>
            <column name="created" valueDate="${db.current.time}"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="uuid" value="billing_accounting_article-MIN-STD"/>
        </insert>

    </changeSet>
    <changeSet id="#5946_08032021" author="KhalidHORRI">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-31"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-03-08 00:04:19.913"/>
            <column name="job_category" value="UTILS"/>
            <column name="job_template" value="DiscountPlanStatusJob"/>
            <column name="code" value="DiscountPlanStatusJob"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="Discount_Plan_Status_Job"/>
            <column name="cf_values" value='{"waitingMillis":[{"long":0}],"nbRuns":[{"long":-1}]}'/>
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-32"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-03-08 00:04:19.913"/>
            <column name="job_category" value="UTILS"/>
            <column name="job_template" value="DiscountPlanInstanceStatusJob"/>
            <column name="code" value="DiscountPlanInstanceStatusJob"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="Discount_Plan_Instance_Status_Job"/>
            <column name="cf_values" value='{"waitingMillis":[{"long":0}],"nbRuns":[{"long":-1}]}'/>
        </insert>
    </changeSet>

    <changeSet author="ZBARIKI" id="#6048_20210326">
        <sql dbms="postgresql"><![CDATA[UPDATE ${db.schema.adapted}meveo_script_instance SET
            script = 'package org.meveo.service.script;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.SubCategoryInvoiceAgregate;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;
import org.meveo.service.payments.impl.PaymentHistoryService;
import org.meveo.service.script.Script;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

    private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
            AccountOperationService.class.getSimpleName());
    private final CustomerService customerService = (CustomerService) getServiceInterface(
            CustomerService.class.getSimpleName());
    private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
            InvoiceService.class.getSimpleName());
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
            SubscriptionService.class.getSimpleName());
    private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
            RatedTransactionService.class.getSimpleName());
    private final WalletService walletService = (WalletService) getServiceInterface(
            WalletService.class.getSimpleName());
    private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
            RejectedBillingAccountService.class.getSimpleName());
    private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
            CounterInstanceService.class.getSimpleName());
    private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
            CounterPeriodService.class.getSimpleName());
    private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
            OrderItemService.class.getSimpleName());
    private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
            ProductInstanceService.class.getSimpleName());
    private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
            BusinessEntityService.class.getSimpleName());
    private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
            WalletOperationService.class.getSimpleName());
    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
            ServiceInstanceService.class.getSimpleName());

    private final PaymentHistoryService paymentHistoryService = (PaymentHistoryService) getServiceInterface(
            PaymentHistoryService.class.getSimpleName());

    private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

    @SuppressWarnings("rawtypes")
    private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
            ChargeInstanceService.class.getSimpleName());

    private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {

        log.debug(" >>> execute {} ", methodContext.entrySet());

        try {

            Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
            if (MapUtils.isEmpty(record)) {
                throw new BusinessException(String.format("Parameter RECORD is missing"));
            }

            final String customerCode = record.get("customerCode");
            Customer customer = customerService.findByCode(customerCode);
            if (customer == null) {
                throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
            }

            String noCheckVal = record.get("noCheck");
            if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
                throw new BusinessException(
                        String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
            }
            boolean noCheck = "1".contentEquals(noCheckVal);

            if (!noCheck) {
                // If noCheck is 0 then the following conditions must be met in order to allow
                // deletion:
                // No unmatched AO
                // No open EDR/WO/RT

                this.checkUnmatchedAOs(customer);
                this.checkOpenEDRs(customer);
                this.checkOpenWOs(customer);
                this.checkOpenRTs(customer);
            }

            this.removeCustomerHirarchy(customer);

        } catch (BusinessException be) {
            throw be;
        } catch (Exception e) {
            log.error(" Error executing DeleteCustomersScript ", e);
            throw new BusinessException(e.getMessage());
        }
    }

    private void checkOpenEDRs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start checkOpenEDRs for customer = {} ", customer);
            String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = edrService.executeSelectQuery(query,params);
            log.debug(" count of open EDRs = {} ", count);
            log.debug(" End checkOpenEDRs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open EDRs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkOpenWOs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start checkOpenWOs for customer = {} ", customer);
            String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
            final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
                    WalletOperationService.class.getSimpleName());

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = walletOperationService.executeSelectQuery(query, params);
            log.debug(" count of open WOs = {} ", count);
            log.debug(" End checkOpenWOs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open WOs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkOpenRTs(Customer customer) throws BusinessException {
        try {

            log.debug(" Start checkOpenRTs for customer = {} ", customer);
            String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());

            Object count = this.ratedTransactionService.executeSelectQuery(query, params);
            log.debug(" count of open RTs = {} ", count);
            log.debug(" End checkOpenRTs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open RTs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkUnmatchedAOs(Customer customer) throws BusinessException {
        try {

            log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
            String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
            final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
                    AccountOperationService.class.getSimpleName());
            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = accountOperationService.executeSelectQuery(query, params);
            log.debug(" count of unmatched AOs = {} ", count);
            log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeCustomerHirarchy(Customer customer) throws BusinessException {
        log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

        //
        // A workaround for #4134 , no need for this method if #4134 is fixed (only
        // 6.1.X is concerned)!
        this.nullifyAOsSeller(customer);

        this.removeWalletOperations(customer);
        this.removeChargeInstances(customer);
        // the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
        this.nullifySubCategoryInvoiceAgregatesWallet(customer);
        this.removeWalletInstances(customer);

        this.removePaymentHistory(customer);
        this.removeRatedTransactions(customer);
        this.removeInvoices(customer);


        this.removeServiceInstances(customer);
        this.removeAccess(customer);
        this.removeEDRs(customer);
        this.removeSubscriptions(customer);

        this.removeRejectedBAs(customer);

        this.removeCounterPeriods(customer);
        this.removeCounterInstances(customer);
        this.removeOrderItems(customer);
        this.removeProductInstances(customer);
        this.removeMatchingAmounts(customer);

        this.customerService.remove(customer);

        log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
    }

    private void removeEDRs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeEDRs for customer = {} ", customer);

            String query = "select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = edrService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} EDR to delete ", ids.size());

            for (Long id : ids) {
                edrService.remove(id);
            }

            log.debug(" End removeEDRs for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeMatchingAmounts(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

            final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
            final String query = "select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = matchingAmountService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} MatchingAmount to delete ", ids.size());

            for (Long id : ids) {
                matchingAmountService.remove(id);
            }

            log.debug(" End removeMatchingAmounts for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeAccess(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeAccess for customer = {} ", customer);

            final AccessService accessService = (AccessService) getServiceInterface(
                    AccessService.class.getSimpleName());

            final String query = "select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = accessService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} Access to delete ", ids.size());

            for (Long id : ids) {
                accessService.remove(id);
            }

            log.debug(" End removeAccess for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeServiceInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeServiceInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findServiceInstances(customer));
            log.debug(" {} ServiceInstance to delete ", ids.size());

            for (Long id : ids) {
                this.serviceInstanceService.remove(id);
            }

            log.debug(" End removeServiceInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findServiceInstances(Customer customer) {
        try {
            log.debug(" findServiceInstances for customer={} ", customer);
            String query = "select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.serviceInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findServiceInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeWalletOperations(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeWalletOperations for customer = {} ", customer);

            Collection<Long> ids = safe(this.findWalletOperations(customer));
            log.debug(" {} WalletOperation to delete ", ids.size());

            for (Long id : ids) {
                this.walletOperationService.remove(id);
            }

            log.debug(" End removeWalletOperations for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findWalletOperations(Customer customer) {
        try {
            log.debug(" findWalletOperations for customer={} ", customer);
            String query = "select wo.id from WalletOperation wo where wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.walletOperationService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findWalletOperations : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    /**
     * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
     *
     * @param customer
     * @throws BusinessException
     */
    private void removePaymentHistory(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removePaymentHistory for customer = {} ", customer);
            String query = "select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode";

            Map<String, Object> params = new HashMap();
            params.put("customerCode", customer.getCode());
            List<Long> ids = (List<Long>) this.paymentHistoryService.executeSelectQuery(query, params);

            for (Long id : ids) {
                this.paymentHistoryService.remove(id);

            }
            log.debug(" {} PaymentHistory to delete ", ids.size());
            log.debug(" End removePaymentHistory for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    /**
     * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
     *
     * @param customer
     * @throws BusinessException
     */
    private void nullifyAOsSeller(Customer customer) throws BusinessException {
        try {
            log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

            String query = "select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId ";

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            List<Long> ids = (List<Long>) this.accountOperationService.executeSelectQuery(query, params);
            for (Long id : ids) {
                accountOperationService.remove(id);
            }

            log.debug(" seller to nullify for {} AOs ", ids.size());
            log.debug(" End nullifyAOsSeller for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
        try {
            log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
            String query = "select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId";
            Map<String, Object> params = new HashMap<>();
            params.put("customerId", customer.getId());

            List<Long> ids = (List<Long>) this.businessEntityService.executeSelectQuery(query, params);
            for (Long id: ids) {
                this.businessEntityService.remove(id);
            }

            log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", ids.size());
            log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }

    }


    private void removeProductInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeProductInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findProductInstances(customer));
            log.debug(" {} ProductInstance to delete ", ids.size());

            for (Long id : ids) {
                this.productInstanceService.remove(id);
            }

            log.debug(" End removeProductInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findProductInstances(Customer customer) {
        try {
            log.debug(" findProductInstances for customer={} ", customer);
            String query = "select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.productInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findProductInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeOrderItems(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeOrderItem for customer = {} ", customer);

            Collection<Long> ids = safe(this.findOrderItems(customer));
            log.debug(" {} OrderItem to delete ", ids.size());

            for (Long id : ids) {
                this.orderItemService.remove(id);
            }

            log.debug(" End removeOrderItem for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findOrderItems(Customer customer) {
        try {
            log.debug(" findOrderItems for customer={} ", customer);
            String query = "select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.orderItemService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeCounterPeriods(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeCounterPeriods for customer = {} ", customer);

            Collection<Long> ids = safe(this.findCounterPeriods(customer));
            log.debug(" {} CounterPeriod to delete ", ids.size());

            for (Long id : ids) {
                this.counterPeriodService.remove(id);
            }

            log.debug(" End removeCounterPeriods for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findCounterPeriods(Customer customer) {
        try {
            log.debug(" findCounterPeriods for customer={} ", customer);
            String query = "select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.counterPeriodService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeCounterInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeCounterInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findCounterInstances(customer));
            log.debug(" {} CounterInstance to delete ", ids.size());

            for (Long id : ids) {
                this.counterInstanceService.remove(id);
            }

            log.debug(" End removeCounterInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findCounterInstances(Customer customer) {
        try {
            log.debug(" findCounterInstances for customer={} ", customer);
            String query = "select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.counterInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeRejectedBAs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeRejectedBAs for customer = {} ", customer);

            Collection<Long> ids = safe(this.findRejectedBillingAccounts(customer));
            log.debug(" {} RejectedBillingAccount to delete ", ids.size());

            for (Long id : ids) {
                this.rejectedBillingAccountService.remove(id);
            }

            log.debug(" End removeRejectedBAs for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findRejectedBillingAccounts(Customer customer) {
        try {
            log.debug(" findRejectedBillingAccounts for customer={} ", customer);
            String query = "select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.rejectedBillingAccountService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findRejectedBillingAccounts : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeInvoices(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeInvoices for customer = {} ", customer);

            Collection<Long> ids = safe(this.findInvoicesIds(customer));
            log.debug(" {} Invoices to delete ", ids.size());

            for (Long id : ids) {
                this.invoiceService.remove(id);
            }

            log.debug(" End removeInvoices for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeWalletInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeWalletInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findWalletInstances(customer));
            log.debug(" {} WalletInstance to delete ", ids.size());

            for (Long id : ids) {
                // a workaround for #4132
                WalletInstance wallet = this.walletService.findById(id);
                wallet.getUserAccount().setWallet(null);

                this.walletService.remove(id);
            }

            log.debug(" End removeWalletInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findWalletInstances(Customer customer) {
        try {
            log.debug(" findWalletInstances for customer={} ", customer);
            String query = "select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.walletService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findWalletInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeRatedTransactions(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeRatedTransactions for customer = {} ", customer);

            Collection<Long> ids = safe(this.findRatedTransactions(customer));
            log.debug(" {} RTs to delete ", ids.size());

            for (Long id : ids) {
                this.ratedTransactionService.remove(id);
            }

            log.debug(" End removeRatedTransactions for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }

    }

    private List<Long> findRatedTransactions(Customer customer) {
        try {
            log.debug(" findRatedTransactions for customer={} ", customer);
            String query = "select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.ratedTransactionService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findRatedTransactions : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeChargeInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeChargeInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findChargeInstances(customer));
            log.debug(" {} ChargeInstance to delete ", ids.size());
            for (Long ciId : ids) {
                this.chargeInstanceService.remove(ciId);
            }
            log.debug(" End removeChargeInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findChargeInstances(Customer customer) {
        try {
            log.debug(" findChargeInstances for customer={} ", customer);
            String query = "select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.chargeInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findChargeInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeSubscriptions(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeSubscriptions for customer = {} ", customer);
            Collection<Long> ids = safe(this.findSubscriptions(customer));
            log.debug(" {} Subscription to delete ", ids.size());

            for (Long subscriptionId : ids) {
                this.subscriptionService.remove(subscriptionId);
            }
            log.debug(" End removeSubscriptions for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findSubscriptions(Customer customer) {
        try {
            log.debug(" findSubscriptions for customer={} ", customer);
            StringBuffer query = new StringBuffer(
                    "select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer ");

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customer", customer);
            Object ids = this.subscriptionService.executeSelectQuery(query.toString(), queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findSubscriptions : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private List<Long> findInvoicesIds(Customer customer) {
        try {
            log.debug(" findInvoicesIds for customer={} ", customer);
            StringBuffer query = new StringBuffer(
                    "select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer =:customer ");

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customer", customer);
            Object ids = this.invoiceService.executeSelectQuery(query.toString(), queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on getSubscription : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private <T> Collection<T> safe(Collection<T> collection) {
        return collection == null ? Collections.EMPTY_LIST : collection;
    }
}'
            WHERE code = 'org.meveo.service.script.DeleteCustomersScript';
           ]]>
        </sql>
    </changeSet>

	<changeSet author="AmineBENAICHA" id="#6048_20210611">
		<sql>
<![CDATA[INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-30, 0, 0, ${db.current.time}, 'org.meveo.service.script.ServiceTemplateToProductScript', 'Migration ServiceTemplate To Product', 'JAVA', 'package org.meveo.service.script;

import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.util.pagination.PaginationConfiguration;
import org.meveo.model.article.AccountingArticle;
import org.meveo.model.article.ArticleMapping;
import org.meveo.model.article.ArticleMappingLine;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.catalog.ProductChargeTemplateMapping;
import org.meveo.model.catalog.ServiceChargeTemplate;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.cpq.Product;
import org.meveo.model.cpq.ProductVersion;
import org.meveo.model.cpq.enums.VersionStatusEnum;
import org.meveo.model.cpq.offer.OfferComponent;
import org.meveo.model.tax.TaxClass;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.article.AccountingArticleService;
import org.meveo.service.billing.impl.article.ArticleMappingLineService;
import org.meveo.service.billing.impl.article.ArticleMappingService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.cpq.ProductService;
import org.meveo.service.cpq.ProductVersionService;
import org.meveo.service.tax.TaxClassService;
import  org.meveo.api.dto.response.PagingAndFiltering.SortOrder;

public class ServiceTemplateToProductScript extends Script {

    public static final String DEFAULT_TAX_CLASS_CODE = "CMP_DATA";
    public static final long ARTICLE_MAPPING_ID = 1L;
    private static final Integer PAGE_COUNT = 100;
    private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(ServiceInstanceService.class.getSimpleName());
    private ProductService productService = (ProductService) getServiceInterface(ProductService.class.getSimpleName());
    private ProductVersionService productVersionService = (ProductVersionService) getServiceInterface(ProductVersionService.class.getSimpleName());
    private OfferTemplateService offerTemplateService= (OfferTemplateService) getServiceInterface(OfferTemplateService.class.getSimpleName());
    private AccountingArticleService accountingArticleService = (AccountingArticleService) getServiceInterface(AccountingArticleService.class.getSimpleName());
    private ArticleMappingService articleMappingService = (ArticleMappingService) getServiceInterface(ArticleMappingService.class.getSimpleName());
    private ArticleMappingLineService articleMappingLineService = (ArticleMappingLineService) getServiceInterface(ArticleMappingLineService.class.getSimpleName());
    private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(ServiceTemplateService.class.getSimpleName());
    private TaxClassService taxClassService = (TaxClassService) getServiceInterface(TaxClassService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        List<ServiceTemplate> serviceTemplates = (List<ServiceTemplate>) methodContext.get("SERVICE_TEMPLATE");

        if(serviceTemplates != null && !serviceTemplates.isEmpty()){
            serviceTemplates.forEach(this::map);
        } else {

            long count = serviceTemplateService.count(new PaginationConfiguration("id", SortOrder.ASCENDING));

            if (PAGE_COUNT < count) {
                serviceTemplateService.list(new PaginationConfiguration(null, null))
                        .forEach(this::map);
            } else {
                for (int index = 0; index < count; index = index + PAGE_COUNT) {
                    serviceTemplateService.list(new PaginationConfiguration(index, PAGE_COUNT, null, null, null, "id", SortOrder.ASCENDING))
                            .forEach(this::map);
                }
            }
        }

    }

    public Product map(ServiceTemplate serviceTemplate) {
        Product product = createProduct(serviceTemplate);
        createArticle(product);

        ProductVersion productVersion = createProductVersion(product);

        List<ServiceInstance> serviceInstances = serviceInstanceService.findByServiceTemplate(serviceTemplate);

        serviceInstances.forEach(serviceInstance -> {

            serviceInstance.setProductVersion(productVersion);
            serviceInstance.setServiceTemplate(null);
            serviceInstanceService.update(serviceInstance);

            OfferTemplate offer = serviceInstance.getSubscription().getOffer();
            OfferComponent offerComponent = new OfferComponent();
            offerComponent.setProduct(product);
            offerComponent.setOfferTemplate(offer);
            offer.getOfferComponents().add(offerComponent);
            offer.getOfferServiceTemplates().removeIf(o -> o.getServiceTemplate().getId().equals(serviceTemplate.getId()));
            offerTemplateService.update(offer);
        });

        return product;
    }

    private void createArticle(Product product) {
        product.getProductCharges().stream()
                .map(pc -> pc.getChargeTemplate())
                .forEach(chargeTemplate -> {
                    AccountingArticle accountingArticle;
                    List<AccountingArticle> accountingArticles = accountingArticleService.findByTaxClassAndSubCategory(chargeTemplate.getTaxClass(), chargeTemplate.getInvoiceSubCategory());
                    if(accountingArticles.isEmpty()){
                        TaxClass taxClass = taxClassService.findByCode(DEFAULT_TAX_CLASS_CODE);
                        accountingArticle = new AccountingArticle(UUID.randomUUID().toString(), "Migration Accounting article", taxClass, chargeTemplate.getInvoiceSubCategory());
                        accountingArticleService.create(accountingArticle);
                    }else {
                        accountingArticle = accountingArticles.get(0);
                    }
                    ArticleMapping defaultArticleMapping = articleMappingService.findById(ARTICLE_MAPPING_ID);
                    ArticleMappingLine articleMappingLine = new ArticleMappingLine();
                    articleMappingLine.setChargeTemplate(chargeTemplate);
                    articleMappingLine.setArticleMapping(defaultArticleMapping);
                    articleMappingLine.setProduct(product);
                    articleMappingLine.setAccountingArticle(accountingArticle);
                    articleMappingLineService.create(articleMappingLine);
                });

    }

    private Product createProduct(ServiceTemplate serviceTemplate) {
        Product product = new Product();
        product.setCode(serviceTemplate.getCode());
        product.setDescription(serviceTemplate.getDescription());
        List<ProductChargeTemplateMapping> productCharges = getProductCharges(serviceTemplate);
        product.setProductCharges(productCharges);
        product.setCfValues(serviceTemplate.getCfValues());
        product.setCfAccumulatedValues(serviceTemplate.getCfAccumulatedValues());
        product.setDisabled(serviceTemplate.isDisabled());
        productService.create(product);
        return product;
    }

    private ProductVersion createProductVersion(Product product) {
        ProductVersion productVersion= new ProductVersion();
        productVersion.setProduct(product);
        productVersion.setShortDescription(product.getDescription());
        productVersion.setStatus(VersionStatusEnum.PUBLISHED);
        productVersion.setStatusDate(Calendar.getInstance().getTime());
        productVersionService.create(productVersion);
        return productVersion;
    }

    private ProductChargeTemplateMapping mapToProductChargeTemplate(ServiceChargeTemplate serviceCharge) {
        ProductChargeTemplateMapping productChargeTemplateMapping = new ProductChargeTemplateMapping();
        productChargeTemplateMapping.setChargeTemplate(serviceCharge.getChargeTemplate());
        return productChargeTemplateMapping;
    }

    private List<ProductChargeTemplateMapping> getProductCharges(ServiceTemplate serviceTemplate) {
        List<ProductChargeTemplateMapping> productCharges = serviceTemplate.getServiceSubscriptionCharges()
                .stream()
                .map(this::mapToProductChargeTemplate)
                .collect(Collectors.toList());

        productCharges.addAll(
                serviceTemplate.getServiceRecurringCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceTerminationCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceUsageCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );
        return productCharges;
    }
}');]]>
			</sql>

			<insert tableName="meveo_job_instance">
	            <column name="id" valueNumeric="-40" />
	            <column name="version" valueNumeric="0" />
	            <column name="disabled" valueNumeric="0" />
	            <column name="created" valueDate="${db.current.time}" />
	            <column name="updated" valueDate="null" />
	            <column name="uuid" value="ServiceTemplateToProductJob" />
	            <column name="code" value="ServiceTemplateToProductJob" />
	            <column name="description" value="ServiceTemplateToProductJob" />
	            <column name="job_category" value="MEDIATION" />
	            <column name="job_template" value="ScriptingJob" />
	            <column name="parametres" valueNumeric="null" />
	            <column name="creator" value="opencell.admin" />
	            <column name="updater" value="null" />
	            <column name="timerentity_id" value="null" />
	            <column name="cf_values">
	            	<![CDATA[
	            		{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ServiceTemplateToProductScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
	            	]]>
				</column>
	       	</insert>
	</changeSet>

	<changeSet id="#INTRD-265_20210705_query_manager" author="TarikFA.">
		<preConditions onFail="MARK_RAN" onSqlOutput="TEST">
				<sqlCheck expectedResult="0"> select count(*) from ${db.schema.adapted}adm_role where role_name = 'query_manager'</sqlCheck>
		</preConditions>

		<insert tableName="adm_role">
			<column name="id" valueNumeric="-121" />
			<column name="version" valueNumeric="0"/>
			<column name="role_name" value="query_manager" />
			<column name="role_description" value="Query Manager" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-216"/>
			<column name="name" value="All queries visualization"/>
			<column name="permission" value="all_queries_visualization"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-216" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-217"/>
			<column name="name" value="Protected queries visualization"/>
			<column name="permission" value="protected_queries_visualization"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-217" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-218"/>
			<column name="name" value="Public queries visualization"/>
			<column name="permission" value="public_queries_visualization"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-218" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-219"/>
			<column name="name" value="All queries management"/>
			<column name="permission" value="all_queries_management"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-219" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-220"/>
			<column name="name" value="Protected queries management"/>
			<column name="permission" value="protected_queries_management"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-220" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-221"/>
			<column name="name" value="Public queries management"/>
			<column name="permission" value="public_queries_management"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-221" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-222"/>
			<column name="name" value="All queries execution"/>
			<column name="permission" value="all_queries_execution"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-222" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-223"/>
			<column name="name" value="Protected queries execution"/>
			<column name="permission" value="protected_queries_execution"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-223" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-224"/>
			<column name="name" value="Public queries execution"/>
			<column name="permission" value="public_queries_execution"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-224" />
		</insert>
	</changeSet>

	<changeSet id="#INTRD-265_20210705_query_user" author="TarikFA.">
		<preConditions onFail="MARK_RAN" onSqlOutput="TEST">
				<sqlCheck expectedResult="0"> select count(*) from ${db.schema.adapted}adm_role where role_name = 'query_user'</sqlCheck>
		</preConditions>

		<insert tableName="adm_role">
			<column name="id" valueNumeric="-122" />
			<column name="version" valueNumeric="0"/>
			<column name="role_name" value="query_user" />
			<column name="role_description" value="Query User" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-225"/>
			<column name="name" value="Protected queries visualization"/>
			<column name="permission" value="protected_queries_visualization"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-225" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-226"/>
			<column name="name" value="Public queries visualization"/>
			<column name="permission" value="public_queries_visualization"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-226" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-227"/>
			<column name="name" value="Public queries management"/>
			<column name="permission" value="public_queries_management"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-227" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-228"/>
			<column name="name" value="Protected queries execution"/>
			<column name="permission" value="protected_queries_execution"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-228" />
		</insert>

		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-229"/>
			<column name="name" value="Public queries execution"/>
			<column name="permission" value="public_queries_execution"/>
		</insert>

		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-229" />
		</insert>

	</changeSet>
    <changeSet id="INTRD-263_20210716" author="ZBariki">
        <insert tableName="com_message_template">
            <column name="media" value="EMAIL" />
            <column name="id" valueSequenceNext="com_msg_tmpl_seq" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="REPORT_QUERY_RESULT_SUCCESS" />
            <column name="type" value="OTHER" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="description" value="Report query result" />
            <column name="subject" value="[opencell] Query result query.name query execution start date" />
            <column name="textcontent">
                <![CDATA[Dear #{userName},

The result for your query is ready.
Check the result on Opencell Portal direct link to the result on the portal

Query : #{reportQueryName}
Started : #{startDate}
Duration : #{duration}
Line count : #{lineCount}

Best regards,

Opencell team.
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="EMAIL" />
            <column name="id" valueSequenceNext="com_msg_tmpl_seq" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="REPORT_QUERY_RESULT_FAILURE" />
            <column name="type" value="OTHER" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="description" value="Report query failure notification" />
            <column name="subject" value="[opencell] Query failed query.name query execution start date" />
            <column name="textcontent">
                <![CDATA[Dear #{userName},

Query execution failed with error :
#{error}

Contact your administrator or support.

Query : #{reportQueryName}
Started : #{startDate}
Duration : #{duration}

Best regards,

Opencell team.
                ]]>
            </column>
        </insert>
    </changeSet>

    <changeSet id="#20210607_540_563" author="TarikFA." failOnError="false">
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-10'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="PROD-STD"/>
            <column name="tax_class_id" value="-1"/>
            <column name="invoice_sub_category_id" value="-2"/>
            <column name="description_i18n" value='{"FRA":"Remise de pied de facture","ENG":"Invoice discount"}'/>
            <column name="description" value='Invoice discount'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="63ef9cee-f498-4908-PROD-STD" />
        </insert>
    </changeSet>

    <changeSet id="#INTRD-1090_20210729" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-07-29 00:04:19.913"/>
            <column name="job_category" value="INVOICING"/>
            <column name="job_template" value="XMLInvoiceGenerationJobV2"/>
            <column name="code" value="XMLInvoiceGenerationJobV2"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="XML_Invoice_Generation_Job_V2"/>
        </insert>
    </changeSet>

       <changeSet id="J215_20210708" author="Mohammed_ELAZZOUZI" dbms="postgresql">

        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-43" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.ServiceImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import service instances]"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.model.billing.SubscriptionTerminationReason;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.crm.impl.SubscriptionTerminationReasonService;


public class ServiceImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";

	private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			"ServiceInstanceService");
	CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface(
			"CustomFieldTemplateService");
	private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(
			"ServiceTemplateService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			"SubscriptionService");
	private SubscriptionTerminationReasonService reasonService = (SubscriptionTerminationReasonService) getServiceInterface(
			"SubscriptionTerminationReasonService");
	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"ServiceInstance".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(ServiceInstanceActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				ServiceInstanceActionEnum action = ServiceInstanceActionEnum.valueOf(OC_ACTION);

				String OC_Subscription_code = (String) recordMap.get("OC_Subscription_code");
				String OC_ServiceInstance_code = (String) recordMap.get("OC_ServiceInstance_code");
				List<ServiceInstance> serviceInstances = serviceInstanceService
						.findByCodeAndCodeSubscription(OC_ServiceInstance_code, OC_Subscription_code);

				ServiceInstance serviceInstance = null;
				if (action==ServiceInstanceActionEnum.INSTANTIATE ) {
					serviceInstance = new ServiceInstance();
					mapServiceInstanceFields(recordMap, serviceInstance);
					serviceInstance.setCode(OC_ServiceInstance_code);
					Subscription subscription = subscriptionService.findByCode(OC_Subscription_code);
					if(subscription==null) {
						throw new ValidationException("no Subscription found with subscriptionCode: '" + OC_Subscription_code + "'");
					}
					serviceInstance.setSubscription(subscription );
					ServiceTemplate serviceTemplate = serviceTemplateService.findByCode(OC_ServiceInstance_code);
					if(serviceTemplate==null) {
						throw new ValidationException("no serviceTemplate found with code: '" + OC_ServiceInstance_code + "'");
					}
					serviceInstance.setServiceTemplate(serviceTemplate);
					serviceInstanceService.create(serviceInstance);
				} else {
					if (serviceInstances == null || serviceInstances.isEmpty()) {
						throw new ValidationException("no ServiceInstanceFound for subscriptionCode/serviceInstanceCode: '"
										+ OC_Subscription_code + "'/'" + OC_ServiceInstance_code + "'");
					}
					serviceInstance = serviceInstances.get(0);
				}


				switch (action) {
				case INSTANTIATE:
					serviceInstanceService.serviceInstanciation(serviceInstance);
					break;
				case ACTIVATE:
					serviceInstanceService.serviceActivation(serviceInstance);
					break;
				case RESUME:
					serviceInstanceService.serviceReactivation(serviceInstance, new Date(), true, false);
					break;
				case SUSPEND:
					serviceInstanceService.serviceSuspension(serviceInstance, new Date());
					break;
				case TERMINATE:
					Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));
					String OC_terminationReason = (String) recordMap.get("OC_terminationReason");
					if(StringUtils.isBlank(OC_terminationReason)) {
						throw new ValidationException("OC_terminationReason is mandatory to terminate subscription" );
					}
					SubscriptionTerminationReason reason = reasonService.findByCodeReason(OC_terminationReason);
					if(reason==null) {
						throw new ValidationException("no TerminationReason found with code: '" + OC_terminationReason + "'");
					}
					serviceInstanceService.terminateService(serviceInstance, OC_terminationDate, reason, serviceInstance.getOrderNumber());
					break;
				case UPDATE:
					updateService(recordMap, serviceInstance);
					break;
				default:
					break;
				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private void updateService(Map<String, Object> recordMap, ServiceInstance serviceInstance) throws Exception {
		mapServiceInstanceFields(recordMap, serviceInstance);
		serviceInstanceService.update(serviceInstance);
	}

	private void mapServiceInstanceFields(Map<String, Object> recordMap, ServiceInstance serviceInstance)
			throws ParseException {

		Date subscriptionDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_subscriptionDate"));;
		Date rateUntilDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_rateUntilDate"));
		Date endAgreementDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_endAgreementDate"));
		String OC_ServiceInstance_description = (String) recordMap.get("OC_ServiceInstance_description");
		String OC_ServiceInstance_quantity = (String) recordMap.get("OC_ServiceInstance_quantity");

		serviceInstance.setSubscriptionDate(subscriptionDate);
		serviceInstance.setRateUntilDate(rateUntilDate);
		serviceInstance.setEndAgreementDate(endAgreementDate);
		serviceInstance.setQuantity(new BigDecimal(OC_ServiceInstance_quantity));
		serviceInstance.setDescription(OC_ServiceInstance_description);
		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> serviceInstance.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "ServiceInstance")));
	}
	public enum ServiceInstanceActionEnum {
		INSTANTIATE, ACTIVATE, RESUME, SUSPEND, TERMINATE, UPDATE
	}
}]]></column>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-44" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.AccessImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import access points"/>
            <column name="created" valueDate="${db.current.time}"/>
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.model.billing.Subscription;
import org.meveo.model.mediation.Access;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.medina.impl.AccessService;

public class AccessImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";

	private AccessService accessService = (AccessService) getServiceInterface("AccessService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
	CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface(
			"CustomFieldTemplateService");

	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"AccessPoint".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(AccessActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				AccessActionEnum action = AccessActionEnum.valueOf(OC_ACTION);

				Access access = validateAndGetAccess(action, recordMap);

				if (AccessActionEnum.DELETE.equals(action)) {
					accessService.remove(access);
				} else {
					setAccessValues(recordMap, access);
					if (AccessActionEnum.CREATE.equals(action)) {
				        if (accessService.isDuplicateAndOverlaps(access)) {
				            throw new BusinessException( "Duplicate subscription/access point: '"+access.getSubscription().getCode()+"'/'"+access.getAccessUserId()+"'");
				        }
						accessService.create(access);
					} else if (AccessActionEnum.UPDATE.equals(action)) {
						accessService.update(access);
					}

				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private Access validateAndGetAccess(AccessActionEnum action, Map<String, Object> recordMap) {
		Access access = null;
		String OC_subscription_code = (String) recordMap.get("OC_Subscription_code");
		String OC_Access_code = (String) recordMap.get("OC_accessPoint_code");
		List<Access> accessList = accessService.getActiveAccessByCodeAndCodeSubscription(OC_Access_code, OC_subscription_code);
		if (!AccessActionEnum.CREATE.equals(action)) {
			if (accessList == null || accessList.isEmpty()) {
				throw new ValidationException("no Access found for subscriptionCode/AccessCode: '"
						+ OC_subscription_code + "'/'" + OC_Access_code + "'");
			}
			access = accessList.get(0);
		} else {
			access = new Access();
			Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
			if (subscription == null) {
				throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
			}
			access.setSubscription(subscription);
			access.setAccessUserId(OC_Access_code);
		}
		return access;
	}

	private void setAccessValues(Map<String, Object> recordMap, Access access) throws ParseException {
		Date startDate = DateUtils.validateParseDate((String) recordMap.get("OC_accessPoint_startDate"));
		Date endDate = DateUtils.validateParseDate((String) recordMap.get("OC_accessPoint_endDate"));
		access.setEndDate(endDate);
		access.setStartDate(startDate);

		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> access.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "Access")));
	}

	public enum AccessActionEnum {
		CREATE, UPDATE, DELETE
	}
}]]></column>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-45" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.SubscriptionImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import subscriptions"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.exception.EntityDoesNotExistsException;
import org.meveo.model.admin.Seller;
import org.meveo.model.billing.Subscription;
import org.meveo.model.billing.SubscriptionTerminationReason;
import org.meveo.model.billing.UserAccount;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.crm.CustomFieldTemplate;
import org.meveo.model.crm.custom.CustomFieldMatrixColumn;
import org.meveo.model.crm.custom.CustomFieldStorageTypeEnum;
import org.meveo.model.crm.custom.CustomFieldTypeEnum;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.admin.impl.SellerService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.UserAccountService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.crm.impl.SubscriptionTerminationReasonService;

public class SubscriptionImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";
	private SubscriptionTerminationReasonService reasonService= (SubscriptionTerminationReasonService) getServiceInterface("SubscriptionTerminationReasonService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
	private UserAccountService userAccountService = (UserAccountService) getServiceInterface("UserAccountService");
	private SellerService sellerService = (SellerService) getServiceInterface("SellerService");
	private OfferTemplateService offerService = (OfferTemplateService) getServiceInterface("OfferTemplateService");
	private CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface("CustomFieldTemplateService");

	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"SUBSCRIPTION".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(SubscriptionActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				SubscriptionActionEnum action = SubscriptionActionEnum.valueOf(OC_ACTION);

				String OC_subscription_code = (String) recordMap.get("OC_subscription_code");
				Subscription subscription = subscriptionService
						.findByCode(OC_subscription_code);
				if (subscription == null && !SubscriptionActionEnum.CREATE.equals(action)) {
					throw new ValidationException("no Subscription Found for subscriptionCode: '"
							+ OC_subscription_code + "'");
				}
				if (subscription != null && SubscriptionActionEnum.CREATE.equals(action)) {
					throw new ValidationException("subscription already exists with code: '"
							+ OC_subscription_code + "'");
				}

				switch (action) {
				case CREATE:
					subscription = new Subscription();
					subscription.setCode(OC_subscription_code);
					mapSubscriptionValues(recordMap, subscription);
					subscriptionService.create(subscription);
					break;
				case ACTIVATE:
					subscriptionService.activateInstantiatedService(subscription);
					break;
				case RESUME:
					subscriptionService.subscriptionReactivation(subscription, new Date());
					break;
				case SUSPEND:
					subscriptionService.subscriptionSuspension(subscription, new Date());
					break;
				case TERMINATE:
					Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));
					String terminationCode = (String)recordMap.get("OC_subscriptionTerminationReason_code");
					if(terminationCode==null) {
						throw new ValidationException("OC_subscriptionTerminationReason_code is mandatory to terminate subscription" );
					}
					SubscriptionTerminationReason terminationReason = reasonService.findByCodeReason(terminationCode);
					if(terminationReason==null) {
						throw new EntityDoesNotExistsException(SubscriptionTerminationReason.class, terminationCode);
					}
					subscription.setSubscriptionTerminationReason(terminationReason);
					subscriptionService.terminateSubscription(subscription, OC_terminationDate, terminationReason, null);
					break;
				case UPDATE:
					mapSubscriptionValues(recordMap, subscription);
					subscriptionService.update(subscription);
					break;
				default:
					break;
				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private void mapSubscriptionValues(Map<String, Object> recordMap, Subscription subscription) throws ParseException {
		String OC_seller_code = (String) recordMap.get("OC_seller_code");
		String OC_offer_code = (String) recordMap.get("OC_offer_code");
		String OC_userAccount_code = (String) recordMap.get("OC_userAccount_code");
		Date subscriptionDate = DateUtils.validateParseDate((String) recordMap.get("OC_subscriptionDate"));
		Date endAgreementDate = DateUtils.validateParseDate((String) recordMap.get("OC_endAgreementDate"));
		Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));

		String OC_subscription_description = (String) recordMap.get("OC_subscription_description");



		UserAccount userAccount = userAccountService.findByCode(OC_userAccount_code);
		if(userAccount==null) {
			throw new EntityDoesNotExistsException(UserAccount.class, OC_userAccount_code);
		}
		Seller seller = sellerService.findByCode(OC_seller_code);
		if(seller==null) {
			throw new EntityDoesNotExistsException(Seller.class, OC_seller_code);
		}
		OfferTemplate offer = offerService.findByCode(OC_offer_code);
		if(offer==null) {
			throw new EntityDoesNotExistsException(OfferTemplate.class, OC_offer_code);
		}
		subscription.setUserAccount(userAccount);
		subscription.setSeller(seller);
		subscription.setOffer(offer);
		subscription.setTerminationDate(OC_terminationDate);
		subscription.setSubscriptionDate(subscriptionDate);
		subscription.setEndAgreementDate(endAgreementDate);
		subscription.setDescription(OC_subscription_description);
		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> subscription.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "Subscription")));
	}

	public enum SubscriptionActionEnum {
		CREATE, UPDATE, SUSPEND, RESUME, ACTIVATE, TERMINATE
	}
}]]></column>
        </insert>

        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-46" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importServicesJob" />
            <column name="description" value="importServicesJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importServicesJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/services/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio xmlns=\"http://www.beanio.org/2012/03\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n          \t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_description\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_quantity\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_subscriptionDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_rateUntilDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_endAgreementDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationReason\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PPC_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PRIXMINUTE_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_NRC\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_CHATS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_SMS_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_NRC_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUTPARUNITE_APPEL_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_LICENCE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_SMS_SORTANT_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_UNITAIRE_OPTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_REC_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_REC\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUT_APPEL_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_EMAILS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_HITS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_TRANCHE_STOCKAGE_GO\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_TAILLE_TRANCHE_STOCKAGE_GO\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_STOCKAGE_EMAILS_GO_INCLUS\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_MIN_FACTURATION\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_description\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_quantity\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_subscriptionDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_rateUntilDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationReason\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_endAgreementDate\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PPC_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PRIXMINUTE_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_NRC\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_CHATS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_SMS_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_NRC_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUTPARUNITE_APPEL_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_LICENCE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_SMS_SORTANT_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_UNITAIRE_OPTION\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_REC_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_REC\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUT_APPEL_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_EMAILS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_HITS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_TRANCHE_STOCKAGE_GO\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_TAILLE_TRANCHE_STOCKAGE_GO\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_STOCKAGE_EMAILS_GO_INCLUS\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_MIN_FACTURATION\" required=\"false\"/>\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/services/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/services/inputs"}],
	            "waitingMillis":[{"long":0}],
	            "FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],
	            "FlatFileProcessingJob_rejectDir":[{"string":"/imports/services/rejects"}],
	            "nbRuns":[{"long":1}],
	            "FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.ServiceImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
          </insert>
          <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-47" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importSubscriptionsJob" />
            <column name="description" value="importSubscriptionsJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importSubscriptionsJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/subscriptions/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_description\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_userAccount_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_offer_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_seller_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscriptionDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_endAgreementDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscriptionTerminationReason_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PAYS_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_TYPE_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NIVEAU_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_COMMANDE_SUB\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_description\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_userAccount_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_offer_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_seller_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_subscriptionDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_endAgreementDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_subscriptionTerminationReason_code\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PAYS_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_TYPE_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NIVEAU_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_COMMANDE_SUB\" required=\"false\"/>\r\n\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/subscriptions/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/subscriptions/inputs"}],
	            "waitingMillis":[{"long":0}],"FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],"FlatFileProcessingJob_rejectDir":[{"string":"/imports/subscriptions/rejects"}],
	            "nbRuns":[{"long":1}],"FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.SubscriptionImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-48" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importAccesPointsJob" />
            <column name="description" value="importAccesPointsJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importAccesPointsJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/accessPoints/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_startDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_endDate\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_startDate\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_endDate\" required=\"true\"/>\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/accessPoints/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/accessPoints/inputs"}],
	            "waitingMillis":[{"long":0}],
	            "FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],
	            "FlatFileProcessingJob_rejectDir":[{"string":"/imports/accessPoints/rejects"}],
	            "nbRuns":[{"long":1}],
	            "FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.AccessImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
        </insert>
	</changeSet>

	<changeSet id="#INTRD-292_20210816" author="HatimOUDAD">
        <insert tableName="journal">
            <column name="id" valueNumeric="-1"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="SAL"/>
            <column name="description" value="Sales Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-2"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="BAN"/>
            <column name="description" value="Bank Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-3"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="MSC"/>
            <column name="description" value="Miscellaneous Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-4"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="TAX"/>
            <column name="description" value="Tax Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
    </changeSet>
	<changeSet id="#INTRD-1406_20210826" author="HatimOUDAD">
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-2" />
    		<where>code in ('PAY_CHK','PAY_TIP','PAY_DDT','REJ_CHK','REJ_DDT','REJ_TIP','PAY_NID','PAY_REC','REF_CHK','REF_DDT','PAY_DEP','REF_CRD','REJ_CRD','REJ_RCR','REJ_RDD','REF_TIP','PAY_CRD','PAY_PAL','PAY_STP','DBT_TRS','CRD_TRS')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-3" />
    		<where>code in ('EXP_WRT','INV_FEE','RND_INC','RND_EXP')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-1" />
    		<where>code in ('INV_STD','INV_REB','INV_DIS','INV_CRN')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-4" />
    		<where>code in ('TAX_VAT_00','TAX_VAT_05','TAX_VAT_20','TAX_VAT_10')</where>
    </update>
    </changeSet>


    <changeSet id="#INTRD-1589_2021_14_09" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2021-09-14 00:04:19.913" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="code" value="ProcessCustomerPaymentsFileJob" />
            <column name="description" value="Process customer payments file job"/>
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="job_speed" value="NORMAL" />
            <column name="single_node" valueNumeric="1" />
            <column name="verbose_report" valueNumeric="1" />
            <column name="disabled" valueNumeric="0" />
            <column name="uuid" value="ProcessCustomerPaymentsFileJob" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="oneFilePerJob"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Process files separately"/>
            <column name="field_type" value="BOOLEAN"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="default_value" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_outputDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Output directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="default_value" value="imports/payment/output"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:4"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_mappingConf"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Record descriptor"/>
            <column name="field_type" value="TEXT_AREA"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Record configuration:2;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_recordVariableName"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Record variable name"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="record"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="50"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_originFilename"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Filename variable name"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="origin_filename"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:3"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_archiveDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Archive directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="imports/payment/archive"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_inputDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Input directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="imports/payment/input"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="waitingMillis"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Waiting before next launch (ms)"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="0"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_variables"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Init and finalize variables"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="MAP"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="mapkey_type" value="STRING"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Dataprocessing configuration:3;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_errorAction"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Error action"/>
            <column name="field_type" value="LIST"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="CONTINUE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:5"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileFormat"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="File format"/>
            <column name="field_type" value="ENTITY"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="entity_clazz" value="org.meveo.model.admin.FileFormat"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileNameFilter"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="File name filter"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:5"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileNameExtension"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Extension"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="csv"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:6"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_formatTransfo"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Format transformation"/>
            <column name="field_type" value="LIST"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="None"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:4"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_rejectDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Reject directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:3"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_scriptsFlow"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Script flow"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="nbRuns"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Number of parallel execution"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="1"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_nbLinesToProcess"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Nb of lines to process"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="1"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:7"/>
        </insert>
		<insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-40" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="now()" />
            <column name="updated" valueDate="null" />
            <column name="uuid" value="ServiceTemplateToProductJob" />
            <column name="code" value="ServiceTemplateToProductJob" />
            <column name="description" value="ServiceTemplateToProductJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="ScriptingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="null" />
            <column name="timerentity_id" value="null" />
            <column name="cf_values">
            	<![CDATA[
            		{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ServiceTemplateToProductScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
            	]]>
			</column>
       	</insert>
	</changeSet>
	<changeSet id="INTRD_1985_20210923_data" author="TarikFA.">


        <insert tableName="generic_sequence">
            <column name="id" valueSequenceNext="generic_sequence_seq" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="quote_offer_sequence" />
            <column name="description" value="Quote Offer sequence" />
            <column name="sequence_type" value="SEQUENCE" />
            <column name="sequence_size" valueNumeric="9" />
            <column name="current_number" valueNumeric="0" />
        </insert>


		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="QuoteOffer" />
			<column name="code_el" value="#{entity.quoteVersion.id}_#{entity.offerTemplate.code}_#{sequenceNextValue}" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="sequence_id" valueSequenceCurrent="generic_sequence_seq" />
		</insert>

        <insert tableName="generic_sequence">
            <column name="id" valueSequenceNext="generic_sequence_seq"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="order_offer_sequence" />
            <column name="description" value="Order Offer sequence" />
            <column name="sequence_type" value="SEQUENCE" />
            <column name="sequence_size" valueNumeric="9" />
            <column name="current_number" valueNumeric="0" />
        </insert>


		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="OrderOffer" />
			<column name="code_el" value="#{entity.order.code}_#{entity.offerTemplate.code}_#{sequenceNextValue}" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="sequence_id" valueSequenceCurrent="generic_sequence_seq" />
		</insert>
	</changeSet>

	<changeSet id="#2122_20211001" author="YoussefIZEM">
        <update tableName="ar_account_operation">
            <column name="accounting_date" valueComputed="transaction_date"></column>
        </update>
    </changeSet>
	<changeSet id="1589_20210930" author="YoussefIZEM" dbms="postgresql">
        <insert tableName="billing_accounting_code">
            <column name="id" valueNumeric="-35" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="T3P9476" />
            <column name="description" value="WS BAD DEBT WRITE-OFFS IRRE"></column>
            <column name="chart_of_account_type" value="REVENUE" />
            <column name="chart_of_account_view_type" value="REGULAR" />
        </insert>
		<insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-50" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-35" />
            <column name="code" value="PAY_BATCH" />
            <column name="description" value="Payment from batch payment file" />
            <column name="occ_category" value="CREDIT" />
            <column name="journal_id" value="-2" />
        </insert>
        <update tableName="meveo_job_instance" >
            <column name="cf_values">
	            <![CDATA[{"FlatFileProcessingJob_mappingConf":[{"string":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beanio xmlns=\"http://www.beanio.org/2012/03\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\n   <stream name=\"record\" format=\"fixedlength\" strict=\"true\">\n      <record name=\"payment\" occurs=\"0+\" class=\"org.meveo.api.dto.payment.CustomerPaymentRecordDto\" minLength=\"80\" maxLength=\"80\">\n         <field name=\"payCode\" minOccurs=\"0\" length=\"3\" />\n         <field name=\"accountNumber\" minOccurs=\"0\" length=\"11\" />\n         <field name=\"checkDigit\" minOccurs=\"0\" length=\"2\" />\n         <field name=\"paidAmount\" minOccurs=\"0\" length=\"10\" />\n         <field name=\"filler\" minOccurs=\"0\" length=\"5\" />\n         <field name=\"date\" minOccurs=\"0\" length=\"6\" format=\"ddMMyy\"/>\n         <field name=\"reference\" minOccurs=\"0\" length=\"42\" />\n         <field name=\"endOfRecord\" minOccurs=\"0\" length=\"1\" />\n      </record>\n   </stream>\n</beanio>"}]
						,"FlatFileProcessingJob_recordVariableName":[{"string":"record"}]
						,"FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}]
						,"FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}]
						,"FlatFileProcessingJob_fileNameExtension":[{"string":"PMT"}]
						,"FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.ProcessCustomerPaymentsFileScript"}]
						,"FlatFileProcessingJob_archiveDir":[{"string":"imports/payment/archive"}]
						,"FlatFileProcessingJob_rejectDir":[{"string":"imports/payment/reject"}]
						,"FlatFileProcessingJob_outputDir":[{"string":"imports/payment/output"}]
						,"FlatFileProcessingJob_inputDir":[{"string":"imports/payment/input"}]}]]>
			</column>
            <where>code ='ProcessCustomerPaymentsFileJob'</where>
        </update>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-55" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.ProcessCustomerPaymentsFileScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="Process customer payments file script"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[
package org.meveo.service.script;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Map;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.meveo.admin.exception.BusinessException;
import org.meveo.api.dto.payment.CustomerPaymentRecordDto;
import org.meveo.commons.utils.StringUtils;
import org.meveo.model.billing.BillingAccount;
import org.meveo.model.payments.MatchingStatusEnum;
import org.meveo.model.payments.OCCTemplate;
import org.meveo.model.payments.OperationCategoryEnum;
import org.meveo.model.payments.Payment;
import org.meveo.model.payments.PaymentMethodEnum;
import org.meveo.service.billing.impl.BillingAccountService;
import org.meveo.service.billing.impl.RatingService;
import org.meveo.service.payments.impl.OCCTemplateService;
import org.meveo.service.payments.impl.PaymentService;
import org.meveo.service.script.Script;

import org.meveo.model.payments.ApplicationPropertiesEnum;
import org.meveo.model.payments.AccountOperationCFsEnum;

/**
 * @author Abdellatif BARI
 */
@Stateless
public class ProcessCustomerPaymentsFileScript extends Script {

	private transient BillingAccountService billingAccountService = (BillingAccountService) getServiceInterface(BillingAccountService.class.getSimpleName());

    private transient PaymentService paymentService = (PaymentService) getServiceInterface(PaymentService.class.getSimpleName());

	private transient OCCTemplateService oCCTemplateService = (OCCTemplateService) getServiceInterface(OCCTemplateService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> parameters) throws BusinessException {
        try {
            CustomerPaymentRecordDto customerPaymentRecordDto = initContext(parameters);
            processItem(customerPaymentRecordDto);
        } catch (Exception e) {
            log.error("error on process customer payments file {} ", e.getMessage(), e);
            if (e instanceof BusinessException) {
                throw e;
            } else {
                // wrap the exception in a business exception and throwing it
                throw new BusinessException(e);
            }
        }
    }

    /**
     * Init context
     *
     * @param parameters parameters
     * @return the customer payment record Dto
     * @throws BusinessException the business exception
     */
    private CustomerPaymentRecordDto initContext(Map<String, Object> parameters) throws BusinessException {
        CustomerPaymentRecordDto customerPaymentRecordDto = (CustomerPaymentRecordDto) parameters.get("record");
        if (customerPaymentRecordDto == null) {
            throw new BusinessException(String.format("Parameter record is missing"));
        }
        customerPaymentRecordDto.setErrorMessage(new StringBuilder());
        String fileName = (String) parameters.get("origin_filename");
        if (StringUtils.isBlank(fileName)) {
            throw new BusinessException(String.format("Parameter origin_filename is missing"));
        }
        customerPaymentRecordDto.setFileName(fileName);
        return customerPaymentRecordDto;
    }

    /**
     * Process item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void processItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        validateItem(customerPaymentRecordDto);
        populateItem(customerPaymentRecordDto);
        if (customerPaymentRecordDto.getErrorMessage().length() > 0) {
            throw new BusinessException(customerPaymentRecordDto.getErrorMessage().toString());
        }
    }

    /**
     * Validate item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void validateItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        if (StringUtils.isBlank(customerPaymentRecordDto.getPaidAmount())) {
            customerPaymentRecordDto.getErrorMessage().append("The payment amount is required.");
        } else {
            customerPaymentRecordDto.setPaidAmount(customerPaymentRecordDto.getPaidAmount().trim());
            if (!isDouble(customerPaymentRecordDto.getPaidAmount())) {
                customerPaymentRecordDto.getErrorMessage().append("The payment amount is invalid");
            }
        }
        if (customerPaymentRecordDto.getDate() == null) {
            customerPaymentRecordDto.getErrorMessage().append("The payment date is required");
        }
        if (StringUtils.isBlank(customerPaymentRecordDto.getEndOfRecord()) || !customerPaymentRecordDto.getEndOfRecord().equalsIgnoreCase("V")) {
            customerPaymentRecordDto.getErrorMessage().append("The end of record must always hard coded as V.");
        }
    }

    /**
     * Check number is double
     *
     * @param strNum the string number
     * @return true is the string is double.
     */
    public static boolean isDouble(String strNum) {
        if (StringUtils.isBlank(strNum)) {
            return false;
        }
        try {
            Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    /**
     * Convert String to integer value (possibility to have null as default value)
     *
     * @param str string to be converted
     * @return the integer value
     */
    public static Integer toInteger(String str) {
        return toInteger(str, null);
    }

    /**
     * Convert String to integer value (possibility to have null as default value)
     *
     * @param str          string to be converted
     * @param defaultValue the default value
     * @return the integer value
     */
    public static Integer toInteger(String str, Integer defaultValue) {
        if (StringUtils.isBlank(str)) {
            return defaultValue;
        } else {
            try {
                return Integer.parseInt(str.trim());
            } catch (NumberFormatException ne) {
                return defaultValue;
            }
        }
    }

    /**
     * Populate tariff plan item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void populateItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        // if everything is OK and no errors
        if (customerPaymentRecordDto.getErrorMessage().length() == 0) {
            Integer accountNumber = toInteger(customerPaymentRecordDto.getAccountNumber());
            if (accountNumber != null) {
                customerPaymentRecordDto.setAccountNumber(accountNumber.toString());
            }

            BillingAccount billingAccount = billingAccountService.findByNumber(customerPaymentRecordDto.getAccountNumber());
            if (billingAccount != null) {
                // create payment.
                createPayment(customerPaymentRecordDto, billingAccount);
            } else { // the billing account is not found in Opencell
                log.warn("The billing account " + customerPaymentRecordDto.getAccountNumber() + " is not found ");
                postUnmatchedPayment(customerPaymentRecordDto);
            }
        }
    }

    /**
     * post unmatched payment into the suspense billing account
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void postUnmatchedPayment(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        // get the suspense billing account
        String suspenseBillingAccountCode = ApplicationPropertiesEnum.SUSPENSE_BILLING_ACCOUNT_CODE.getProperty();
        BillingAccount billingAccount = billingAccountService.findByCode(suspenseBillingAccountCode);
        if (billingAccount != null) {
            // Create payment and put it into the suspense billing account
            createPayment(customerPaymentRecordDto, billingAccount);
        } else {
            log.error("The suspense billing account {} is not found", suspenseBillingAccountCode);
            customerPaymentRecordDto.getErrorMessage().append("The suspense billing account " + suspenseBillingAccountCode + " is not found ");
        }
    }

    /**
     * create the customer payment
     *
     * @param billingAccount the billing account
     * @return the payment
     * @throws BusinessException the business exception
     */
    private Payment createNewPayment(CustomerPaymentRecordDto customerPaymentRecordDto, BillingAccount billingAccount) throws BusinessException {

        String occTemplateCode = ApplicationPropertiesEnum.TEMPLATE_BATCH_PAYMENT_CREDIT.getProperty();
        OCCTemplate occTemplate = oCCTemplateService.findByCode(occTemplateCode);
        if (occTemplate == null) {
            throw new BusinessException("Cannot find OCC Template with code=" + occTemplateCode);
        }

        BigDecimal amount = new BigDecimal(customerPaymentRecordDto.getPaidAmount()).divide(BigDecimal.valueOf(100));
        /*
         * if (!StringUtils.isBlank(checkDigit)) { checkDigit = checkDigit.trim(); if (checkDigit.equals("-")) { amount = amount.negate(); } }
         */

        Payment payment = new Payment();
        payment.setCustomerAccount(billingAccount.getCustomerAccount());
        payment.setPaymentMethod(PaymentMethodEnum.CARD);
        // payment.setOrderNumber(?);
        payment.setAmountWithoutTax(amount);
        payment.setAmount(amount);
        payment.setMatchingAmount(BigDecimal.ZERO);
        payment.setUnMatchingAmount(amount);
        payment.setAccountingCode(occTemplate.getAccountingCode());
        payment.setCode(occTemplate.getCode());
        payment.setDescription(occTemplate.getDescription());
        payment.setTransactionCategory(OperationCategoryEnum.CREDIT); // EIR must provide the category of the transaction CREDIT or DEBIT
        payment.setAccountCodeClientSide(occTemplate.getAccountCodeClientSide());
        payment.setReference(customerPaymentRecordDto.getReference());
        payment.setTransactionDate(customerPaymentRecordDto.getDate());
        // using the date the file is processed as the Payment Date (to be displayed on the invoice)
        payment.setDueDate(new Date());
        payment.setMatchingStatus(MatchingStatusEnum.O);
        payment.setCfValue(AccountOperationCFsEnum.BILLING_ACCOUNT_NUMBER.name(), billingAccount.getExternalRef1());
        //payment.setCfValue(FROM_AccountOperationCFsEnum.BILLING_ACCOUNT_NUMBER.name(), billingAccount.getExternalRef1());
        payment.setCfValue(AccountOperationCFsEnum.PAYMENT_FILE_ACCOUNT_CUSTOMER_NUMBER.name(), customerPaymentRecordDto.getAccountNumber());
        payment.setCfValue(AccountOperationCFsEnum.PAYMENT_FILE_NAME.name(), customerPaymentRecordDto.getFileName());
        return payment;
    }

    /**
     * create the customer payment
     *
     * @param billingAccount the billing account
     * @return the customer payment record Dto
     * @throws BusinessException the business exception
     */
    private void createPayment(CustomerPaymentRecordDto customerPaymentRecordDto, BillingAccount billingAccount) throws BusinessException {
        try {
            Payment payment = createNewPayment(customerPaymentRecordDto, billingAccount);
            paymentService.create(payment);
        } catch (BusinessException e) {
            log.error("Couldn't create Payement. error : {}", e);
            customerPaymentRecordDto.getErrorMessage().append("Couldn't create payment. error : " + e.getMessage());
        }
    }
}		]]></column>
        </insert>
    </changeSet>

     <changeSet id="INTRD-2143_20211006" author="TarikFA.">
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.OrderValidationScript" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script;
            		public class OrderValidation extends OrderValidationScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
        </insert>
    </changeSet>

	<changeSet id="INTRD_2290_20211015_build" author="TarikFA.">
		<insert tableName="dunning_settings">
			<column name="id" valueSequenceNext="dunning_settings_seq" />
			<column name="code" value="DUN_DEF"/>
			<column name="description" value="Default Dunning Settings generated"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="max_dunning_levels" valueNumeric="5" />
			<column name="max_days_outstanding" valueNumeric="3" />
			<column name="dunning_mode" value="CUSTOMER_LEVEL" />
		</insert>
		<insert tableName="dunning_pause_reasons">
			<column name="id" valueSequenceNext="dunning_pause_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="pause_reason" value="5 jours (ouvrés) avant paiement"/>
			<column name="description" value="Client demande 5 jours (ouvrés) avant de payer"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_pause_reasons">
			<column name="id" valueSequenceNext="dunning_pause_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="pause_reason" value="10 jours (ouvrés) avant paiement"/>
			<column name="description" value="Client demande 10 jours (ouvrés) avant de payer"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>

		</insert>
		<insert tableName="dunning_pause_reasons">
			<column name="id" valueSequenceNext="dunning_pause_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="pause_reason" value="30 jours (ouvrés) avant paiement"/>
			<column name="description" value="Client demande 30 jours (ouvrés) avant de payer"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_stop_reasons">
			<column name="id" valueSequenceNext="dunning_stop_reasons_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="stop_reason" value="Client conteste la facture" />
			<column name="description" value="Client conteste la facture. Dept comptable reprend la suite" />
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq" />
		</insert>
		<insert tableName="dunning_stop_reasons">
			<column name="id" valueSequenceNext="dunning_stop_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="stop_reason" value="Client insolvable"/>
			<column name="description" value="Client se déclare insolvable. Renvoi au dept comptale"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_stop_reasons">
			<column name="id" valueSequenceNext="dunning_stop_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="stop_reason" value="Entreprise dépose le bilan"/>
			<column name="description" value="L’entreprise a débuté une procédure de dépôt de bilan. Renvoi au dept comptable"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>

		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Pause"/>
			<column name="description" value="PAUSED_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Stop"/>
			<column name="description" value="STOPPED_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Succès"/>
			<column name="description" value="SUCCESSFUL_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Echec"/>
			<column name="description" value="FAILED_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Actif"/>
			<column name="description" value="ACTIVE_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
	</changeSet>

	<changeSet id="INTRD-2634_20211027" author="YoussefIZEM">
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-1" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2B relance 1 (J+15)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Reminder – Past due invoice#{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""><p class="MsoNormal"><i><span lang="EN-US" style="mso-ascii-font-family:Calibri;
mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US">Hello #{Title}
#{CustomerAccount.LastName},</span></i><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;
mso-bidi-font-family:Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US"><o:p></o:p></span></p>

<p class="MsoNormal"><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal"><i><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US">We are reaching out to you in regards of your invoice #{Invoice.Number} and more specifically
its payment that was due on the #{Invoice.DueDate}. You can find a copy of the invoice attached to this email.</span></i><span lang="EN-US" style="mso-ascii-font-family:
Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;color:black;mso-themecolor:text1;mso-ansi-language:
EN-US"><o:p></o:p></span></p>

<p class="MsoNormal"><i><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US">Please make sure to pay the invoice in full as soon as possible. If you have any additional
question, do not hesitate to contact our services or your point of contact in our company.</span></i><span lang="EN-US" style="mso-ascii-font-family:Calibri;
mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US"><o:p></o:p></span></p>

<p class="MsoNormal"><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US"><o:p>&nbsp;</o:p></span></p>

<p class="MsoNormal"><i><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US">Best regards,</span></i></p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-2" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2B relance 4 (J+35)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="DunningLetter for Invoice #{Invoice.number}" />
            <column name="is_active" value="1" />
            <column name="channel" value="LETTER" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">#{Compagny.name}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.adress}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.postalcode}; #{Compagny.city}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.phone}</span></i><span lang="EN-US"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></span><span lang="EN-US"><o:p></o:p></span></p><p class="MsoNormal"><span lang="EN-US" segoe="" ui",="" "sans-serif";"="">

</span></p><p class="MsoNormal"><i><span lang="EN-US">#{Contact.client}
</span></i><span lang="EN-US"> / <i>#{Compagny.client.name}</i></span><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.adress}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.postalcode}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.city}</span></i><span lang="EN-US"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></span><i><span lang="EN-US"><o:p></o:p></span></i></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">#{Compagny.city}, on #{day.date}</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">#{Title.client},</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">By a first email dated (Date of 1st reminder), then a second one dated
(Date of 2nd reminder), weaskedyou to proceed to the payment of the invoice</span><i><span lang="EN-US">#{Invoice.number}</span></i><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"=""> for an
amount of </span><i><span lang="EN-US">#{Invoice.total}</span></i></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">Unless we are mistaken, we regret to say that we have not
yet received payment of invoice. We therefore ask you to proceed immediately to
its payment.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">You will find a copy of the invoice attached to this letter.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">Please disregard this letter if your payment has been sent to us prior to
receiving this letter.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">We remain at your disposal in case of any questions. Please accept,
Madam / Sir, the assurance of our best regards.</span></p><p class="MsoNormal"><span style="font-family: " segoe="" ui",="" "sans-serif";"="">Signature </span></p><p class="MsoNormal">
</p><p class="MsoNormal"><span style="font-family: " segoe="" ui",="" "sans-serif";"="">Yourname and surname</span></p><p></p>                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-3" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2C relance 1 (J+1)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Reminder – Past due invoice #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">Hello #{Title}
#{CustomerAccount.LastName},</span></i><span lang="EN-US"><o:p></o:p></span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><i><span lang="EN-US">We are reaching
out to you in regards of your invoice #{Invoice.Number} and more specifically
its payment that was due on the #{Invoice.DueDate}. You can find a copy of the
invoice attached to this email.</span></i><span lang="EN-US"><o:p></o:p></span></p><p class="MsoNormal"><i><span lang="EN-US">Please make
sure to pay the invoice in full as soon as possible. If you have any additional
question, do not hesitate to contact our services or your point of contact in our
company.</span></i><span lang="EN-US"><o:p></o:p></span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">
</p><p class="MsoNormal"><i><span lang="EN-US">Best regards,</span></i><o:p></o:p></p><p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-4" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2C relance 1 (J+7)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Reminder – Past due invoice #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">Hello #{Title}
#{CustomerAccount.LastName},</span></i></p><p class="MsoNormal"><i><span lang="EN-US">We are following up on our email dated on the #{Last.action.date} where we informed
you that invoice ##{Invoice.Number} was overdue for payment since #{Invoice.DueDate}.
We regret to inform you that we have not yet received payment from you for this matter.&nbsp;</span></i></p><p class="MsoNormal"><i><span lang="EN-US">We ask that
you proceed with the payment of the invoice as soon as possible and invite you to contact our customer support if you have any difficulties in paying this
invoice.</span></i></p><p class="MsoNormal"><i><span lang="EN-US">You will find a copy of the invoice attached.</span></i></p><p class="MsoNormal">
</p><p class="MsoNormal"><i><span lang="EN-US">Kind regards,&nbsp;</span></i></p><p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-5" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2C relance 4 (J+14)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="DunningLetter for Invoice #{Invoice.number}" />
            <column name="is_active" value="1" />
            <column name="channel" value="LETTER" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">#{Compagny.name}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.adress}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.postalcode}; #{Compagny.city}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.phone}</span></i><span lang="EN-US"><br><!--[if !supportLineBreakNewLine]--><br><!--[endif]--></span><span lang="EN-US"><o:p></o:p></span></p>

<p class="MsoNormal"><i><span lang="EN-US">#{Title.client}
#{Contact.client} </span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.adress}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.postalcode}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.city}</span></i><span lang="EN-US"><br>
<!--[if !supportLineBreakNewLine]--><br><!--[endif]--></span><i><span lang="EN-US"><o:p></o:p></span></i></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">#{Compagny.city}, on #{day.date}</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">#{Title.client},</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">By a first email dated (Date of 1st reminder), then a second one dated
(Date of 2nd reminder), we asked you to proceed to the payment of the invoice&nbsp;</span><i><span lang="EN-US">#{Invoice.number}</span></i><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"=""> for an
amount of </span><i><span lang="EN-US">#{Invoice.total}</span></i><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"=""><o:p></o:p></span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">Unless we are mistaken, we regret to say that we have not
yet received payment of invoice. We therefore asky ou to proceed immediately to
its payment.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">You will find a copy of the invoice attached to this letter.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">Please disregard this letter if your payment has been sent to us prior to
receiving this letter.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">We remain at your disposal in case of any questions. Please accept,
Madam / Sir, the assurance of our best regards.</span></p><p class="MsoNormal"><span style="font-family: " segoe="" ui",="" "sans-serif";"="">Signature </span></p><p class="MsoNormal">
</p><p class="MsoNormal"><span style="font-family: " segoe="" ui",="" "sans-serif";"="">Yourname and surname</span></p><p></p>                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-6" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2B relance 1 (J+15)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="règlement facture #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i>Bonjour #{Title} #{CustomerAccount.LastName},<o:p></o:p></i></p><p class="MsoNormal"><i>&nbsp;</i></p><p class="MsoNormal"><i>Nous vous contactons concernant votre facture #{Invoice.Number}
qui est en retard de paiement depuis le #{Invoice.DueDate}. Vous trouverez une
copie de la facture en pièce jointe.<o:p></o:p></i></p><p class="MsoNormal"><i>Merci de procéder au règlement de la facture dans les
plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de
prendre contact avec nos services ou votre interlocuteur habituel afin de
trouver une solution.<o:p></o:p></i></p><p class="MsoNormal"></p><p class="MsoNormal"><i>Bien à vous,</i><o:p></o:p></p><p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-7" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2B relance 4 (J+35)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Lettre de relance pour la facture #{Invoice.number}" />
            <column name="is_active" value="1" />
            <column name="channel" value="LETTER" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">#{Compagny.name}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.adress}</span></i><span lang="EN-US"><br></span><i><span lang="EN-US">#{Compagny.postalcode}; #{Compagny.city}</span></i><span lang="EN-US"><br></span><i><span lang="EN-US">#{Compagny.phone}</span></i><span lang="EN-US"><br><!--[if !supportLineBreakNewLine]--><br><!--[endif]--><o:p></o:p></span></p>

<i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Contact.client} </span></i><span lang="EN-US" style="font-size:11.0pt;line-height:107%;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">&nbsp;/ </span><i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Compagny.client.name}</span></i><span lang="EN-US" style="font-size:11.0pt;line-height:107%;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA"><br>
</span><i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Compagny.client.adress}</span></i><span lang="EN-US" style="font-size:
11.0pt;line-height:107%;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;mso-ascii-theme-font:minor-latin;mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;mso-bidi-theme-font:
minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA"><br>
</span><i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Compagny.client.postalcode}</span></i><div><i style="font-size: 10pt;"><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Compagny.client.city}</span></i><p class="MsoNormal"><i><br></i></p><p class="MsoNormal"><i>#{Compagny.city}</i>, le <i>#<a>{day.date}</a></i><br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal"><i>#{Title.client}</i>,<br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal">Par un premier courriel en date du (Date de la 1ère relance),
puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder
au paiement de la facture <i>#{Invoice.number}</i>) d’un montant de <i>#{Invoice.total}</i>).<br><!--[endif]--></p><p class="MsoNormal">Sauf erreur de notre part, nous sommes au regret de constater
que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture.
Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.<br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal">Vous trouverez en pièce jointe de ce courrier une copie de lafacture en question.</p><p class="MsoNormal">Veuillez ne pas tenir compte de cette lettres si votre règlement
nous a été adressé avant la réception du présent courrier.<br><!--[if !supportLineBreakNewLine]--><br><!--[endif]--></p><p class="MsoNormal">Nous restons à votre disposition dans
l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.<br><br><!--[endif]--></p><p class="MsoNormal"><i>Company Signature</i></p><div><div><div id="_com_1" class="msocomtxt" language="JavaScript"><!--[if !supportAnnotations]--></div><!--[endif]--></div></div><p></p></div>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-8" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2C relance 1 (J+1)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="règlement facture #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">Bonjour #{Title} #{CustomerAccount.LastName},</span></i></p><p class="MsoNormal"><i>Nous vous contactons concernant votre facture #{Invoice.Number}
qui est en retard de paiement depuis le #{Invoice.DueDate}. Vous trouverez une
copie de la facture en pièce jointe.<o:p></o:p></i></p><p class="MsoNormal"><i>Merci de procéder au règlement de la facture dans les
plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de
prendre contact avec nos services ou votre interlocuteur habituel afin de
trouver une solution.<o:p></o:p></i></p><p class="MsoNormal"></p><p class="MsoNormal"><i>Bien à vous,</i><o:p></o:p></p><div><div><div id="_com_1" class="msocomtxt" language="JavaScript">
<!--[if !supportAnnotations]--></div><!--[endif]--></div></div><p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-9" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2C relance 2 (J+7)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="règlement facture #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style="font-style: normal;"></p><p class="MsoNormal"><i><span lang="EN-US">Bonjour #{Title} #{CustomerAccount.LastName},<o:p></o:p></span></i></p><p class="MsoNormal"><br></p><p class="MsoNormal"><span style="font-style: italic;">Nous faisons suite à notre courriel en date du#</span><a style=""><span style="font-style: italic;">{Last.action.date}</span>&nbsp;</a><i>où
nous vous informions que votre facture #{Invoice.Number}était en retard de paiement depuis le #{Invoice.DueDate}. Nous sommes dans le regret de vous
informer que nous n’avons toujours pas reçu de paiement de votre part à ce sujet. <o:p></o:p></i></p><p class="MsoNormal"><i>Nous vous demandons de procéder au règlement de la
facture dans les meilleurs délais et nous invitons à contacter au plus vite notre assistance client si vous éprouvez des difficultés à régler cette
facture.<o:p></o:p></i></p><p class="MsoNormal"><i>Vous trouverez à nouveau une copie de la facture en pièce jointe.<o:p></o:p></i></p><p class="MsoNormal"><i>Bien à vous,</i></p><div><div><div id="_com_1" class="msocomtxt" language="JavaScript"><p class="MsoNormal"><!--[endif]--></p>
<!--[if !supportAnnotations]--></div><!--[endif]--></div></div><div style="font-style: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript"><p class="MsoNormal"><!--[endif]--></p><!--[if !supportAnnotations]--></div>
<!--[endif]--></div></div><div style="font-style: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript"><!--[if !supportAnnotations]--></div><!--[endif]--></div></div><p style="font-style: normal;"></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-10" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2C relance 4 (J+14)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Lettre de relance pour la facture #{Invoice.number})" />
            <column name="is_active" value="1" />
            <column name="channel" value="LETTER" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style="font-weight: normal; font-style: normal;"></p><p class="MsoNormal" style="font-weight: normal;"><i><span lang="EN-US">#{Compagny.name}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.adress}</span></i><span lang="EN-US"><br></span><i><span lang="EN-US">#{Compagny.postalcode}; #{Compagny.city}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.phone}</span></i><span lang="EN-US"><br><!--[if !supportLineBreakNewLine]--><br><!--[endif]--><o:p></o:p></span></p>

<i style=""><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";">#{client.title} , #{Contact.client}
</span></i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";"><br>
</span><i style=""><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";">#{Compagny.client.adress}</span></i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";"><br>
</span><i style=""><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";">#{Compagny.client.postalcode}</span></i><div style=""><i style="font-size: 10pt;"><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";">#{Compagny.client.city}</span></i><p class="MsoNormal" style="font-weight: normal;"><i><br></i></p><p class="MsoNormal" style="font-weight: normal;"><i>#{Compagny.city}</i>, le <i>#{day.date}</i><br>
<!--[if !supportLineBreakNewLine]--><br><!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;"><i>#{Title.client}</i>,<br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de
procéder au paiement de la facture <i>#{Invoice.number}</i>) d’un montant de <i>#{Invoice.total}</i>).<br><!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">Sauf erreur de notre part, nous sommes au regret de constater
que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture.
Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.<br>
<!--[if !supportLineBreakNewLine]--><br><!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">Vous trouverez en pièce jointe de ce courrier une copie de la
facture en question.</p><p class="MsoNormal" style="font-weight: normal;">Veuillez ne pas tenir compte de cette lettre si votre règlement
nous a été adressé avant la réception du présent courrier.<br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos
salutations les meilleures.<br> <!--[if !supportLineBreakNewLine]--><br> <!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">
</p><p class="MsoNormal" style="font-weight: normal;"><i>Company Signature<o:p></o:p></i></p><div style="font-weight: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript"><p class="MsoNormal"><!--[endif]--></p>
<!--[if !supportAnnotations]--></div><!--[endif]--></div></div><div style="font-weight: normal; font-style: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript"><p class="MsoNormal"><!--[endif]--></p><!--[if !supportAnnotations]--></div>
<!--[endif]--></div></div><div style="font-weight: normal; font-style: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript">
<!--[if !supportAnnotations]--></div><!--[endif]--></div></div><p style="font-weight: normal; font-style: normal;"></p></div>
                ]]>
            </column>
        </insert>
    </changeSet>

    <changeSet author="AbdelkaderBouazza" id="INTRD-2698-20211028">
		<insert tableName="meveo_script_instance_cat">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />

			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="DUNNING_ACTION" />
			<column name="description" value="dunning action" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-2547-2480-2482-2478_20211021" author="khalidHORRI" failOnError="false">
		<insert tableName="billing_trading_language">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />

			<column name="created" valueDate="2015-03-19 00:04:19.152" />
			<column name="pr_description" value="English" />
			<column name="language_id" valueNumeric="2" />
		</insert>
		<insert tableName="billing_trading_language">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />

			<column name="created" valueDate="2015-03-19 00:04:19.174" />
			<column name="pr_description" value="French" />
			<column name="language_id" valueNumeric="12" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-2731_20211103" author="AmineBENAICHA">

		<!-- Dunning Policies B2C -->
		<insert tableName="dunning_policy">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_name" value="Default policy B2C-EN" />
			<column name="policy_description" value="This is a default policy for B2C" />
			<column name="min_balance_trigger" valueNumeric="1" />
			<column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
			<column name="determine_level_by" value="DAYS_OVERDUE" />
			<column name="policy_priority" valueNumeric="null" />
			<column name="attach_invoices_to_emails" valueNumeric="1" />
			<column name="is_active_policy" valueNumeric="1" />
		</insert>
		<insert tableName="dunning_policy_rule">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="rule_joint" value="null" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>
		<insert tableName="dunning_policy_rule_line">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_condition_target" value="IsIndividual" />
			<column name="policy_condition_operator" value="equals" />
			<column name="policy_condition_target_value" value="TRUE" />
			<column name="rule_line_joint" value="null" />
			<column name="dunning_policy_rule_id" valueNumeric="-1" />
		</insert>

		<!-- Level 1 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL1" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="1" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2C LVL1" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-3" /><!-- Template name= ENG - B2C relance 1 (J+1) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-1" />
			<column name="dunning_level_id" valueNumeric="-1" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="1" />
			<column name="dunning_level_id" valueNumeric="-1" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>
		
		<!-- Level 2 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL2" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="7" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2C LVL2" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-4" /><!-- Template name= ENG - B2C relance 2 (J+7) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-2" />
			<column name="dunning_level_id" valueNumeric="-2" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="2" />
			<column name="dunning_level_id" valueNumeric="-2" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>
		
		<!-- Level 3 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-3" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL3" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="10" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-3" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2C LVL3" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-3" />
			<column name="dunning_level_id" valueNumeric="-3" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="3" />
			<column name="dunning_level_id" valueNumeric="-3" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>
		
		<!-- Level 4 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-4" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL4" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="1" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="14" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-4" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Letter B2C LVL4" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="LETTER" />
			<column name="action_notification_template_id" valueNumeric="-5" /><!-- Template name= ENG - B2C relance 4 (J+14) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-4" />
			<column name="dunning_level_id" valueNumeric="-4" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="4" />
			<column name="dunning_level_id" valueNumeric="-4" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>		
		<!-- ****************************************** -->
		<!-- ****************************************** -->
		<!-- ****************************************** -->
		<!-- Dunning Policies B2B -->
		<insert tableName="dunning_policy">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_name" value="Default policy B2B-EN" />
			<column name="policy_description" value="This is a default policy for B2B" />
			<column name="min_balance_trigger" valueNumeric="1" />
			<column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
			<column name="determine_level_by" value="DAYS_OVERDUE" />
			<column name="policy_priority" valueNumeric="null" />
			<column name="attach_invoices_to_emails" valueNumeric="1" />
			<column name="is_active_policy" valueNumeric="1" />
		</insert>
		<insert tableName="dunning_policy_rule">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="rule_joint" value="null" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>
		<insert tableName="dunning_policy_rule_line">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_condition_target" value="IsCompany" />
			<column name="policy_condition_operator" value="equals" />
			<column name="policy_condition_target_value" value="TRUE" />
			<column name="rule_line_joint" value="null" />
			<column name="dunning_policy_rule_id" valueNumeric="-2" />
		</insert>

		<!-- Level 1 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-5" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL1B2B" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="15" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-5" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2B LVL1" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-1" /><!-- Template name= ENG - B2B relance 1 (J+15) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-5" />
			<column name="dunning_level_id" valueNumeric="-5" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="1" />
			<column name="dunning_level_id" valueNumeric="-5" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>
		
		<!-- Level 2 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-6" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL2B2B" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="22" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-6" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2B LVL2" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-6" />
			<column name="dunning_level_id" valueNumeric="-6" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="2" />
			<column name="dunning_level_id" valueNumeric="-6" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>
		
		<!-- Level 3 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-7" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL3B2B" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="27" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-7" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2B LVL3" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-7" />
			<column name="dunning_level_id" valueNumeric="-7" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="3" />
			<column name="dunning_level_id" valueNumeric="-7" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>
		
		<!-- Level 4 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-8" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL4B2B" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="1" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="35" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-8" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Letter B2B LVL4" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="LETTER" />
			<column name="action_notification_template_id" valueNumeric="-2" /><!-- Template name= ENG - B2B relance 4 (J+35) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-8" />
			<column name="dunning_level_id" valueNumeric="-8" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="4" />
			<column name="dunning_level_id" valueNumeric="-8" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>

	</changeSet>

	<changeSet id="INTRD-2732_20211104" author="AmineBENAICHA">

		<!-- Dunning Policies B2C -->
		<insert tableName="dunning_policy">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_name" value="Default policy B2C-FR" />
			<column name="policy_description" value="This is a default policy for B2C" />
			<column name="min_balance_trigger" valueNumeric="1" />
			<column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
			<column name="determine_level_by" value="DAYS_OVERDUE" />
			<column name="policy_priority" valueNumeric="null" />
			<column name="attach_invoices_to_emails" valueNumeric="1" />
			<column name="is_active_policy" valueNumeric="1" />
		</insert>
		<insert tableName="dunning_policy_rule">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="rule_joint" value="null" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>
		<insert tableName="dunning_policy_rule_line">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_condition_target" value="IsIndividual" />
			<column name="policy_condition_operator" value="equals" />
			<column name="policy_condition_target_value" value="TRUE" />
			<column name="rule_line_joint" value="null" />
			<column name="dunning_policy_rule_id" valueNumeric="-10" />
		</insert>

		<!-- Level 1 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL1-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="1" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2C LVL1-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-8" /><!-- Template name= FR - B2C relance 1 (J+1) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-10" />
			<column name="dunning_level_id" valueNumeric="-10" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="1" />
			<column name="dunning_level_id" valueNumeric="-10" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>
		
		<!-- Level 2 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL2-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="7" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2C LVL2-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-9" /><!-- Template name= FR - B2C relance 2 (J+7) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-20" />
			<column name="dunning_level_id" valueNumeric="-20" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="2" />
			<column name="dunning_level_id" valueNumeric="-20" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>
		
		<!-- Level 3 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-30" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL3-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="10" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-30" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2C LVL3-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-30" />
			<column name="dunning_level_id" valueNumeric="-30" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="3" />
			<column name="dunning_level_id" valueNumeric="-30" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>
		
		<!-- Level 4 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-40" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL4-B2C-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="1" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="14" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-40" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Letter B2C LVL4-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="LETTER" />
			<column name="action_notification_template_id" valueNumeric="-10" /><!-- Template name= FR - B2C relance 4 (J+14) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-40" />
			<column name="dunning_level_id" valueNumeric="-40" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="4" />
			<column name="dunning_level_id" valueNumeric="-40" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>		
		<!-- ****************************************** -->
		<!-- ****************************************** -->
		<!-- ****************************************** -->
		<!-- Dunning Policies B2B -->
		<insert tableName="dunning_policy">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_name" value="Default policy B2B-FR" />
			<column name="policy_description" value="This is a default policy for B2B" />
			<column name="min_balance_trigger" valueNumeric="1" />
			<column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
			<column name="determine_level_by" value="DAYS_OVERDUE" />
			<column name="policy_priority" valueNumeric="null" />
			<column name="attach_invoices_to_emails" valueNumeric="1" />
			<column name="is_active_policy" valueNumeric="1" />
		</insert>
		<insert tableName="dunning_policy_rule">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="rule_joint" value="null" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>
		<insert tableName="dunning_policy_rule_line">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_condition_target" value="IsCompany" />
			<column name="policy_condition_operator" value="equals" />
			<column name="policy_condition_target_value" value="TRUE" />
			<column name="rule_line_joint" value="null" />
			<column name="dunning_policy_rule_id" valueNumeric="-20" />
		</insert>

		<!-- Level 1 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-50" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL1B2B-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="15" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-50" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2B LVL1-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-6" /><!-- Template name= FR - B2B relance 1 (J+15) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-50" />
			<column name="dunning_level_id" valueNumeric="-50" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="1" />
			<column name="dunning_level_id" valueNumeric="-50" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>
		
		<!-- Level 2 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-60" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL2B2B-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="22" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-60" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2B LVL2-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-60" />
			<column name="dunning_level_id" valueNumeric="-60" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="2" />
			<column name="dunning_level_id" valueNumeric="-60" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>
		
		<!-- Level 3 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-70" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL3B2B-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="27" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-70" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2B LVL3-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-70" />
			<column name="dunning_level_id" valueNumeric="-70" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="3" />
			<column name="dunning_level_id" valueNumeric="-70" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>
		
		<!-- Level 4 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-80" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL4-B2B-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="1" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="35" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-80" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Letter B2B LVL4-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="LETTER" />
			<column name="action_notification_template_id" valueNumeric="-7" /><!-- Template name= FR - B2B relance 4 (J+35)  -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-80" />
			<column name="dunning_level_id" valueNumeric="-80" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="4" />
			<column name="dunning_level_id" valueNumeric="-80" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>

	</changeSet>

	<changeSet id="INTRD-2849_20211110" author="TarikRabeh">
		<update tableName="com_message_template">
            <column name="subject" value="Reminder – Past due invoice #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Hello #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>We are reaching out to you in regards of your invoice #{invoice.invoiceNumber} and more specifically its payment that was due on the #{invoice.dueDate}. You can find a copy of the invoice attached to this email.</p>
<p>Please make sure to pay the invoice in full as soon as possible. If you have any additional question, do not hesitate to contact our services or your point of contact in our company.</p>
<p>Best regards,</p>
                ]]>
			</column>
			<where>id=-1</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Dunning Letter for Invoice #{invoice.invoiceNumber}" />
			<column name="htmlcontent">
			    <![CDATA[
#{billingAccount.description}<br>
#{billingAccount.address.address1}<br>
#{billingAccount.address.zipCode}; #{billingAccount.address.city}<br>
#{billingAccount.contactInformation.phone}<br>
<br>
#{customerAccount.description} / #{customerAccount.name.firstName}<br>
#{customerAccount.address.address1}<br>
#{customerAccount.address.zipCode}<br>
#{customerAccount.address.city}<br>

<p>#{billingAccount.address.city}, on #{day.date}</p>
<p>#{customerAccount.legalEntityType.code},</p>
<p>By a first email dated (Date of 1st reminder), then a second one dated (Date of 2nd reminder), we asked you to proceed to the payment of the invoice #{invoice.invoiceNumber} for an amount of #{invoice.amountWithTax}</p>
<p>Unless we are mistaken, we regret to say that we have not yet received payment of invoice. We therefore ask you to proceed immediately to its payment.</p>
<p>You will find a copy of the invoice attached to this letter.</p>
<p>Please disregard this letter if your payment has been sent to us prior to receiving this letter letter.</p>
<p>We remain at your disposal in case of any questions. Please accept, Madam / Sir, the assurance of our best regards.</p>
<p>Signature</p>
<p>Your name and surname</p>
                ]]>
			</column>
			<where>id=-2</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Reminder – Past due invoice #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Hello #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>We are reaching out to you in regards of your invoice #{invoice.invoiceNumber} and more specifically its payment that was due on the #{invoice.dueDate}. You can find a copy of the invoice attached to this email.</p>
<p>Please make sure to pay the invoice in full as soon as possible. If you have any additional question, do not hesitate to contact our services or your point of contact in our company.</p>
<p>Best regards,</p>	
                ]]>
			</column>
			<where>id=-3</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Reminder – Past due invoice #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Hello #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>We are following up on our email dated on the #{dunningCollectionPlan.lastActionDate} where we informed you that invoice #{invoice.invoiceNumber} was overdue for payment since #{invoice.dueDate}. We regret to inform you that we have not yet received payment from you for this matter.</p>
<p>We ask that you proceed with the payment of the invoice as soon as possible and invite you to contact our customer support if you have any difficulties in paying this invoice.</p>
<p>You will find a copy of the invoice attached.</p>
<p>Kind regards,</p>
                ]]>			
			</column>
			<where>id=-4</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Dunning Letter for Invoice #{invoice.invoiceNumber}" />
			<column name="htmlcontent">
			    <![CDATA[
#{billingAccount.description}<br>
#{billingAccount.address.address1}<br>
#{billingAccount.address.zipCode}; #{billingAccount.address.city}<br>
#{billingAccount.contactInformation.phone}<br>
<br>
#{customerAccount.legalEntityType.code}   #{customerAccount.description}<br>
#{customerAccount.address.address1}<br>
#{customerAccount.address.zipCode}<br>
#{customerAccount.address.city}<br>

<p>#{billingAccount.address.city}, on #{day.date}</p> 
<p>#{customerAccount.legalEntityType.code},</p>
<p>By a first email dated (Date of 1st reminder), then a second one dated (Date of 2nd reminder), we asked you to proceed to the payment of the invoice #{invoice.invoiceNumber} for an amount of #{invoice.amountWithTax}</p>
<p>Unless we are mistaken, we regret to say that we have not yet received payment of invoice. We therefore ask you to proceed immediately to its payment.</p>
<p>You will find a copy of the invoice attached to this letter.</p>
<p>Please disregard this letter if your payment has been sent to us prior to receiving this letter letter.</p>
<p>We remain at your disposal in case of any questions. Please accept, Madam / Sir, the assurance of our best regards. </p>
<p>Signature</p>
<p>Your name and surname</p>
                ]]>
			</column>
			<where>id=-5</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Règlement facture #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Bonjour #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>Nous vous contactons concernant votre facture #{invoice.invoiceNumber} qui est en retard de paiement depuis le #{invoice.dueDate}. Vous trouverez une copie de la facture en pièce jointe.</p>
<p>Merci de procéder au règlement de la facture dans les plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de prendre contact avec nos services ou votre interlocuteur habituel afin de trouver une solution.</p>
<p>Bien à vous,</p>
                ]]>
			</column>
			<where>id=-6</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Lettre de relance pour la facture #{invoice.invoiceNumber}" />
			<column name="htmlcontent">
			    <![CDATA[
#{billingAccount.description}<br>
#{billingAccount.address.address1}<br>
#{billingAccount.address.zipCode}; #{billingAccount.address.city}<br>
#{billingAccount.contactInformation.phone}<br>
<br>
#{customerAccount.description} / #{customerAccount.name.firstName}<br>
#{customerAccount.address.address1}<br>
#{customerAccount.address.zipCode}<br>
#{customerAccount.address.city}<br>

<p>#{billingAccount.address.city}, le #{day.date}</p>
<p>#{customerAccount.legalEntityType.code},</p>
<p>Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder au paiement de la facture #{invoice.invoiceNumber}) d’un montant de #{invoice.amountWithTax}).</p>
<p>Sauf erreur de notre part, nous sommes au regret de constater que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture. Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.</p>
<p>Vous trouverez en pièce jointe de ce courrier une copie de la facture en question.</p>
<p>Veuillez ne pas tenir compte de cette lettre si votre règlement nous a été adressé avant la réception du présent courrier.</p>
<p>Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.</p>
<p>Company Signature</p>
                ]]>
			</column>
			<where>id=-7</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Règlement facture #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Bonjour #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>Nous vous contactons concernant votre facture #{invoice.invoiceNumber} qui est en retard de paiement depuis le #{invoice.dueDate}. Vous trouverez une copie de la facture en pièce jointe.</p>
<p>Merci de procéder au règlement de la facture dans les plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de prendre contact avec nos services ou votre interlocuteur habituel afin de trouver une solution.</p>
<p>Bien à vous,</p>
                ]]>
			</column>
			<where>id=-8</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Règlement facture #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Bonjour #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>Nous faisons suite à notre courriel en date du #{dunningCollectionPlan.lastActionDate}  où nous vous informions que votre facture #{invoice.invoiceNumber} était en retard de paiement depuis le #{invoice.dueDate}. Nous sommes dans le regret de vous informer que nous n’avons toujours pas reçu de paiement de votre part à ce sujet.</p> 
<p>Nous vous demandons de procéder au règlement de la facture dans les meilleurs délais et nous invitons à contacter au plus vite notre assistance client si vous éprouvez des difficultés à régler cette facture.</p>
<p>Vous trouverez à nouveau une copie de la facture en pièce jointe.</p>
<p>Bien à vous,</p>
                ]]>
			</column>
			<where>id=-9</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Lettre de relance pour la facture #{invoice.invoiceNumber})" />
			<column name="htmlcontent">
			    <![CDATA[
#{billingAccount.description}<br>
#{billingAccount.address.address1}<br>
#{billingAccount.address.zipCode}; #{billingAccount.address.city}<br>
#{billingAccount.contactInformation.phone}<br>
<br>
#{customerAccount.legalEntityType.code} , #{customerAccount.description}<br>
#{customerAccount.address.address1}<br>
#{customerAccount.address.zipCode}<br>
#{customerAccount.address.city}<br>

<p>#{billingAccount.address.city}, le #{day.date}</p>
<p>#{customerAccount.legalEntityType.code},</p>
<p>Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder au paiement de la facture #{invoice.invoiceNumber}) d’un montant de #{invoice.amountWithTax}).</p>
<p>Sauf erreur de notre part, nous sommes au regret de constater que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture. Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.</p>
<p>Vous trouverez en pièce jointe de ce courrier une copie de la facture en question.</p>
Veuillez ne pas tenir compte de cette lettre si votre règlement nous a été adressé avant la réception du présent courrier.</p>
<p>Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.</p>
<p>Company Signature</p>
                ]]>
			</column>
			<where>id=-10</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-2961_20211109-add-status-color_code" author="AmineBENAICHA">
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#FFA000</column>
			<where>status='Pause'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#991A12</column>
			<where>status='Stop'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#1976D2</column>
			<where>status='Succès'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#F44336</column>
			<where>status='Echec'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#00C853</column>
			<where>status='Actif'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-2962_20211110" author="AmineBENAICHA">
		<insert tableName="dunning_stop_reasons">
			<column name="id" valueSequenceNext="dunning_stop_reasons_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
        	<column name="stop_reason" value="Exclusion" />
        	<column name="description" value="Client exclu du plan de recouvrement pour raison légitime. A expliciter par l'agent de recouvrement" />
        	<column name="dunning_settings_id" valueNumeric="1" />
       	</insert>
       	<insert tableName="dunning_stop_reasons">
       		<column name="id" valueSequenceNext="dunning_stop_reasons_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
        	<column name="stop_reason" value="Changement de politique de recouvrement" />
        	<column name="description" value="Changement de politique de recouvrement amenant la génération d’un nouveau plan de recouvrement" />
        	<column name="dunning_settings_id" valueNumeric="1" />
       	</insert>
   	</changeSet>
	<changeSet id="INTRD-2701_20211124" author="hichamElHaloui">
		<update tableName="meveo_timer">
			<column name="sc_d_o_week" value="*" />
			<where>id=-2</where>
		</update>
	</changeSet>

    <changeSet id="#INTRD-3262_20211123" author="YoussefIZEM">
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">ACTIVE</column>
			<where>status = 'Actif'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">SUCCESS</column>
			<where>status = 'Succès'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">FAILED</column>
			<where>status = 'Echec'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">PAUSED</column>
			<where>status = 'Pause'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">STOPPED</column>
			<where>status = 'Stop'</where>
		</update>
	</changeSet>

	<changeSet id="INTRD-3334_2021_11_26" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="job_category" value="ACCOUNTING" />
			<column name="job_template" value="AccountingPeriodClosingJob" />
			<column name="code" value="AccountingPeriodClosingJob" />
			<column name="creator" value="applicationInitializer" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="description" value="Accounting Period Closing Job" />
			<column name="uuid" value="AccountingPeriodClosingJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-3316_20211129_query_notification_template" author="TarikRabeh">
		<update tableName="com_message_template">
            <column name="subject" value="[opencell] Query result #{reportQueryName} #{startDate}" />
            <column name="textcontent"></column>
            <column name="htmlcontent">
                <![CDATA[Dear #{userName},

The result for your query is ready.
Check the result on <a href="#{portalResultLink}">Opencell Portal</a>

Query : #{reportQueryName}
Started : #{startDate}
Duration : #{duration}
Line count : #{lineCount}

Best regards,

Opencell team.
                ]]>
            </column>
            <where>code='REPORT_QUERY_RESULT_SUCCESS'</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="[opencell] Query failed #{reportQueryName} #{startDate}" />
			<where>code='REPORT_QUERY_RESULT_FAILURE'</where>
		</update>
    </changeSet>

	<changeSet id="INTRD-2756_20211110" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id"  valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2015-03-19 00:04:19.913" />
			<column name="job_category" value="DUNNING" />
			<column name="job_template" value="DunningCollectionPlanJob" />
			<column name="code" value="DunningCollectionPlan_Job" />

			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="DunningCollectionPlanJob_Job" />
		</insert>
	</changeSet>

	<changeSet author="ZBariki" id="INTRD-3040_20211110">
		<update tableName="dunning_policy_rule_line">
			<column name="policy_condition_target" value="isCompany" />
			<column name="policy_condition_target_value" value="FALSE" />
			<column name="policy_condition_operator" value="EQUALS" />
			<where> policy_condition_target='IsIndividual'</where>
		</update>
		<update tableName="dunning_policy_rule_line">
			<column name="policy_condition_target" value="isCompany" />
			<column name="policy_condition_operator" value="EQUALS" />
			<where> policy_condition_target='IsCompany'</where>
		</update>
	</changeSet>
	
	<changeSet id="#INTRD-3262_20211123" author="YoussefIZEM">
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">ACTIVE</column>
			<where>status = 'Actif'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">SUCCESS</column>
			<where>status = 'Succès'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">FAILED</column>
			<where>status = 'Echec'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">PAUSED</column>
			<where>status = 'Pause'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">STOPPED</column>
			<where>status = 'Stop'</where>
		</update>
	</changeSet>
	
    <changeSet id="INTRD-2756_20211110" author="Mohammed_ELAZZOUZI">
		<insert tableName="meveo_job_instance">
			<column name="id"  valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="DUNNING" />
			<column name="job_template" value="ResumeDunningCollectionPlanJob" />
			<column name="code" value="ResumeDunningCollectionPlan_Job" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="uuid" value="ResumeDunningCollectionPlan_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-2910_20211124" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2021-11-24 00:04:19.913" />
			<column name="job_category" value="DUNNING" />
			<column name="job_template" value="TriggerReminderDunningLevelJob" />
			<column name="code" value="TriggerReminderDunningLevel_Job" />

			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="TriggerReminderDunningLevelJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-2909_20211201" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2021-12-01 00:04:19.913" />
			<column name="job_category" value="DUNNING" />
			<column name="job_template" value="TriggerCollectionPlanLevelsJob" />
			<column name="code" value="TriggerCollectionPlanLevelsJob_Job" />

			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="TriggerCollectionPlanLevelsJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-3507_20220218" author="HatimOUDAD">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2022-02-18 00:04:19.913" />
			<column name="job_category" value="PAYMENT" />
			<column name="job_template" value="AutoRefundSecurityDepositJob" />
			<column name="code" value="AutoRefundSecurityDepositJob_Job" />

			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="AutoRefundSecurityDepositJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-5669_20220324" author="HichamHANINE">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2022-02-18 00:04:19.913" />
			<column name="job_category" value="UTILS" />
			<column name="job_template" value="AutoUpdateCurrentRateJob" />
			<column name="code" value="AutoUpdateCurrentRateJob_Job" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-3" />
			<column name="uuid" value="AutoUpdateCurrentRateJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-3678_20211214" author="AmineBENAICHA">
		<update tableName="meveo_script_instance">
			<column name="script">
	<![CDATA[package org.meveo.service.script;
    
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.util.pagination.PaginationConfiguration;
import org.meveo.api.dto.response.PagingAndFiltering.SortOrder;
import org.meveo.api.exception.EntityDoesNotExistsException;
import org.meveo.model.article.AccountingArticle;
import org.meveo.model.article.ArticleMapping;
import org.meveo.model.article.ArticleMappingLine;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.catalog.ProductChargeTemplateMapping;
import org.meveo.model.catalog.ServiceChargeTemplate;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.cpq.Product;
import org.meveo.model.cpq.ProductVersion;
import org.meveo.model.cpq.enums.VersionStatusEnum;
import org.meveo.model.cpq.offer.OfferComponent;
import org.meveo.model.tax.TaxClass;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.article.AccountingArticleService;
import org.meveo.service.billing.impl.article.ArticleMappingLineService;
import org.meveo.service.billing.impl.article.ArticleMappingService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.cpq.ProductService;
import org.meveo.service.cpq.ProductVersionService;
import org.meveo.service.tax.TaxClassService;

public class ServiceTemplateToProductScript extends Script {
    private static final long serialVersionUID = -6513133027379352381L;

    // Script parameters
    public static final String DEFAULT_TAX_CLASS_CODE = "NORMAL";
    public static final long ARTICLE_MAPPING_ID = 1L;
    private static final Integer PAGE_COUNT = 100;

    private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(ServiceInstanceService.class.getSimpleName());
    private ProductService productService = (ProductService) getServiceInterface(ProductService.class.getSimpleName());
    private ProductVersionService productVersionService = (ProductVersionService) getServiceInterface(ProductVersionService.class.getSimpleName());
    private OfferTemplateService offerTemplateService= (OfferTemplateService) getServiceInterface(OfferTemplateService.class.getSimpleName());
    private AccountingArticleService accountingArticleService = (AccountingArticleService) getServiceInterface(AccountingArticleService.class.getSimpleName());
    private ArticleMappingService articleMappingService = (ArticleMappingService) getServiceInterface(ArticleMappingService.class.getSimpleName());
    private ArticleMappingLineService articleMappingLineService = (ArticleMappingLineService) getServiceInterface(ArticleMappingLineService.class.getSimpleName());
    private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(ServiceTemplateService.class.getSimpleName());
    private TaxClassService taxClassService = (TaxClassService) getServiceInterface(TaxClassService.class.getSimpleName());

    private TaxClass defaultTaxClass;
    private ArticleMapping defaultArticleMapping;

    @Override
    public void init(Map<String, Object> methodContext) throws BusinessException {
        defaultTaxClass = taxClassService.findByCode(DEFAULT_TAX_CLASS_CODE);
        if (defaultTaxClass == null) {
            throw new EntityDoesNotExistsException(TaxClass.class, DEFAULT_TAX_CLASS_CODE);
        }

        defaultArticleMapping = articleMappingService.findById(ARTICLE_MAPPING_ID);
        if (defaultArticleMapping == null) {
            throw new EntityDoesNotExistsException(ArticleMapping.class, ARTICLE_MAPPING_ID);
        }
    }

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        log.info("Migration started at {}", new Date());

        long count = 0;
        List<ServiceTemplate> serviceTemplates = (List<ServiceTemplate>) methodContext.get("SERVICE_TEMPLATE");
        
        if(serviceTemplates != null && !serviceTemplates.isEmpty()) {
            count = serviceTemplates.size();
            serviceTemplates.forEach(this::map);
        } else {

            count = serviceTemplateService.count(new PaginationConfiguration("id", SortOrder.ASCENDING));

            if (PAGE_COUNT < count) {
                serviceTemplateService.list(new PaginationConfiguration(null, null))
                        .forEach(this::map);
            } else {
                for (int index = 0; index < count; index = index + PAGE_COUNT) {
                    serviceTemplateService.list(new PaginationConfiguration(index, PAGE_COUNT, null, null, null, "id", SortOrder.ASCENDING))
                            .forEach(this::map);
                }
            }
        }

        log.info("Number of services migrated={}", count);
        log.info("Migration ended at {}", new Date());
    }

    public Product map(ServiceTemplate serviceTemplate) {
        Product product = createProduct(serviceTemplate);
        createArticle(product);

        ProductVersion productVersion = createProductVersion(product);

        List<ServiceInstance> serviceInstances = serviceInstanceService.findByServiceTemplate(serviceTemplate);

        serviceInstances.forEach(serviceInstance -> {

            serviceInstance.setProductVersion(productVersion);
            serviceInstance.setServiceTemplate(null);
            serviceInstanceService.update(serviceInstance);

            OfferTemplate offer = serviceInstance.getSubscription().getOffer();
            OfferComponent offerComponent = new OfferComponent();
            offerComponent.setProduct(product);
            offerComponent.setOfferTemplate(offer);
            offer.getOfferComponents().add(offerComponent);
            offer.getOfferServiceTemplates().removeIf(o -> o.getServiceTemplate().getId().equals(serviceTemplate.getId()));
            offerTemplateService.update(offer);
        });

        return product;
    }

    private void createArticle(Product product) {
        product.getProductCharges().stream()
                .map(pc -> pc.getChargeTemplate())
                .forEach(chargeTemplate -> {
                    AccountingArticle accountingArticle;
                    List<AccountingArticle> accountingArticles = accountingArticleService.findByTaxClassAndSubCategory(chargeTemplate.getTaxClass(), chargeTemplate.getInvoiceSubCategory());
                    if(accountingArticles.isEmpty()) {
                        accountingArticle = new AccountingArticle(UUID.randomUUID().toString(), "Migration Accounting article", defaultTaxClass, chargeTemplate.getInvoiceSubCategory());
                        accountingArticleService.create(accountingArticle);
                    } else {
                        accountingArticle = accountingArticles.get(0);
                    }

                    ArticleMappingLine articleMappingLine = new ArticleMappingLine();
                    articleMappingLine.setChargeTemplate(chargeTemplate);
                    articleMappingLine.setArticleMapping(defaultArticleMapping);
                    articleMappingLine.setProduct(product);
                    articleMappingLine.setAccountingArticle(accountingArticle);
                    articleMappingLineService.create(articleMappingLine);
                });

    }

    private Product createProduct(ServiceTemplate serviceTemplate) {
        Product product = new Product();
        product.setCode(serviceTemplate.getCode());
        product.setDescription(serviceTemplate.getDescription());
        List<ProductChargeTemplateMapping> productCharges = getProductCharges(serviceTemplate);
        product.setProductCharges(productCharges);
        product.setCfValues(serviceTemplate.getCfValues());
        product.setCfAccumulatedValues(serviceTemplate.getCfAccumulatedValues());
        product.setDisabled(serviceTemplate.isDisabled());
        productService.create(product);
        return product;
    }

    private ProductVersion createProductVersion(Product product) {
        ProductVersion productVersion= new ProductVersion();
        productVersion.setProduct(product);
        productVersion.setShortDescription(product.getDescription());
        productVersion.setStatus(VersionStatusEnum.PUBLISHED);
        productVersion.setStatusDate(Calendar.getInstance().getTime());
        productVersionService.create(productVersion);
        return productVersion;
    }

    private ProductChargeTemplateMapping mapToProductChargeTemplate(ServiceChargeTemplate serviceCharge) {
        ProductChargeTemplateMapping productChargeTemplateMapping = new ProductChargeTemplateMapping();
        productChargeTemplateMapping.setChargeTemplate(serviceCharge.getChargeTemplate());
        return productChargeTemplateMapping;
    }

    private List<ProductChargeTemplateMapping> getProductCharges(ServiceTemplate serviceTemplate) {
        List<ProductChargeTemplateMapping> productCharges = serviceTemplate.getServiceSubscriptionCharges()
                .stream()
                .map(this::mapToProductChargeTemplate)
                .collect(Collectors.toList());

        productCharges.addAll(
                serviceTemplate.getServiceRecurringCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceTerminationCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceUsageCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );
        return productCharges;
    }
}]]>
			</column>
		</update>
	</changeSet>
	<changeSet id="INTRD-3316_20211215_query_notification_template" author="TarikRabeh">
		<update tableName="com_message_template">
            <column name="htmlcontent">
                <![CDATA[Dear #{userName},<br>
<br>
The result for your query is ready.<br>
Check the result on <a href="#{portalResultLink}">Opencell Portal</a><br>
Query : #{reportQueryName}<br>
Started : #{startDate}<br>
Duration : #{duration}<br>
Line count : #{lineCount}<br>
<br>
Best regards,<br>
Opencell team.
                ]]>
            </column>
            <where>code='REPORT_QUERY_RESULT_SUCCESS'</where>
		</update>
    </changeSet>

	<changeSet id="INTRD-3751_20211216" author="AmineBENAICHA">
		<update tableName="cpq_order_offer" >
            <column name="order_line_type"
                    value="CREATE"/>
            <where>order_line_type is null</where>
        </update>
        
        <update tableName="quote_offer" >
            <column name="quote_line_type"
                    value="CREATE"/>
            <where>quote_line_type is null</where>
        </update>
	</changeSet>

	
	<changeSet id="#4044_30122021_counter_period_job" author="Mbarek-Ay">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-49" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2021-12-30 00:00:00.000" />
            <column name="job_category" value="UTILS" />
            <column name="job_template" value="CounterPeriodJob" />
            <column name="code" value="CounterPeriodJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Counter period job"/>
            <column name="uuid" value="CounterPeriodJob" />
        </insert>
    </changeSet>

   	<changeSet id="#INTRD-4267_20220108" author="AmineBENAICHA">
		<insert tableName="billing_tax_mapping">
        	<column name="id" value='-20'/>
            <column name="tax_category_id" value="-1"/>
            <column name="tax_class_id" value="null"/>
            <column name="tax_id" value='-2'/>
            <column name="priority" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-21'/>
            <column name="tax_category_id" value="-3"/>
            <column name="tax_class_id" value="null"/>
            <column name="tax_id" value='-5'/>
            <column name="priority" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-22'/>
            <column name="tax_category_id" value="-2"/>
            <column name="tax_class_id" value="null"/>
            <column name="tax_id" value='-1'/>
            <column name="priority" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-23'/>
            <column name="tax_category_id" value="null"/>
            <column name="tax_class_id" value="null"/>
            <column name="tax_id" value='-1'/>
            <column name="priority" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
     	</insert>
     </changeSet>

	<changeSet author="ZBariki" id="INTRD-4227_20220110">
		<update tableName="com_message_template">
			<column name="subject" value="Reminder – Past due invoice #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Hello #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>We are reaching out to you in regards of your invoice #{invoiceInvoiceNumber} and more specifically its payment that was due on the #{invoiceDueDate}. You can find a copy of the invoice attached to this email.</p>
					<p>Please make sure to pay the invoice in full as soon as possible. If you have any additional question, do not hesitate to contact our services or your point of contact in our company.</p>
					<p>Best regards,</p>
                ]]>
			</column>
			<where>code='ENG - B2B relance 1 (J+15)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Dunning Letter for Invoice #{invoiceInvoiceNumber}" />
			<column name="htmlcontent">
				<![CDATA[
					#{billingAccountDescription}<br>
					#{billingAccountAddressAddress1}<br>
					#{billingAccountAddressZipCode}; #{billingAccountAddressCity}<br>
					#{billingAccountContactInformationPhone}<br>
					<br>
					#{customerAccountDescription} / #{customerAccountFirstName}<br>
					#{customerAccountAddressAddress1}<br>
					#{customerAccountAddressZipCode}<br>
					#{customerAccountAddressCity}<br>

					<p>#{billingAccountAddressCity}, on #{dayDate}</p>
					<p>#{customerAccountLegalEntityTypeCode},</p>
					<p>By a first email dated (Date of 1st reminder), then a second one dated (Date of 2nd reminder), we asked you to proceed to the payment of the invoice #{invoiceInvoiceNumber} for an amount of #{invoiceTotal}</p>
					<p>Unless we are mistaken, we regret to say that we have not yet received payment of invoice. We therefore ask you to proceed immediately to its payment.</p>
					<p>You will find a copy of the invoice attached to this letter.</p>
					<p>Please disregard this letter if your payment has been sent to us prior to receiving this letter letter.</p>
					<p>We remain at your disposal in case of any questions. Please accept, Madam / Sir, the assurance of our best regards.</p>
					<p>Signature</p>
					<p>Your name and surname</p>
                ]]>
			</column>
			<where>code='ENG - B2B relance 4 (J+35)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Reminder – Past due invoice #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Hello #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>We are reaching out to you in regards of your invoice #{invoiceInvoiceNumber} and more specifically its payment that was due on the #{invoiceDueDate}. You can find a copy of the invoice attached to this email.</p>
					<p>Please make sure to pay the invoice in full as soon as possible. If you have any additional question, do not hesitate to contact our services or your point of contact in our company.</p>
					<p>Best regards,</p>
                ]]>
			</column>
			<where>code='ENG - B2C relance 1 (J+1)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Reminder – Past due invoice #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Hello #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>We are following up on our email dated on the #{dunningCollectionPlanLastActionDate} where we informed you that invoice #{invoiceInvoiceNumber} was overdue for payment since #{invoiceDueDate}. We regret to inform you that we have not yet received payment from you for this matter.</p>
					<p>We ask that you proceed with the payment of the invoice as soon as possible and invite you to contact our customer support if you have any difficulties in paying this invoice.</p>
					<p>You will find a copy of the invoice attached.</p>
					<p>Kind regards,</p>
                ]]>
			</column>
			<where>code='ENG - B2C relance 1 (J+7)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Dunning Letter for Invoice #{invoiceInvoiceNumber}" />
			<column name="htmlcontent">
				<![CDATA[
					#{billingAccountDescription}<br>
					#{billingAccountAddressAddress1}<br>
					#{billingAccountAddressZipCode}; #{billingAccountAddressCity}<br>
					#{billingAccountContactInformationPhone}<br>
					<br>
					#{customerAccountLegalEntityTypeCode}   #{customerAccountDescription}<br>
					#{customerAccountAddressAddress1}<br>
					#{customerAccountAddressZipCode}<br>
					#{customerAccountAddressCity}<br>

					<p>#{billingAccountAddressCity}, on #{dayDate}</p>
					<p>#{customerAccountLegalEntityTypeCode},</p>
					<p>By a first email dated (Date of 1st reminder), then a second one dated (Date of 2nd reminder), we asked you to proceed to the payment of the invoice #{invoiceInvoiceNumber} for an amount of #{invoiceTotal}</p>
					<p>Unless we are mistaken, we regret to say that we have not yet received payment of invoice. We therefore ask you to proceed immediately to its payment.</p>
					<p>You will find a copy of the invoice attached to this letter.</p>
					<p>Please disregard this letter if your payment has been sent to us prior to receiving this letter letter.</p>
					<p>We remain at your disposal in case of any questions. Please accept, Madam / Sir, the assurance of our best regards. </p>
					<p>Signature</p>
					<p>Your name and surname</p>
                ]]>
			</column>
			<where>code='ENG - B2C relance 4 (J+14)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Règlement facture #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Bonjour #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>Nous vous contactons concernant votre facture #{invoiceInvoiceNumber} qui est en retard de paiement depuis le #{invoiceDueDate}. Vous trouverez une copie de la facture en pièce jointe.</p>
					<p>Merci de procéder au règlement de la facture dans les plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de prendre contact avec nos services ou votre interlocuteur habituel afin de trouver une solution.</p>
					<p>Bien à vous,</p>
                ]]>
			</column>
			<where>code='FR - B2B relance 1 (J+15)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Lettre de relance pour la facture #{invoiceInvoiceNumber}" />
			<column name="htmlcontent">
				<![CDATA[
					#{billingAccountDescription}<br>
					#{billingAccountAddressAddress1}<br>
					#{billingAccountAddressZipCode}; #{billingAccountAddressCity}<br>
					#{billingAccountContactInformationPhone}<br>
					<br>
					#{customerAccountDescription} / #{customerAccountFirstName}<br>
					#{customerAccountAddressAddress1}<br>
					#{customerAccountAddressZipCode}<br>
					#{customerAccountAddressCity}<br>

					<p>#{billingAccountAddressCity}, le #{dayDate}</p>
					<p>#{customerAccountLegalEntityTypeCode},</p>
					<p>Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder au paiement de la facture #{invoiceInvoiceNumber}) d’un montant de #{invoiceTotal}).</p>
					<p>Sauf erreur de notre part, nous sommes au regret de constater que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture. Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.</p>
					<p>Vous trouverez en pièce jointe de ce courrier une copie de la facture en question.</p>
					<p>Veuillez ne pas tenir compte de cette lettre si votre règlement nous a été adressé avant la réception du présent courrier.</p>
					<p>Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.</p>
					<p>Company Signature</p>
                ]]>
			</column>
			<where>code='FR - B2B relance 4 (J+35)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Règlement facture #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Bonjour #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>Nous vous contactons concernant votre facture #{invoiceInvoiceNumber} qui est en retard de paiement depuis le #{invoiceDueDate}. Vous trouverez une copie de la facture en pièce jointe.</p>
					<p>Merci de procéder au règlement de la facture dans les plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de prendre contact avec nos services ou votre interlocuteur habituel afin de trouver une solution.</p>
					<p>Bien à vous,</p>
                ]]>            </column>
			<where>code='FR - B2C relance 1 (J+1)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Règlement facture #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Bonjour #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>Nous faisons suite à notre courriel en date du #{dunningCollectionPlanLastActionDate}  où nous vous informions que votre facture #{invoiceInvoiceNumber} était en retard de paiement depuis le #{invoiceDueDate}. Nous sommes dans le regret de vous informer que nous n’avons toujours pas reçu de paiement de votre part à ce sujet.</p>
					<p>Nous vous demandons de procéder au règlement de la facture dans les meilleurs délais et nous invitons à contacter au plus vite notre assistance client si vous éprouvez des difficultés à régler cette facture.</p>
					<p>Vous trouverez à nouveau une copie de la facture en pièce jointe.</p>
					<p>Bien à vous,</p>
                ]]>
			</column>
			<where>code='FR - B2C relance 2 (J+7)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Lettre de relance pour la facture #{invoiceInvoiceNumber}" />
			<column name="htmlcontent">
				<![CDATA[
					#{billingAccountDescription}<br>
					#{billingAccountAddressAddress1}<br>
					#{billingAccountAddressZipCode}; #{billingAccountAddressCity}<br>
					#{billingAccountContactInformationPhone}<br>
					<br>
					#{customerAccountLegalEntityTypeCode} , #{customerAccountDescription}<br>
					#{customerAccountAddressAddress1}<br>
					#{customerAccountAddressZipCode}<br>
					#{customerAccountAddressCity}<br>

					<p>#{billingAccountAddressCity}, le #{dayDate}</p>
					<p>#{customerAccountLegalEntityTypeCode},</p>
					<p>Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder au paiement de la facture #{invoiceInvoiceNumber}) d’un montant de #{invoiceTotal}).</p>
					<p>Sauf erreur de notre part, nous sommes au regret de constater que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture. Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.</p>
					<p>Vous trouverez en pièce jointe de ce courrier une copie de la facture en question.</p>
					Veuillez ne pas tenir compte de cette lettre si votre règlement nous a été adressé avant la réception du présent courrier.</p>
					<p>Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.</p>
					<p>Company Signature</p>
                ]]>
			</column>
			<where>code='FR - B2C relance 4 (J+14)'</where>
		</update>
	</changeSet>
	<changeSet id="INTRD-3765_07012022" author="hichamElHaloui">
        <sql><![CDATA[ UPDATE ${db.schema.adapted}meveo_script_instance set script = '
package org.meveo.service.script;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;

import javax.persistence.Query;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

	private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
			AccountOperationService.class.getSimpleName());
	private final CustomerService customerService = (CustomerService) getServiceInterface(
			CustomerService.class.getSimpleName());
	private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
			InvoiceService.class.getSimpleName());
	private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			SubscriptionService.class.getSimpleName());
	private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
			RatedTransactionService.class.getSimpleName());
	private final WalletService walletService = (WalletService) getServiceInterface(
			WalletService.class.getSimpleName());
	private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
			RejectedBillingAccountService.class.getSimpleName());
	private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
			CounterInstanceService.class.getSimpleName());
	private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
			CounterPeriodService.class.getSimpleName());
	private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
			OrderItemService.class.getSimpleName());
	private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
			ProductInstanceService.class.getSimpleName());
	private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
			BusinessEntityService.class.getSimpleName());
	private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
			WalletOperationService.class.getSimpleName());
	private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			ServiceInstanceService.class.getSimpleName());

	private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

	@SuppressWarnings("rawtypes")
	private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
			ChargeInstanceService.class.getSimpleName());

	private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		log.debug(" >>> execute {} ", methodContext.entrySet());

		try {

			Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
			if (MapUtils.isEmpty(record)) {
				throw new BusinessException(String.format("Parameter RECORD is missing"));
			}

			final String customerCode = record.get("customerCode");
			Customer customer = customerService.findByCode(customerCode);
			if (customer == null) {
				throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
			}

			String noCheckVal = record.get("noCheck");
			if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
				throw new BusinessException(
						String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
			}
			boolean noCheck = "1".contentEquals(noCheckVal);

			if (!noCheck) {
				// If noCheck is 0 then the following conditions must be met in order to allow
				// deletion:
				// No unmatched AO
				// No open EDR/WO/RT

				this.checkUnmatchedAOs(customer);
				this.checkOpenEDRs(customer);
				this.checkOpenWOs(customer);
				this.checkOpenRTs(customer);
			}

			this.removeCustomerHirarchy(customer);

		} catch (BusinessException be) {
			throw be;
		} catch (Exception e) {
			log.error(" Error executing DeleteCustomersScript ", e);
			throw new BusinessException(e.getMessage());
		}
	}

	private void checkOpenEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenEDRs for customer = {} ", customer);
			String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Object count = edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId())
					.getSingleResult();
			log.debug(" count of open EDRs = {} ", count);
			log.debug(" End checkOpenEDRs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open EDRs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenWOs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenWOs for customer = {} ", customer);
			String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
			final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
					WalletOperationService.class.getSimpleName());

			Object count = walletOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open WOs = {} ", count);
			log.debug(" End checkOpenWOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open WOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenRTs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkOpenRTs for customer = {} ", customer);
			String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
			Object count = this.ratedTransactionService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open RTs = {} ", count);
			log.debug(" End checkOpenRTs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open RTs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkUnmatchedAOs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
			String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
			final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
					AccountOperationService.class.getSimpleName());
			Object count = accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of unmatched AOs = {} ", count);
			log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeCustomerHirarchy(Customer customer) throws BusinessException {
		log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

		//
		// A workaround for #4134 , no need for this method if #4134 is fixed (only
		// 6.1.X is concerned)!
      	this.nullifyDDRequestItem(customer);
		this.nullifyAOsSeller(customer);

      	this.removeWalletOperations(customer);
		this.removeChargeInstances(customer);
		// the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
		this.nullifySubCategoryInvoiceAgregatesWallet(customer);
		this.removeRatedTransactions(customer);
		this.nullifyWalletInstanceInUserAccount(customer);
		this.removeWalletInstances(customer);

		this.removePaymentHistory(customer);
//		this.removeRatedTransactions(customer);

		this.removeMatchingAmounts(customer);
		this.nullifyRecordedInvoice(customer);
		this.removeInvoices(customer);



		this.removeServiceInstances(customer);
		this.removeAccess(customer);
		this.removeEDRs(customer);
		this.removeDiscountPlanInstance(customer);
		this.nullifyAOSubscriptions(customer);
		this.removeSubscriptions(customer);
		this.removeRejectedBAs(customer);

		this.removeCounterPeriods(customer);
		this.removeCounterInstances(customer);
		this.removeOrderItems(customer);
		this.removeProductInstances(customer);


		this.customerService.remove(customer);

		log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
	}

	private void nullifyWalletInstanceInUserAccount(Customer customer) {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);
		String query = "Update UserAccount ua set ua.wallet = null where ua.wallet.id in (select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId)";
		edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);

			String queryText = "delete from EDR edr1 where edr1.id in (select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			edrService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeMatchingAmounts(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

			final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
			final String query = "delete from MatchingAmount ma1 where ma1.id in (select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId )";
			matchingAmountService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeMatchingAmounts for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeAccess(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeAccess for customer = {} ", customer);

			final AccessService accessService = (AccessService) getServiceInterface(
					AccessService.class.getSimpleName());

			final String queryText = "delete from Access a1 where a1.id in (select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			accessService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeAccess for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeServiceInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeServiceInstances for customer = {} ", customer);

			String queryText = "delete from ServiceInstance si1 where si1.id in (select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";
			this.serviceInstanceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeServiceInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeWalletOperations(Customer customer) throws BusinessException {
		try {
			log.debug(" removeWalletOperations for customer={} ", customer);
			String queryText = "delete from WalletOperation wo where wo.id in ( select wo1.id from WalletOperation wo1  where wo1.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";

			Query query = this.walletOperationService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();
		} catch (Exception e) {
			log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void removePaymentHistory(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removePaymentHistory for customer = {} ", customer);

			String query = "delete from PaymentHistory ph1 where ph1.id in (select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode) ";
			int count = this.businessEntityService.getEntityManager().createQuery(query)
					.setParameter("customerCode", customer.getCode()).executeUpdate();

			log.debug(" {} PaymentHistory to delete ", count);
			log.debug(" End removePaymentHistory for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */

 private void nullifyDDRequestItem(Customer customer){

    try {
			log.debug(" Start deleteDDRequestItem for customer = {} ", customer);

			String query = "update DDRequestItem ddri set ddri.automatedPayment= null where ddri.automatedPayment.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
  }
	private void nullifyAOsSeller(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

			String query = "UPDATE AccountOperation ao1 SET ao1.seller = null where ao1.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);

			StringBuilder query = new StringBuilder( "UPDATE SubCategoryInvoiceAgregate subCat SET subCat.wallet = null ")
					.append(" where subCat.id in (select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId) ");

			int count = this.accountOperationService.getEntityManager().createQuery(query.toString()).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", count);
			log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeProductInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeProductInstances for customer = {} ", customer);
			String query = "delete from ProductInstance pi where pi.id in (select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			productInstanceService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();
			log.debug(" End removeProductInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void removeOrderItems(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeOrderItem for customer = {} ", customer);

			String query = "delete from OrderItem oi where oi.id in (select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";

			orderItemService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeOrderItem for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeCounterPeriods(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterPeriods for customer = {} ", customer);
			String queryText = "delete from CounterPeriod cp1 where cp1.id in ( select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			counterInstanceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();
			log.debug(" End removeCounterPeriods for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeCounterInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterInstances for customer = {} ", customer);

			String query = "delete from CounterInstance c1 where c1.id in (select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			counterInstanceService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeCounterInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void removeRejectedBAs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRejectedBAs for customer = {} ", customer);

			String queryText = "delete from RejectedBillingAccount rba1 where rba1.id in (select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId )";
			rejectedBillingAccountService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeRejectedBAs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}




	private void nullifyRecordedInvoice(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRecordedInvoice for customer = {} ", customer);

			String queryText = "update  RecordedInvoice ri   set ri.invoice = null where ri.invoice.id in ( select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer.id =:customerId )";
			invoiceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeRecordedInvoice for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRecordedInvoice : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeInvoices(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeInvoices for customer = {} ", customer);

			String queryText = "delete from Invoice inv1 where inv1.id in (select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer.id =:customerId )";
			invoiceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeInvoices for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeWalletInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletInstances for customer = {} ", customer);

			String queryText = "delete from WalletInstance wi1 where wi1.id in (select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";
			this.walletService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeWalletInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeRatedTransactions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRatedTransactions for customer = {} ", customer);

						String queryText = "delete from RatedTransaction rt1 where rt1.id in (select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId )";
			Query query =chargeInstanceService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();

			log.debug(" End removeRatedTransactions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeChargeInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeChargeInstances for customer = {} ", customer);

			String queryText = "delete from ChargeInstance ci1 where ci1.id in (select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			Query query =chargeInstanceService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();

			log.debug(" End removeChargeInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void nullifyAOSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOSubscriptions for customer = {} ", customer);
						String queryText = "update AccountOperation  ao set ao.subscription= null where ao.subscription.id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End nullifyAOSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
						String queryText = "delete from Subscription s1 where s1.id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeDiscountPlanInstance(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
						String queryText = "delete from DiscountPlanInstance dpi where subscription_id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private <T> Collection<T> safe(Collection<T> collection) {
		return collection == null ? Collections.EMPTY_LIST : collection;
	}
}' where id= -23 ;]]>
		</sql>
	</changeSet>
<changeSet id="INTRD-3432_21012022_Manual_refund_by_card_KO" author="anasseh">
	<update tableName="meveo_script_instance">
           <column name="script">
               <![CDATA[package org.meveo.service.script.demo;

import java.io.StringReader;
import java.util.Map;
import javax.xml.xpath.*;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.payments.*;
import org.meveo.service.script.payment.PaymentScript;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.InputSource;

/**
 * @author anasseh
 */
public class CustomGatewayPaymentScript extends PaymentScript{
    private static final Logger log = LoggerFactory.getLogger(CustomGatewayPaymentScript.class);

    public void createCardToken(Map<String, Object> methodContext) throws BusinessException {           
        methodContext.put(PaymentScript.RESULT_TOKEN, "7ced0000-3ab2-000d-6a50-08d4b8a6"+(int )(Math.random() * 1000 + 1));
    }
    public void doPaymentToken(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "PAL");
    }
      public void doPaymentCard(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "PAL_CARD");
    }
  
    public void doRefundToken(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "RFD");
    }
   public void doRefundCard(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "RFD_CARD");
    }
  
    private void doIt(Map<String, Object> methodContext,String operationType) throws BusinessException {
        try{
            log.debug("EXECUTE  methodContext {} ", methodContext);
            Long amountCts = (Long)methodContext.get(PaymentScript.CONTEXT_AMOUNT_CTS);
            if(amountCts == null){
                throw new BusinessException("amountCts is null");
            }
            CardPaymentMethod paymentToken = (CardPaymentMethod)methodContext.get(PaymentScript.CONTEXT_TOKEN);
            if(paymentToken == null && (operationType.equals("PAL") || operationType.equals("RFD"))){
                throw new BusinessException("paymentMethod is null");
            }
            
            //DEMO : get tokenId or card infos from context
            String body  = "{";
            body  += " \"PSPID\" : \"PSPID\" ,";
            body  += " \"USERID\" : \"USERID\" ,";
            body  += " \"PSWD\" : \"PSWD\" ,";
            body  += " \"REFKIND\" :  \"PSPID\" ,";
            body  += " \"REFID\" : \"PSPID\" ,";
            body  += " \"OPERATION\" : \""+operationType +"\" ,";
            body  += " \"AMOUNT\" : \""+amountCts.longValue()+"\" ,";
            body  += " \"SHASIGN\" : \"SHASIGN\" ,";
            body  += " }";
          
        
            String paymentResponse = "<root>";
            paymentResponse += "<STATUS>92</STATUS>";
            paymentResponse += "<PAYID>"+((int )(Math.random() * 100000 + 1))+"</PAYID>"; 
            paymentResponse += "<TRANSACTIONID>92</TRANSACTIONID>";
            paymentResponse += "<CRMTOKEN>clientSide</CRMTOKEN>"; 
            paymentResponse += "<BRAND>VISA</BRAND>";
            paymentResponse += "<ACCEPTENCE>bankRef</ACCEPTENCE>"; 
            paymentResponse += "</root>";
            methodContext.put(PaymentScript.RESULT_PAYMENT_STATUS, PaymentStatusEnum.PENDING);
            methodContext.put(PaymentScript.RESULT_PAYMENT_ID, getValue(paymentResponse,"/root/PAYID"));
            methodContext.put(PaymentScript.RESULT_TRANSACTION_ID, getValue(paymentResponse,"/root/TRANSACTIONID"));
            methodContext.put(PaymentScript.RESULT_CODE_CLIENT_SIDE, getValue(paymentResponse,"/root/CRMTOKEN"));
            methodContext.put(PaymentScript.RESULT_PAYMENT_BRAND, getValue(paymentResponse,"/root/BRAND"));
            methodContext.put(PaymentScript.RESULT_BANK_REFERENCE, getValue(paymentResponse,"/root/ACCEPTENCE"));           
        } catch (Exception e) {
            throw new BusinessException(e.getMessage());
        }
    }
    private String getValue(String sourceXML,String expression) throws XPathExpressionException{        
        InputSource iSource = new InputSource(new StringReader(sourceXML));
        XPathFactory xpathFactory = XPathFactory.newInstance();
        XPath xpath = xpathFactory.newXPath();      
        return xpath.evaluate(expression, iSource);         
    }
}
                ]]>
           </column>
           <where>code='org.meveo.service.script.demo.CustomGatewayPaymentScript'</where>
	</update>
   </changeSet>

	<changeSet id="INTRD-4724_20220201" author="TarikRabeh">
		<insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-36" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="165000000" />
			<column name="description" value="Deposits and sureties received"></column>
			<column name="chart_of_account_type" value="LIABILITIES" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-51" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="accounting_code_id" valueNumeric="-3" />
			<column name="account_code_client_side" valueNumeric="165000000" />
			<column name="code" value="CRD_SD" />
			<column name="description" value="Credit for Security deposit transfer" />
			<column name="occ_category" value="CREDIT" />
			<column name="journal_id" value="-2" />
		</insert>
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-52" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="accounting_code_id" valueNumeric="-36" />
			<column name="account_code_client_side" valueNumeric="41100000" />
			<column name="code" value="DEB_SD" />
			<column name="description" value="Debit for Security deposit transfer" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
		</insert>
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-53" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-36" />
			<column name="account_code_client_side" valueNumeric="512010000" />
			<column name="code" value="REF_SD" />
			<column name="description" value="Refund of Security deposit transfer" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
		<insert tableName="billing_seq_invoice">
			<column name="id" valueNumeric="-6" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="SECURITY_DEPOSIT" />
			<column name="description" value="Security Deposit" />
			<column name="sequence_size" valueNumeric="9" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
		</insert>
		<insert tableName="billing_invoice_type">
			<column name="id" valueNumeric="-6" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="SECURITY_DEPOSIT" />
			<column name="description" value="SD - Security Deposit" />
			<column name="invoice_sequence_id" valueNumeric="-6" />
			<column name="occ_template_id" valueNumeric="-52" />
			<column name="uuid" value="InvoiceType-SECURITY_DEPOSIT" />
		</insert>
		<insert tableName="billing_invoice_cat">
			<column name="id" value='-4'/>
			<column name="code" value="ICAT_SECURITY_DEPOSIT"/>
			<column name="description" value="ICAT_SECURITY_DEPOSIT"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="uuid" value="billing_invoice_cat_icat_security_deposit" />
		</insert>
		<insert tableName="billing_invoice_sub_cat">
			<column name="id" value='-4'/>
			<column name="invoice_category_id" value='-4'/>
			<column name="version" valueNumeric="0" />
			<column name="code" value="ISCAT_SECURITY_DEPOSIT"/>
			<column name="description" value="ISCAT_SECURITY_DEPOSIT"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="uuid" value="billing_invoice_sub_cat_iscat_security_deposit" />
		</insert>
		<insert tableName="billing_accounting_article">
			<column name="id" value='-11'/>
			<column name="version" valueNumeric="0" />
			<column name="code" value="ART_SECURITY_DEPOSIT"/>
			<column name="tax_class_id" value="-3"/>
			<column name="invoice_sub_category_id" value="-4"/>
			<column name="invoice_type_id" value="-6"/>
			<column name="description" value="Article Security Deposit"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="uuid" value="billing_accounting_article_art_security_deposit" />
		</insert>
	</changeSet>
	<changeSet id="#INTRD-4950-20220208" author="MohammedSTITANE">
		<insert tableName="meveo_script_instance_cat">
			<column name="id" valueSequenceNext="meveo_script_instance_cat_seq"/>
			<column name="version" valueNumeric="0"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="code" value="FILE_ACCOUNTING_SCHEMES"/>
			<column name="description" value="File accounting schemes"/>
		</insert>
		<insert tableName="generic_sequence">
			<column name="id" valueSequenceNext="generic_sequence_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="code" value="accounting_scheme_sequence" />
			<column name="description" value="AccountingScheme sequence" />
			<column name="sequence_type" value="SEQUENCE" />
			<column name="sequence_size" valueNumeric="10" />
			<column name="current_number" valueNumeric="0" />
		</insert>
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="AccountingScheme" />
			<column name="code_el" value="#{sequenceNextValue}" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="sequence_id" valueSequenceCurrent="generic_sequence_seq" />
		</insert>
	</changeSet>
    <changeSet id="INTRD-5089_20220215" author="TarikRabeh">
        <update tableName="billing_accounting_article">
			<column name="accounting_code_id" value="-36"/>
            <where>code='ART_SECURITY_DEPOSIT'</where>
        </update>
    </changeSet>
    <changeSet id="#INTRD-5242__22-02-2022" author="Mohammed_ELAZZOUZI">
    	<sql>delete from ${db.schema.adapted}crm_custom_field_tmpl_val where customfieldtemplate_id = (SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')</sql>
	    <sql>delete from ${db.schema.adapted}crm_custom_field_tmpl where applies_to='JobInstance_InvoiceLinesJob' and code ='AggregationOptions'</sql>
	    <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="JobInstance_InvoiceLinesJob_AggregationPerUnitAmount"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="description" value="aggregation per unit amount"/>
            <column name="field_type" value="BOOLEAN"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="default_value" value="0"/>
            <column name="creator" value="applicationInitializer"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="JobInstance_InvoiceLinesJob_ILDateAggregationOptions"/>
            <column name="description" value="date aggregation options"/>
            <column name="field_type" value="LIST"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="NO_DATE_AGGREGATION"/>
            <column name="listvalues_key" value="NO_DATE_AGGREGATION"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="MONTH_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="MONTH_OF_USAGE_DATE"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="WEEK_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="WEEK_OF_USAGE_DATE"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="DAY_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="DAY_OF_USAGE_DATE"/>
        </insert>
    </changeSet>
	<changeSet id="INTRD-4891-25022022" author="Abdelkader.Bouazza">
		<update tableName="cpq_attribute">
			<column name="el_value">${sub.getSubscriptionDate()}</column>
			<where>id=-8</where>
		</update>
	</changeSet>
	<changeSet id="INTRD-4680-01032022" author="TarikRabeh">
		<update tableName="billing_user_account">
			<column name="is_consumer">1</column>
		</update>
	</changeSet>

	<changeSet id="INTRD-5691-20220315" author="ZBariki">
		<insert tableName="crm_provider_pay_methods">
			<column name="provider_id" valueNumeric="1" />
			<column name="payment_method" value="CHECK" />
		</insert>
	</changeSet>
	
	<changeSet id="INTRD-5701_20220215" author="HatimOUDAD">
        <insert tableName="billing_accounting_article">
        	<column name="id" value="-5"/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="ADV-STD"/>
        	<column name="tax_class_id" value="-1"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Acompte","ENG":"Advance payment"}'/>
            <column name="description" value='Advance payment'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-ADV-STD" />
        </insert>
    </changeSet>
    
    <changeSet id="INTRD-4285-20220317" author="AmineBENAICHA">
		<!-- Grant role "query_manager" to role "administrateur" -->
		<insert tableName="adm_role_role">
            <column name="role_id" valueNumeric="-1" />
            <column name="child_role_id" valueNumeric="-121" />
        </insert>
        
        <!-- Grant role "query_manager" to role "superAdministrateur" -->
		<insert tableName="adm_role_role">
            <column name="role_id" valueNumeric="-2" />
            <column name="child_role_id" valueNumeric="-121" />
        </insert>
	</changeSet>
	<changeSet id="#INTRD-4702-20220321" author="ZBariki">
		<update tableName="meveo_script_instance_cat">
			<column name="code" value="ACCOUNTING_SCHEMES"></column>
			<column name="description" value="Accounting schemes"></column>
			<where>code='FILE_ACCOUNTING_SCHEMES'</where>
		</update>
	</changeSet>
	<changeSet id="#INTRD-5888_2022-03_23" author="hichamELHALOUI" >

		<update tableName="billing_trading_currency">
			<column name="symbol" value="$US"  />
            <column name="decimal_places" valueNumeric="2" />
			<where>currency_id=49</where>
		</update>
		<update tableName="billing_trading_currency">
			<column name="symbol" value="€"  />
            <column name="decimal_places" valueNumeric="2" />
			<where>currency_id=5</where>
		</update>
    </changeSet>

	<changeSet id="#INTRD-5831_20220325" author="aelmalki">
		<sql>UPDATE ar_occ_template occ SET contra_accounting_code_id = (SELECT ac.id FROM billing_accounting_code ac WHERE ac.code=occ.account_code_client_side) WHERE occ.contra_accounting_code_id IS NULL</sql>
	</changeSet>

	<changeSet id="#INTRD-5830_20220324" author="aelmalki">
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="org.meveo.service.script.accountingscheme.DefaultAccountingSchemeScript" />
			<column name="src_type" value="JAVA_CLASS" />
			<column name="description" value="Default Journal entry builder, from AccountOperation"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="script">
				<![CDATA[package org.meveo.service.script.accountingscheme;
						public class SampleAccountingSchemeScript extends DefaultAccountingSchemeScript {}
				]]>
			</column>
		</insert>
	</changeSet>

	<changeSet id="#INTRD-5960_20220328" author="HichamHANINE">
    	<sql>Update  cpq_order_offer o set subscription_id = (select id from billing_subscription s where s.order_offer_id = o.id) where o.subscription_id is null</sql>
    </changeSet>
    
	<changeSet id="#INTRD-5955_20220324" author="aelmalki">
		<insert tableName="ar_accounting_scheme">
			<column name="id" valueSequenceNext="ar_accounting_scheme_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="org.meveo.service.script.accountingscheme.DefaultAccountingSchemeScript" />
			<column name="description" value="Default Accounting Scheme"/>
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.accountingscheme.DefaultAccountingSchemeScript')"/>
		</insert>
	</changeSet>

	<changeSet id="#INTRD-5958_20220328" author="aelmalki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="2022-03-28 00:00:00.000" />
			<column name="job_category" value="ACCOUNTING" />
			<column name="job_template" value="AccountingSchemesJob" />
			<column name="code" value="AccountingSchemesJob" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="AccountingSchemesJob" />
		</insert>
	</changeSet>

	<changeSet id="#INTRD-5992_20220329" author="aelmalki">
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript" />
			<column name="src_type" value="JAVA_CLASS" />
			<column name="description" value="Invoice accounting scheme script"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="script">
				<![CDATA[package org.meveo.service.script.accountingscheme;
						public class SampleInvoiceAccountingSchemeScript extends InvoiceAccountingSchemeScript {}
				]]>
			</column>
		</insert>
		<insert tableName="ar_accounting_scheme">
			<column name="id" valueSequenceNext="ar_accounting_scheme_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript" />
			<column name="description" value="Invoice accounting scheme"/>
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript')"/>
		</insert>
		<update tableName="ar_occ_template">
			<column name="accounting_scheme_id" valueComputed="(SELECT id FROM ar_accounting_scheme WHERE code='org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript')" />
			<where> code IN ('INV_STD', 'INV_CRN')</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-6075_20220330" author="aelmalki">
		<update tableName="meveo_script_instance">
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='ACCOUNTING_SCHEMES')" />
			<where> code IN ('org.meveo.service.script.accountingscheme.DefaultAccountingSchemeScript', 'org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript')</where>
		</update>
	</changeSet>


    	<changeSet id="INTRD-5997_20220330" author="HichamELHALOUI">
		<insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-37" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511011000" />
			<column name="description" value="CB à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

        <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-38" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511002000" />
			<column name="description" value="Paypal à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

          <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-39" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511003000" />
			<column name="description" value="Stripe à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

         <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-40" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511000610" />
			<column name="description" value="TIP à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

         <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-41" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="531100000" />
			<column name="description" value="Caisse en monnaie nationale"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

          <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-42" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511200000" />
			<column name="description" value="Chèques à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>


        <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-54" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-42" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_CHECK" />
			<column name="description" value="Payment - check" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-55" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-37" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_CB" />
			<column name="description" value="Payment - card" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-56" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-20" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_DIRECT_DEBIT" />
			<column name="description" value="Payment - direct debit (prélèvement)" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-57" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-38" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_PAYPAL" />
			<column name="description" value="Payment Paypal" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-58" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-39" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_STRIPE" />
			<column name="description" value="Payment Stripe" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-59" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-40" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_TIP_DEBIT" />
			<column name="description" value="Payment - TIP" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-60" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-41" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_CASH" />
			<column name="description" value="Payment - cash" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-61" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-20" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_WIRE" />
			<column name="description" value="WIRETRANSFER (virement)" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>


        </changeSet>

</databaseChangeLog>