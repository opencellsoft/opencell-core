<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

	<changeSet id="#4150_20190415 - Disable standard jobs" author="EdwardPLegaspi">
		<update tableName="meveo_job_instance">
			<column name="timerentity_id" value="NULL"></column>
			<column name="disabled" valueNumeric="0"></column>
		</update>
		<delete tableName="meveo_timer">
		</delete>
	</changeSet>
	
	<changeSet id="#4092_20190415 - Add SelfCare Settings" author="EdwardPLegaspi">
		<insert tableName="adm_permission">
            <column name="id" valueNumeric="-117" />
            <column name="name" value="API User" />
            <column name="permission" value="apiAccess" />
        </insert>
        <insert tableName="adm_permission">
            <column name="id" valueNumeric="-118" />
            <column name="name" value="Administration visualization" />
            <column name="permission" value="administrationVisualization" />
        </insert>
		<insert tableName="adm_role">
            <column name="id" valueNumeric="-112" />
            <column name="version" valueNumeric="0" />
            <column name="role_description" value="selfcareDefault" />
            <column name="role_name" value="selfcareDefault" />
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-112"></column>
            <column name="permission_id" value="-117"></column>
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-112"></column>
            <column name="permission_id" value="-118"></column>
        </insert>
        <insert tableName="adm_user">
            <column name="id" valueNumeric="-5" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="email" value="DEMO.selfcare.api@opencellsoft.com"/>
            <column name="firstname" value="selfcare.api"/>
            <column name="lastname" value="DEMO"/>
            <column name="username" value="DEMO.selfcare.api" />
            <column name="uuid" value="DEMO.selfcare.api" />
        </insert>
        <insert tableName="adm_user_role">
            <column name="user_id" value="-5"></column>
            <column name="role_id" value="-112"></column>
        </insert>
        
        <sql><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-20, 0, 0, ${db.current.time}, 'org.meveo.service.script.selfcare.CreateAccess', 'AddAccess', 'JAVA', '
			package org.meveo.service.script.selfcare;
			
			import java.util.Date;
			import java.util.Map;
			
			import org.meveo.admin.exception.BusinessException;
			import org.meveo.model.admin.User;
			import org.meveo.model.billing.Subscription;
			import org.meveo.service.medina.impl.AccessService;
			import org.meveo.service.script.module.ModuleScript;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
			
			public class CreateAccess extends ModuleScript {	
				private static final Logger log = LoggerFactory.getLogger(CreateAccess.class);		
				
				@Override
			    public void execute(Map<String, Object> methodContext) throws BusinessException {
					AccessService accessService = (AccessService) getServiceInterface("AccessService");
					Subscription subscription = (Subscription) methodContext.get("subscription");
					if(subscription == null){
						throw new BusinessException("subscription is null");
					}
					log.debug("subscription.getCode() : "+subscription.getCode());		
					org.meveo.model.mediation.Access access = new org.meveo.model.mediation.Access();
					access.setSubscription(subscription);
					access.setAccessUserId("ACC_"+subscription.getCode());
					access.setStartDate(new Date());
					access.setEndDate(null);
					accessService.create(access);
			    }	
			}
        ');
        ]]></sql>
        
        <insert tableName="meveo_module">
        	<column name="id" valueNumeric="-1"></column>
        	<column name="version" value="0"></column>
        	<column name="disabled" value="0"></column>
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="code" value="AddAccessModule"></column>
        	<column name="description" value="AddAccessModule"></column>
        	<column name="module_license" value="GPL"></column>
        	<column name="installed" value="0"></column>
        	<column name="script_instance_id" valueNumeric="-20"></column>
        </insert>
        
        <sql>
        	<![CDATA[UPDATE ${db.schema.adapted}meveo_module 
        		SET module_source='<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
				<Module license="GPL" code="AddAccessModule" description="AddAccessModule">
				    <script code="org.meveo.service.script.selfcare.CreateAccess" description="AddAccess"></script>
				    <moduleItems>
				        <notification code="AddAccessNotif">
				            <classNameFilter>org.meveo.model.billing.Subscription</classNameFilter>
				            <eventTypeFilter>CREATED</eventTypeFilter>
				            <elFilter></elFilter>
				            <scriptInstanceCode>org.meveo.service.script.selfcare.CreateAccess</scriptInstanceCode>
				            <scriptParams>
				                <entry>
				                    <key>subscription</key>
				                    <value>#{event}</value>
				                </entry>
				            </scriptParams>
				            <priority>0</priority>
				        </notification>
				    </moduleItems>
				</Module>
	        	'
			WHERE id=-1;]]>
        </sql>
        
        <sql><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-21, 0, 0, ${db.current.time}, 'org.meveo.service.script.SelfcareAccountScript', 'Script BAM for selfcare accounts', 'JAVA', '
			package org.meveo.service.script;
			import java.math.BigDecimal;
			import java.nio.charset.Charset;
			import java.security.MessageDigest;
			import java.security.NoSuchAlgorithmException; 
			import java.util.List;
			import java.util.HashSet;
			import java.util.Map;
			import org.meveo.admin.exception.BusinessException;
			import org.meveo.api.dto.account.CRMAccountHierarchyDto;   
			import org.meveo.api.dto.UserDto; 
			import org.meveo.api.exception.MeveoApiException;
			import org.meveo.commons.utils.StringUtils;
			import org.meveo.model.admin.User;    
			import org.meveo.service.script.account.AccountScript;
			import org.meveo.model.AccountEntity;
			import org.slf4j.Logger;
			import java.util.Set;
			import java.util.ArrayList;
			import org.meveo.model.security.Role;
			import org.meveo.service.crm.impl.CustomerService;
			import org.slf4j.LoggerFactory;
			import org.meveo.model.crm.Customer;
			import org.meveo.service.crm.impl.CustomFieldInstanceService;
			import org.meveo.api.UserApi;
			
			public class SelfcareAccountScript extends AccountScript {
			
				private static final Logger log = LoggerFactory.getLogger(SelfcareAccountScript.class);
				private Map<String, Object> initContext = null;
			
				static MessageDigest messageDigest = null;
				static {
					try {
						messageDigest = MessageDigest.getInstance("MD5");
					} 
					catch (NoSuchAlgorithmException e) {
					}
				}
				CustomFieldInstanceService customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface("CustomFieldInstanceService");
				CustomerService customerService = (CustomerService) getServiceInterface("CustomerService");
				UserApi userApi = (UserApi) getServiceInterface("UserApi");
			
				@Override
				public void createAccount(Map<String, Object> methodContext) throws BusinessException { 
					AccountEntity account = (AccountEntity) methodContext.get(Script.CONTEXT_ENTITY);
					UserDto user = new UserDto();
					CRMAccountHierarchyDto accountDto = (CRMAccountHierarchyDto) methodContext.get(AccountScript.CONTEXT_ACCOUNT_HIERARCHY_DTO);
					Customer customer = customerService.findByCode(accountDto.getCode());
			
					log.debug("accountCode : "+accountDto.getCode(), " crmAccountType :"+accountDto.getCrmAccountType());
					  
					String email = accountDto.getContactInformation().getEmail(); 
					user.setEmail(email);
					if(accountDto.getName()!=null){
						user.setFirstName(accountDto.getName().getFirstName());
						user.setLastName(accountDto.getName().getLastName());
					}
					user.setUsername(accountDto.getCode());
			
					/*
					String password =(String) customFieldInstanceService.getCFValue(customer, "password");
					if( password != null )
					{
						user.setPassword(password);
					}
					else
					{
						log.warn("password CF is null, using username");
						user.setPassword(user.getUsername());
					}
					*/    
			
					List<String> roles = new ArrayList<String>();
					roles.add("selfcareDefault");
					user.setRoles(roles);
					log.debug("lastName :"+user.getLastName() + " firstName : "+user.getFirstName() + " email : "+user.getEmail());
					try{
						userApi.createOrUpdate(user);
					}
					catch(MeveoApiException e){
						log.error("failed to create user ",e); 
						e.printStackTrace();
					}
				}
			}
        ');
        ]]></sql>
        
        <sql><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-22, 0, 0, ${db.current.time}, 'org.meveo.service.script.selfcare.RegisterHierarchy', 'Register crm hierarchy', 'JAVA', '
			package org.meveo.service.script.selfcare;

			import java.util.Map;
			
			import org.meveo.admin.exception.BusinessException;
			import org.meveo.api.account.AccountHierarchyApi;
			import org.meveo.api.dto.account.CRMAccountHierarchyDto;
			import org.meveo.api.exception.MeveoApiException;
			import org.meveo.commons.utils.JsonUtils;
			import org.meveo.model.admin.User;
			import org.slf4j.Logger;
			import org.slf4j.LoggerFactory;
			
			public class RegisterHierarchy extends org.meveo.service.script.Script {	
				private static final Logger log = LoggerFactory.getLogger(RegisterHierarchy.class);			
				public void execute(Map<String, Object> initContext) throws BusinessException {		
					log.info("Execute...");
					AccountHierarchyApi accountHierarchyApi = (AccountHierarchyApi) getServiceInterface("AccountHierarchyApi");
					String body = (String) initContext.get("body");
					log.info("body:"+body);
					CRMAccountHierarchyDto crmAccountHierarchyDto = JsonUtils.toObject(body, CRMAccountHierarchyDto.class);
					log.info("crmAccountHierarchyDto"+crmAccountHierarchyDto);	
						
					try {
						accountHierarchyApi.createCRMAccountHierarchy(crmAccountHierarchyDto);
					} catch (MeveoApiException e) {			
						e.printStackTrace();
					}	
				}
			}
        ');
        ]]></sql>
        
        <insert tableName="meveo_module">
        	<column name="id" valueNumeric="-2"></column>
        	<column name="version" value="0"></column>
        	<column name="disabled" value="0"></column>
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="code" value="Client"></column>
        	<column name="description" value="Individual customer"></column>
        	<column name="module_license" value="GPL"></column>
        	<column name="installed" value="0"></column>
        	<column name="script_instance_id" valueNumeric="-21"></column>
        </insert>
        
        <insert tableName="crm_business_account_model">
        	<column name="id" valueNumeric="-2"></column>
        	<column name="hierarchy_type" value="C_UA"></column>
        </insert>
        
        <sql>
        	<![CDATA[UPDATE ${db.schema.adapted}meveo_module 
        		SET module_source='<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
				<BusinessAccountModel license="GPL" code="Client" description="Individual customer">
				    <script code="org.meveo.service.script.SelfcareAccountScript" description="Script BAM for selfcare accounts"></script>
				    <moduleItems>
				        <emailNotif code="AccountCreationNotif">
				            <classNameFilter>org.meveo.model.admin.User</classNameFilter>
				            <eventTypeFilter>CREATED</eventTypeFilter>
				            <scriptParams/>
				            <priority>0</priority>
				            <emailFrom>bot@opencellsoft.com</emailFrom>
				            <emailToEl>#{event.email}</emailToEl>
				            <subject>Account creation confirmation</subject>
				            <body>Hello,
				                Your login has been created:
				                user name :  #{event.userName}
				                access url : http://opencell_url/frontend/DEMO/cc/index.html
								</body>
				        </emailNotif>
				        <notification code="SelfcareRegistration">
				            <classNameFilter>org.meveo.model.notification.InboundRequest</classNameFilter>
				            <eventTypeFilter>INBOUND_REQ</eventTypeFilter>
				            <elFilter>#{event.pathInfo.startsWith("/DEMO/registration")}</elFilter>
				            <scriptInstanceCode>org.meveo.service.script.selfcare.RegisterHierarchy</scriptInstanceCode>
				            <scriptParams>
				                <entry>
				                    <key>body</key>
				                    <value>#{event.getBody()}</value>
				                </entry>
				            </scriptParams>
				            <priority>0</priority>
				        </notification>
				        <script code="org.meveo.service.script.selfcare.RegisterHierarchy" description="Register crm hierarchy">
				            <type>JAVA</type>
				            <script>
								package org.meveo.service.script.selfcare;
								
								import java.util.Map;
								
								import org.meveo.admin.exception.BusinessException;
								import org.meveo.api.account.AccountHierarchyApi;
								import org.meveo.api.dto.account.CRMAccountHierarchyDto;
								import org.meveo.api.exception.MeveoApiException;
								import org.meveo.commons.utils.JsonUtils;
								import org.meveo.model.admin.User;
								import org.slf4j.Logger;
								import org.slf4j.LoggerFactory;
								
								public class RegisterHierarchy extends org.meveo.service.script.Script {	
									private static final Logger log = LoggerFactory.getLogger(RegisterHierarchy.class);			
									public void execute(Map&lt;String, Object&gt; initContext) throws BusinessException {		
										log.info("Execute...");
										AccountHierarchyApi accountHierarchyApi = (AccountHierarchyApi) getServiceInterface("AccountHierarchyApi");
										String body = (String) initContext.get("body");
										log.info("body:"+body);
										CRMAccountHierarchyDto crmAccountHierarchyDto = JsonUtils.toObject(body, CRMAccountHierarchyDto.class);
										log.info("crmAccountHierarchyDto"+crmAccountHierarchyDto);		
										try {
											accountHierarchyApi.createCRMAccountHierarchy(crmAccountHierarchyDto);
										} catch (MeveoApiException e) {			
											e.printStackTrace();
										}	
									}
								}
				           </script>
				        </script>
				    </moduleItems>
				    <hierarchyType>C_UA</hierarchyType>
				</BusinessAccountModel>
	        	'
			WHERE id=-2;]]>
        </sql>
        
	</changeSet>
	
	<changeSet author="EdwardPLegaspi" id="#4150_20190424 - Bring back the timers">
        <insert tableName="meveo_timer">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />
            <column name="sc_d_o_month" value="*" />
            <column name="sc_d_o_week" value="*" />
            <column name="sc_hour" value="*" />
            <column name="sc_min" value="0" />
            <column name="sc_month" value="*" />
            <column name="sc_sec" value="0" />
            <column name="sc_year" value="*" />
            <column name="code" value="Hourly" />
            
            <column name="created" valueDate="2015-03-19 00:04:19.913" />
        </insert>
        <insert tableName="meveo_timer">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="sc_d_o_month" value="Last" />
            <column name="sc_d_o_week" value="0" />
            <column name="sc_hour" value="23" />
            <column name="sc_min" value="59" />
            <column name="sc_month" value="*" />
            <column name="sc_sec" value="59" />
            <column name="sc_year" value="*" />
            <column name="code" value="Monthly" />
            
            <column name="created" valueDate="2015-03-19 00:04:19.913" />
        </insert>
        <insert tableName="meveo_timer">
            <column name="id" valueNumeric="-3" />
            <column name="version" valueNumeric="0" />
            <column name="sc_d_o_month" value="*" />
            <column name="sc_d_o_week" value="*" />
            <column name="sc_hour" value="23" />
            <column name="sc_min" value="59" />
            <column name="sc_month" value="*" />
            <column name="sc_sec" value="59" />
            <column name="sc_year" value="*" />
            <column name="code" value="Daily-midnight" />
            
            <column name="created" valueDate="2017-06-29 00:04:19.913" />
        </insert>
    </changeSet>
	
	<changeSet id="#4082_20190404" author="SaidRamli">
        <sql dbms="postgresql"><![CDATA[INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-23, 0, 0, ${db.current.time}, 'org.meveo.service.script.DeleteCustomersScript', 'DeleteCustomersScript', 'JAVA', '
package org.meveo.service.script;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;

/**
 * 
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

	private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
			AccountOperationService.class.getSimpleName());
	private final CustomerService customerService = (CustomerService) getServiceInterface(
			CustomerService.class.getSimpleName());
	private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
			InvoiceService.class.getSimpleName());
	private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			SubscriptionService.class.getSimpleName());
	private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
			RatedTransactionService.class.getSimpleName());
	private final WalletService walletService = (WalletService) getServiceInterface(
			WalletService.class.getSimpleName());
	private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
			RejectedBillingAccountService.class.getSimpleName());
	private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
			CounterInstanceService.class.getSimpleName());
	private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
			CounterPeriodService.class.getSimpleName());
	private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
			OrderItemService.class.getSimpleName());
	private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
			ProductInstanceService.class.getSimpleName());
	private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
			BusinessEntityService.class.getSimpleName());
	private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
			WalletOperationService.class.getSimpleName());
	private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			ServiceInstanceService.class.getSimpleName());

	private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());
	
	@SuppressWarnings("rawtypes")
	private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
			ChargeInstanceService.class.getSimpleName());

	private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		log.debug(" >>> execute {} ", methodContext.entrySet());

		try {

			Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
			if (MapUtils.isEmpty(record)) {
				throw new BusinessException(String.format("Parameter RECORD is missing"));
			}

			final String customerCode = record.get("customerCode");
			Customer customer = customerService.findByCode(customerCode);
			if (customer == null) {
				throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
			}

			String noCheckVal = record.get("noCheck");
			if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
				throw new BusinessException(
						String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
			}
			boolean noCheck = "1".contentEquals(noCheckVal);

			if (!noCheck) {
				// If noCheck is 0 then the following conditions must be met in order to allow
				// deletion:
				// No unmatched AO
				// No open EDR/WO/RT

				this.checkUnmatchedAOs(customer);
				this.checkOpenEDRs(customer);
				this.checkOpenWOs(customer);
				this.checkOpenRTs(customer);
			}

			this.removeCustomerHirarchy(customer);

		} catch (BusinessException be) {
			throw be;
		} catch (Exception e) {
			log.error(" Error executing DeleteCustomersScript ", e);
			throw new BusinessException(e.getMessage());
		}
	}

	private void checkOpenEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenEDRs for customer = {} ", customer);
			String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
			
			Object count = edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId())
					.getSingleResult();
			log.debug(" count of open EDRs = {} ", count);
			log.debug(" End checkOpenEDRs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open EDRs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenWOs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenWOs for customer = {} ", customer);
			String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
			final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
					WalletOperationService.class.getSimpleName());

			Object count = walletOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open WOs = {} ", count);
			log.debug(" End checkOpenWOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open WOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenRTs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkOpenRTs for customer = {} ", customer);
			String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
			Object count = this.ratedTransactionService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open RTs = {} ", count);
			log.debug(" End checkOpenRTs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open RTs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkUnmatchedAOs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
			String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
			final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
					AccountOperationService.class.getSimpleName());
			Object count = accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of unmatched AOs = {} ", count);
			log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeCustomerHirarchy(Customer customer) throws BusinessException {
		log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

		//
		// A workaround for #4134 , no need for this method if #4134 is fixed (only
		// 6.1.X is concerned)!
		this.nullifyAOsSeller(customer);
      
      	this.removeWalletOperations(customer);
		this.removeChargeInstances(customer);
		// the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
		this.nullifySubCategoryInvoiceAgregatesWallet(customer);
		this.removeWalletInstances(customer);
		
		this.removePaymentHistory(customer);
		this.removeRatedTransactions(customer);
		this.removeInvoices(customer);


		this.removeServiceInstances(customer);
		this.removeAccess(customer);
		this.removeEDRs(customer);
		this.removeSubscriptions(customer);

		this.removeRejectedBAs(customer);

		this.removeCounterPeriods(customer);
		this.removeCounterInstances(customer);
		this.removeOrderItems(customer);
		this.removeProductInstances(customer);
		this.removeMatchingAmounts(customer);

		this.customerService.remove(customer);

		log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
	}

	private void removeEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);

			String query = "select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = edrService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} EDR to delete ", ids.size());

			for (Long id : ids) {
				edrService.remove(id);
			}

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeMatchingAmounts(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

			final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
			final String query = "select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = matchingAmountService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} MatchingAmount to delete ", ids.size());

			for (Long id : ids) {
				matchingAmountService.remove(id);
			}

			log.debug(" End removeMatchingAmounts for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeAccess(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeAccess for customer = {} ", customer);

			final AccessService accessService = (AccessService) getServiceInterface(
					AccessService.class.getSimpleName());

			final String query = "select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = accessService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} Access to delete ", ids.size());

			for (Long id : ids) {
				accessService.remove(id);
			}

			log.debug(" End removeAccess for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeServiceInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeServiceInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findServiceInstances(customer));
			log.debug(" {} ServiceInstance to delete ", ids.size());

			for (Long id : ids) {
				this.serviceInstanceService.remove(id);
			}

			log.debug(" End removeServiceInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findServiceInstances(Customer customer) {
		try {
			log.debug(" findServiceInstances for customer={} ", customer);
			String query = "select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.serviceInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findServiceInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeWalletOperations(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletOperations for customer = {} ", customer);

			Collection<Long> ids = safe(this.findWalletOperations(customer));
			log.debug(" {} WalletOperation to delete ", ids.size());

			for (Long id : ids) {
				this.walletOperationService.remove(id);
			}

			log.debug(" End removeWalletOperations for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findWalletOperations(Customer customer) {
		try {
			log.debug(" findWalletOperations for customer={} ", customer);
			String query = "select wo.id from WalletOperation wo where wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.walletOperationService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findWalletOperations : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 * 
	 * @param customer
	 * @throws BusinessException
	 */
	private void removePaymentHistory(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removePaymentHistory for customer = {} ", customer);

			String query = "delete from PaymentHistory ph1 where ph1.id in (select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode) ";
			int count = this.businessEntityService.getEntityManager().createQuery(query)
					.setParameter("customerCode", customer.getCode()).executeUpdate();

			log.debug(" {} PaymentHistory to delete ", count);
			log.debug(" End removePaymentHistory for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 * 
	 * @param customer
	 * @throws BusinessException
	 */
	private void nullifyAOsSeller(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

			String query = "UPDATE AccountOperation ao1 SET ao1.seller = null where ao1.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}
	
	private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);

			StringBuilder query = new StringBuilder( "UPDATE SubCategoryInvoiceAgregate subCat SET subCat.wallet = null ")
					.append(" where subCat.id in (select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId) ");
			
			int count = this.accountOperationService.getEntityManager().createQuery(query.toString()).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", count);
			log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
		
	}


	private void removeProductInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeProductInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findProductInstances(customer));
			log.debug(" {} ProductInstance to delete ", ids.size());

			for (Long id : ids) {
				this.productInstanceService.remove(id);
			}

			log.debug(" End removeProductInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findProductInstances(Customer customer) {
		try {
			log.debug(" findProductInstances for customer={} ", customer);
			String query = "select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.productInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findProductInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeOrderItems(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeOrderItem for customer = {} ", customer);

			Collection<Long> ids = safe(this.findOrderItems(customer));
			log.debug(" {} OrderItem to delete ", ids.size());

			for (Long id : ids) {
				this.orderItemService.remove(id);
			}

			log.debug(" End removeOrderItem for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findOrderItems(Customer customer) {
		try {
			log.debug(" findOrderItems for customer={} ", customer);
			String query = "select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.orderItemService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeCounterPeriods(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterPeriods for customer = {} ", customer);

			Collection<Long> ids = safe(this.findCounterPeriods(customer));
			log.debug(" {} CounterPeriod to delete ", ids.size());

			for (Long id : ids) {
				this.counterPeriodService.remove(id);
			}

			log.debug(" End removeCounterPeriods for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findCounterPeriods(Customer customer) {
		try {
			log.debug(" findCounterPeriods for customer={} ", customer);
			String query = "select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.counterPeriodService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeCounterInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findCounterInstances(customer));
			log.debug(" {} CounterInstance to delete ", ids.size());

			for (Long id : ids) {
				this.counterInstanceService.remove(id);
			}

			log.debug(" End removeCounterInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findCounterInstances(Customer customer) {
		try {
			log.debug(" findCounterInstances for customer={} ", customer);
			String query = "select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.counterInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeRejectedBAs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRejectedBAs for customer = {} ", customer);

			Collection<Long> ids = safe(this.findRejectedBillingAccounts(customer));
			log.debug(" {} RejectedBillingAccount to delete ", ids.size());

			for (Long id : ids) {
				this.rejectedBillingAccountService.remove(id);
			}

			log.debug(" End removeRejectedBAs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findRejectedBillingAccounts(Customer customer) {
		try {
			log.debug(" findRejectedBillingAccounts for customer={} ", customer);
			String query = "select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.rejectedBillingAccountService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findRejectedBillingAccounts : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeInvoices(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeInvoices for customer = {} ", customer);

			Collection<Long> ids = safe(this.findInvoicesIds(customer));
			log.debug(" {} Invoices to delete ", ids.size());

			for (Long id : ids) {
				this.invoiceService.remove(id);
			}

			log.debug(" End removeInvoices for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeWalletInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findWalletInstances(customer));
			log.debug(" {} WalletInstance to delete ", ids.size());

			for (Long id : ids) {
				// a workaround for #4132
				WalletInstance wallet = this.walletService.findById(id);
				wallet.getUserAccount().setWallet(null);

				this.walletService.remove(id);
			}

			log.debug(" End removeWalletInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findWalletInstances(Customer customer) {
		try {
			log.debug(" findWalletInstances for customer={} ", customer);
			String query = "select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.walletService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findWalletInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeRatedTransactions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRatedTransactions for customer = {} ", customer);

			Collection<Long> ids = safe(this.findRatedTransactions(customer));
			log.debug(" {} RTs to delete ", ids.size());

			for (Long id : ids) {
				this.ratedTransactionService.remove(id);
			}

			log.debug(" End removeRatedTransactions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}

	private List<Long> findRatedTransactions(Customer customer) {
		try {
			log.debug(" findRatedTransactions for customer={} ", customer);
			String query = "select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.ratedTransactionService.executeSelectQuery(query, queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findRatedTransactions : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeChargeInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeChargeInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findChargeInstances(customer));
			log.debug(" {} ChargeInstance to delete ", ids.size());
			for (Long ciId : ids) {
				this.chargeInstanceService.remove(ciId);
			}
			log.debug(" End removeChargeInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findChargeInstances(Customer customer) {
		try {
			log.debug(" findChargeInstances for customer={} ", customer);
			String query = "select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.chargeInstanceService.executeSelectQuery(query, queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findChargeInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
			Collection<Long> ids = safe(this.findSubscriptions(customer));
			log.debug(" {} Subscription to delete ", ids.size());

			for (Long subscriptionId : ids) {
				this.subscriptionService.remove(subscriptionId);
			}
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findSubscriptions(Customer customer) {
		try {
			log.debug(" findSubscriptions for customer={} ", customer);
			StringBuffer query = new StringBuffer(
					"select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer ");

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customer", customer);
			Object ids = this.subscriptionService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findSubscriptions : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private List<Long> findInvoicesIds(Customer customer) {
		try {
			log.debug(" findInvoicesIds for customer={} ", customer);
			StringBuffer query = new StringBuffer(
					"select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer =:customer ");

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customer", customer);
			Object ids = this.invoiceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on getSubscription : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private <T> Collection<T> safe(Collection<T> collection) {
		return collection == null ? Collections.EMPTY_LIST : collection;
	}
}');]]>
		</sql>
<!--        escape a limit of insert with text bigger than 4000 chars-->
        <sql dbms="oracle" endDelimiter="/">
            <![CDATA[
             declare
                scriptData Clob;
            begin
                scriptData := to_clob('package org.meveo.service.script;
import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

	private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
			AccountOperationService.class.getSimpleName());
	private final CustomerService customerService = (CustomerService) getServiceInterface(
			CustomerService.class.getSimpleName());
	private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
			InvoiceService.class.getSimpleName());
	private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			SubscriptionService.class.getSimpleName());
	private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
			RatedTransactionService.class.getSimpleName());
	private final WalletService walletService = (WalletService) getServiceInterface(
			WalletService.class.getSimpleName());
	private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
			RejectedBillingAccountService.class.getSimpleName());
	private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
			CounterInstanceService.class.getSimpleName());
	private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
			CounterPeriodService.class.getSimpleName());
	private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
			OrderItemService.class.getSimpleName());
	private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
			ProductInstanceService.class.getSimpleName());
	private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
			BusinessEntityService.class.getSimpleName());
	private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
			WalletOperationService.class.getSimpleName());
	private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			ServiceInstanceService.class.getSimpleName());

	private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

	@SuppressWarnings("rawtypes")
	private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
			ChargeInstanceService.class.getSimpleName());

	private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		log.debug(" >>> execute {} ", methodContext.entrySet());

		try {

			Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
			if (MapUtils.isEmpty(record)) {
				throw new BusinessException(String.format("Parameter RECORD is missing"));
			}

			final String customerCode = record.get("customerCode");
			Customer customer = customerService.findByCode(customerCode);
			if (customer == null) {
				throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
			}

			String noCheckVal = record.get("noCheck");
			if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
				throw new BusinessException(
						String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
			}
			boolean noCheck = "1".contentEquals(noCheckVal);

			if (!noCheck) {
				// If noCheck is 0 then the following conditions must be met in order to allow
				// deletion:
				// No unmatched AO
				// No open EDR/WO/RT

				this.checkUnmatchedAOs(customer);
				this.checkOpenEDRs(customer);
				this.checkOpenWOs(customer);
				this.checkOpenRTs(customer);
			}

			this.removeCustomerHirarchy(customer);

		} catch (BusinessException be) {
			throw be;
		} catch (Exception e) {
			log.error(" Error executing DeleteCustomersScript ", e);
			throw new BusinessException(e.getMessage());
		}
	}

	private void checkOpenEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenEDRs for customer = {} ", customer);
			String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Object count = edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId())
					.getSingleResult();
			log.debug(" count of open EDRs = {} ", count);
			log.debug(" End checkOpenEDRs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open EDRs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenWOs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenWOs for customer = {} ", customer);
			String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
			final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
					WalletOperationService.class.getSimpleName());

			Object count = walletOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open WOs = {} ", count);
			log.debug(" End checkOpenWOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open WOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenRTs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkOpenRTs for customer = {} ", customer);
			String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
			Object count = this.ratedTransactionService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open RTs = {} ", count);
			log.debug(" End checkOpenRTs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open RTs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkUnmatchedAOs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
			String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
			final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
					AccountOperationService.class.getSimpleName());
			Object count = accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of unmatched AOs = {} ", count);
			log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeCustomerHirarchy(Customer customer) throws BusinessException {
		log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

		//
		// A workaround for #4134 , no need for this method if #4134 is fixed (only
		// 6.1.X is concerned)!
		this.nullifyAOsSeller(customer);

      	this.removeWalletOperations(customer);
		this.removeChargeInstances(customer);
		// the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
		this.nullifySubCategoryInvoiceAgregatesWallet(customer);
		this.removeWalletInstances(customer);

		this.removePaymentHistory(customer);
		this.removeRatedTransactions(customer);
		this.removeInvoices(customer);


		this.removeServiceInstances(customer);
		this.removeAccess(customer);
		this.removeEDRs(customer);
		this.removeSubscriptions(customer);

		this.removeRejectedBAs(customer);

		this.removeCounterPeriods(customer);
		this.removeCounterInstances(customer);
		this.removeOrderItems(customer);
		this.removeProductInstances(customer);
		this.removeMatchingAmounts(customer);

		this.customerService.remove(customer);

		log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
	}

	private void removeEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);

			String query = "select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = edrService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} EDR to delete ", ids.size());

			for (Long id : ids) {
				edrService.remove(id);
			}

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeMatchingAmounts(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

			final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
			final String query = "select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = matchingAmountService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} MatchingAmount to delete ", ids.size());

			for (Long id : ids) {
				matchingAmountService.remove(id);
			}

			log.debug(" End removeMatchingAmounts for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeAccess(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeAccess for customer = {} ", customer);

			final AccessService accessService = (AccessService) getServiceInterface(
					AccessService.class.getSimpleName());

			final String query = "select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object result = accessService.executeSelectQuery(query.toString(), queryParams);

			Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
			log.debug(" {} Access to delete ", ids.size());

			for (Long id : ids) {
				accessService.remove(id);
			}

			log.debug(" End removeAccess for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeServiceInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeServiceInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findServiceInstances(customer));
			log.debug(" {} ServiceInstance to delete ", ids.size());

			for (Long id : ids) {
				this.serviceInstanceService.remove(id);
			}

			log.debug(" End removeServiceInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findServiceInstances(Customer customer) {
		try {
			log.debug(" findServiceInstances for customer={} ", customer);
			String query = "select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.serviceInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findServiceInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeWalletOperations(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletOperations for customer = {} ", customer);

			Collection<Long> ids = safe(this.findWalletOperations(customer));
			log.debug(" {} WalletOperation to delete ", ids.size());

			for (Long id : ids) {
				this.walletOperationService.remove(id);
			}

			log.debug(" End removeWalletOperations for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findWalletOperations(Customer customer) {
		try {
			log.debug(" findWalletOperations for customer={} ", customer);
			String query = "select wo.id from WalletOperation wo where wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.walletOperationService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findWalletOperations : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void removePaymentHistory(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removePaymentHistory for customer = {} ", customer);

			String query = "delete from PaymentHistory ph1 where ph1.id in (select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode) ";
			int count = this.businessEntityService.getEntityManager().createQuery(query)
					.setParameter("customerCode", customer.getCode()).executeUpdate();

			log.debug(" {} PaymentHistory to delete ", count);
			log.debug(" End removePaymentHistory for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void nullifyAOsSeller(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

			String query = "UPDATE AccountOperation ao1 SET ao1.seller = null where ao1.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);

			StringBuilder query = new StringBuilder( "UPDATE SubCategoryInvoiceAgregate subCat SET subCat.wallet = null ")
					.append(" where subCat.id in (select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId) ");

			int count = this.accountOperationService.getEntityManager().createQuery(query.toString()).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", count);
			log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeProductInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeProductInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findProductInstances(customer));
			log.debug(" {} ProductInstance to delete ", ids.size());

			for (Long id : ids) {
				this.productInstanceService.remove(id);
			}

			log.debug(" End removeProductInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findProductInstances(Customer customer) {
		try {
			log.debug(" findProductInstances for customer={} ", customer);
			String query = "select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.productInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findProductInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeOrderItems(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeOrderItem for customer = {} ", customer);

			Collection<Long> ids = safe(this.findOrderItems(customer));
			log.debug(" {} OrderItem to delete ", ids.size());

			for (Long id : ids) {
				this.orderItemService.remove(id);
			}

			log.debug(" End removeOrderItem for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findOrderItems(Customer customer) {
		try {
			log.debug(" findOrderItems for customer={} ", customer);
			String query = "select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.orderItemService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeCounterPeriods(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterPeriods for customer = {} ", customer);

			Collection<Long> ids = safe(this.findCounterPeriods(customer));
			log.debug(" {} CounterPeriod to delete ", ids.size());

			for (Long id : ids) {
				this.counterPeriodService.remove(id);
			}

			log.debug(" End removeCounterPeriods for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findCounterPeriods(Customer customer) {
		try {
			log.debug(" findCounterPeriods for customer={} ", customer);
			String query = "select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.counterPeriodService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeCounterInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findCounterInstances(customer));
			log.debug(" {} CounterInstance to delete ", ids.size());

			for (Long id : ids) {
				this.counterInstanceService.remove(id);
			}

			log.debug(" End removeCounterInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findCounterInstances(Customer customer) {
		try {
			log.debug(" findCounterInstances for customer={} ", customer);
			String query = "select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.counterInstanceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findCounterInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeRejectedBAs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRejectedBAs for customer = {} ", customer);

			Collection<Long> ids = safe(this.findRejectedBillingAccounts(customer));
			log.debug(" {} RejectedBillingAccount to delete ", ids.size());

			for (Long id : ids) {
				this.rejectedBillingAccountService.remove(id);
			}

			log.debug(" End removeRejectedBAs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findRejectedBillingAccounts(Customer customer) {
		try {
			log.debug(" findRejectedBillingAccounts for customer={} ", customer);
			String query = "select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.rejectedBillingAccountService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findRejectedBillingAccounts : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeInvoices(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeInvoices for customer = {} ", customer);

			Collection<Long> ids = safe(this.findInvoicesIds(customer));
			log.debug(" {} Invoices to delete ", ids.size());

			for (Long id : ids) {
				this.invoiceService.remove(id);
			}

			log.debug(" End removeInvoices for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeWalletInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findWalletInstances(customer));
			log.debug(" {} WalletInstance to delete ", ids.size());

			for (Long id : ids) {
				// a workaround for #4132
				WalletInstance wallet = this.walletService.findById(id);
				wallet.getUserAccount().setWallet(null);

				this.walletService.remove(id);
			}

			log.debug(" End removeWalletInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findWalletInstances(Customer customer) {
		try {
			log.debug(" findWalletInstances for customer={} ", customer);
			String query = "select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.walletService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findWalletInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeRatedTransactions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRatedTransactions for customer = {} ", customer);

			Collection<Long> ids = safe(this.findRatedTransactions(customer));
			log.debug(" {} RTs to delete ", ids.size());

			for (Long id : ids) {
				this.ratedTransactionService.remove(id);
			}

			log.debug(" End removeRatedTransactions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}

	private List<Long> findRatedTransactions(Customer customer) {
		try {
			log.debug(" findRatedTransactions for customer={} ", customer);
			String query = "select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.ratedTransactionService.executeSelectQuery(query, queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findRatedTransactions : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeChargeInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeChargeInstances for customer = {} ", customer);

			Collection<Long> ids = safe(this.findChargeInstances(customer));
			log.debug(" {} ChargeInstance to delete ", ids.size());
			for (Long ciId : ids) {
				this.chargeInstanceService.remove(ciId);
			}
			log.debug(" End removeChargeInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findChargeInstances(Customer customer) {
		try {
			log.debug(" findChargeInstances for customer={} ", customer);
			String query = "select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customerId", customer.getId());
			Object ids = this.chargeInstanceService.executeSelectQuery(query, queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findChargeInstances : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private void removeSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
			Collection<Long> ids = safe(this.findSubscriptions(customer));
			log.debug(" {} Subscription to delete ", ids.size());

			for (Long subscriptionId : ids) {
				this.subscriptionService.remove(subscriptionId);
			}
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private List<Long> findSubscriptions(Customer customer) {
		try {
			log.debug(" findSubscriptions for customer={} ", customer);
			StringBuffer query = new StringBuffer(
					"select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer ");

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customer", customer);
			Object ids = this.subscriptionService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on findSubscriptions : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private List<Long> findInvoicesIds(Customer customer) {
		try {
			log.debug(" findInvoicesIds for customer={} ", customer);
			StringBuffer query = new StringBuffer(
					"select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer =:customer ");

			Map<String, Object> queryParams = new HashMap<>();
			queryParams.put("customer", customer);
			Object ids = this.invoiceService.executeSelectQuery(query.toString(), queryParams);

			return ids != null ? ((List<Long>) ids) : null;
		} catch (Exception e) {
			log.error(" Error on getSubscription : [{}] ", e.getMessage(), e);
			return null;
		}
	}

	private <T> Collection<T> safe(Collection<T> collection) {
		return collection == null ? Collections.EMPTY_LIST : collection;
	}
}');

INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script)
            VALUES (-23, 0, 0, ${db.current.time}, 'org.meveo.service.script.DeleteCustomersScript', 'DeleteCustomersScript', 'JAVA', scriptData);
]]>
        end;
        /
        </sql>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-26" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="DeleteCustomersScript_JOB" />
            <column name="description" value="DeleteCustomersScript_JOB" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="DeleteCustomersScript_JOB" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            
            <column name="cf_values">
	            <![CDATA[{"FlatFileProcessingJob_mappingConf":[{"string":"<beanio xmlns=\"http://www.beanio.org/2012/03\" \r\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n      xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n      <stream name=\"RECORD\" format=\"csv\" strict=\"true\">\r\n        <parser>\r\n          <property name=\"delimiter\" value=\";\" />\r\n        </parser>     \r\n        <record name=\"customer\"  minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">  \r\n           <field name=\"customerCode\" minOccurs=\"0\" position=\"0\" />\r\n           <field name=\"noCheck\" minOccurs=\"0\" position=\"1\"/>\r\n        </record> \r\n      </stream>\r\n    </beanio>"}]
						,"FlatFileProcessingJob_recordVariableName":[{"string":"RECORD"}]
						,"FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}]
						,"FlatFileProcessingJob_fileNameExtension":[{"string":"csv"}]
						,"FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.DeleteCustomersScript"}]
						,"FlatFileProcessingJob_inputDir":[{"string":"/batch/customer/delete"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
            
          </insert>
	</changeSet>

     <changeSet id="3139_20190225" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-21" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-02-25 00:00:00.000" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="BillingRunJob" />
            <column name="code" value="BillingRunJob" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="timerentity_id" valueNumeric="-2" />
            <column name="uuid" value="JOB_BillingRunJob" />
        </insert>
    </changeSet>
    <changeSet id="4316_20190625_job" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-22" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-06-25 00:00:00.000" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="ScriptingJob" />
            <column name="code" value="ValidateBR_Job" />
            <column name="creator" value="opencell.admin" />
            <column name="following_job_id" valueNumeric="-11" />
            <column name="description" value="Validates *all* Billing Runs"></column>
            <column name="uuid" value="ValidateBR_Job" />
            <column name="cf_values" value='{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ValidateBRScript"}}]}'></column>
        </insert>
    </changeSet>
    <changeSet id="4316_20190625_script" author="horriKhalid">
        <sql><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-24, 0, 0, ${db.current.time}, 'org.meveo.service.script.ValidateBRScript', 'Validate Billing Runs', 'JAVA', '
			package org.meveo.service.script;

import java.util.List;
import java.util.Map;

import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.BillingRun;
import org.meveo.model.billing.BillingRunStatusEnum;
import org.meveo.service.billing.impl.BillingRunExtensionService;
import org.meveo.service.billing.impl.BillingRunService;

/**
 * @author phung
 *
 */
public class ValidateBRScript extends Script {

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		BillingRunService billingRunService = (BillingRunService) getServiceInterface("BillingRunService");

		BillingRunExtensionService billingRunExtensionService = (BillingRunExtensionService) getServiceInterface(
				"BillingRunExtensionService");

		if (billingRunService != null) {
			List<BillingRun> billingRuns = billingRunService.getbillingRuns(BillingRunStatusEnum.PREINVOICED,  BillingRunStatusEnum.POSTINVOICED);

			for (BillingRun billingRun : billingRuns) {

				try {
					billingRunExtensionService.updateBillingRun(billingRun.getId(), null, null,
							BillingRunStatusEnum.POSTVALIDATED, null);
				} catch (Exception e) {
					System.err.println("Error " + e.getMessage());
				}
			}

		}

	}
}

        ');
        ]]></sql>
    </changeSet>
    <changeSet id="4403_20190701_export_job" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-23" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-07-01 00:00:00.000" />
            <column name="job_category" value="IMPORT_HIERARCHY" />
            <column name="job_template" value="ExportMediationEntityJob" />
            <column name="code" value="ExportMediationEntityJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Export open EDR, WO, RTx"/>
            <column name="uuid" value="ExportMediationEntityJob" />
            <column name="cf_values" value='{"ExportMediationEntityJob_lastTransactionDate":[{"date":""}],"ExportMediationEntityJob_firstTransactionDate":[{"date":"2017-01-01T00:00:00Z"}],"ExportMediationEntityJob_rtCf":[{"boolean":true}],"ExportMediationEntityJob_edrCf":[{"boolean":true}],"ExportMediationEntityJob_woCf":[{"boolean":true}]}'></column>
        </insert>
    </changeSet>
    <changeSet id="4403_20190701_purge_job" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-24" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-07-01 00:00:00.000" />
            <column name="job_category" value="UTILS" />
            <column name="job_template" value="PurgeMediationDataJob" />
            <column name="code" value="PurgeMediationDataJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Purge not open EDR, WO, RTx"/>
            <column name="uuid" value="PurgeMediationDataJob" />
            <column name="cf_values" value='{"PurgeMediationDataJob_woCf":[{"boolean":true}],"PurgeMediationDataJob_firstTransactionDate":[{"date":"2017-01-01T00:00:00Z"}],"PurgeMediationDataJob_edrCf":[{"boolean":true}],"PurgeMediationDataJob_lastTransactionDate":[{"date":""}],"PurgeMediationDataJob_rtCf":[{"boolean":true}]}'></column>
        </insert>
    </changeSet>
    <changeSet id="4403_20190701_import_job" author="horriKhalid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-25" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-07-01 00:00:00.000" />
            <column name="job_category" value="IMPORT_HIERARCHY" />
            <column name="job_template" value="ImportMediationEntityJob" />
            <column name="code" value="ImportMediationEntityJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Import open EDR, WO, RTx"></column>
            <column name="uuid" value="ImportMediationEntityJob" />
        </insert>
    </changeSet>
    <changeSet id="#4150_20190717 - Error while running SALES_JOURNAL report extracts" author="Mohammed_EL-AZZOUZI">
		<update tableName="dwh_report_extract">
			<column name="sql_query" >
			                <![CDATA[SELECT
				    TO_CHAR(ao.invoice_date,'MM') AS "Mois",
				    TO_CHAR(ao.invoice_date,'DD/MM/YYYY') AS "Date facture",
				    text('HG') AS "Code comptable",
				    ae.code AS "Client facturé",
				    text('MAI') AS "Type article",
				    split_part(bac.code, ',', 6) AS "Famille statistique",
				    split_part(bac.code, ',', 2) AS "Article",
				    trim(TO_CHAR(ia.amount_without_tax,'9999990D00')) AS "Montant HT",
				    trim(TO_CHAR(ia.quantity,'9999990')) AS "Qté facturée",
				    ao.reference AS "No facture",
				    ao.description AS "Catégorie facture",
				    ao.code AS "Type de pièce",
				    text('VEN') AS "Journal"
				FROM
				    account_entity ae
				INNER JOIN ar_account_operation ao ON ao.customer_account_id = ae.id
				INNER JOIN billing_invoice i ON i.invoice_number = ao.reference
				INNER JOIN billing_invoice_agregate ia ON (ia.invoice_id = i.id AND type = 'F')
				LEFT JOIN billing_accounting_code bac ON bac.id = ia.accounting_code_id
				WHERE :START_DATE<>:END_DATE
				AND ae.account_type = 'ACCT_CA'
				AND ao.invoice_date >= to_date('01/' || TO_CHAR(CURRENT_DATE,'MM/YYYY'),'DD/MM/YYYY') + interval '-12 month'
				AND ao.invoice_date <= to_date('01/' || TO_CHAR(CURRENT_DATE,'MM/YYYY'),'DD/MM/YYYY') + interval '0 month'
				ORDER BY
				    ae.code,
				    ao.code,
				    split_part(bac.code, ',', 6),
				    split_part(bac.code, ',', 2)
			    ]]></column>
			    <where>code='SALES_JOURNAL'</where>
		</update>
	</changeSet>
    <changeSet id="#5417_20200929 - Error while running CUSTOMERS_PER_SELLER report extracts" author="Mohamed-Ali-HAMMAL">
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
					        , ce.description AS "Seller description"
					        , coalesce(ce.code, '') AS "Customer code"
					        , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
					from  crm_seller s left
					        OUTER JOIN crm_customer c  on c.seller_id = s.id left
					        OUTER JOIN account_entity ce  on c.id = ce.id
					where( ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
					order by ce.code
			    ]]></column>
            <where>code='CUSTOMERS_PER_SELLER'</where>
        </update>
    </changeSet>
    <changeSet id="#4449_20190724" author="AbdellatifBARI">
        <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-44" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="DBT_TRS" />
            <column name="description" value="Debit for credit transfer" />
            <column name="occ_category" value="DEBIT" />
        </insert>
        <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-45" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="CRD_TRS" />
            <column name="description" value="Credit for debit transfer" />
            <column name="occ_category" value="CREDIT" />
        </insert>
    </changeSet>

    <changeSet id="#4550_20190904" author="AbdellatifBARI">
        <update tableName="billing_trading_country">
            <column name="code" value="US"></column>
            <column name="description" value="United States"></column>
            <column name="uuid" value="Trading_Country_US"></column>
            <where>id=-1</where>
        </update>
        <update tableName="billing_trading_country">
            <column name="code" value="FR"></column>
            <column name="description" value="France"></column>
            <column name="uuid" value="Trading_Country_FR"></column>
            <where>id=-2</where>
        </update>
    </changeSet>

    <changeSet id="#4064_11092019" author="AbdelmounaimAkadid">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-27" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-07-01 00:00:00.000" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="UpdateUnpaidInvoiceStatusJob" />
            <column name="code" value="UpdateUnpaidInvoiceStatusJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Update Status of Unpaid Invoices"></column>
            <column name="timerentity_id" valueNumeric="-3" />
            <column name="uuid" value="UpdateUnpaidInvoiceStatusJob" />
        </insert>
    </changeSet>

    <changeSet id="4804_20191205" author="MohamedSTITANE">
        <update tableName="meveo_job_instance" >
            <column name="cf_values"
                    value='{ "ExportMediationEntityJob_rtStatusCf": [ { "listString": [ "BILLED", "CANCELED", "OPEN", "REJECTED", "RERATED" ] } ], "ExportMediationEntityJob_maxResult": [ { "long": 1000 } ], "ExportMediationEntityJob_edrStatusCf": [ { "listString": [ "AGGREGATED", "MEDIATING", "OPEN", "RATED", "REJECTED" ] } ], "ExportMediationEntityJob_woStatusCf": [ { "listString": [ "CANCELED", "OPEN", "RERATED", "RESERVED", "SCHEDULED", "TO_RERATE", "TREATED" ] } ], "ExportMediationEntityJob_firstTransactionDate": [ { "date": "2017-12-01T00:00:00Z" } ] }'/>
            <where>id = -23</where>
        </update>
        <update tableName="meveo_job_instance" >
            <column name="cf_values"
                    value='{"PurgeMediationDataJob_edrStatusCf":[ { "listString":[ "AGGREGATED", "MEDIATING", "OPEN", "RATED", "REJECTED" ] } ], "PurgeMediationDataJob_firstTransactionDate":[ { "date":"2017-12-01T00:00:00Z" } ], "PurgeMediationDataJob_woStatusCf":[ { "listString":[ "CANCELED", "OPEN", "RERATED", "RESERVED", "SCHEDULED", "TO_RERATE", "TREATED" ] } ], "PurgeMediationDataJob_rtStatusCf":[ { "listString":[ "BILLED", "CANCELED", "OPEN", "REJECTED", "RERATED" ] } ] }'/>
            <where>id = -24</where>
        </update>
    </changeSet>
    
    
    <changeSet author="Mohammed_ELAZZOUZI" id="rebuild-data-cat_unit_of_measure">
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-1" />
            <column name="symbol" value="B" />
            <column name="code" value="byte" />
            <column name="description" value="Byte" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-2" />
            <column name="symbol" value="KB" />
            <column name="code" value="kilobyte" />
            <column name="description" value="Kilobyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-3" />
            <column name="symbol" value="MB" />
            <column name="code" value="megabyte" />
            <column name="description" value="Megabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-4" />
            <column name="symbol" value="GB" />
            <column name="code" value="gigabyte" />
            <column name="description" value="Gigabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-5" />
            <column name="symbol" value="TB" />
            <column name="code" value="terabyte" />
            <column name="description" value="Terabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000000000" />
        </insert>
                <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-6" />
            <column name="symbol" value="KiB" />
            <column name="code" value="kibi" />
            <column name="description" value="Kibibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1024" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-7" />
            <column name="symbol" value="MiB" />
            <column name="code" value="mebibyte" />
            <column name="description" value="Mebibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1048576" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-8" />
            <column name="symbol" value="GiB" />
            <column name="code" value="gibibyte" />
            <column name="description" value="Gibibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1073741824" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-9" />
            <column name="symbol" value="TiB" />
            <column name="code" value="tebibyte" />
            <column name="description" value="Tebibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1099511627776" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-10" />
            <column name="symbol" value="s" />
            <column name="code" value="second" />
            <column name="description" value="Second" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-11" />
            <column name="symbol" value="min" />
            <column name="code" value="minute" />
            <column name="description" value="Minute" />
            <column name="multiplicator" valueNumeric="60" />
            <column name="parent_id" valueNumeric="-10" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-12" />
            <column name="symbol" value="h" />
            <column name="code" value="hour" />
            <column name="description" value="Hour" />
            <column name="multiplicator" valueNumeric="3600" />
            <column name="parent_id" valueNumeric="-10" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />
            
            <column name="id" valueNumeric="-13" />
            <column name="symbol" value="msg" />
            <column name="code" value="message" />
            <column name="description" value="Message" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
    </changeSet>
    
    <changeSet id="500X_20200218_purge_job" author="mohamed.el.youssoufi">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-28" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-02-18 00:00:00.000" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="PurgeMediationDataJobV2" />
            <column name="code" value="PurgeMediationDataJobV2" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Purge not open EDR, WO, RTx"/>
            <column name="uuid" value="PurgeMediationDataJobV2" />
            <column name="cf_values" value='{"PurgeMediationDataJobV2_firstTransactionDate":[{"date":"2017-01-01T00:00:00Z"}]}'></column>
        </insert>
    </changeSet>
    
    <changeSet id="#4924_20200219" author="anasseh">        
      <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="PAYPAL" />
        </insert>
      <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="STRIPE" />
        </insert>        
   </changeSet> 
   
    <changeSet id="#4924_20200219_2" author="anasseh">  
       <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-46" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="PAY_PAL" />
            <column name="description" value="Payment Paypal" />
            <column name="occ_category" value="CREDIT" />
        </insert>
       <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-47" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="PAY_STP" />
            <column name="description" value="Payment Stripe" />
            <column name="occ_category" value="CREDIT" />
        </insert>        
      </changeSet>

      <changeSet id="#5308_20200618 - Add script" author="AndriusKarpavicius">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.validation.CheckReferencesWhenDeletingScript" />
            <column name="src_type" value="JAVA_CLASS" />
            <column name="description" value="Data integrity check at deletion - reference to custom table"/>
            <column name="created" valueDate="${db.current.time}" />
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.validation.CheckValidityDatesScript" />
            <column name="src_type" value="JAVA_CLASS" />
            <column name="description" value="Data integrity check at create - update - record validity overlap"/>
            <column name="created" valueDate="${db.current.time}" />
        </insert>
      </changeSet>

	<changeSet id="#5303_20200707 - CDR and Mediation" author="AmineTazi">
		<insert tableName="adm_permission">
            <column name="id" valueNumeric="-119" />
            <column name="name" value="CDR Manager" />
            <column name="permission" value="cdrManager" />
        </insert>
        <insert tableName="adm_permission">
            <column name="id" valueNumeric="-120" />
            <column name="name" value="CDR Visualizer" />
            <column name="permission" value="cdrVisualizer" />
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-119"></column>
        </insert>
                <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-120"></column>
        </insert>
	</changeSet>
	<changeSet id="#5418_20201030" author="Mohammed_ELAZZOUZI">
	    <insert tableName="adm_role">
            <column name="id" valueNumeric="-200" />
            <column name="version" valueNumeric="0" />
            <column name="role_description" value="API v2 full access" />
            <column name="role_name" value="APIv2_FULL_ACCESS" />
        </insert>
        <insert tableName="adm_user_role">
            <column name="user_id" valueNumeric="-1" />
            <column name="role_id" valueNumeric="-200" />
        </insert>
        <insert tableName="adm_user_role">
            <column name="user_id" valueNumeric="-2" />
            <column name="role_id" valueNumeric="-200" />
        </insert>
	</changeSet>
 	<changeSet id="#5303_20200814 - CDR and Mediation" author="AmineTazi">
		<insert tableName="adm_permission">
            <column name="id" valueNumeric="-121" />
            <column name="name" value="CDR Rate Manager" />
            <column name="permission" value="cdrRateManager" />
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-121"></column>
        </insert>
	</changeSet>

    <changeSet id="#5425_20200930 - Failed to execute some report extract" author="Mohamed-Ali-HAMMAL">
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
					        , ce.description AS "Seller description"
					        , coalesce(ce.code, '') AS "Customer code"
					        , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
					from  crm_seller s left
					        OUTER JOIN crm_customer c  on c.seller_id = s.id left
					        OUTER JOIN account_entity ce  on c.id = ce.id
					where( ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
					order by ce.code
			    ]]></column>
            <where>code='CUSTOMERS_PER_SELLER'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , coalesce(ce.code, '') AS "Customer code"
                    , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
                    , coalesce(cae.code, '') AS "Customer Account code"
                    , coalesce(replace(cae.description, ',', ' '), '') AS "Customer Account description"
                    , coalesce(bae.code, '') AS "Billing Account code"
                    , coalesce(replace(bae.description, ',', ' '), '') AS "Billing Account description"
                    , coalesce(uae.code, '') AS "User Account code"
                    , coalesce(replace(uae.description, ',', ' '), '') AS "User Account description"
                    , coalesce(su.code, '') AS "Subscription code"
                    , coalesce(replace(su.description, ',', ' '), '') AS "Subscription description"
                    , coalesce(ap.acces_user_id, '') AS "Access Point id"
                from  crm_seller s full
                    OUTER JOIN crm_customer c  on c.seller_id = s.id full
                    OUTER JOIN account_entity ce  on c.id = ce.id full
                    OUTER JOIN ar_customer_account ca  on ca.customer_id = c.id full
                    OUTER JOIN account_entity cae  on ca.id = cae.id full
                    OUTER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id full
                    OUTER JOIN account_entity bae  on ba.id = bae.id full
                    OUTER JOIN billing_user_account ua  on ua.billing_account_id = ba.id full
                    OUTER JOIN account_entity uae  on ua.id = uae.id full
                    OUTER JOIN billing_subscription su  on su.user_account_id = ua.id full
                    OUTER JOIN medina_access ap  on ap.subscription_id = su.id
                where ce.code ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or cae.code ilike '%'
                    || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%'
                    || :SEARCH_CRITERION || '%'  or uae.code ilike '%' || :SEARCH_CRITERION
                    || '%'  or uae.description ilike '%' || :SEARCH_CRITERION || '%'  or su.code ilike '%'
                    || :SEARCH_CRITERION || '%'  or su.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ap.acces_user_id ilike '%' || :SEARCH_CRITERION || '%'
                order by ce.code
                    ,cae.code
                    ,bae.code
                    ,uae.code
                    ,su.code
                    ,ap.acces_user_id
			    ]]></column>
            <where>code='FULL_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
                    , ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , ce.code AS "Customer code"
                    , ce.description AS "Customer description"
                    , cae.code AS "Customer Account code"
                    , cae.description AS "Customer Account description"
                    , bae.code AS "Billing Account code"
                    , bae.description AS "Billing Account description"
                    , it.code AS "Invoice type code"
                    , it.description AS "Invoice type description"
                    , to_char(sum(i.amount_without_tax), '9999999990.00') AS "Amount without tax"
                    , to_char(sum(i.amount_with_tax), '9999999990.00') AS "Amount with tax"
                from crm_seller s
                    INNER JOIN crm_customer c  on c.seller_id = s.id
                    INNER JOIN account_entity ce  on c.id = ce.id
                    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                    INNER JOIN account_entity cae  on ca.id = cae.id
                    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                    INNER JOIN account_entity bae  on ba.id = bae.id
                    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or cae.code ilike '%' || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  )  group by date_trunc('month', i.invoice_date)
                    , it.code
                    , it.description
                    , ce.code
                    , ce.description
                    , cae.code
                    , cae.description
                    , bae.code
                    , bae.description order by date_trunc('month', i.invoice_date) DESC
                    , it.code DESC
                    , ce.code
                    , cae.code
                    , bae.code
			    ]]></column>
            <where>code='INVOICED_BA_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS  Month
                        , ce.code AS  "Seller code"
                        , ce.description AS  "Seller description"
                        , it.code AS  "Invoice type code"
                        , it.description AS  "Invoice type description"
                        , to_char(sum(i.amount_without_tax), '9999999990.00') AS  "Amount without tax"
                        , to_char(sum(i.amount_with_tax), '9999999990.00') AS  "Amount with tax"
                    from crm_seller s
                        INNER JOIN crm_customer c  on c.seller_id = s.id
                        INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                        INNER JOIN account_entity ce  on c.id = ce.id
                        INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                        INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                        INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                    where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || 'month' AS INTERVAL))
                    and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
                    group by date_trunc('month', i.invoice_date)
                        , it.code
                        , it.description
                        , ce.code
                        , ce.description order by date_trunc('month', i.invoice_date) DESC
                        , it.code DESC
                        , ce.code
			    ]]></column>
            <where>code='INVOICED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
                    , to_char(i.invoice_date, 'YYYY-MM-DD') AS "Invoice date"
                    , i.invoice_number AS "Invoice number"
                    , to_char(i.amount_without_tax, '9999999990.00') AS "Amount without tax"
                    , to_char(i.amount_with_tax, '9999999990.00') AS "Amount with tax"
                    , it.code AS "Invoice type code"
                    , it.description AS "Invoice type description"
                    , ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , ce.code AS "Customer code"
                    , ce.description AS "Customer description"
                    , cae.code AS "Customer Account code"
                    , cae.description AS "Customer Account description"
                    , bae.code AS "Billing Account code"
                    , bae.description AS "Billing Account description"
                from crm_seller s
                    INNER JOIN crm_customer c  on c.seller_id = s.id
                    INNER JOIN account_entity ce  on c.id = ce.id
                    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                    INNER JOIN account_entity cae  on ca.id = cae.id
                    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                    INNER JOIN account_entity bae  on ba.id = bae.id
                    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or cae.code ilike '%' || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  )
                order by date_trunc('month', i.invoice_date) DESC
                    , i.invoice_date DESC
                    , it.code
                    , i.invoice_number
			    ]]></column>
            <where>code='INVOICES'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
                ,ce.code AS "Customer code"
                ,ce.description AS "Customer description"
                ,cae.code AS "Customer Account code"
                ,cae.description AS "Customer Account description"
                ,bae.code AS "Billing Account code"
                ,bae.description AS "Billing Account description"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'DEBIT'
                                THEN ao.amount
                            ELSE 0
                            END), '99999999990.00') AS "Amount DEBIT"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'CREDIT'
                                THEN ao.amount
                            ELSE 0
                            END), '99999999990.00') AS "Amount CREDIT"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'DEBIT'
                                THEN ao.amount
                            ELSE - ao.amount
                            END), '99999999990.00') AS "Balance"
            FROM crm_seller s
                INNER JOIN crm_customer c ON c.seller_id = s.id
                INNER JOIN account_entity ce ON c.id = ce.id
                INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
                INNER JOIN account_entity cae ON ca.id = cae.id
                INNER JOIN billing_billing_account ba ON ba.customer_account_id = ca.id
                INNER JOIN account_entity bae ON ba.id = bae.id
                INNER JOIN billing_invoice i ON i.billing_account_id = ba.id
                INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
                    AND ao.reference = i.invoice_number
                    AND ao.invoice_date = i.invoice_date
                    AND ao.amount = abs(i.amount_with_tax)
            WHERE ao.invoice_date IS NOT NULL
                AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                AND (
                    ce.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR ce.description ilike '%' || :SEARCH_CRITERION || '%'
                    OR cae.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR cae.description ilike '%' || :SEARCH_CRITERION || '%'
                    OR bae.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR bae.description ilike '%' || :SEARCH_CRITERION || '%'
                    )
            GROUP BY date_trunc('month', ao.invoice_date)
                ,ce.code
                ,ce.description
                ,cae.code
                ,cae.description
                ,bae.code
                ,bae.description
            ORDER BY date_trunc('month', ao.invoice_date) DESC
                ,ce.code
                ,cae.code
                ,bae.code
			    ]]></column>
            <where>code='RECORDED_BA_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
                        ,ce.code AS "Seller code"
                        ,ce.description AS "Seller description"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'DEBIT'
                                        THEN ao.amount
                                    ELSE 0
                                    END), '99999999990.00') AS "Amount DEBIT"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'CREDIT'
                                        THEN ao.amount
                                    ELSE 0
                                    END), '99999999990.00') AS "Amount CREDIT"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'DEBIT'
                                        THEN ao.amount
                                    ELSE - ao.amount
                                    END), '99999999990.00') AS "Balance"
                    FROM crm_seller s
                        INNER JOIN crm_customer c ON c.seller_id = s.id
                        INNER JOIN account_entity ce on c.id = ce.id
                        INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
                        INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
                    WHERE ao.invoice_date IS NOT NULL
                        AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                        AND (
                            ce.code ilike '%' || :SEARCH_CRITERION || '%'
                            OR ce.description ilike '%' || :SEARCH_CRITERION || '%'
                            )
                    GROUP BY date_trunc('month', ao.invoice_date)
                        ,ce.code
                        ,ce.description
                    ORDER BY date_trunc('month', ao.invoice_date) DESC
                        ,ce.code
			    ]]></column>
            <where>code='RECORDED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"
                from  billing_wallet_operation wo
                    INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
                    INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
                    INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id
                    INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id
                    INNER JOIN crm_customer c  on c.id = ca.customer_id
                    INNER JOIN crm_seller s  on s.id = c.seller_id
                    INNER JOIN account_entity ce  on c.id = ce.id
                where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED'
                    and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
                group by ce.code, ce.description
                order by ce.code
			    ]]></column>
            <where>code='UNBILLED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                        , ce.description AS "Seller description"
                        , ce.code AS "Customer code"
                        , ce.description AS "Customer description"
                        , cae.code AS "Customer Account code"
                        , cae.description AS "Customer Account description"
                        , bae.code AS "Billing Account code"
                        , bae.description AS "Billing Account description"
                        , uae.code AS "User Account code"
                        , uae.description AS "User Account description"
                        , count(DISTINCT wo.id) AS "Transaction count"
                        , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                        , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"
                    from  billing_wallet_operation wo
                        INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
                        INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
                        INNER JOIN account_entity uae  on ua.id = uae.id
                        INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id
                        INNER JOIN account_entity bae  on ba.id = bae.id
                        INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id
                        INNER JOIN account_entity cae  on ca.id = cae.id
                        INNER JOIN crm_customer c  on c.id = ca.customer_id
                        INNER JOIN account_entity ce  on c.id = ce.id
                        INNER JOIN crm_seller s  on s.id = c.seller_id
                    where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED'
                        and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )
                    and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or ce.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or cae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION || '%'  or bae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION || '%'  or uae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or uae.description ilike '%' || :SEARCH_CRITERION || '%'  )
                    group by ce.code
                        , ce.description
                        , cae.code
                        , cae.description
                        , bae.code
                        , bae.description
                        , uae.code
                        , uae.description order by ce.code
                        , ce.code
                        , cae.code
                        , bae.code
                        , uae.code
			    ]]></column>
            <where>code='UNBILLED_UA_HIERARCHY'</where>
        </update>
    </changeSet>

	<changeSet id="#5486_remove_CF_for_old_RT_Aggregation" author="Mohammed_ELAZZOUZI">
		<sql>delete from ${db.schema.adapted}crm_custom_field_tmpl where applies_to='JobInstance_RatedTransactionsJob' and code in('activateAggregation','globalAggregation','aggregateByDay','aggregationLevel','aggregateByOrder','aggregateByParam1','aggregateByParam2','aggregateByParam3','aggregateByExtraParam','aggregateByUnitAmount')</sql>
	</changeSet>

    <changeSet id="5407_20201030" author="Mohammed_ELAZZOUZI">
    	<update tableName="billing_billing_run">
    	<column name="status" value="INVOICES_GENERATED"/>
    	<where>status='INVOICES_GENERRATED'</where>
    	</update>
    </changeSet>
    <changeSet id="#5610_20201102 - bad dept operation type" author="NabilOUACHI">
        <update tableName="ar_occ_template">
            <column name="occ_category" value="CREDIT"></column>
            <where>code='EXP_WRT'</where>
        </update>
    </changeSet>

    <changeSet id="5657_20201201" author="NabilOuachi">
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="SendInvoiceJob_billingRun"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="gui_position" value=""/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>

        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-3" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="invoiceDateRangeFrom"/>
            <column name="description" value="From invoice date EL"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>

        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-4" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="invoiceDateRangeTo"/>
            <column name="description" value="To invoice date EL"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>
    <changeSet id="#5632_20201207_RT_TYPE_DATA" author="NabilOUACHI">
        <update tableName="billing_rated_transaction">
            <column name="type" value="MINIMUM"/>
            <where>code like 'RT_MIN%' and wallet_id is null</where>
        </update>
    </changeSet>

    <changeSet id="#5116_10122020" author="AbdelmounaimAkadid">
     	<insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-30" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="APIv2PermissionsSyncJob" />
            <column name="description" value="APIv2PermissionsSyncJob" />
            <column name="job_category" value="UTILS" />
            <column name="job_template" value="APIv2PermissionsSyncJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="uuid" value="APIv2PermissionsSyncJob" />
       	</insert>
	</changeSet>

	<changeSet id="5743_20201215" author="AmineBENAICHA">
        <update tableName="meveo_job_instance" >
            <column name="cf_values"
                    value='{"PurgeMediationDataJob_edrStatusCf":[ { "listString":[ "AGGREGATED", "MEDIATING", "OPEN", "RATED", "REJECTED" ] } ], "PurgeMediationDataJob_firstTransactionDate":[ { "date":null } ], "PurgeMediationDataJob_woStatusCf":[ { "listString":[ "CANCELED", "OPEN", "RERATED", "RESERVED", "SCHEDULED", "TO_RERATE", "TREATED" ] } ], "PurgeMediationDataJob_rtStatusCf":[ { "listString":[ "BILLED", "CANCELED", "OPEN", "REJECTED", "RERATED" ] } ] }'/>
            <where>id = -24</where>
        </update>
    </changeSet>
    
    <changeSet id="5678_20210214" author="anasseh">
	      <sql><![CDATA[UPDATE ${db.schema.adapted}ar_payment_history set operation_category ='CREDIT' where payment_id is not null ]]> </sql>
	      <sql><![CDATA[UPDATE ${db.schema.adapted}ar_payment_history set operation_category ='DEBIT' where refund_id is not null ]]> </sql>
   </changeSet>


    <changeSet id="#5592-2021-02-02_41" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2015-03-19 00:04:19.913" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="ArticleMappingJob" />
            <column name="code" value="Article_Mapp_Job_V2" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="timerentity_id" valueNumeric="-1" />
            <column name="uuid" value="Article_Mapp_Job_V2" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ArticleMappingJob_billingRun"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FirstTransactionDate"/>
            <column name="description" value="First transaction date"/>
            <column name="field_type" value="DATE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="LastTransactionDate"/>
            <column name="description" value="Last transaction date"/>
            <column name="field_type" value="DATE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>
    <changeSet id="#5890-2021-02-02_42" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2015-03-19 00:04:19.913" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="InvoiceLinesJob" />
            <column name="code" value="Invoice_Lines_Job_V2" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="timerentity_id" valueNumeric="-1" />
            <column name="uuid" value="Invoice_Lines_Job_V2" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="InvoiceLinesJob_billingRun"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="AggregationOptions"/>
            <column name="description" value="Aggregation options"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>

     <changeSet id="#5916_20210128" author="MohammedELAZZOUZI">
       <insert tableName="billing_seq_invoice">
           <column name="id" valueNumeric="-5" />
           <column name="version" valueNumeric="0" />
           <column name="code" value="ADV" />
           <column name="description" value="Advanced Payment Invoice sequence" />
           <column name="sequence_size" valueNumeric="9" />
           <column name="created" valueDate="2021-02-03 00:00:00.000" />
           <column name="creator" value="OPENCELL.ADMIN" />
       </insert>
       <insert tableName="billing_invoice_type">
           <column name="id" valueNumeric="-5" />
           <column name="version" valueNumeric="0" />
           <column name="created" valueDate="2021-02-03 00:00:00.000" />
           <column name="code" value="ADV" />
           <column name="description" value="Advanced Payment Invoicee" />
           <column name="creator" value="OPENCELL.ADMIN" />
           <column name="invoice_sequence_id" valueNumeric="-5" />
           <column name="occ_template_id" valueNumeric="-25" />
           <column name="occ_templ_negative_id" value="-40" />
           <column name="matching_auto" valueNumeric="0" />
           <column name="prefix_el" value="ADV" />
           <column name="uuid" value="InvoiceType-ADV" />
       </insert>

      </changeSet>

   <changeSet id="#5921-2021-02-02_43" author="ZBariki">
       <insert tableName="meveo_job_instance">
           <column name="id" valueSequenceNext="meveo_job_instance_seq" />
           <column name="version" valueNumeric="0" />
           <column name="disabled" valueNumeric="1" />
           <column name="created" valueDate="2015-03-19 00:04:19.913" />
           <column name="job_category" value="INVOICING" />
           <column name="job_template" value="InvoicingJobV2" />
           <column name="code" value="Invoicing_Job_V2" />
           <column name="description" value="Invoicing Job V2"/>
           <column name="creator" value="OPENCELL.ADMIN" />
           <column name="timerentity_id" valueNumeric="-1" />
           <column name="uuid" value="Invoicing_Job_V2" />
       </insert>
       <insert tableName="crm_custom_field_tmpl">
           <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
           <column name="version" valueNumeric="0" />
           <column name="disabled" valueNumeric="0" />
           <column name="created" valueDate="${db.current.time}" />
           <column name="code" value="InvoicingJobV2_billingRun"/>
           <column name="applies_to" value="JobInstance_InvoicingJobV2"/>
           <column name="description" value="Billing Run"/>
           <column name="field_type" value="ENTITY"/>
           <column name="value_required" value="0"/>
           <column name="creator" value="applicationInitializer"/>
           <column name="versionable" value="0"/>
           <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
           <column name="storage_type" value="LIST"/>
           <column name="allow_edit" value="1"/>
           <column name="hide_on_new" value="0"/>
           <column name="inh_as_def_value" value="0"/>
           <column name="cf_protectable" value="0"/>
       </insert>
   </changeSet>

    <changeSet id="#5890-2021-02-05_43" author="ZBARIKI" failOnError="false">
        <update tableName="crm_custom_field_tmpl">
            <column name="field_type" value="LIST"/>
            <where>code='AggregationOptions'</where>
        </update>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="NO_AGGREGATION"/>
            <column name="listvalues_key" value="NO_AGGREGATION"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="ARTICLE_LABEL"/>
            <column name="listvalues_key" value="ARTICLE_LABEL"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="UNIT_AMOUNT"/>
            <column name="listvalues_key" value="UNIT_AMOUNT"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="DATE"/>
            <column name="listvalues_key" value="DATE"/>
        </insert>
    </changeSet>

    <changeSet id="#5951_20210209_data" author="AbdelmounaimAkadid">
        <insert tableName="billing_tax_class">
        	<column name="id" value="-3"/>
            <column name="code" value="NO_TAX"/>
            <column name="description_i18n" value='{"FRA":"Pas de TVA","ENG":"No VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_no_tax" />
        </insert>
        <insert tableName="billing_tax_class">
        	<column name="id" value="-4"/>
            <column name="code" value="REDUCED"/>
            <column name="description_i18n" value='{"FRA":"TVA réduite","ENG":"Reduced VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_reduced" />
        </insert>
        <insert tableName="billing_tax_class">
        	<column name="id" value="-5"/>
            <column name="code" value="NORMAL"/>
            <column name="description_i18n" value='{"FRA":"TVA normale","ENG":"Normal VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_normal" />
        </insert>

        <insert tableName="billing_tax_category">
        	<column name="id" value="-2"/>
            <column name="code" value="EXEMPTED"/>
            <column name="description_i18n" value='{"FRA":"Exempté","ENG":"Exempted"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_category_exempted" />
        </insert>
        <insert tableName="billing_tax_category">
        	<column name="id" value="-3"/>
            <column name="code" value="REGULAR"/>
            <column name="description_i18n" value='{"FRA":"Standard","ENG":"Regular"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_category_regular" />
        </insert>

        <update tableName="billing_tax">
            <column name="tax_percentage" value="0"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 0%","ENG":"VAT 0%"}'/>
            <where>code='TAX_00'</where>
        </update>
        <insert tableName="billing_tax">
        	<column name="id" value="-4"/>
            <column name="code" value="TAX_10"/>
            <column name="tax_percentage" value="10"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 10%","ENG":"VAT 10%"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_tax_10" />
        </insert>
        <insert tableName="billing_tax">
        	<column name="id" value="-5"/>
            <column name="code" value="TAX_20"/>
            <column name="tax_percentage" value="20"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 20%","ENG":"VAT 20%"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_tax_20" />
        </insert>

        <insert tableName="billing_tax_mapping">
            <column name="id" value='-11'/>
            <column name="tax_category_id" value="-2"/>
            <column name="tax_id" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
		<insert tableName="billing_tax_mapping">
		    <column name="id" value='-12'/>
            <column name="tax_class_id" value="-3"/>
            <column name="tax_id" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-13'/>
            <column name="tax_category_id" value="-3"/>
            <column name="tax_class_id" value="-4"/>
            <column name="tax_id" value='-4'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-14'/>
            <column name="tax_category_id" value="-3"/>
            <column name="tax_class_id" value="-5"/>
            <column name="tax_id" value='-5'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>

        <insert tableName="billing_invoice_cat">
        	<column name="id" value='-3'/>
            <column name="code" value="ICAT_DEFAULT"/>
            <column name="description_i18n" value='{"FRA":"Rubrique facture par défaut","ENG":"Default invoice category"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_invoice_cat_icat_default" />
        </insert>
        <insert tableName="billing_invoice_sub_cat">
        	<column name="id" value='-3'/>
        	<column name="invoice_category_id" value='-3'/>
        	<column name="version" valueNumeric="0" />
            <column name="code" value="ISCAT_DEFAULT"/>
            <column name="description_i18n" value='{"FRA":"Sous-rubrique facture par défaut","ENG":"Default invoice sub-category"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_invoice_cat_iscat_default" />
        </insert>

        <insert tableName="billing_accounting_article">
        	<column name="id" value='-1'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="ADV-STD"/>
        	<column name="tax_class_id" value="-1"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Acompte","ENG":"Advance payment"}'/>
            <column name="description" value='Advance payment'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-ADV-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-2'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="DISC-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Remise de pied de facture","ENG":"Invoice discount"}'/>
            <column name="description" value='Invoice discount'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-DISC-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-3'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="ART-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Article standard","ENG":"Standard article"}'/>
            <column name="description" value='Standard article'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-ART-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
            <column name="id" value='-4'/>
            <column name="version" valueNumeric="0"/>
            <column name="code" value="MIN-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Complément du minimum de facturation","ENG":"Invoice minimum complement"}'/>
            <column name="description" value='Invoice minimum complement'/>
            <column name="created" valueDate="${db.current.time}"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="uuid" value="billing_accounting_article-MIN-STD"/>
        </insert>

    </changeSet>
    <changeSet id="#5946_08032021" author="KhalidHORRI">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-31"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-03-08 00:04:19.913"/>
            <column name="job_category" value="UTILS"/>
            <column name="job_template" value="DiscountPlanStatusJob"/>
            <column name="code" value="DiscountPlanStatusJob"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="Discount_Plan_Status_Job"/>
            <column name="cf_values" value='{"waitingMillis":[{"long":0}],"nbRuns":[{"long":-1}]}'/>
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-32"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-03-08 00:04:19.913"/>
            <column name="job_category" value="UTILS"/>
            <column name="job_template" value="DiscountPlanInstanceStatusJob"/>
            <column name="code" value="DiscountPlanInstanceStatusJob"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="Discount_Plan_Instance_Status_Job"/>
            <column name="cf_values" value='{"waitingMillis":[{"long":0}],"nbRuns":[{"long":-1}]}'/>
        </insert>
    </changeSet>

    <changeSet author="ZBARIKI" id="#6048_20210326">
        <sql dbms="postgresql"><![CDATA[UPDATE ${db.schema.adapted}meveo_script_instance SET
            script = 'package org.meveo.service.script;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.SubCategoryInvoiceAgregate;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;
import org.meveo.service.payments.impl.PaymentHistoryService;
import org.meveo.service.script.Script;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

    private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
            AccountOperationService.class.getSimpleName());
    private final CustomerService customerService = (CustomerService) getServiceInterface(
            CustomerService.class.getSimpleName());
    private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
            InvoiceService.class.getSimpleName());
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
            SubscriptionService.class.getSimpleName());
    private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
            RatedTransactionService.class.getSimpleName());
    private final WalletService walletService = (WalletService) getServiceInterface(
            WalletService.class.getSimpleName());
    private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
            RejectedBillingAccountService.class.getSimpleName());
    private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
            CounterInstanceService.class.getSimpleName());
    private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
            CounterPeriodService.class.getSimpleName());
    private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
            OrderItemService.class.getSimpleName());
    private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
            ProductInstanceService.class.getSimpleName());
    private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
            BusinessEntityService.class.getSimpleName());
    private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
            WalletOperationService.class.getSimpleName());
    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
            ServiceInstanceService.class.getSimpleName());

    private final PaymentHistoryService paymentHistoryService = (PaymentHistoryService) getServiceInterface(
            PaymentHistoryService.class.getSimpleName());

    private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

    @SuppressWarnings("rawtypes")
    private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
            ChargeInstanceService.class.getSimpleName());

    private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {

        log.debug(" >>> execute {} ", methodContext.entrySet());

        try {

            Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
            if (MapUtils.isEmpty(record)) {
                throw new BusinessException(String.format("Parameter RECORD is missing"));
            }

            final String customerCode = record.get("customerCode");
            Customer customer = customerService.findByCode(customerCode);
            if (customer == null) {
                throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
            }

            String noCheckVal = record.get("noCheck");
            if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
                throw new BusinessException(
                        String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
            }
            boolean noCheck = "1".contentEquals(noCheckVal);

            if (!noCheck) {
                // If noCheck is 0 then the following conditions must be met in order to allow
                // deletion:
                // No unmatched AO
                // No open EDR/WO/RT

                this.checkUnmatchedAOs(customer);
                this.checkOpenEDRs(customer);
                this.checkOpenWOs(customer);
                this.checkOpenRTs(customer);
            }

            this.removeCustomerHirarchy(customer);

        } catch (BusinessException be) {
            throw be;
        } catch (Exception e) {
            log.error(" Error executing DeleteCustomersScript ", e);
            throw new BusinessException(e.getMessage());
        }
    }

    private void checkOpenEDRs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start checkOpenEDRs for customer = {} ", customer);
            String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = edrService.executeSelectQuery(query,params);
            log.debug(" count of open EDRs = {} ", count);
            log.debug(" End checkOpenEDRs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open EDRs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkOpenWOs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start checkOpenWOs for customer = {} ", customer);
            String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
            final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
                    WalletOperationService.class.getSimpleName());

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = walletOperationService.executeSelectQuery(query, params);
            log.debug(" count of open WOs = {} ", count);
            log.debug(" End checkOpenWOs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open WOs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkOpenRTs(Customer customer) throws BusinessException {
        try {

            log.debug(" Start checkOpenRTs for customer = {} ", customer);
            String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());

            Object count = this.ratedTransactionService.executeSelectQuery(query, params);
            log.debug(" count of open RTs = {} ", count);
            log.debug(" End checkOpenRTs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open RTs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkUnmatchedAOs(Customer customer) throws BusinessException {
        try {

            log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
            String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
            final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
                    AccountOperationService.class.getSimpleName());
            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = accountOperationService.executeSelectQuery(query, params);
            log.debug(" count of unmatched AOs = {} ", count);
            log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeCustomerHirarchy(Customer customer) throws BusinessException {
        log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

        //
        // A workaround for #4134 , no need for this method if #4134 is fixed (only
        // 6.1.X is concerned)!
        this.nullifyAOsSeller(customer);

        this.removeWalletOperations(customer);
        this.removeChargeInstances(customer);
        // the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
        this.nullifySubCategoryInvoiceAgregatesWallet(customer);
        this.removeWalletInstances(customer);

        this.removePaymentHistory(customer);
        this.removeRatedTransactions(customer);
        this.removeInvoices(customer);


        this.removeServiceInstances(customer);
        this.removeAccess(customer);
        this.removeEDRs(customer);
        this.removeSubscriptions(customer);

        this.removeRejectedBAs(customer);

        this.removeCounterPeriods(customer);
        this.removeCounterInstances(customer);
        this.removeOrderItems(customer);
        this.removeProductInstances(customer);
        this.removeMatchingAmounts(customer);

        this.customerService.remove(customer);

        log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
    }

    private void removeEDRs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeEDRs for customer = {} ", customer);

            String query = "select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = edrService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} EDR to delete ", ids.size());

            for (Long id : ids) {
                edrService.remove(id);
            }

            log.debug(" End removeEDRs for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeMatchingAmounts(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

            final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
            final String query = "select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = matchingAmountService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} MatchingAmount to delete ", ids.size());

            for (Long id : ids) {
                matchingAmountService.remove(id);
            }

            log.debug(" End removeMatchingAmounts for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeAccess(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeAccess for customer = {} ", customer);

            final AccessService accessService = (AccessService) getServiceInterface(
                    AccessService.class.getSimpleName());

            final String query = "select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = accessService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} Access to delete ", ids.size());

            for (Long id : ids) {
                accessService.remove(id);
            }

            log.debug(" End removeAccess for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeServiceInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeServiceInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findServiceInstances(customer));
            log.debug(" {} ServiceInstance to delete ", ids.size());

            for (Long id : ids) {
                this.serviceInstanceService.remove(id);
            }

            log.debug(" End removeServiceInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findServiceInstances(Customer customer) {
        try {
            log.debug(" findServiceInstances for customer={} ", customer);
            String query = "select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.serviceInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findServiceInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeWalletOperations(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeWalletOperations for customer = {} ", customer);

            Collection<Long> ids = safe(this.findWalletOperations(customer));
            log.debug(" {} WalletOperation to delete ", ids.size());

            for (Long id : ids) {
                this.walletOperationService.remove(id);
            }

            log.debug(" End removeWalletOperations for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findWalletOperations(Customer customer) {
        try {
            log.debug(" findWalletOperations for customer={} ", customer);
            String query = "select wo.id from WalletOperation wo where wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.walletOperationService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findWalletOperations : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    /**
     * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
     *
     * @param customer
     * @throws BusinessException
     */
    private void removePaymentHistory(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removePaymentHistory for customer = {} ", customer);
            String query = "select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode";

            Map<String, Object> params = new HashMap();
            params.put("customerCode", customer.getCode());
            List<Long> ids = (List<Long>) this.paymentHistoryService.executeSelectQuery(query, params);

            for (Long id : ids) {
                this.paymentHistoryService.remove(id);

            }
            log.debug(" {} PaymentHistory to delete ", ids.size());
            log.debug(" End removePaymentHistory for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    /**
     * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
     *
     * @param customer
     * @throws BusinessException
     */
    private void nullifyAOsSeller(Customer customer) throws BusinessException {
        try {
            log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

            String query = "select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId ";

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            List<Long> ids = (List<Long>) this.accountOperationService.executeSelectQuery(query, params);
            for (Long id : ids) {
                accountOperationService.remove(id);
            }

            log.debug(" seller to nullify for {} AOs ", ids.size());
            log.debug(" End nullifyAOsSeller for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
        try {
            log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
            String query = "select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId";
            Map<String, Object> params = new HashMap<>();
            params.put("customerId", customer.getId());

            List<Long> ids = (List<Long>) this.businessEntityService.executeSelectQuery(query, params);
            for (Long id: ids) {
                this.businessEntityService.remove(id);
            }

            log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", ids.size());
            log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }

    }


    private void removeProductInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeProductInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findProductInstances(customer));
            log.debug(" {} ProductInstance to delete ", ids.size());

            for (Long id : ids) {
                this.productInstanceService.remove(id);
            }

            log.debug(" End removeProductInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findProductInstances(Customer customer) {
        try {
            log.debug(" findProductInstances for customer={} ", customer);
            String query = "select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.productInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findProductInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeOrderItems(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeOrderItem for customer = {} ", customer);

            Collection<Long> ids = safe(this.findOrderItems(customer));
            log.debug(" {} OrderItem to delete ", ids.size());

            for (Long id : ids) {
                this.orderItemService.remove(id);
            }

            log.debug(" End removeOrderItem for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findOrderItems(Customer customer) {
        try {
            log.debug(" findOrderItems for customer={} ", customer);
            String query = "select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.orderItemService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeCounterPeriods(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeCounterPeriods for customer = {} ", customer);

            Collection<Long> ids = safe(this.findCounterPeriods(customer));
            log.debug(" {} CounterPeriod to delete ", ids.size());

            for (Long id : ids) {
                this.counterPeriodService.remove(id);
            }

            log.debug(" End removeCounterPeriods for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findCounterPeriods(Customer customer) {
        try {
            log.debug(" findCounterPeriods for customer={} ", customer);
            String query = "select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.counterPeriodService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeCounterInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeCounterInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findCounterInstances(customer));
            log.debug(" {} CounterInstance to delete ", ids.size());

            for (Long id : ids) {
                this.counterInstanceService.remove(id);
            }

            log.debug(" End removeCounterInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findCounterInstances(Customer customer) {
        try {
            log.debug(" findCounterInstances for customer={} ", customer);
            String query = "select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.counterInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeRejectedBAs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeRejectedBAs for customer = {} ", customer);

            Collection<Long> ids = safe(this.findRejectedBillingAccounts(customer));
            log.debug(" {} RejectedBillingAccount to delete ", ids.size());

            for (Long id : ids) {
                this.rejectedBillingAccountService.remove(id);
            }

            log.debug(" End removeRejectedBAs for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findRejectedBillingAccounts(Customer customer) {
        try {
            log.debug(" findRejectedBillingAccounts for customer={} ", customer);
            String query = "select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.rejectedBillingAccountService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findRejectedBillingAccounts : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeInvoices(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeInvoices for customer = {} ", customer);

            Collection<Long> ids = safe(this.findInvoicesIds(customer));
            log.debug(" {} Invoices to delete ", ids.size());

            for (Long id : ids) {
                this.invoiceService.remove(id);
            }

            log.debug(" End removeInvoices for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeWalletInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeWalletInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findWalletInstances(customer));
            log.debug(" {} WalletInstance to delete ", ids.size());

            for (Long id : ids) {
                // a workaround for #4132
                WalletInstance wallet = this.walletService.findById(id);
                wallet.getUserAccount().setWallet(null);

                this.walletService.remove(id);
            }

            log.debug(" End removeWalletInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findWalletInstances(Customer customer) {
        try {
            log.debug(" findWalletInstances for customer={} ", customer);
            String query = "select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.walletService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findWalletInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeRatedTransactions(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeRatedTransactions for customer = {} ", customer);

            Collection<Long> ids = safe(this.findRatedTransactions(customer));
            log.debug(" {} RTs to delete ", ids.size());

            for (Long id : ids) {
                this.ratedTransactionService.remove(id);
            }

            log.debug(" End removeRatedTransactions for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }

    }

    private List<Long> findRatedTransactions(Customer customer) {
        try {
            log.debug(" findRatedTransactions for customer={} ", customer);
            String query = "select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.ratedTransactionService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findRatedTransactions : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeChargeInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeChargeInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findChargeInstances(customer));
            log.debug(" {} ChargeInstance to delete ", ids.size());
            for (Long ciId : ids) {
                this.chargeInstanceService.remove(ciId);
            }
            log.debug(" End removeChargeInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findChargeInstances(Customer customer) {
        try {
            log.debug(" findChargeInstances for customer={} ", customer);
            String query = "select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.chargeInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findChargeInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeSubscriptions(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeSubscriptions for customer = {} ", customer);
            Collection<Long> ids = safe(this.findSubscriptions(customer));
            log.debug(" {} Subscription to delete ", ids.size());

            for (Long subscriptionId : ids) {
                this.subscriptionService.remove(subscriptionId);
            }
            log.debug(" End removeSubscriptions for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findSubscriptions(Customer customer) {
        try {
            log.debug(" findSubscriptions for customer={} ", customer);
            StringBuffer query = new StringBuffer(
                    "select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer ");

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customer", customer);
            Object ids = this.subscriptionService.executeSelectQuery(query.toString(), queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findSubscriptions : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private List<Long> findInvoicesIds(Customer customer) {
        try {
            log.debug(" findInvoicesIds for customer={} ", customer);
            StringBuffer query = new StringBuffer(
                    "select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer =:customer ");

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customer", customer);
            Object ids = this.invoiceService.executeSelectQuery(query.toString(), queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on getSubscription : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private <T> Collection<T> safe(Collection<T> collection) {
        return collection == null ? Collections.EMPTY_LIST : collection;
    }
}'
            WHERE code = 'org.meveo.service.script.DeleteCustomersScript';
           ]]>
        </sql>
    </changeSet>

	<changeSet author="AmineBENAICHA" id="#6048_20210611">
		<sql>
<![CDATA[INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-30, 0, 0, ${db.current.time}, 'org.meveo.service.script.ServiceTemplateToProductScript', 'Migration ServiceTemplate To Product', 'JAVA', 'package org.meveo.service.script;
	
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.util.pagination.PaginationConfiguration;
import org.meveo.model.article.AccountingArticle;
import org.meveo.model.article.ArticleMapping;
import org.meveo.model.article.ArticleMappingLine;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.catalog.ProductChargeTemplateMapping;
import org.meveo.model.catalog.ServiceChargeTemplate;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.cpq.Product;
import org.meveo.model.cpq.ProductVersion;
import org.meveo.model.cpq.enums.VersionStatusEnum;
import org.meveo.model.cpq.offer.OfferComponent;
import org.meveo.model.tax.TaxClass;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.article.AccountingArticleService;
import org.meveo.service.billing.impl.article.ArticleMappingLineService;
import org.meveo.service.billing.impl.article.ArticleMappingService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.cpq.ProductService;
import org.meveo.service.cpq.ProductVersionService;
import org.meveo.service.tax.TaxClassService;
import  org.meveo.api.dto.response.PagingAndFiltering.SortOrder;

public class ServiceTemplateToProductScript extends Script {

    public static final String DEFAULT_TAX_CLASS_CODE = "CMP_DATA";
    public static final long ARTICLE_MAPPING_ID = 1L;
    private static final Integer PAGE_COUNT = 100;
    private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(ServiceInstanceService.class.getSimpleName());
    private ProductService productService = (ProductService) getServiceInterface(ProductService.class.getSimpleName());
    private ProductVersionService productVersionService = (ProductVersionService) getServiceInterface(ProductVersionService.class.getSimpleName());
    private OfferTemplateService offerTemplateService= (OfferTemplateService) getServiceInterface(OfferTemplateService.class.getSimpleName());
    private AccountingArticleService accountingArticleService = (AccountingArticleService) getServiceInterface(AccountingArticleService.class.getSimpleName());
    private ArticleMappingService articleMappingService = (ArticleMappingService) getServiceInterface(ArticleMappingService.class.getSimpleName());
    private ArticleMappingLineService articleMappingLineService = (ArticleMappingLineService) getServiceInterface(ArticleMappingLineService.class.getSimpleName());
    private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(ServiceTemplateService.class.getSimpleName());
    private TaxClassService taxClassService = (TaxClassService) getServiceInterface(TaxClassService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        List<ServiceTemplate> serviceTemplates = (List<ServiceTemplate>) methodContext.get("SERVICE_TEMPLATE");

        if(serviceTemplates != null && !serviceTemplates.isEmpty()){
            serviceTemplates.forEach(this::map);
        } else {

            long count = serviceTemplateService.count(new PaginationConfiguration("id", SortOrder.ASCENDING));

            if (PAGE_COUNT < count) {
                serviceTemplateService.list(new PaginationConfiguration(null, null))
                        .forEach(this::map);
            } else {
                for (int index = 0; index < count; index = index + PAGE_COUNT) {
                    serviceTemplateService.list(new PaginationConfiguration(index, PAGE_COUNT, null, null, null, "id", SortOrder.ASCENDING))
                            .forEach(this::map);
                }
            }
        }

    }

    public Product map(ServiceTemplate serviceTemplate) {
        Product product = createProduct(serviceTemplate);
        createArticle(product);

        ProductVersion productVersion = createProductVersion(product);

        List<ServiceInstance> serviceInstances = serviceInstanceService.findByServiceTemplate(serviceTemplate);

        serviceInstances.forEach(serviceInstance -> {

            serviceInstance.setProductVersion(productVersion);
            serviceInstance.setServiceTemplate(null);
            serviceInstanceService.update(serviceInstance);

            OfferTemplate offer = serviceInstance.getSubscription().getOffer();
            OfferComponent offerComponent = new OfferComponent();
            offerComponent.setProduct(product);
            offerComponent.setOfferTemplate(offer);
            offer.getOfferComponents().add(offerComponent);
            offer.getOfferServiceTemplates().removeIf(o -> o.getServiceTemplate().getId().equals(serviceTemplate.getId()));
            offerTemplateService.update(offer);
        });

        return product;
    }

    private void createArticle(Product product) {
        product.getProductCharges().stream()
                .map(pc -> pc.getChargeTemplate())
                .forEach(chargeTemplate -> {
                    AccountingArticle accountingArticle;
                    List<AccountingArticle> accountingArticles = accountingArticleService.findByTaxClassAndSubCategory(chargeTemplate.getTaxClass(), chargeTemplate.getInvoiceSubCategory());
                    if(accountingArticles.isEmpty()){
                        TaxClass taxClass = taxClassService.findByCode(DEFAULT_TAX_CLASS_CODE);
                        accountingArticle = new AccountingArticle(UUID.randomUUID().toString(), "Migration Accounting article", taxClass, chargeTemplate.getInvoiceSubCategory());
                        accountingArticleService.create(accountingArticle);
                    }else {
                        accountingArticle = accountingArticles.get(0);
                    }
                    ArticleMapping defaultArticleMapping = articleMappingService.findById(ARTICLE_MAPPING_ID);
                    ArticleMappingLine articleMappingLine = new ArticleMappingLine();
                    articleMappingLine.setChargeTemplate(chargeTemplate);
                    articleMappingLine.setArticleMapping(defaultArticleMapping);
                    articleMappingLine.setProduct(product);
                    articleMappingLine.setAccountingArticle(accountingArticle);
                    articleMappingLineService.create(articleMappingLine);
                });

    }

    private Product createProduct(ServiceTemplate serviceTemplate) {
        Product product = new Product();
        product.setCode(serviceTemplate.getCode());
        product.setDescription(serviceTemplate.getDescription());
        List<ProductChargeTemplateMapping> productCharges = getProductCharges(serviceTemplate);
        product.setProductCharges(productCharges);
        product.setCfValues(serviceTemplate.getCfValues());
        product.setCfAccumulatedValues(serviceTemplate.getCfAccumulatedValues());
        product.setDisabled(serviceTemplate.isDisabled());
        productService.create(product);
        return product;
    }

    private ProductVersion createProductVersion(Product product) {
        ProductVersion productVersion= new ProductVersion();
        productVersion.setProduct(product);
        productVersion.setShortDescription(product.getDescription());
        productVersion.setStatus(VersionStatusEnum.PUBLISHED);
        productVersion.setStatusDate(Calendar.getInstance().getTime());
        productVersionService.create(productVersion);
        return productVersion;
    }

    private ProductChargeTemplateMapping mapToProductChargeTemplate(ServiceChargeTemplate serviceCharge) {
        ProductChargeTemplateMapping productChargeTemplateMapping = new ProductChargeTemplateMapping();
        productChargeTemplateMapping.setChargeTemplate(serviceCharge.getChargeTemplate());
        return productChargeTemplateMapping;
    }

    private List<ProductChargeTemplateMapping> getProductCharges(ServiceTemplate serviceTemplate) {
        List<ProductChargeTemplateMapping> productCharges = serviceTemplate.getServiceSubscriptionCharges()
                .stream()
                .map(this::mapToProductChargeTemplate)
                .collect(Collectors.toList());

        productCharges.addAll(
                serviceTemplate.getServiceRecurringCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceTerminationCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceUsageCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );
        return productCharges;
    }
}');]]>
			</sql>

			<insert tableName="meveo_job_instance">
	            <column name="id" valueNumeric="-40" />
	            <column name="version" valueNumeric="0" />
	            <column name="disabled" valueNumeric="0" />
	            <column name="created" valueDate="${db.current.time}" />
	            <column name="updated" valueDate="null" />
	            <column name="uuid" value="ServiceTemplateToProductJob" />
	            <column name="code" value="ServiceTemplateToProductJob" />
	            <column name="description" value="ServiceTemplateToProductJob" />
	            <column name="job_category" value="MEDIATION" />
	            <column name="job_template" value="ScriptingJob" />
	            <column name="parametres" valueNumeric="null" />
	            <column name="creator" value="opencell.admin" />
	            <column name="updater" value="null" />
	            <column name="timerentity_id" value="null" />
	            <column name="cf_values">
	            	<![CDATA[
	            		{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ServiceTemplateToProductScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
	            	]]>
				</column>
	       	</insert>
	</changeSet>
	
	<changeSet id="#INTRD-265_20210705_query_manager" author="TarikFA.">
		<preConditions onFail="MARK_RAN" onSqlOutput="TEST">
				<sqlCheck expectedResult="0"> select count(*) from ${db.schema.adapted}adm_role where role_name = 'query_manager'</sqlCheck>
		</preConditions>
		
		<insert tableName="adm_role">
			<column name="id" valueNumeric="-121" />
			<column name="version" valueNumeric="0"/>
			<column name="role_name" value="query_manager" />
			<column name="role_description" value="Query Manager" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-216"/>
			<column name="name" value="All queries visualization"/>
			<column name="permission" value="all_queries_visualization"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-216" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-217"/>
			<column name="name" value="Protected queries visualization"/>
			<column name="permission" value="protected_queries_visualization"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-217" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-218"/>
			<column name="name" value="Public queries visualization"/>
			<column name="permission" value="public_queries_visualization"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-218" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-219"/>
			<column name="name" value="All queries management"/>
			<column name="permission" value="all_queries_management"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-219" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-220"/>
			<column name="name" value="Protected queries management"/>
			<column name="permission" value="protected_queries_management"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-220" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-221"/>
			<column name="name" value="Public queries management"/>
			<column name="permission" value="public_queries_management"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-221" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-222"/>
			<column name="name" value="All queries execution"/>
			<column name="permission" value="all_queries_execution"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-222" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-223"/>
			<column name="name" value="Protected queries execution"/>
			<column name="permission" value="protected_queries_execution"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-223" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-224"/>
			<column name="name" value="Public queries execution"/>
			<column name="permission" value="public_queries_execution"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-121" />
			<column name="permission_id" valueNumeric="-224" />
		</insert>
	</changeSet>
	
	<changeSet id="#INTRD-265_20210705_query_user" author="TarikFA.">
		<preConditions onFail="MARK_RAN" onSqlOutput="TEST">
				<sqlCheck expectedResult="0"> select count(*) from ${db.schema.adapted}adm_role where role_name = 'query_user'</sqlCheck>
		</preConditions>
		
		<insert tableName="adm_role">
			<column name="id" valueNumeric="-122" />
			<column name="version" valueNumeric="0"/>
			<column name="role_name" value="query_user" />
			<column name="role_description" value="Query User" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-225"/>
			<column name="name" value="Protected queries visualization"/>
			<column name="permission" value="protected_queries_visualization"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-225" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-226"/>
			<column name="name" value="Public queries visualization"/>
			<column name="permission" value="public_queries_visualization"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-226" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-227"/>
			<column name="name" value="Public queries management"/>
			<column name="permission" value="public_queries_management"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-227" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-228"/>
			<column name="name" value="Protected queries execution"/>
			<column name="permission" value="protected_queries_execution"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-228" />
		</insert>
		
		<insert tableName="adm_permission">
			<column name="id" valueNumeric="-229"/>
			<column name="name" value="Public queries execution"/>
			<column name="permission" value="public_queries_execution"/>
		</insert>
		
		<insert tableName="adm_role_permission">
			<column name="role_id" valueNumeric="-122" />
			<column name="permission_id" valueNumeric="-229" />
		</insert>
		
	</changeSet>
    <changeSet id="INTRD-263_20210716" author="ZBariki">
        <insert tableName="com_message_template">
            <column name="media" value="EMAIL" />
            <column name="id" valueSequenceNext="com_msg_tmpl_seq" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="REPORT_QUERY_RESULT_SUCCESS" />
            <column name="type" value="OTHER" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="description" value="Report query result" />
            <column name="subject" value="[opencell] Query result query.name query execution start date" />
            <column name="textcontent">
                <![CDATA[Dear #{userName},

The result for your query is ready.
Check the result on Opencell Portal direct link to the result on the portal

Query : #{reportQueryName}
Started : #{startDate}
Duration : #{duration}
Line count : #{lineCount}

Best regards,

Opencell team.
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="EMAIL" />
            <column name="id" valueSequenceNext="com_msg_tmpl_seq" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="REPORT_QUERY_RESULT_FAILURE" />
            <column name="type" value="OTHER" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="description" value="Report query failure notification" />
            <column name="subject" value="[opencell] Query failed query.name query execution start date" />
            <column name="textcontent">
                <![CDATA[Dear #{userName},

Query execution failed with error :
#{error}

Contact your administrator or support.

Query : #{reportQueryName}
Started : #{startDate}
Duration : #{duration}

Best regards,

Opencell team.
                ]]>
            </column>
        </insert>
    </changeSet>
    
    <changeSet id="#20210607_540_563" author="TarikFA." failOnError="false">
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-10'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="PROD-STD"/>
            <column name="tax_class_id" value="-1"/>
            <column name="invoice_sub_category_id" value="-2"/>
            <column name="description_i18n" value='{"FRA":"Remise de pied de facture","ENG":"Invoice discount"}'/>
            <column name="description" value='Invoice discount'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="63ef9cee-f498-4908-PROD-STD" />
        </insert>
    </changeSet>

    <changeSet id="#INTRD-1090_20210729" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-07-29 00:04:19.913"/>
            <column name="job_category" value="INVOICING"/>
            <column name="job_template" value="XMLInvoiceGenerationJobV2"/>
            <column name="code" value="XMLInvoiceGenerationJobV2"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="XML_Invoice_Generation_Job_V2"/>
        </insert>
    </changeSet>
    
       <changeSet id="J215_20210708" author="Mohammed_ELAZZOUZI" dbms="postgresql">
   
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-43" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.ServiceImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import service instances]"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.model.billing.SubscriptionTerminationReason;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.crm.impl.SubscriptionTerminationReasonService;


public class ServiceImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";

	private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			"ServiceInstanceService");
	CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface(
			"CustomFieldTemplateService");
	private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(
			"ServiceTemplateService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			"SubscriptionService");
	private SubscriptionTerminationReasonService reasonService = (SubscriptionTerminationReasonService) getServiceInterface(
			"SubscriptionTerminationReasonService");
	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"ServiceInstance".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(ServiceInstanceActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				ServiceInstanceActionEnum action = ServiceInstanceActionEnum.valueOf(OC_ACTION);

				String OC_Subscription_code = (String) recordMap.get("OC_Subscription_code");
				String OC_ServiceInstance_code = (String) recordMap.get("OC_ServiceInstance_code");
				List<ServiceInstance> serviceInstances = serviceInstanceService
						.findByCodeAndCodeSubscription(OC_ServiceInstance_code, OC_Subscription_code);
				
				ServiceInstance serviceInstance = null;
				if (action==ServiceInstanceActionEnum.INSTANTIATE ) {
					serviceInstance = new ServiceInstance();
					mapServiceInstanceFields(recordMap, serviceInstance);
					serviceInstance.setCode(OC_ServiceInstance_code);
					Subscription subscription = subscriptionService.findByCode(OC_Subscription_code);
					if(subscription==null) {
						throw new ValidationException("no Subscription found with subscriptionCode: '" + OC_Subscription_code + "'");
					}
					serviceInstance.setSubscription(subscription );
					ServiceTemplate serviceTemplate = serviceTemplateService.findByCode(OC_ServiceInstance_code);
					if(serviceTemplate==null) {
						throw new ValidationException("no serviceTemplate found with code: '" + OC_ServiceInstance_code + "'");
					}
					serviceInstance.setServiceTemplate(serviceTemplate);
					serviceInstanceService.create(serviceInstance);
				} else {
					if (serviceInstances == null || serviceInstances.isEmpty()) {
						throw new ValidationException("no ServiceInstanceFound for subscriptionCode/serviceInstanceCode: '"
										+ OC_Subscription_code + "'/'" + OC_ServiceInstance_code + "'");
					}
					serviceInstance = serviceInstances.get(0);
				}
				

				switch (action) {
				case INSTANTIATE:
					serviceInstanceService.serviceInstanciation(serviceInstance);
					break;
				case ACTIVATE:
					serviceInstanceService.serviceActivation(serviceInstance);
					break;
				case RESUME:
					serviceInstanceService.serviceReactivation(serviceInstance, new Date(), true, false);
					break;
				case SUSPEND:
					serviceInstanceService.serviceSuspension(serviceInstance, new Date());
					break;
				case TERMINATE:
					Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));
					String OC_terminationReason = (String) recordMap.get("OC_terminationReason");
					if(StringUtils.isBlank(OC_terminationReason)) {
						throw new ValidationException("OC_terminationReason is mandatory to terminate subscription" );
					}
					SubscriptionTerminationReason reason = reasonService.findByCodeReason(OC_terminationReason);
					if(reason==null) {
						throw new ValidationException("no TerminationReason found with code: '" + OC_terminationReason + "'");
					}
					serviceInstanceService.terminateService(serviceInstance, OC_terminationDate, reason, serviceInstance.getOrderNumber());
					break;
				case UPDATE:
					updateService(recordMap, serviceInstance);
					break;
				default:
					break;
				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private void updateService(Map<String, Object> recordMap, ServiceInstance serviceInstance) throws Exception {
		mapServiceInstanceFields(recordMap, serviceInstance);
		serviceInstanceService.update(serviceInstance);
	}

	private void mapServiceInstanceFields(Map<String, Object> recordMap, ServiceInstance serviceInstance)
			throws ParseException {

		Date subscriptionDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_subscriptionDate"));;
		Date rateUntilDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_rateUntilDate"));
		Date endAgreementDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_endAgreementDate"));
		String OC_ServiceInstance_description = (String) recordMap.get("OC_ServiceInstance_description");
		String OC_ServiceInstance_quantity = (String) recordMap.get("OC_ServiceInstance_quantity");

		serviceInstance.setSubscriptionDate(subscriptionDate);
		serviceInstance.setRateUntilDate(rateUntilDate);
		serviceInstance.setEndAgreementDate(endAgreementDate);
		serviceInstance.setQuantity(new BigDecimal(OC_ServiceInstance_quantity));
		serviceInstance.setDescription(OC_ServiceInstance_description);
		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> serviceInstance.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "ServiceInstance")));
	}
	public enum ServiceInstanceActionEnum {
		INSTANTIATE, ACTIVATE, RESUME, SUSPEND, TERMINATE, UPDATE
	}
}]]></column>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-44" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.AccessImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import access points"/>
            <column name="created" valueDate="${db.current.time}"/>
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.model.billing.Subscription;
import org.meveo.model.mediation.Access;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.medina.impl.AccessService;

public class AccessImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";

	private AccessService accessService = (AccessService) getServiceInterface("AccessService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
	CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface(
			"CustomFieldTemplateService");

	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"AccessPoint".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(AccessActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				AccessActionEnum action = AccessActionEnum.valueOf(OC_ACTION);

				Access access = validateAndGetAccess(action, recordMap);

				if (AccessActionEnum.DELETE.equals(action)) {
					accessService.remove(access);
				} else {
					setAccessValues(recordMap, access);
					if (AccessActionEnum.CREATE.equals(action)) {
				        if (accessService.isDuplicateAndOverlaps(access)) {
				            throw new BusinessException( "Duplicate subscription/access point: '"+access.getSubscription().getCode()+"'/'"+access.getAccessUserId()+"'");
				        }
						accessService.create(access);
					} else if (AccessActionEnum.UPDATE.equals(action)) {
						accessService.update(access);
					}

				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private Access validateAndGetAccess(AccessActionEnum action, Map<String, Object> recordMap) {
		Access access = null;
		String OC_subscription_code = (String) recordMap.get("OC_Subscription_code");
		String OC_Access_code = (String) recordMap.get("OC_accessPoint_code");
		List<Access> accessList = accessService.getActiveAccessByCodeAndCodeSubscription(OC_Access_code, OC_subscription_code);
		if (!AccessActionEnum.CREATE.equals(action)) {
			if (accessList == null || accessList.isEmpty()) {
				throw new ValidationException("no Access found for subscriptionCode/AccessCode: '"
						+ OC_subscription_code + "'/'" + OC_Access_code + "'");
			}
			access = accessList.get(0);
		} else {
			access = new Access();
			Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
			if (subscription == null) {
				throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
			}
			access.setSubscription(subscription);
			access.setAccessUserId(OC_Access_code);
		}
		return access;
	}

	private void setAccessValues(Map<String, Object> recordMap, Access access) throws ParseException {
		Date startDate = DateUtils.validateParseDate((String) recordMap.get("OC_accessPoint_startDate"));
		Date endDate = DateUtils.validateParseDate((String) recordMap.get("OC_accessPoint_endDate"));
		access.setEndDate(endDate);
		access.setStartDate(startDate);

		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> access.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "Access")));
	}

	public enum AccessActionEnum {
		CREATE, UPDATE, DELETE
	}
}]]></column>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-45" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.SubscriptionImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import subscriptions"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.exception.EntityDoesNotExistsException;
import org.meveo.model.admin.Seller;
import org.meveo.model.billing.Subscription;
import org.meveo.model.billing.SubscriptionTerminationReason;
import org.meveo.model.billing.UserAccount;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.crm.CustomFieldTemplate;
import org.meveo.model.crm.custom.CustomFieldMatrixColumn;
import org.meveo.model.crm.custom.CustomFieldStorageTypeEnum;
import org.meveo.model.crm.custom.CustomFieldTypeEnum;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.admin.impl.SellerService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.UserAccountService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.crm.impl.SubscriptionTerminationReasonService;

public class SubscriptionImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";
	private SubscriptionTerminationReasonService reasonService= (SubscriptionTerminationReasonService) getServiceInterface("SubscriptionTerminationReasonService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
	private UserAccountService userAccountService = (UserAccountService) getServiceInterface("UserAccountService");
	private SellerService sellerService = (SellerService) getServiceInterface("SellerService");
	private OfferTemplateService offerService = (OfferTemplateService) getServiceInterface("OfferTemplateService");
	private CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface("CustomFieldTemplateService");

	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"SUBSCRIPTION".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(SubscriptionActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				SubscriptionActionEnum action = SubscriptionActionEnum.valueOf(OC_ACTION);

				String OC_subscription_code = (String) recordMap.get("OC_subscription_code");
				Subscription subscription = subscriptionService
						.findByCode(OC_subscription_code);
				if (subscription == null && !SubscriptionActionEnum.CREATE.equals(action)) {
					throw new ValidationException("no Subscription Found for subscriptionCode: '"
							+ OC_subscription_code + "'");
				}
				if (subscription != null && SubscriptionActionEnum.CREATE.equals(action)) {
					throw new ValidationException("subscription already exists with code: '"
							+ OC_subscription_code + "'");
				}

				switch (action) {
				case CREATE:
					subscription = new Subscription();
					subscription.setCode(OC_subscription_code);
					mapSubscriptionValues(recordMap, subscription);
					subscriptionService.create(subscription);
					break;
				case ACTIVATE:
					subscriptionService.activateInstantiatedService(subscription);
					break;
				case RESUME:
					subscriptionService.subscriptionReactivation(subscription, new Date());
					break;
				case SUSPEND:
					subscriptionService.subscriptionSuspension(subscription, new Date());
					break;
				case TERMINATE:
					Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));
					String terminationCode = (String)recordMap.get("OC_subscriptionTerminationReason_code");
					if(terminationCode==null) {
						throw new ValidationException("OC_subscriptionTerminationReason_code is mandatory to terminate subscription" );
					}
					SubscriptionTerminationReason terminationReason = reasonService.findByCodeReason(terminationCode);
					if(terminationReason==null) {
						throw new EntityDoesNotExistsException(SubscriptionTerminationReason.class, terminationCode);
					}
					subscription.setSubscriptionTerminationReason(terminationReason);
					subscriptionService.terminateSubscription(subscription, OC_terminationDate, terminationReason, null);
					break;
				case UPDATE:
					mapSubscriptionValues(recordMap, subscription);
					subscriptionService.update(subscription);
					break;
				default:
					break;
				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private void mapSubscriptionValues(Map<String, Object> recordMap, Subscription subscription) throws ParseException {
		String OC_seller_code = (String) recordMap.get("OC_seller_code");
		String OC_offer_code = (String) recordMap.get("OC_offer_code");
		String OC_userAccount_code = (String) recordMap.get("OC_userAccount_code");
		Date subscriptionDate = DateUtils.validateParseDate((String) recordMap.get("OC_subscriptionDate"));
		Date endAgreementDate = DateUtils.validateParseDate((String) recordMap.get("OC_endAgreementDate"));
		Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));
		
		String OC_subscription_description = (String) recordMap.get("OC_subscription_description");

		

		UserAccount userAccount = userAccountService.findByCode(OC_userAccount_code);
		if(userAccount==null) {
			throw new EntityDoesNotExistsException(UserAccount.class, OC_userAccount_code);
		}
		Seller seller = sellerService.findByCode(OC_seller_code);
		if(seller==null) {
			throw new EntityDoesNotExistsException(Seller.class, OC_seller_code);
		}
		OfferTemplate offer = offerService.findByCode(OC_offer_code);
		if(offer==null) {
			throw new EntityDoesNotExistsException(OfferTemplate.class, OC_offer_code);
		}
		subscription.setUserAccount(userAccount);
		subscription.setSeller(seller);
		subscription.setOffer(offer);
		subscription.setTerminationDate(OC_terminationDate);
		subscription.setSubscriptionDate(subscriptionDate);
		subscription.setEndAgreementDate(endAgreementDate);
		subscription.setDescription(OC_subscription_description);
		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> subscription.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "Subscription")));
	}

	public enum SubscriptionActionEnum {
		CREATE, UPDATE, SUSPEND, RESUME, ACTIVATE, TERMINATE
	}
}]]></column>
        </insert>
   
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-46" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importServicesJob" />
            <column name="description" value="importServicesJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importServicesJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/services/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio xmlns=\"http://www.beanio.org/2012/03\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n          \t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_description\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_quantity\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_subscriptionDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_rateUntilDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_endAgreementDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationReason\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PPC_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PRIXMINUTE_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_NRC\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_CHATS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_SMS_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_NRC_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUTPARUNITE_APPEL_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_LICENCE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_SMS_SORTANT_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_UNITAIRE_OPTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_REC_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_REC\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUT_APPEL_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_EMAILS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_HITS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_TRANCHE_STOCKAGE_GO\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_TAILLE_TRANCHE_STOCKAGE_GO\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_STOCKAGE_EMAILS_GO_INCLUS\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_MIN_FACTURATION\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_description\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_quantity\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_subscriptionDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_rateUntilDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationReason\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_endAgreementDate\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PPC_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PRIXMINUTE_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_NRC\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_CHATS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_SMS_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_NRC_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUTPARUNITE_APPEL_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_LICENCE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_SMS_SORTANT_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_UNITAIRE_OPTION\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_REC_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_REC\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUT_APPEL_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_EMAILS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_HITS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_TRANCHE_STOCKAGE_GO\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_TAILLE_TRANCHE_STOCKAGE_GO\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_STOCKAGE_EMAILS_GO_INCLUS\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_MIN_FACTURATION\" required=\"false\"/>\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/services/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/services/inputs"}],
	            "waitingMillis":[{"long":0}],
	            "FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],
	            "FlatFileProcessingJob_rejectDir":[{"string":"/imports/services/rejects"}],
	            "nbRuns":[{"long":1}],
	            "FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.ServiceImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
          </insert>
          <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-47" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importSubscriptionsJob" />
            <column name="description" value="importSubscriptionsJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importSubscriptionsJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/subscriptions/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_description\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_userAccount_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_offer_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_seller_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscriptionDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_endAgreementDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscriptionTerminationReason_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PAYS_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_TYPE_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NIVEAU_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_COMMANDE_SUB\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_description\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_userAccount_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_offer_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_seller_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_subscriptionDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_endAgreementDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_subscriptionTerminationReason_code\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PAYS_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_TYPE_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NIVEAU_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_COMMANDE_SUB\" required=\"false\"/>\r\n\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/subscriptions/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/subscriptions/inputs"}],
	            "waitingMillis":[{"long":0}],"FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],"FlatFileProcessingJob_rejectDir":[{"string":"/imports/subscriptions/rejects"}],
	            "nbRuns":[{"long":1}],"FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.SubscriptionImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-48" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importAccesPointsJob" />
            <column name="description" value="importAccesPointsJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importAccesPointsJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/accessPoints/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_startDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_endDate\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_startDate\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_endDate\" required=\"true\"/>\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/accessPoints/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/accessPoints/inputs"}],
	            "waitingMillis":[{"long":0}],
	            "FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],
	            "FlatFileProcessingJob_rejectDir":[{"string":"/imports/accessPoints/rejects"}],
	            "nbRuns":[{"long":1}],
	            "FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.AccessImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
        </insert>
	</changeSet>
    
	<changeSet id="#INTRD-292_20210816" author="HatimOUDAD">
        <insert tableName="journal">
            <column name="id" valueNumeric="-1"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="SAL"/>
            <column name="description" value="Sales Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-2"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="BAN"/>
            <column name="description" value="Bank Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-3"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="MSC"/>
            <column name="description" value="Miscellaneous Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-4"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="TAX"/>
            <column name="description" value="Tax Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
    </changeSet>
	<changeSet id="#INTRD-1406_20210826" author="HatimOUDAD">
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-2" />
    		<where>code in ('PAY_CHK','PAY_TIP','PAY_DDT','REJ_CHK','REJ_DDT','REJ_TIP','PAY_NID','PAY_REC','REF_CHK','REF_DDT','PAY_DEP','REF_CRD','REJ_CRD','REJ_RCR','REJ_RDD','REF_TIP','PAY_CRD','PAY_PAL','PAY_STP','DBT_TRS','CRD_TRS')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-3" />
    		<where>code in ('EXP_WRT','INV_FEE','RND_INC','RND_EXP')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-1" />
    		<where>code in ('INV_STD','INV_REB','INV_DIS','INV_CRN')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-4" />
    		<where>code in ('TAX_VAT_00','TAX_VAT_05','TAX_VAT_20','TAX_VAT_10')</where>
    </update>
    </changeSet>


    <changeSet id="#INTRD-1589_2021_14_09" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2021-09-14 00:04:19.913" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="code" value="ProcessCustomerPaymentsFileJob" />
            <column name="description" value="Process customer payments file job"/>
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="job_speed" value="NORMAL" />
            <column name="single_node" valueNumeric="1" />
            <column name="verbose_report" valueNumeric="1" />
            <column name="disabled" valueNumeric="0" />
            <column name="uuid" value="ProcessCustomerPaymentsFileJob" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="oneFilePerJob"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Process files separately"/>
            <column name="field_type" value="BOOLEAN"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="default_value" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_outputDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Output directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="default_value" value="imports/payment/output"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:4"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_mappingConf"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Record descriptor"/>
            <column name="field_type" value="TEXT_AREA"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Record configuration:2;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_recordVariableName"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Record variable name"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="record"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="50"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_originFilename"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Filename variable name"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="origin_filename"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:3"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_archiveDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Archive directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="imports/payment/archive"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_inputDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Input directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="imports/payment/input"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="waitingMillis"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Waiting before next launch (ms)"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="0"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_variables"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Init and finalize variables"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="MAP"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="mapkey_type" value="STRING"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Dataprocessing configuration:3;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_errorAction"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Error action"/>
            <column name="field_type" value="LIST"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="CONTINUE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:5"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileFormat"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="File format"/>
            <column name="field_type" value="ENTITY"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="entity_clazz" value="org.meveo.model.admin.FileFormat"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileNameFilter"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="File name filter"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:5"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileNameExtension"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Extension"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="csv"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:6"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_formatTransfo"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Format transformation"/>
            <column name="field_type" value="LIST"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="None"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:4"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_rejectDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Reject directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:3"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_scriptsFlow"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Script flow"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="nbRuns"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Number of parallel execution"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="1"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_nbLinesToProcess"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Nb of lines to process"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="1"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:7"/>
        </insert>
		<insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-40" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="now()" />
            <column name="updated" valueDate="null" />
            <column name="uuid" value="ServiceTemplateToProductJob" />
            <column name="code" value="ServiceTemplateToProductJob" />
            <column name="description" value="ServiceTemplateToProductJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="ScriptingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="null" />
            <column name="timerentity_id" value="null" />
            <column name="cf_values">
            	<![CDATA[
            		{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ServiceTemplateToProductScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
            	]]>
			</column>
       	</insert>
	</changeSet>
	<changeSet id="INTRD_1985_20210923_data" author="TarikFA.">
		
		
        <insert tableName="generic_sequence">
            <column name="id" valueSequenceNext="generic_sequence_seq" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="quote_offer_sequence" />
            <column name="description" value="Quote Offer sequence" />
            <column name="sequence_type" value="SEQUENCE" />
            <column name="sequence_size" valueNumeric="9" />
            <column name="current_number" valueNumeric="0" />
        </insert>
        
        
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="QuoteOffer" />
			<column name="code_el" value="#{entity.quoteVersion.id}_#{entity.offerTemplate.code}_#{sequenceNextValue}" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="sequence_id" valueSequenceCurrent="generic_sequence_seq" />
		</insert>
        
        <insert tableName="generic_sequence">
            <column name="id" valueSequenceNext="generic_sequence_seq"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="order_offer_sequence" />
            <column name="description" value="Order Offer sequence" />
            <column name="sequence_type" value="SEQUENCE" />
            <column name="sequence_size" valueNumeric="9" />
            <column name="current_number" valueNumeric="0" />
        </insert>
		
	
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="OrderOffer" />
			<column name="code_el" value="#{entity.order.code}_#{entity.offerTemplate.code}_#{sequenceNextValue}" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="sequence_id" valueSequenceCurrent="generic_sequence_seq" />
		</insert>
	</changeSet>

	<changeSet id="#2122_20211001" author="YoussefIZEM">
        <update tableName="ar_account_operation">
            <column name="accounting_date" valueComputed="transaction_date"></column>
        </update>
    </changeSet>
	<changeSet id="1589_20210930" author="YoussefIZEM" dbms="postgresql">
        <insert tableName="billing_accounting_code">
            <column name="id" valueNumeric="-35" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="T3P9476" />
            <column name="description" value="WS BAD DEBT WRITE-OFFS IRRE"></column>
            <column name="chart_of_account_type" value="REVENUE" />
            <column name="chart_of_account_view_type" value="REGULAR" />
        </insert>
		<insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-50" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-35" />
            <column name="code" value="PAY_BATCH" />
            <column name="description" value="Payment from batch payment file" />
            <column name="occ_category" value="CREDIT" />
            <column name="journal_id" value="-2" />
        </insert>
        <update tableName="meveo_job_instance" >
            <column name="cf_values">
	            <![CDATA[{"FlatFileProcessingJob_mappingConf":[{"string":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beanio xmlns=\"http://www.beanio.org/2012/03\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\n   <stream name=\"record\" format=\"fixedlength\" strict=\"true\">\n      <record name=\"payment\" occurs=\"0+\" class=\"org.meveo.api.dto.payment.CustomerPaymentRecordDto\" minLength=\"80\" maxLength=\"80\">\n         <field name=\"payCode\" minOccurs=\"0\" length=\"3\" />\n         <field name=\"accountNumber\" minOccurs=\"0\" length=\"11\" />\n         <field name=\"checkDigit\" minOccurs=\"0\" length=\"2\" />\n         <field name=\"paidAmount\" minOccurs=\"0\" length=\"10\" />\n         <field name=\"filler\" minOccurs=\"0\" length=\"5\" />\n         <field name=\"date\" minOccurs=\"0\" length=\"6\" format=\"ddMMyy\"/>\n         <field name=\"reference\" minOccurs=\"0\" length=\"42\" />\n         <field name=\"endOfRecord\" minOccurs=\"0\" length=\"1\" />\n      </record>\n   </stream>\n</beanio>"}]
						,"FlatFileProcessingJob_recordVariableName":[{"string":"record"}]
						,"FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}]
						,"FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}]
						,"FlatFileProcessingJob_fileNameExtension":[{"string":"PMT"}]
						,"FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.ProcessCustomerPaymentsFileScript"}]
						,"FlatFileProcessingJob_archiveDir":[{"string":"imports/payment/archive"}]
						,"FlatFileProcessingJob_rejectDir":[{"string":"imports/payment/reject"}]
						,"FlatFileProcessingJob_outputDir":[{"string":"imports/payment/output"}]
						,"FlatFileProcessingJob_inputDir":[{"string":"imports/payment/input"}]}]]>
			</column>
            <where>code ='ProcessCustomerPaymentsFileJob'</where>
        </update>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-55" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.ProcessCustomerPaymentsFileScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="Process customer payments file script"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[
package org.meveo.service.script;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Map;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.meveo.admin.exception.BusinessException;
import org.meveo.api.dto.payment.CustomerPaymentRecordDto;
import org.meveo.commons.utils.StringUtils;
import org.meveo.model.billing.BillingAccount;
import org.meveo.model.payments.MatchingStatusEnum;
import org.meveo.model.payments.OCCTemplate;
import org.meveo.model.payments.OperationCategoryEnum;
import org.meveo.model.payments.Payment;
import org.meveo.model.payments.PaymentMethodEnum;
import org.meveo.service.billing.impl.BillingAccountService;
import org.meveo.service.billing.impl.RatingService;
import org.meveo.service.payments.impl.OCCTemplateService;
import org.meveo.service.payments.impl.PaymentService;
import org.meveo.service.script.Script;

import org.meveo.model.payments.ApplicationPropertiesEnum;
import org.meveo.model.payments.AccountOperationCFsEnum;

/**
 * @author Abdellatif BARI
 */
@Stateless
public class ProcessCustomerPaymentsFileScript extends Script {

	private transient BillingAccountService billingAccountService = (BillingAccountService) getServiceInterface(BillingAccountService.class.getSimpleName());
    
    private transient PaymentService paymentService = (PaymentService) getServiceInterface(PaymentService.class.getSimpleName());

	private transient OCCTemplateService oCCTemplateService = (OCCTemplateService) getServiceInterface(OCCTemplateService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> parameters) throws BusinessException {
        try {
            CustomerPaymentRecordDto customerPaymentRecordDto = initContext(parameters);
            processItem(customerPaymentRecordDto);
        } catch (Exception e) {
            log.error("error on process customer payments file {} ", e.getMessage(), e);
            if (e instanceof BusinessException) {
                throw e;
            } else {
                // wrap the exception in a business exception and throwing it
                throw new BusinessException(e);
            }
        }
    }

    /**
     * Init context
     *
     * @param parameters parameters
     * @return the customer payment record Dto
     * @throws BusinessException the business exception
     */
    private CustomerPaymentRecordDto initContext(Map<String, Object> parameters) throws BusinessException {
        CustomerPaymentRecordDto customerPaymentRecordDto = (CustomerPaymentRecordDto) parameters.get("record");
        if (customerPaymentRecordDto == null) {
            throw new BusinessException(String.format("Parameter record is missing"));
        }
        customerPaymentRecordDto.setErrorMessage(new StringBuilder());
        String fileName = (String) parameters.get("origin_filename");
        if (StringUtils.isBlank(fileName)) {
            throw new BusinessException(String.format("Parameter origin_filename is missing"));
        }
        customerPaymentRecordDto.setFileName(fileName);
        return customerPaymentRecordDto;
    }

    /**
     * Process item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void processItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        validateItem(customerPaymentRecordDto);
        populateItem(customerPaymentRecordDto);
        if (customerPaymentRecordDto.getErrorMessage().length() > 0) {
            throw new BusinessException(customerPaymentRecordDto.getErrorMessage().toString());
        }
    }

    /**
     * Validate item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void validateItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        if (StringUtils.isBlank(customerPaymentRecordDto.getPaidAmount())) {
            customerPaymentRecordDto.getErrorMessage().append("The payment amount is required.");
        } else {
            customerPaymentRecordDto.setPaidAmount(customerPaymentRecordDto.getPaidAmount().trim());
            if (!isDouble(customerPaymentRecordDto.getPaidAmount())) {
                customerPaymentRecordDto.getErrorMessage().append("The payment amount is invalid");
            }
        }
        if (customerPaymentRecordDto.getDate() == null) {
            customerPaymentRecordDto.getErrorMessage().append("The payment date is required");
        }
        if (StringUtils.isBlank(customerPaymentRecordDto.getEndOfRecord()) || !customerPaymentRecordDto.getEndOfRecord().equalsIgnoreCase("V")) {
            customerPaymentRecordDto.getErrorMessage().append("The end of record must always hard coded as V.");
        }
    }

    /**
     * Check number is double
     *
     * @param strNum the string number
     * @return true is the string is double.
     */
    public static boolean isDouble(String strNum) {
        if (StringUtils.isBlank(strNum)) {
            return false;
        }
        try {
            Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
    
    /**
     * Convert String to integer value (possibility to have null as default value)
     *
     * @param str string to be converted
     * @return the integer value
     */
    public static Integer toInteger(String str) {
        return toInteger(str, null);
    }

    /**
     * Convert String to integer value (possibility to have null as default value)
     *
     * @param str          string to be converted
     * @param defaultValue the default value
     * @return the integer value
     */
    public static Integer toInteger(String str, Integer defaultValue) {
        if (StringUtils.isBlank(str)) {
            return defaultValue;
        } else {
            try {
                return Integer.parseInt(str.trim());
            } catch (NumberFormatException ne) {
                return defaultValue;
            }
        }
    }
    
    /**
     * Populate tariff plan item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void populateItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        // if everything is OK and no errors
        if (customerPaymentRecordDto.getErrorMessage().length() == 0) {
            Integer accountNumber = toInteger(customerPaymentRecordDto.getAccountNumber());
            if (accountNumber != null) {
                customerPaymentRecordDto.setAccountNumber(accountNumber.toString());
            }

            BillingAccount billingAccount = billingAccountService.findByNumber(customerPaymentRecordDto.getAccountNumber());
            if (billingAccount != null) {
                // create payment.
                createPayment(customerPaymentRecordDto, billingAccount);
            } else { // the billing account is not found in Opencell
                log.warn("The billing account " + customerPaymentRecordDto.getAccountNumber() + " is not found ");
                postUnmatchedPayment(customerPaymentRecordDto);
            }
        }
    }

    /**
     * post unmatched payment into the suspense billing account
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void postUnmatchedPayment(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        // get the suspense billing account
        String suspenseBillingAccountCode = ApplicationPropertiesEnum.SUSPENSE_BILLING_ACCOUNT_CODE.getProperty();
        BillingAccount billingAccount = billingAccountService.findByCode(suspenseBillingAccountCode);
        if (billingAccount != null) {
            // Create payment and put it into the suspense billing account
            createPayment(customerPaymentRecordDto, billingAccount);
        } else {
            log.error("The suspense billing account {} is not found", suspenseBillingAccountCode);
            customerPaymentRecordDto.getErrorMessage().append("The suspense billing account " + suspenseBillingAccountCode + " is not found ");
        }
    }

    /**
     * create the customer payment
     *
     * @param billingAccount the billing account
     * @return the payment
     * @throws BusinessException the business exception
     */
    private Payment createNewPayment(CustomerPaymentRecordDto customerPaymentRecordDto, BillingAccount billingAccount) throws BusinessException {

        String occTemplateCode = ApplicationPropertiesEnum.TEMPLATE_BATCH_PAYMENT_CREDIT.getProperty();
        OCCTemplate occTemplate = oCCTemplateService.findByCode(occTemplateCode);
        if (occTemplate == null) {
            throw new BusinessException("Cannot find OCC Template with code=" + occTemplateCode);
        }

        BigDecimal amount = new BigDecimal(customerPaymentRecordDto.getPaidAmount()).divide(BigDecimal.valueOf(100));
        /*
         * if (!StringUtils.isBlank(checkDigit)) { checkDigit = checkDigit.trim(); if (checkDigit.equals("-")) { amount = amount.negate(); } }
         */

        Payment payment = new Payment();
        payment.setCustomerAccount(billingAccount.getCustomerAccount());
        payment.setPaymentMethod(PaymentMethodEnum.CARD);
        // payment.setOrderNumber(?);
        payment.setAmountWithoutTax(amount);
        payment.setAmount(amount);
        payment.setMatchingAmount(BigDecimal.ZERO);
        payment.setUnMatchingAmount(amount);
        payment.setAccountingCode(occTemplate.getAccountingCode());
        payment.setCode(occTemplate.getCode());
        payment.setDescription(occTemplate.getDescription());
        payment.setTransactionCategory(OperationCategoryEnum.CREDIT); // EIR must provide the category of the transaction CREDIT or DEBIT
        payment.setAccountCodeClientSide(occTemplate.getAccountCodeClientSide());
        payment.setReference(customerPaymentRecordDto.getReference());
        payment.setTransactionDate(customerPaymentRecordDto.getDate());
        // using the date the file is processed as the Payment Date (to be displayed on the invoice)
        payment.setDueDate(new Date());
        payment.setMatchingStatus(MatchingStatusEnum.O);
        payment.setCfValue(AccountOperationCFsEnum.BILLING_ACCOUNT_NUMBER.name(), billingAccount.getExternalRef1());
        //payment.setCfValue(FROM_AccountOperationCFsEnum.BILLING_ACCOUNT_NUMBER.name(), billingAccount.getExternalRef1());
        payment.setCfValue(AccountOperationCFsEnum.PAYMENT_FILE_ACCOUNT_CUSTOMER_NUMBER.name(), customerPaymentRecordDto.getAccountNumber());
        payment.setCfValue(AccountOperationCFsEnum.PAYMENT_FILE_NAME.name(), customerPaymentRecordDto.getFileName());
        return payment;
    }

    /**
     * create the customer payment
     *
     * @param billingAccount the billing account
     * @return the customer payment record Dto
     * @throws BusinessException the business exception
     */
    private void createPayment(CustomerPaymentRecordDto customerPaymentRecordDto, BillingAccount billingAccount) throws BusinessException {
        try {
            Payment payment = createNewPayment(customerPaymentRecordDto, billingAccount);
            paymentService.create(payment);
        } catch (BusinessException e) {
            log.error("Couldn't create Payement. error : {}", e);
            customerPaymentRecordDto.getErrorMessage().append("Couldn't create payment. error : " + e.getMessage());
        }
    }
}		]]></column>
        </insert>
    </changeSet>

     <changeSet id="INTRD-2143_20211006" author="TarikFA.">
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.OrderValidationScript" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script;
            		public class OrderValidation extends OrderValidationScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
        </insert>
    </changeSet>
    <changeSet id="INTRD-2701_20211124" author="hichamElHaloui">
        <update tableName="meveo_timer">
            <column name="sc_d_o_week" value="*" />
            <where>id=-2</where>
        </update>
    </changeSet>

    <changeSet id="INTRD-3678_20211214" author="AmineBENAICHA">
		<update tableName="meveo_script_instance">
			<column name="script">
<![CDATA[package org.meveo.service.script;
    
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.util.pagination.PaginationConfiguration;
import org.meveo.api.dto.response.PagingAndFiltering.SortOrder;
import org.meveo.api.exception.EntityDoesNotExistsException;
import org.meveo.model.article.AccountingArticle;
import org.meveo.model.article.ArticleMapping;
import org.meveo.model.article.ArticleMappingLine;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.catalog.ProductChargeTemplateMapping;
import org.meveo.model.catalog.ServiceChargeTemplate;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.cpq.Product;
import org.meveo.model.cpq.ProductVersion;
import org.meveo.model.cpq.enums.VersionStatusEnum;
import org.meveo.model.cpq.offer.OfferComponent;
import org.meveo.model.tax.TaxClass;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.article.AccountingArticleService;
import org.meveo.service.billing.impl.article.ArticleMappingLineService;
import org.meveo.service.billing.impl.article.ArticleMappingService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.cpq.ProductService;
import org.meveo.service.cpq.ProductVersionService;
import org.meveo.service.tax.TaxClassService;

public class ServiceTemplateToProductScript extends Script {
    private static final long serialVersionUID = -6513133027379352381L;

    // Script parameters
    public static final String DEFAULT_TAX_CLASS_CODE = "NORMAL";
    public static final long ARTICLE_MAPPING_ID = 1L;
    private static final Integer PAGE_COUNT = 100;

    private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(ServiceInstanceService.class.getSimpleName());
    private ProductService productService = (ProductService) getServiceInterface(ProductService.class.getSimpleName());
    private ProductVersionService productVersionService = (ProductVersionService) getServiceInterface(ProductVersionService.class.getSimpleName());
    private OfferTemplateService offerTemplateService= (OfferTemplateService) getServiceInterface(OfferTemplateService.class.getSimpleName());
    private AccountingArticleService accountingArticleService = (AccountingArticleService) getServiceInterface(AccountingArticleService.class.getSimpleName());
    private ArticleMappingService articleMappingService = (ArticleMappingService) getServiceInterface(ArticleMappingService.class.getSimpleName());
    private ArticleMappingLineService articleMappingLineService = (ArticleMappingLineService) getServiceInterface(ArticleMappingLineService.class.getSimpleName());
    private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(ServiceTemplateService.class.getSimpleName());
    private TaxClassService taxClassService = (TaxClassService) getServiceInterface(TaxClassService.class.getSimpleName());

    private TaxClass defaultTaxClass;
    private ArticleMapping defaultArticleMapping;

    @Override
    public void init(Map<String, Object> methodContext) throws BusinessException {
        defaultTaxClass = taxClassService.findByCode(DEFAULT_TAX_CLASS_CODE);
        if (defaultTaxClass == null) {
            throw new EntityDoesNotExistsException(TaxClass.class, DEFAULT_TAX_CLASS_CODE);
        }

        defaultArticleMapping = articleMappingService.findById(ARTICLE_MAPPING_ID);
        if (defaultArticleMapping == null) {
            throw new EntityDoesNotExistsException(ArticleMapping.class, ARTICLE_MAPPING_ID);
        }
    }

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        log.info("Migration started at {}", new Date());

        long count = 0;
        List<ServiceTemplate> serviceTemplates = (List<ServiceTemplate>) methodContext.get("SERVICE_TEMPLATE");
        
        if(serviceTemplates != null && !serviceTemplates.isEmpty()) {
            count = serviceTemplates.size();
            serviceTemplates.forEach(this::map);
        } else {

            count = serviceTemplateService.count(new PaginationConfiguration("id", SortOrder.ASCENDING));

            if (PAGE_COUNT < count) {
                serviceTemplateService.list(new PaginationConfiguration(null, null))
                        .forEach(this::map);
            } else {
                for (int index = 0; index < count; index = index + PAGE_COUNT) {
                    serviceTemplateService.list(new PaginationConfiguration(index, PAGE_COUNT, null, null, null, "id", SortOrder.ASCENDING))
                            .forEach(this::map);
                }
            }
        }

        log.info("Number of services migrated={}", count);
        log.info("Migration ended at {}", new Date());
    }

    public Product map(ServiceTemplate serviceTemplate) {
        Product product = createProduct(serviceTemplate);
        createArticle(product);

        ProductVersion productVersion = createProductVersion(product);

        List<ServiceInstance> serviceInstances = serviceInstanceService.findByServiceTemplate(serviceTemplate);

        serviceInstances.forEach(serviceInstance -> {

            serviceInstance.setProductVersion(productVersion);
            serviceInstance.setServiceTemplate(null);
            serviceInstanceService.update(serviceInstance);

            OfferTemplate offer = serviceInstance.getSubscription().getOffer();
            OfferComponent offerComponent = new OfferComponent();
            offerComponent.setProduct(product);
            offerComponent.setOfferTemplate(offer);
            offer.getOfferComponents().add(offerComponent);
            offer.getOfferServiceTemplates().removeIf(o -> o.getServiceTemplate().getId().equals(serviceTemplate.getId()));
            offerTemplateService.update(offer);
        });

        return product;
    }

    private void createArticle(Product product) {
        product.getProductCharges().stream()
                .map(pc -> pc.getChargeTemplate())
                .forEach(chargeTemplate -> {
                    AccountingArticle accountingArticle;
                    List<AccountingArticle> accountingArticles = accountingArticleService.findByTaxClassAndSubCategory(chargeTemplate.getTaxClass(), chargeTemplate.getInvoiceSubCategory());
                    if(accountingArticles.isEmpty()) {
                        accountingArticle = new AccountingArticle(UUID.randomUUID().toString(), "Migration Accounting article", defaultTaxClass, chargeTemplate.getInvoiceSubCategory());
                        accountingArticleService.create(accountingArticle);
                    } else {
                        accountingArticle = accountingArticles.get(0);
                    }

                    ArticleMappingLine articleMappingLine = new ArticleMappingLine();
                    articleMappingLine.setChargeTemplate(chargeTemplate);
                    articleMappingLine.setArticleMapping(defaultArticleMapping);
                    articleMappingLine.setProduct(product);
                    articleMappingLine.setAccountingArticle(accountingArticle);
                    articleMappingLineService.create(articleMappingLine);
                });

    }

    private Product createProduct(ServiceTemplate serviceTemplate) {
        Product product = new Product();
        product.setCode(serviceTemplate.getCode());
        product.setDescription(serviceTemplate.getDescription());
        List<ProductChargeTemplateMapping> productCharges = getProductCharges(serviceTemplate);
        product.setProductCharges(productCharges);
        product.setCfValues(serviceTemplate.getCfValues());
        product.setCfAccumulatedValues(serviceTemplate.getCfAccumulatedValues());
        product.setDisabled(serviceTemplate.isDisabled());
        productService.create(product);
        return product;
    }

    private ProductVersion createProductVersion(Product product) {
        ProductVersion productVersion= new ProductVersion();
        productVersion.setProduct(product);
        productVersion.setShortDescription(product.getDescription());
        productVersion.setStatus(VersionStatusEnum.PUBLISHED);
        productVersion.setStatusDate(Calendar.getInstance().getTime());
        productVersionService.create(productVersion);
        return productVersion;
    }

    private ProductChargeTemplateMapping mapToProductChargeTemplate(ServiceChargeTemplate serviceCharge) {
        ProductChargeTemplateMapping productChargeTemplateMapping = new ProductChargeTemplateMapping();
        productChargeTemplateMapping.setChargeTemplate(serviceCharge.getChargeTemplate());
        return productChargeTemplateMapping;
    }

    private List<ProductChargeTemplateMapping> getProductCharges(ServiceTemplate serviceTemplate) {
        List<ProductChargeTemplateMapping> productCharges = serviceTemplate.getServiceSubscriptionCharges()
                .stream()
                .map(this::mapToProductChargeTemplate)
                .collect(Collectors.toList());

        productCharges.addAll(
                serviceTemplate.getServiceRecurringCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceTerminationCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceUsageCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );
        return productCharges;
    }
}]]>
	         </column>
	         <where>code='org.meveo.service.script.ServiceTemplateToProductScript'</where>
		</update>
	</changeSet>
	
	<changeSet id="#4044_30122021_counter_period_job" author="Mbarek-Ay">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-49" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2021-12-30 00:00:00.000" />
            <column name="job_category" value="UTILS" />
            <column name="job_template" value="CounterPeriodJob" />
            <column name="code" value="CounterPeriodJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Counter period job"/>
            <column name="uuid" value="CounterPeriodJob" />
        </insert>
    </changeSet>
    <changeSet id="INTRD-3765_07012022" author="hichamElHaloui">
        <sql><![CDATA[ UPDATE ${db.schema.adapted}meveo_script_instance set script = '
package org.meveo.service.script;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;

import javax.persistence.Query;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

	private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
			AccountOperationService.class.getSimpleName());
	private final CustomerService customerService = (CustomerService) getServiceInterface(
			CustomerService.class.getSimpleName());
	private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
			InvoiceService.class.getSimpleName());
	private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			SubscriptionService.class.getSimpleName());
	private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
			RatedTransactionService.class.getSimpleName());
	private final WalletService walletService = (WalletService) getServiceInterface(
			WalletService.class.getSimpleName());
	private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
			RejectedBillingAccountService.class.getSimpleName());
	private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
			CounterInstanceService.class.getSimpleName());
	private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
			CounterPeriodService.class.getSimpleName());
	private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
			OrderItemService.class.getSimpleName());
	private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
			ProductInstanceService.class.getSimpleName());
	private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
			BusinessEntityService.class.getSimpleName());
	private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
			WalletOperationService.class.getSimpleName());
	private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			ServiceInstanceService.class.getSimpleName());

	private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

	@SuppressWarnings("rawtypes")
	private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
			ChargeInstanceService.class.getSimpleName());

	private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		log.debug(" >>> execute {} ", methodContext.entrySet());

		try {

			Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
			if (MapUtils.isEmpty(record)) {
				throw new BusinessException(String.format("Parameter RECORD is missing"));
			}

			final String customerCode = record.get("customerCode");
			Customer customer = customerService.findByCode(customerCode);
			if (customer == null) {
				throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
			}

			String noCheckVal = record.get("noCheck");
			if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
				throw new BusinessException(
						String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
			}
			boolean noCheck = "1".contentEquals(noCheckVal);

			if (!noCheck) {
				// If noCheck is 0 then the following conditions must be met in order to allow
				// deletion:
				// No unmatched AO
				// No open EDR/WO/RT

				this.checkUnmatchedAOs(customer);
				this.checkOpenEDRs(customer);
				this.checkOpenWOs(customer);
				this.checkOpenRTs(customer);
			}

			this.removeCustomerHirarchy(customer);

		} catch (BusinessException be) {
			throw be;
		} catch (Exception e) {
			log.error(" Error executing DeleteCustomersScript ", e);
			throw new BusinessException(e.getMessage());
		}
	}

	private void checkOpenEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenEDRs for customer = {} ", customer);
			String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Object count = edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId())
					.getSingleResult();
			log.debug(" count of open EDRs = {} ", count);
			log.debug(" End checkOpenEDRs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open EDRs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenWOs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenWOs for customer = {} ", customer);
			String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
			final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
					WalletOperationService.class.getSimpleName());

			Object count = walletOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open WOs = {} ", count);
			log.debug(" End checkOpenWOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open WOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenRTs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkOpenRTs for customer = {} ", customer);
			String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
			Object count = this.ratedTransactionService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open RTs = {} ", count);
			log.debug(" End checkOpenRTs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open RTs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkUnmatchedAOs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
			String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
			final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
					AccountOperationService.class.getSimpleName());
			Object count = accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of unmatched AOs = {} ", count);
			log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeCustomerHirarchy(Customer customer) throws BusinessException {
		log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

		//
		// A workaround for #4134 , no need for this method if #4134 is fixed (only
		// 6.1.X is concerned)!
      	this.nullifyDDRequestItem(customer);
		this.nullifyAOsSeller(customer);

      	this.removeWalletOperations(customer);
		this.removeChargeInstances(customer);
		// the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
		this.nullifySubCategoryInvoiceAgregatesWallet(customer);
		this.removeRatedTransactions(customer);
		this.nullifyWalletInstanceInUserAccount(customer);
		this.removeWalletInstances(customer);

		this.removePaymentHistory(customer);
//		this.removeRatedTransactions(customer);

		this.removeMatchingAmounts(customer);
		this.nullifyRecordedInvoice(customer);
		this.removeInvoices(customer);



		this.removeServiceInstances(customer);
		this.removeAccess(customer);
		this.removeEDRs(customer);
		this.removeDiscountPlanInstance(customer);
		this.nullifyAOSubscriptions(customer);
		this.removeSubscriptions(customer);
		this.removeRejectedBAs(customer);

		this.removeCounterPeriods(customer);
		this.removeCounterInstances(customer);
		this.removeOrderItems(customer);
		this.removeProductInstances(customer);


		this.customerService.remove(customer);

		log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
	}

	private void nullifyWalletInstanceInUserAccount(Customer customer) {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);
		String query = "Update UserAccount ua set ua.wallet = null where ua.wallet.id in (select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId)";
		edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);

			String queryText = "delete from EDR edr1 where edr1.id in (select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			edrService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeMatchingAmounts(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

			final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
			final String query = "delete from MatchingAmount ma1 where ma1.id in (select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId )";
			matchingAmountService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeMatchingAmounts for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeAccess(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeAccess for customer = {} ", customer);

			final AccessService accessService = (AccessService) getServiceInterface(
					AccessService.class.getSimpleName());

			final String queryText = "delete from Access a1 where a1.id in (select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			accessService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeAccess for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeServiceInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeServiceInstances for customer = {} ", customer);

			String queryText = "delete from ServiceInstance si1 where si1.id in (select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";
			this.serviceInstanceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeServiceInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeWalletOperations(Customer customer) throws BusinessException {
		try {
			log.debug(" removeWalletOperations for customer={} ", customer);
			String queryText = "delete from WalletOperation wo where wo.id in ( select wo1.id from WalletOperation wo1  where wo1.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";

			Query query = this.walletOperationService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();
		} catch (Exception e) {
			log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void removePaymentHistory(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removePaymentHistory for customer = {} ", customer);

			String query = "delete from PaymentHistory ph1 where ph1.id in (select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode) ";
			int count = this.businessEntityService.getEntityManager().createQuery(query)
					.setParameter("customerCode", customer.getCode()).executeUpdate();

			log.debug(" {} PaymentHistory to delete ", count);
			log.debug(" End removePaymentHistory for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */

 private void nullifyDDRequestItem(Customer customer){

    try {
			log.debug(" Start deleteDDRequestItem for customer = {} ", customer);

			String query = "update DDRequestItem ddri set ddri.automatedPayment= null where ddri.automatedPayment.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
  }
	private void nullifyAOsSeller(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

			String query = "UPDATE AccountOperation ao1 SET ao1.seller = null where ao1.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);

			StringBuilder query = new StringBuilder( "UPDATE SubCategoryInvoiceAgregate subCat SET subCat.wallet = null ")
					.append(" where subCat.id in (select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId) ");

			int count = this.accountOperationService.getEntityManager().createQuery(query.toString()).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", count);
			log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeProductInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeProductInstances for customer = {} ", customer);
			String query = "delete from ProductInstance pi where pi.id in (select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			productInstanceService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();
			log.debug(" End removeProductInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void removeOrderItems(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeOrderItem for customer = {} ", customer);

			String query = "delete from OrderItem oi where oi.id in (select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";

			orderItemService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeOrderItem for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeCounterPeriods(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterPeriods for customer = {} ", customer);
			String queryText = "delete from CounterPeriod cp1 where cp1.id in ( select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			counterInstanceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();
			log.debug(" End removeCounterPeriods for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeCounterInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterInstances for customer = {} ", customer);

			String query = "delete from CounterInstance c1 where c1.id in (select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			counterInstanceService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeCounterInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void removeRejectedBAs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRejectedBAs for customer = {} ", customer);

			String queryText = "delete from RejectedBillingAccount rba1 where rba1.id in (select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId )";
			rejectedBillingAccountService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeRejectedBAs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}




	private void nullifyRecordedInvoice(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRecordedInvoice for customer = {} ", customer);

			String queryText = "update  RecordedInvoice ri   set ri.invoice = null where ri.invoice.id in ( select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer.id =:customerId )";
			invoiceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeRecordedInvoice for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRecordedInvoice : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeInvoices(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeInvoices for customer = {} ", customer);

			String queryText = "delete from Invoice inv1 where inv1.id in (select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer.id =:customerId )";
			invoiceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeInvoices for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeWalletInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletInstances for customer = {} ", customer);

			String queryText = "delete from WalletInstance wi1 where wi1.id in (select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";
			this.walletService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeWalletInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeRatedTransactions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRatedTransactions for customer = {} ", customer);

						String queryText = "delete from RatedTransaction rt1 where rt1.id in (select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId )";
			Query query =chargeInstanceService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();

			log.debug(" End removeRatedTransactions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeChargeInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeChargeInstances for customer = {} ", customer);

			String queryText = "delete from ChargeInstance ci1 where ci1.id in (select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			Query query =chargeInstanceService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();

			log.debug(" End removeChargeInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void nullifyAOSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOSubscriptions for customer = {} ", customer);
						String queryText = "update AccountOperation  ao set ao.subscription= null where ao.subscription.id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End nullifyAOSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
						String queryText = "delete from Subscription s1 where s1.id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeDiscountPlanInstance(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
						String queryText = "delete from DiscountPlanInstance dpi where subscription_id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private <T> Collection<T> safe(Collection<T> collection) {
		return collection == null ? Collections.EMPTY_LIST : collection;
	}
}' where id= -23 ;]]>
		</sql>
	</changeSet>
	
    <changeSet id="#INTRD-5242__22-02-2022" author="Mohammed_ELAZZOUZI">
    	<sql>delete from ${db.schema.adapted}crm_custom_field_tmpl_val where customfieldtemplate_id = (SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')</sql>
	    <sql>delete from ${db.schema.adapted}crm_custom_field_tmpl where applies_to='JobInstance_InvoiceLinesJob' and code ='AggregationOptions'</sql>
	    <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="JobInstance_InvoiceLinesJob_AggregationPerUnitAmount"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="description" value="aggregation per unit amount"/>
            <column name="field_type" value="BOOLEAN"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="default_value" value="0"/>
            <column name="creator" value="applicationInitializer"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="JobInstance_InvoiceLinesJob_ILDateAggregationOptions"/>
            <column name="description" value="date aggregation options"/>
            <column name="field_type" value="LIST"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="NO_DATE_AGGREGATION"/>
            <column name="listvalues_key" value="NO_DATE_AGGREGATION"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="MONTH_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="MONTH_OF_USAGE_DATE"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="WEEK_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="WEEK_OF_USAGE_DATE"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="DAY_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="DAY_OF_USAGE_DATE"/>
        </insert>
    </changeSet>
</databaseChangeLog>