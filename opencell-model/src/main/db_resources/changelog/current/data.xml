<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet id="#INTRD-1166_20211018_Business_attributes" author="MohammedELAZZOUZI">
		<insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="product activation date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-1"></column>
        	<column name="code" value="product activation date"></column>
        	<column name="description" value="Product activation date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="product quantity" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-2"></column>
        	<column name="code" value="product quantity"></column>
        	<column name="description" value="Product quantity"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="usage date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-3"></column>
        	<column name="code" value="usage date"></column>
        	<column name="description" value="Usage date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="usage quantity" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-4"></column>
        	<column name="code" value="usage quantity"></column>
        	<column name="description" value="Usage quantity"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="renewal date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-5"></column>
        	<column name="code" value="renewal date"></column>
        	<column name="description" value="Renewal date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="delivery date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-6"></column>
        	<column name="code" value="delivery date"></column>
        	<column name="description" value="Delivery date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="quote validation date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-7"></column>
        	<column name="code" value="quote validation date"></column>
        	<column name="description" value="Quote validation date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="subscription date" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-8"></column>
        	<column name="code" value="subscription date"></column>
        	<column name="description" value="Subscription date"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="subscription age months" />
        	<column name="attribute_type" value="INTEGER"></column>
        	<column name="id" valueNumeric="-9"></column>
        	<column name="code" value="subscription age months"></column>
        	<column name="description" value="Subscription age months"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="subscription age days" />
        	<column name="attribute_type" value="INTEGER"></column>
        	<column name="id" valueNumeric="-10"></column>
        	<column name="code" value="subscription age days"></column>
        	<column name="description" value="Subscription age days"></column>
        </insert>
         <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 1" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-11"></column>
        	<column name="code" value="EDR text parameter 1"></column>
        	<column name="description" value="EDR text parameter 1"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 2" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-12"></column>
        	<column name="code" value="EDR text parameter 2"></column>
        	<column name="description" value="EDR text parameter 2"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 3" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-13"></column>
        	<column name="code" value="EDR text parameter 3"></column>
        	<column name="description" value="EDR text parameter 3"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 4" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-14"></column>
        	<column name="code" value="EDR text parameter 4"></column>
        	<column name="description" value="EDR text parameter 4"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 5" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-15"></column>
        	<column name="code" value="EDR text parameter 5"></column>
        	<column name="description" value="EDR text parameter 5"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 6" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-16"></column>
        	<column name="code" value="EDR text parameter 6"></column>
        	<column name="description" value="EDR text parameter 6"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 7" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-17"></column>
        	<column name="code" value="EDR text parameter 7"></column>
        	<column name="description" value="EDR text parameter 7"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 8" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-18"></column>
        	<column name="code" value="EDR text parameter 8"></column>
        	<column name="description" value="EDR text parameter 8"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR text parameter 9" />
        	<column name="attribute_type" value="TEXT"></column>
        	<column name="id" valueNumeric="-19"></column>
        	<column name="code" value="EDR text parameter 9"></column>
        	<column name="description" value="EDR text parameter 9"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 1" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-21"></column>
        	<column name="code" value="EDR date parameter 1"></column>
        	<column name="description" value="EDR date parameter 1"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 2" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-22"></column>
        	<column name="code" value="EDR date parameter 2"></column>
        	<column name="description" value="EDR date parameter 2"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 3" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-23"></column>
        	<column name="code" value="EDR date parameter 3"></column>
        	<column name="description" value="EDR date parameter 3"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 4" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-24"></column>
        	<column name="code" value="EDR date parameter 4"></column>
        	<column name="description" value="EDR date parameter 4"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR date parameter 5" />
        	<column name="attribute_type" value="DATE"></column>
        	<column name="id" valueNumeric="-25"></column>
        	<column name="code" value="EDR date parameter 5"></column>
        	<column name="description" value="EDR date parameter 5"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 1" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-31"></column>
        	<column name="code" value="EDR numeric parameter 1"></column>
        	<column name="description" value="EDR numeric parameter 1"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 2" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-32"></column>
        	<column name="code" value="EDR numeric parameter 2"></column>
        	<column name="description" value="EDR numeric parameter 2"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 3" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-33"></column>
        	<column name="code" value="EDR numeric parameter 3"></column>
        	<column name="description" value="EDR numeric parameter 3"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 4" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-34"></column>
        	<column name="code" value="EDR numeric parameter 4"></column>
        	<column name="description" value="EDR numeric parameter 4"></column>
        </insert>
        <insert tableName="cpq_attribute">
        	<column name="version" value="0"></column>
        	<column name="disabled" valueNumeric="0" />
        	<column name="created" valueDate="${db.current.time}"></column>
        	<column name="creator" value="applicationInitializer"></column>
        	<column name="attribute_category" value="BUSINESS"></column>
        	<column name="uuid" value="EDR numeric parameter 5" />
        	<column name="attribute_type" value="NUMERIC"></column>
        	<column name="id" valueNumeric="-35"></column>
        	<column name="code" value="EDR numeric parameter 5"></column>
        	<column name="description" value="EDR numeric parameter 5"></column>
        </insert>
    </changeSet>
    
    <changeSet id="#INTRD-1166_20211110_Business_attributes" author="MohammedELAZZOUZI">
    	<sql>update cpq_attribute set code = replace(code, ' ', '_') where code like '% %'</sql>
    </changeSet>
    
    <changeSet id="#NTRD-2413_20211028_Business_attributes_add_el" author="MohammedELAZZOUZI">
		<update tableName="cpq_attribute"><column name="el_value">${serviceInstance.getActivationDate()}</column><where>id=-1</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${serviceInstance.getQuantity()}</column><where>id=-2</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getEventDate()}</column><where>id=-3</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getQuantity()}</column><where>id=-4</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${sub.getRenewalDate()}</column><where>id=-5</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${serviceInstance.getDeliveryDate()}</column><where>id=-6</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${quote.getValidationDate()}</column><where>id=-7</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${sub.getSubscriptionDate()}</column><where>id=-8</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${sub.getSubscriptionMonthsAge()}</column><where>id=-9</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${sub.getSubscriptionDaysAge()}</column><where>id=-10</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter1()}</column><where>id=-11</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter2()}</column><where>id=-12</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter3()}</column><where>id=-13</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter4()}</column><where>id=-14</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter5()}</column><where>id=-15</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter6()}</column><where>id=-16</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter7()}</column><where>id=-17</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter8()}</column><where>id=-18</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getParameter9()}</column><where>id=-19</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam1()}</column><where>id=-21</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam2()}</column><where>id=-22</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam3()}</column><where>id=-23</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam4()}</column><where>id=-24</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDateParam5()}</column><where>id=-25</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam1()}</column><where>id=-31</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam2()}</column><where>id=-32</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam3()}</column><where>id=-33</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam4()}</column><where>id=-34</where></update>
        <update tableName="cpq_attribute"><column name="el_value">${edr.getDecimalParam5()}</column><where>id=-35</where></update>
    </changeSet>
    
    <changeSet id="#5417_20200929 - Error while running CUSTOMERS_PER_SELLER report extracts" author="Mohamed-Ali-HAMMAL">
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
					        , ce.description AS "Seller description"
					        , coalesce(ce.code, '') AS "Customer code"
					        , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
					from  crm_seller s left
					        OUTER JOIN crm_customer c  on c.seller_id = s.id left
					        OUTER JOIN account_entity ce  on c.id = ce.id
					where( ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
					order by ce.code
			    ]]></column>
            <where>code='CUSTOMERS_PER_SELLER'</where>
        </update>
    </changeSet>

    <changeSet author="Mohammed_ELAZZOUZI" id="rebuild-data-cat_unit_of_measure">
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-1" />
            <column name="symbol" value="B" />
            <column name="code" value="byte" />
            <column name="description" value="Byte" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-2" />
            <column name="symbol" value="KB" />
            <column name="code" value="kilobyte" />
            <column name="description" value="Kilobyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-3" />
            <column name="symbol" value="MB" />
            <column name="code" value="megabyte" />
            <column name="description" value="Megabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-4" />
            <column name="symbol" value="GB" />
            <column name="code" value="gigabyte" />
            <column name="description" value="Gigabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000000" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-5" />
            <column name="symbol" value="TB" />
            <column name="code" value="terabyte" />
            <column name="description" value="Terabyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1000000000000" />
        </insert>
                <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-6" />
            <column name="symbol" value="KiB" />
            <column name="code" value="kibi" />
            <column name="description" value="Kibibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1024" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-7" />
            <column name="symbol" value="MiB" />
            <column name="code" value="mebibyte" />
            <column name="description" value="Mebibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1048576" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-8" />
            <column name="symbol" value="GiB" />
            <column name="code" value="gibibyte" />
            <column name="description" value="Gibibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1073741824" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-9" />
            <column name="symbol" value="TiB" />
            <column name="code" value="tebibyte" />
            <column name="description" value="Tebibyte" />
            <column name="parent_id" valueNumeric="-1" />
            <column name="multiplicator" valueNumeric="1099511627776" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-10" />
            <column name="symbol" value="s" />
            <column name="code" value="second" />
            <column name="description" value="Second" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-11" />
            <column name="symbol" value="min" />
            <column name="code" value="minute" />
            <column name="description" value="Minute" />
            <column name="multiplicator" valueNumeric="60" />
            <column name="parent_id" valueNumeric="-10" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-12" />
            <column name="symbol" value="h" />
            <column name="code" value="hour" />
            <column name="description" value="Hour" />
            <column name="multiplicator" valueNumeric="3600" />
            <column name="parent_id" valueNumeric="-10" />
        </insert>
        <insert tableName="cat_unit_of_measure">
            <column name="created" valueDate="2019-11-19 12:00:00.000" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="0" />

            <column name="id" valueNumeric="-13" />
            <column name="symbol" value="msg" />
            <column name="code" value="message" />
            <column name="description" value="Message" />
            <column name="multiplicator" valueNumeric="1" />
        </insert>
    </changeSet>

    <changeSet id="500X_20200218_purge_job" author="mohamed.el.youssoufi">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-28" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2019-02-18 00:00:00.000" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="PurgeMediationDataJobV2" />
            <column name="code" value="PurgeMediationDataJobV2" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Purge not open EDR, WO, RTx"/>
            <column name="uuid" value="PurgeMediationDataJobV2" />
            <column name="cf_values" value='{"PurgeMediationDataJobV2_firstTransactionDate":[{"date":"2017-01-01T00:00:00Z"}]}'></column>
        </insert>
    </changeSet>

    <changeSet id="#4924_20200219" author="anasseh">
      <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="PAYPAL" />
        </insert>
      <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="STRIPE" />
        </insert>
   </changeSet>

    <changeSet id="#4924_20200219_2" author="anasseh">
       <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-46" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="PAY_PAL" />
            <column name="description" value="Payment Paypal" />
            <column name="occ_category" value="CREDIT" />
        </insert>
       <insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-47" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-3" />
            <column name="account_code_client_side" value="411000000" />
            <column name="code" value="PAY_STP" />
            <column name="description" value="Payment Stripe" />
            <column name="occ_category" value="CREDIT" />
        </insert>
      </changeSet>

      <changeSet id="#5308_20200618 - Add script" author="AndriusKarpavicius">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.validation.CheckReferencesWhenDeletingScript" />
            <column name="src_type" value="JAVA_CLASS" />
            <column name="description" value="Data integrity check at deletion - reference to custom table"/>
            <column name="created" valueDate="${db.current.time}" />
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.validation.CheckValidityDatesScript" />
            <column name="src_type" value="JAVA_CLASS" />
            <column name="description" value="Data integrity check at create - update - record validity overlap"/>
            <column name="created" valueDate="${db.current.time}" />
        </insert>
      </changeSet>

	<changeSet id="#5303_20200707 - CDR and Mediation" author="AmineTazi">
		<insert tableName="adm_permission">
            <column name="id" valueNumeric="-119" />
            <column name="name" value="CDR Manager" />
            <column name="permission" value="cdrManager" />
        </insert>
        <insert tableName="adm_permission">
            <column name="id" valueNumeric="-120" />
            <column name="name" value="CDR Visualizer" />
            <column name="permission" value="cdrVisualizer" />
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-119"></column>
        </insert>
                <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-120"></column>
        </insert>
	</changeSet>
	<changeSet id="#5418_20201030" author="Mohammed_ELAZZOUZI">
	    <insert tableName="adm_role">
            <column name="id" valueNumeric="-200" />
            <column name="version" valueNumeric="0" />
            <column name="role_description" value="API v2 full access" />
            <column name="role_name" value="APIv2_FULL_ACCESS" />
        </insert>
        <insert tableName="adm_user_role">
            <column name="user_id" valueNumeric="-1" />
            <column name="role_id" valueNumeric="-200" />
        </insert>
        <insert tableName="adm_user_role">
            <column name="user_id" valueNumeric="-2" />
            <column name="role_id" valueNumeric="-200" />
        </insert>
	</changeSet>
 	<changeSet id="#5303_20200814 - CDR and Mediation" author="AmineTazi">
		<insert tableName="adm_permission">
            <column name="id" valueNumeric="-121" />
            <column name="name" value="CDR Rate Manager" />
            <column name="permission" value="cdrRateManager" />
        </insert>
        <insert tableName="adm_role_permission">
            <column name="role_id" value="-1"></column>
            <column name="permission_id" value="-121"></column>
        </insert>
	</changeSet>

    <changeSet id="#5425_20200930 - Failed to execute some report extract" author="Mohamed-Ali-HAMMAL">
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
					        , ce.description AS "Seller description"
					        , coalesce(ce.code, '') AS "Customer code"
					        , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
					from  crm_seller s left
					        OUTER JOIN crm_customer c  on c.seller_id = s.id left
					        OUTER JOIN account_entity ce  on c.id = ce.id
					where( ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
					order by ce.code
			    ]]></column>
            <where>code='CUSTOMERS_PER_SELLER'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , coalesce(ce.code, '') AS "Customer code"
                    , coalesce(replace(ce.description, ',', ' '), '') AS "Customer description"
                    , coalesce(cae.code, '') AS "Customer Account code"
                    , coalesce(replace(cae.description, ',', ' '), '') AS "Customer Account description"
                    , coalesce(bae.code, '') AS "Billing Account code"
                    , coalesce(replace(bae.description, ',', ' '), '') AS "Billing Account description"
                    , coalesce(uae.code, '') AS "User Account code"
                    , coalesce(replace(uae.description, ',', ' '), '') AS "User Account description"
                    , coalesce(su.code, '') AS "Subscription code"
                    , coalesce(replace(su.description, ',', ' '), '') AS "Subscription description"
                    , coalesce(ap.acces_user_id, '') AS "Access Point id"
                from  crm_seller s full
                    OUTER JOIN crm_customer c  on c.seller_id = s.id full
                    OUTER JOIN account_entity ce  on c.id = ce.id full
                    OUTER JOIN ar_customer_account ca  on ca.customer_id = c.id full
                    OUTER JOIN account_entity cae  on ca.id = cae.id full
                    OUTER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id full
                    OUTER JOIN account_entity bae  on ba.id = bae.id full
                    OUTER JOIN billing_user_account ua  on ua.billing_account_id = ba.id full
                    OUTER JOIN account_entity uae  on ua.id = uae.id full
                    OUTER JOIN billing_subscription su  on su.user_account_id = ua.id full
                    OUTER JOIN medina_access ap  on ap.subscription_id = su.id
                where ce.code ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or cae.code ilike '%'
                    || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%'
                    || :SEARCH_CRITERION || '%'  or uae.code ilike '%' || :SEARCH_CRITERION
                    || '%'  or uae.description ilike '%' || :SEARCH_CRITERION || '%'  or su.code ilike '%'
                    || :SEARCH_CRITERION || '%'  or su.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ap.acces_user_id ilike '%' || :SEARCH_CRITERION || '%'
                order by ce.code
                    ,cae.code
                    ,bae.code
                    ,uae.code
                    ,su.code
                    ,ap.acces_user_id
			    ]]></column>
            <where>code='FULL_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
                    , ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , ce.code AS "Customer code"
                    , ce.description AS "Customer description"
                    , cae.code AS "Customer Account code"
                    , cae.description AS "Customer Account description"
                    , bae.code AS "Billing Account code"
                    , bae.description AS "Billing Account description"
                    , it.code AS "Invoice type code"
                    , it.description AS "Invoice type description"
                    , to_char(sum(i.amount_without_tax), '9999999990.00') AS "Amount without tax"
                    , to_char(sum(i.amount_with_tax), '9999999990.00') AS "Amount with tax"
                from crm_seller s
                    INNER JOIN crm_customer c  on c.seller_id = s.id
                    INNER JOIN account_entity ce  on c.id = ce.id
                    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                    INNER JOIN account_entity cae  on ca.id = cae.id
                    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                    INNER JOIN account_entity bae  on ba.id = bae.id
                    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or cae.code ilike '%' || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  )  group by date_trunc('month', i.invoice_date)
                    , it.code
                    , it.description
                    , ce.code
                    , ce.description
                    , cae.code
                    , cae.description
                    , bae.code
                    , bae.description order by date_trunc('month', i.invoice_date) DESC
                    , it.code DESC
                    , ce.code
                    , cae.code
                    , bae.code
			    ]]></column>
            <where>code='INVOICED_BA_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS  Month
                        , ce.code AS  "Seller code"
                        , ce.description AS  "Seller description"
                        , it.code AS  "Invoice type code"
                        , it.description AS  "Invoice type description"
                        , to_char(sum(i.amount_without_tax), '9999999990.00') AS  "Amount without tax"
                        , to_char(sum(i.amount_with_tax), '9999999990.00') AS  "Amount with tax"
                    from crm_seller s
                        INNER JOIN crm_customer c  on c.seller_id = s.id
                        INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                        INNER JOIN account_entity ce  on c.id = ce.id
                        INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                        INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                        INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                    where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || 'month' AS INTERVAL))
                    and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
                    group by date_trunc('month', i.invoice_date)
                        , it.code
                        , it.description
                        , ce.code
                        , ce.description order by date_trunc('month', i.invoice_date) DESC
                        , it.code DESC
                        , ce.code
			    ]]></column>
            <where>code='INVOICED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
                    , to_char(i.invoice_date, 'YYYY-MM-DD') AS "Invoice date"
                    , i.invoice_number AS "Invoice number"
                    , to_char(i.amount_without_tax, '9999999990.00') AS "Amount without tax"
                    , to_char(i.amount_with_tax, '9999999990.00') AS "Amount with tax"
                    , it.code AS "Invoice type code"
                    , it.description AS "Invoice type description"
                    , ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , ce.code AS "Customer code"
                    , ce.description AS "Customer description"
                    , cae.code AS "Customer Account code"
                    , cae.description AS "Customer Account description"
                    , bae.code AS "Billing Account code"
                    , bae.description AS "Billing Account description"
                from crm_seller s
                    INNER JOIN crm_customer c  on c.seller_id = s.id
                    INNER JOIN account_entity ce  on c.id = ce.id
                    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
                    INNER JOIN account_entity cae  on ca.id = cae.id
                    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
                    INNER JOIN account_entity bae  on ba.id = bae.id
                    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
                    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id
                where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or cae.code ilike '%' || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  or bae.code ilike '%' || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION
                    || '%'  )
                order by date_trunc('month', i.invoice_date) DESC
                    , i.invoice_date DESC
                    , it.code
                    , i.invoice_number
			    ]]></column>
            <where>code='INVOICES'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
                ,ce.code AS "Customer code"
                ,ce.description AS "Customer description"
                ,cae.code AS "Customer Account code"
                ,cae.description AS "Customer Account description"
                ,bae.code AS "Billing Account code"
                ,bae.description AS "Billing Account description"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'DEBIT'
                                THEN ao.amount
                            ELSE 0
                            END), '99999999990.00') AS "Amount DEBIT"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'CREDIT'
                                THEN ao.amount
                            ELSE 0
                            END), '99999999990.00') AS "Amount CREDIT"
                ,to_char(sum(CASE
                            WHEN ao.transaction_category = 'DEBIT'
                                THEN ao.amount
                            ELSE - ao.amount
                            END), '99999999990.00') AS "Balance"
            FROM crm_seller s
                INNER JOIN crm_customer c ON c.seller_id = s.id
                INNER JOIN account_entity ce ON c.id = ce.id
                INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
                INNER JOIN account_entity cae ON ca.id = cae.id
                INNER JOIN billing_billing_account ba ON ba.customer_account_id = ca.id
                INNER JOIN account_entity bae ON ba.id = bae.id
                INNER JOIN billing_invoice i ON i.billing_account_id = ba.id
                INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
                    AND ao.reference = i.invoice_number
                    AND ao.invoice_date = i.invoice_date
                    AND ao.amount = abs(i.amount_with_tax)
            WHERE ao.invoice_date IS NOT NULL
                AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                AND (
                    ce.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR ce.description ilike '%' || :SEARCH_CRITERION || '%'
                    OR cae.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR cae.description ilike '%' || :SEARCH_CRITERION || '%'
                    OR bae.code ilike '%' || :SEARCH_CRITERION || '%'
                    OR bae.description ilike '%' || :SEARCH_CRITERION || '%'
                    )
            GROUP BY date_trunc('month', ao.invoice_date)
                ,ce.code
                ,ce.description
                ,cae.code
                ,cae.description
                ,bae.code
                ,bae.description
            ORDER BY date_trunc('month', ao.invoice_date) DESC
                ,ce.code
                ,cae.code
                ,bae.code
			    ]]></column>
            <where>code='RECORDED_BA_HIERARCHY'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
                        ,ce.code AS "Seller code"
                        ,ce.description AS "Seller description"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'DEBIT'
                                        THEN ao.amount
                                    ELSE 0
                                    END), '99999999990.00') AS "Amount DEBIT"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'CREDIT'
                                        THEN ao.amount
                                    ELSE 0
                                    END), '99999999990.00') AS "Amount CREDIT"
                        ,to_char(sum(CASE
                                    WHEN ao.transaction_category = 'DEBIT'
                                        THEN ao.amount
                                    ELSE - ao.amount
                                    END), '99999999990.00') AS "Balance"
                    FROM crm_seller s
                        INNER JOIN crm_customer c ON c.seller_id = s.id
                        INNER JOIN account_entity ce on c.id = ce.id
                        INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
                        INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
                    WHERE ao.invoice_date IS NOT NULL
                        AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
                        AND (
                            ce.code ilike '%' || :SEARCH_CRITERION || '%'
                            OR ce.description ilike '%' || :SEARCH_CRITERION || '%'
                            )
                    GROUP BY date_trunc('month', ao.invoice_date)
                        ,ce.code
                        ,ce.description
                    ORDER BY date_trunc('month', ao.invoice_date) DESC
                        ,ce.code
			    ]]></column>
            <where>code='RECORDED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                    , ce.description AS "Seller description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"
                from  billing_wallet_operation wo
                    INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
                    INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
                    INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id
                    INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id
                    INNER JOIN crm_customer c  on c.id = ca.customer_id
                    INNER JOIN crm_seller s  on s.id = c.seller_id
                    INNER JOIN account_entity ce  on c.id = ce.id
                where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED'
                    and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )
                and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  )
                group by ce.code, ce.description
                order by ce.code
			    ]]></column>
            <where>code='UNBILLED_S'</where>
        </update>
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[select ce.code AS "Seller code"
                        , ce.description AS "Seller description"
                        , ce.code AS "Customer code"
                        , ce.description AS "Customer description"
                        , cae.code AS "Customer Account code"
                        , cae.description AS "Customer Account description"
                        , bae.code AS "Billing Account code"
                        , bae.description AS "Billing Account description"
                        , uae.code AS "User Account code"
                        , uae.description AS "User Account description"
                        , count(DISTINCT wo.id) AS "Transaction count"
                        , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                        , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"
                    from  billing_wallet_operation wo
                        INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
                        INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
                        INNER JOIN account_entity uae  on ua.id = uae.id
                        INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id
                        INNER JOIN account_entity bae  on ba.id = bae.id
                        INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id
                        INNER JOIN account_entity cae  on ca.id = cae.id
                        INNER JOIN crm_customer c  on c.id = ca.customer_id
                        INNER JOIN account_entity ce  on c.id = ce.id
                        INNER JOIN crm_seller s  on s.id = c.seller_id
                    where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED'
                        and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )
                    and(  ce.code ilike '%' || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or ce.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or ce.description ilike '%' || :SEARCH_CRITERION || '%'  or cae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or cae.description ilike '%' || :SEARCH_CRITERION || '%'  or bae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or bae.description ilike '%' || :SEARCH_CRITERION || '%'  or uae.code ilike '%'
                        || :SEARCH_CRITERION || '%'  or uae.description ilike '%' || :SEARCH_CRITERION || '%'  )
                    group by ce.code
                        , ce.description
                        , cae.code
                        , cae.description
                        , bae.code
                        , bae.description
                        , uae.code
                        , uae.description order by ce.code
                        , ce.code
                        , cae.code
                        , bae.code
                        , uae.code
			    ]]></column>
            <where>code='UNBILLED_UA_HIERARCHY'</where>
        </update>
    </changeSet>

	<changeSet id="#5486_remove_CF_for_old_RT_Aggregation" author="Mohammed_ELAZZOUZI">
		<sql>delete from ${db.schema.adapted}crm_custom_field_tmpl where applies_to='JobInstance_RatedTransactionsJob' and code in('activateAggregation','globalAggregation','aggregateByDay','aggregationLevel','aggregateByOrder','aggregateByParam1','aggregateByParam2','aggregateByParam3','aggregateByExtraParam','aggregateByUnitAmount')</sql>
	</changeSet>

    <changeSet id="5407_20201030" author="Mohammed_ELAZZOUZI">
    	<update tableName="billing_billing_run">
    	<column name="status" value="INVOICES_GENERATED"/>
    	<where>status='INVOICES_GENERRATED'</where>
    	</update>
    </changeSet>
    <changeSet id="#5610_20201102 - bad dept operation type" author="NabilOUACHI">
        <update tableName="ar_occ_template">
            <column name="occ_category" value="CREDIT"></column>
            <where>code='EXP_WRT'</where>
        </update>
    </changeSet>

    <changeSet id="5657_20201201" author="NabilOuachi">
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="SendInvoiceJob_billingRun"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="gui_position" value=""/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>

        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-3" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="invoiceDateRangeFrom"/>
            <column name="description" value="From invoice date EL"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>

        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-4" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="invoiceDateRangeTo"/>
            <column name="description" value="To invoice date EL"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_SendInvoiceJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>
    <changeSet id="#5632_20201207_RT_TYPE_DATA" author="NabilOUACHI">
        <update tableName="billing_rated_transaction">
            <column name="type" value="MINIMUM"/>
            <where>code like 'RT_MIN%' and wallet_id is null</where>
        </update>
    </changeSet>

    <changeSet id="#5116_10122020" author="AbdelmounaimAkadid">
     	<insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-30" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="APIv2PermissionsSyncJob" />
            <column name="description" value="APIv2PermissionsSyncJob" />
            <column name="job_category" value="UTILS" />
            <column name="job_template" value="APIv2PermissionsSyncJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="uuid" value="APIv2PermissionsSyncJob" />
       	</insert>
	</changeSet>

	<changeSet id="5743_20201215" author="AmineBENAICHA">
        <update tableName="meveo_job_instance" >
            <column name="cf_values"
                    value='{"PurgeMediationDataJob_edrStatusCf":[ { "listString":[ "AGGREGATED", "MEDIATING", "OPEN", "RATED", "REJECTED" ] } ], "PurgeMediationDataJob_firstTransactionDate":[ { "date":null } ], "PurgeMediationDataJob_woStatusCf":[ { "listString":[ "CANCELED", "OPEN", "RERATED", "RESERVED", "SCHEDULED", "TO_RERATE", "TREATED" ] } ], "PurgeMediationDataJob_rtStatusCf":[ { "listString":[ "BILLED", "CANCELED", "OPEN", "REJECTED", "RERATED" ] } ] }'/>
            <where>id = -24</where>
        </update>
    </changeSet>

    <changeSet id="5678_20210214" author="anasseh">
	      <sql><![CDATA[UPDATE ${db.schema.adapted}ar_payment_history set operation_category ='CREDIT' where payment_id is not null ]]> </sql>
	      <sql><![CDATA[UPDATE ${db.schema.adapted}ar_payment_history set operation_category ='DEBIT' where refund_id is not null ]]> </sql>
   </changeSet>


    <changeSet id="#5592-2021-02-02_41" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2015-03-19 00:04:19.913" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="ArticleMappingJob" />
            <column name="code" value="Article_Mapp_Job_V2" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="timerentity_id" valueNumeric="-1" />
            <column name="uuid" value="Article_Mapp_Job_V2" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ArticleMappingJob_billingRun"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FirstTransactionDate"/>
            <column name="description" value="First transaction date"/>
            <column name="field_type" value="DATE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="LastTransactionDate"/>
            <column name="description" value="Last transaction date"/>
            <column name="field_type" value="DATE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_ArticleMappingJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>
    <changeSet id="#5890-2021-02-02_42" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2015-03-19 00:04:19.913" />
            <column name="job_category" value="INVOICING" />
            <column name="job_template" value="InvoiceLinesJob" />
            <column name="code" value="Invoice_Lines_Job_V2" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="timerentity_id" valueNumeric="-1" />
            <column name="uuid" value="Invoice_Lines_Job_V2" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="InvoiceLinesJob_billingRun"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="description" value="Billing Runs"/>
            <column name="field_type" value="ENTITY"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>
            <column name="storage_type" value="LIST"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="AggregationOptions"/>
            <column name="description" value="Aggregation options"/>
            <column name="field_type" value="STRING"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="allow_edit" value="1"/>
            <column name="max_value" value="9223372036854775807"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
    </changeSet>

     <changeSet id="#5916_20210128" author="MohammedELAZZOUZI">
       <insert tableName="billing_seq_invoice">
           <column name="id" valueNumeric="-5" />
           <column name="version" valueNumeric="0" />
           <column name="code" value="ADV" />
           <column name="description" value="Advanced Payment Invoice sequence" />
           <column name="sequence_size" valueNumeric="9" />
           <column name="created" valueDate="2021-02-03 00:00:00.000" />
           <column name="creator" value="OPENCELL.ADMIN" />
       </insert>
       <insert tableName="billing_invoice_type">
           <column name="id" valueNumeric="-5" />
           <column name="version" valueNumeric="0" />
           <column name="created" valueDate="2021-02-03 00:00:00.000" />
           <column name="code" value="ADV" />
           <column name="description" value="Advanced Payment Invoicee" />
           <column name="creator" value="OPENCELL.ADMIN" />
           <column name="invoice_sequence_id" valueNumeric="-5" />
           <column name="occ_template_id" valueNumeric="-25" />
           <column name="occ_templ_negative_id" value="-40" />
           <column name="matching_auto" valueNumeric="0" />
           <column name="prefix_el" value="ADV" />
           <column name="uuid" value="InvoiceType-ADV" />
       </insert>

      </changeSet>

<!-- TODO fix by abdelmounaim-->
<!--    <changeSet id="#5921-2021-02-02_43" author="ZBariki">-->
<!--        <insert tableName="meveo_job_instance">-->
<!--            <column name="id" valueSequenceNext="meveo_job_instance_seq" />-->
<!--            <column name="version" valueNumeric="0" />-->
<!--            <column name="disabled" valueNumeric="1" />-->
<!--            <column name="created" valueDate="2015-03-19 00:04:19.913" />-->
<!--            <column name="job_category" value="INVOICING" />-->
<!--            <column name="job_template" value="InvoicingJobV2" />-->
<!--            <column name="code" value="Invoicing_Job_V2" />-->
<!--            <column name="description" value="Invoicing Job V2"/>-->
<!--            <column name="creator" value="OPENCELL.ADMIN" />-->
<!--            <column name="timerentity_id" valueNumeric="-1" />-->
<!--            <column name="uuid" value="Invoicing_Job_V2" />-->
<!--        </insert>-->
<!--        <insert tableName="crm_custom_field_tmpl">-->
<!--            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />-->
<!--            <column name="version" valueNumeric="0" />-->
<!--            <column name="disabled" valueNumeric="0" />-->
<!--            <column name="created" valueDate="${db.current.time}" />-->
<!--            <column name="code" value="InvoicingJobV2_billingRun"/>-->
<!--            <column name="applies_to" value="JobInstance_InvoicingJobV2"/>-->
<!--            <column name="description" value="Billing Run"/>-->
<!--            <column name="field_type" value="ENTITY"/>-->
<!--            <column name="value_required" value="0"/>-->
<!--            <column name="creator" value="applicationInitializer"/>-->
<!--            <column name="versionable" value="0"/>-->
<!--            <column name="entity_clazz" value="org.meveo.model.billing.BillingRun"/>-->
<!--            <column name="storage_type" value="LIST"/>-->
<!--            <column name="allow_edit" value="1"/>-->
<!--            <column name="hide_on_new" value="0"/>-->
<!--            <column name="inh_as_def_value" value="0"/>-->
<!--            <column name="cf_protectable" value="0"/>-->
<!--        </insert>-->
<!--    </changeSet>

    <changeSet id="#5890-2021-02-05_43" author="ZBARIKI">
        <update tableName="crm_custom_field_tmpl">
            <column name="field_type" value="LIST"/>
            <where>code='AggregationOptions'</where>
        </update>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="NO_AGGREGATION"/>
            <column name="listvalues_key" value="NO_AGGREGATION"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="ARTICLE_LABEL"/>
            <column name="listvalues_key" value="ARTICLE_LABEL"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="UNIT_AMOUNT"/>
            <column name="listvalues_key" value="UNIT_AMOUNT"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id"
                    valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')"/>
            <column name="listvalues" value="DATE"/>
            <column name="listvalues_key" value="DATE"/>
        </insert>
    </changeSet>-->

    <changeSet id="#5951_20210209_data" author="AbdelmounaimAkadid">
        <insert tableName="billing_tax_class">
        	<column name="id" value="-3"/>
            <column name="code" value="NO_TAX"/>
            <column name="description_i18n" value='{"FRA":"Pas de TVA","ENG":"No VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_no_tax" />
        </insert>
        <insert tableName="billing_tax_class">
        	<column name="id" value="-4"/>
            <column name="code" value="REDUCED"/>
            <column name="description_i18n" value='{"FRA":"TVA réduite","ENG":"Reduced VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_reduced" />
        </insert>
        <insert tableName="billing_tax_class">
        	<column name="id" value="-5"/>
            <column name="code" value="NORMAL"/>
            <column name="description_i18n" value='{"FRA":"TVA normale","ENG":"Normal VAT"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_class_normal" />
        </insert>

        <insert tableName="billing_tax_category">
        	<column name="id" value="-2"/>
            <column name="code" value="EXEMPTED"/>
            <column name="description_i18n" value='{"FRA":"Exempté","ENG":"Exempted"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_category_exempted" />
        </insert>
        <insert tableName="billing_tax_category">
        	<column name="id" value="-3"/>
            <column name="code" value="REGULAR"/>
            <column name="description_i18n" value='{"FRA":"Standard","ENG":"Regular"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_category_regular" />
        </insert>

        <update tableName="billing_tax">
            <column name="tax_percentage" value="0"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 0%","ENG":"VAT 0%"}'/>
            <where>code='TAX_00'</where>
        </update>
        <insert tableName="billing_tax">
        	<column name="id" value="-4"/>
            <column name="code" value="TAX_10"/>
            <column name="tax_percentage" value="10"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 10%","ENG":"VAT 10%"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_tax_10" />
        </insert>
        <insert tableName="billing_tax">
        	<column name="id" value="-5"/>
            <column name="code" value="TAX_20"/>
            <column name="tax_percentage" value="20"/>
            <column name="accounting_code_id" value="-18"/>
            <column name="description_i18n" value='{"FRA":"TVA 20%","ENG":"VAT 20%"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_tax_20" />
        </insert>

        <insert tableName="billing_tax_mapping">
            <column name="id" value='-11'/>
            <column name="tax_category_id" value="-2"/>
            <column name="tax_id" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
		<insert tableName="billing_tax_mapping">
		    <column name="id" value='-12'/>
            <column name="tax_class_id" value="-3"/>
            <column name="tax_id" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-13'/>
            <column name="tax_category_id" value="-3"/>
            <column name="tax_class_id" value="-4"/>
            <column name="tax_id" value='-4'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-14'/>
            <column name="tax_category_id" value="-3"/>
            <column name="tax_class_id" value="-5"/>
            <column name="tax_id" value='-5'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>

        <insert tableName="billing_invoice_cat">
        	<column name="id" value='-3'/>
            <column name="code" value="ICAT_DEFAULT"/>
            <column name="description_i18n" value='{"FRA":"Rubrique facture par défaut","ENG":"Default invoice category"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_invoice_cat_icat_default" />
        </insert>
        <insert tableName="billing_invoice_sub_cat">
        	<column name="id" value='-3'/>
        	<column name="invoice_category_id" value='-3'/>
        	<column name="version" valueNumeric="0" />
            <column name="code" value="ISCAT_DEFAULT"/>
            <column name="description_i18n" value='{"FRA":"Sous-rubrique facture par défaut","ENG":"Default invoice sub-category"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_invoice_cat_iscat_default" />
        </insert>

        <insert tableName="billing_accounting_article">
        	<column name="id" value='-1'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="ADV-STD"/>
        	<column name="tax_class_id" value="-1"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Acompte","ENG":"Advance payment"}'/>
            <column name="description" value='Advance payment'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-ADV-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-2'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="DISC-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Remise de pied de facture","ENG":"Invoice discount"}'/>
            <column name="description" value='Invoice discount'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-DISC-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-3'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="ART-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Article standard","ENG":"Standard article"}'/>
            <column name="description" value='Standard article'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-ART-STD" />
        </insert>
        <insert tableName="billing_accounting_article">
            <column name="id" value='-4'/>
            <column name="version" valueNumeric="0"/>
            <column name="code" value="MIN-STD"/>
            <column name="tax_class_id" value="-5"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Complément du minimum de facturation","ENG":"Invoice minimum complement"}'/>
            <column name="description" value='Invoice minimum complement'/>
            <column name="created" valueDate="${db.current.time}"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="uuid" value="billing_accounting_article-MIN-STD"/>
        </insert>

    </changeSet>
    <changeSet id="#5946_08032021" author="KhalidHORRI">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-31"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-03-08 00:04:19.913"/>
            <column name="job_category" value="UTILS"/>
            <column name="job_template" value="DiscountPlanStatusJob"/>
            <column name="code" value="DiscountPlanStatusJob"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="Discount_Plan_Status_Job"/>
            <column name="cf_values" value='{"waitingMillis":[{"long":0}],"nbRuns":[{"long":-1}]}'/>
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-32"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-03-08 00:04:19.913"/>
            <column name="job_category" value="UTILS"/>
            <column name="job_template" value="DiscountPlanInstanceStatusJob"/>
            <column name="code" value="DiscountPlanInstanceStatusJob"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="Discount_Plan_Instance_Status_Job"/>
            <column name="cf_values" value='{"waitingMillis":[{"long":0}],"nbRuns":[{"long":-1}]}'/>
        </insert>
    </changeSet>

    <changeSet author="ZBARIKI" id="#6048_20210326">
        <sql dbms="postgresql"><![CDATA[UPDATE ${db.schema.adapted}meveo_script_instance SET
            script = 'package org.meveo.service.script;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.SubCategoryInvoiceAgregate;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;
import org.meveo.service.payments.impl.PaymentHistoryService;
import org.meveo.service.script.Script;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

    private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
            AccountOperationService.class.getSimpleName());
    private final CustomerService customerService = (CustomerService) getServiceInterface(
            CustomerService.class.getSimpleName());
    private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
            InvoiceService.class.getSimpleName());
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
            SubscriptionService.class.getSimpleName());
    private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
            RatedTransactionService.class.getSimpleName());
    private final WalletService walletService = (WalletService) getServiceInterface(
            WalletService.class.getSimpleName());
    private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
            RejectedBillingAccountService.class.getSimpleName());
    private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
            CounterInstanceService.class.getSimpleName());
    private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
            CounterPeriodService.class.getSimpleName());
    private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
            OrderItemService.class.getSimpleName());
    private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
            ProductInstanceService.class.getSimpleName());
    private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
            BusinessEntityService.class.getSimpleName());
    private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
            WalletOperationService.class.getSimpleName());
    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
            ServiceInstanceService.class.getSimpleName());

    private final PaymentHistoryService paymentHistoryService = (PaymentHistoryService) getServiceInterface(
            PaymentHistoryService.class.getSimpleName());

    private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

    @SuppressWarnings("rawtypes")
    private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
            ChargeInstanceService.class.getSimpleName());

    private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {

        log.debug(" >>> execute {} ", methodContext.entrySet());

        try {

            Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
            if (MapUtils.isEmpty(record)) {
                throw new BusinessException(String.format("Parameter RECORD is missing"));
            }

            final String customerCode = record.get("customerCode");
            Customer customer = customerService.findByCode(customerCode);
            if (customer == null) {
                throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
            }

            String noCheckVal = record.get("noCheck");
            if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
                throw new BusinessException(
                        String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
            }
            boolean noCheck = "1".contentEquals(noCheckVal);

            if (!noCheck) {
                // If noCheck is 0 then the following conditions must be met in order to allow
                // deletion:
                // No unmatched AO
                // No open EDR/WO/RT

                this.checkUnmatchedAOs(customer);
                this.checkOpenEDRs(customer);
                this.checkOpenWOs(customer);
                this.checkOpenRTs(customer);
            }

            this.removeCustomerHirarchy(customer);

        } catch (BusinessException be) {
            throw be;
        } catch (Exception e) {
            log.error(" Error executing DeleteCustomersScript ", e);
            throw new BusinessException(e.getMessage());
        }
    }

    private void checkOpenEDRs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start checkOpenEDRs for customer = {} ", customer);
            String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = edrService.executeSelectQuery(query,params);
            log.debug(" count of open EDRs = {} ", count);
            log.debug(" End checkOpenEDRs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open EDRs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkOpenWOs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start checkOpenWOs for customer = {} ", customer);
            String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
            final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
                    WalletOperationService.class.getSimpleName());

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = walletOperationService.executeSelectQuery(query, params);
            log.debug(" count of open WOs = {} ", count);
            log.debug(" End checkOpenWOs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open WOs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkOpenRTs(Customer customer) throws BusinessException {
        try {

            log.debug(" Start checkOpenRTs for customer = {} ", customer);
            String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());

            Object count = this.ratedTransactionService.executeSelectQuery(query, params);
            log.debug(" count of open RTs = {} ", count);
            log.debug(" End checkOpenRTs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] open RTs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void checkUnmatchedAOs(Customer customer) throws BusinessException {
        try {

            log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
            String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
            final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
                    AccountOperationService.class.getSimpleName());
            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            Object count = accountOperationService.executeSelectQuery(query, params);
            log.debug(" count of unmatched AOs = {} ", count);
            log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

            if (((Long) count).intValue() > 0) {
                throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
            }
        } catch (Exception e) {
            log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeCustomerHirarchy(Customer customer) throws BusinessException {
        log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

        //
        // A workaround for #4134 , no need for this method if #4134 is fixed (only
        // 6.1.X is concerned)!
        this.nullifyAOsSeller(customer);

        this.removeWalletOperations(customer);
        this.removeChargeInstances(customer);
        // the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
        this.nullifySubCategoryInvoiceAgregatesWallet(customer);
        this.removeWalletInstances(customer);

        this.removePaymentHistory(customer);
        this.removeRatedTransactions(customer);
        this.removeInvoices(customer);


        this.removeServiceInstances(customer);
        this.removeAccess(customer);
        this.removeEDRs(customer);
        this.removeSubscriptions(customer);

        this.removeRejectedBAs(customer);

        this.removeCounterPeriods(customer);
        this.removeCounterInstances(customer);
        this.removeOrderItems(customer);
        this.removeProductInstances(customer);
        this.removeMatchingAmounts(customer);

        this.customerService.remove(customer);

        log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
    }

    private void removeEDRs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeEDRs for customer = {} ", customer);

            String query = "select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = edrService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} EDR to delete ", ids.size());

            for (Long id : ids) {
                edrService.remove(id);
            }

            log.debug(" End removeEDRs for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeMatchingAmounts(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

            final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
            final String query = "select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = matchingAmountService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} MatchingAmount to delete ", ids.size());

            for (Long id : ids) {
                matchingAmountService.remove(id);
            }

            log.debug(" End removeMatchingAmounts for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeAccess(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeAccess for customer = {} ", customer);

            final AccessService accessService = (AccessService) getServiceInterface(
                    AccessService.class.getSimpleName());

            final String query = "select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object result = accessService.executeSelectQuery(query, queryParams);

            Collection<Long> ids = safe(result != null ? ((List<Long>) result) : null);
            log.debug(" {} Access to delete ", ids.size());

            for (Long id : ids) {
                accessService.remove(id);
            }

            log.debug(" End removeAccess for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeServiceInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeServiceInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findServiceInstances(customer));
            log.debug(" {} ServiceInstance to delete ", ids.size());

            for (Long id : ids) {
                this.serviceInstanceService.remove(id);
            }

            log.debug(" End removeServiceInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findServiceInstances(Customer customer) {
        try {
            log.debug(" findServiceInstances for customer={} ", customer);
            String query = "select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.serviceInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findServiceInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeWalletOperations(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeWalletOperations for customer = {} ", customer);

            Collection<Long> ids = safe(this.findWalletOperations(customer));
            log.debug(" {} WalletOperation to delete ", ids.size());

            for (Long id : ids) {
                this.walletOperationService.remove(id);
            }

            log.debug(" End removeWalletOperations for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findWalletOperations(Customer customer) {
        try {
            log.debug(" findWalletOperations for customer={} ", customer);
            String query = "select wo.id from WalletOperation wo where wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.walletOperationService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findWalletOperations : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    /**
     * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
     *
     * @param customer
     * @throws BusinessException
     */
    private void removePaymentHistory(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removePaymentHistory for customer = {} ", customer);
            String query = "select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode";

            Map<String, Object> params = new HashMap();
            params.put("customerCode", customer.getCode());
            List<Long> ids = (List<Long>) this.paymentHistoryService.executeSelectQuery(query, params);

            for (Long id : ids) {
                this.paymentHistoryService.remove(id);

            }
            log.debug(" {} PaymentHistory to delete ", ids.size());
            log.debug(" End removePaymentHistory for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    /**
     * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
     *
     * @param customer
     * @throws BusinessException
     */
    private void nullifyAOsSeller(Customer customer) throws BusinessException {
        try {
            log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

            String query = "select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId ";

            Map<String, Object> params = new HashMap();
            params.put("customerId", customer.getId());
            List<Long> ids = (List<Long>) this.accountOperationService.executeSelectQuery(query, params);
            for (Long id : ids) {
                accountOperationService.remove(id);
            }

            log.debug(" seller to nullify for {} AOs ", ids.size());
            log.debug(" End nullifyAOsSeller for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
        try {
            log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
            String query = "select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId";
            Map<String, Object> params = new HashMap<>();
            params.put("customerId", customer.getId());

            List<Long> ids = (List<Long>) this.businessEntityService.executeSelectQuery(query, params);
            for (Long id: ids) {
                this.businessEntityService.remove(id);
            }

            log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", ids.size());
            log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }

    }


    private void removeProductInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeProductInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findProductInstances(customer));
            log.debug(" {} ProductInstance to delete ", ids.size());

            for (Long id : ids) {
                this.productInstanceService.remove(id);
            }

            log.debug(" End removeProductInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findProductInstances(Customer customer) {
        try {
            log.debug(" findProductInstances for customer={} ", customer);
            String query = "select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.productInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findProductInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeOrderItems(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeOrderItem for customer = {} ", customer);

            Collection<Long> ids = safe(this.findOrderItems(customer));
            log.debug(" {} OrderItem to delete ", ids.size());

            for (Long id : ids) {
                this.orderItemService.remove(id);
            }

            log.debug(" End removeOrderItem for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findOrderItems(Customer customer) {
        try {
            log.debug(" findOrderItems for customer={} ", customer);
            String query = "select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.orderItemService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeCounterPeriods(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeCounterPeriods for customer = {} ", customer);

            Collection<Long> ids = safe(this.findCounterPeriods(customer));
            log.debug(" {} CounterPeriod to delete ", ids.size());

            for (Long id : ids) {
                this.counterPeriodService.remove(id);
            }

            log.debug(" End removeCounterPeriods for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findCounterPeriods(Customer customer) {
        try {
            log.debug(" findCounterPeriods for customer={} ", customer);
            String query = "select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.counterPeriodService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterPeriods : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeCounterInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeCounterInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findCounterInstances(customer));
            log.debug(" {} CounterInstance to delete ", ids.size());

            for (Long id : ids) {
                this.counterInstanceService.remove(id);
            }

            log.debug(" End removeCounterInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findCounterInstances(Customer customer) {
        try {
            log.debug(" findCounterInstances for customer={} ", customer);
            String query = "select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.counterInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findCounterInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeRejectedBAs(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeRejectedBAs for customer = {} ", customer);

            Collection<Long> ids = safe(this.findRejectedBillingAccounts(customer));
            log.debug(" {} RejectedBillingAccount to delete ", ids.size());

            for (Long id : ids) {
                this.rejectedBillingAccountService.remove(id);
            }

            log.debug(" End removeRejectedBAs for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findRejectedBillingAccounts(Customer customer) {
        try {
            log.debug(" findRejectedBillingAccounts for customer={} ", customer);
            String query = "select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.rejectedBillingAccountService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findRejectedBillingAccounts : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeInvoices(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeInvoices for customer = {} ", customer);

            Collection<Long> ids = safe(this.findInvoicesIds(customer));
            log.debug(" {} Invoices to delete ", ids.size());

            for (Long id : ids) {
                this.invoiceService.remove(id);
            }

            log.debug(" End removeInvoices for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private void removeWalletInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeWalletInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findWalletInstances(customer));
            log.debug(" {} WalletInstance to delete ", ids.size());

            for (Long id : ids) {
                // a workaround for #4132
                WalletInstance wallet = this.walletService.findById(id);
                wallet.getUserAccount().setWallet(null);

                this.walletService.remove(id);
            }

            log.debug(" End removeWalletInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findWalletInstances(Customer customer) {
        try {
            log.debug(" findWalletInstances for customer={} ", customer);
            String query = "select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.walletService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findWalletInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeRatedTransactions(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeRatedTransactions for customer = {} ", customer);

            Collection<Long> ids = safe(this.findRatedTransactions(customer));
            log.debug(" {} RTs to delete ", ids.size());

            for (Long id : ids) {
                this.ratedTransactionService.remove(id);
            }

            log.debug(" End removeRatedTransactions for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }

    }

    private List<Long> findRatedTransactions(Customer customer) {
        try {
            log.debug(" findRatedTransactions for customer={} ", customer);
            String query = "select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.ratedTransactionService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findRatedTransactions : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeChargeInstances(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeChargeInstances for customer = {} ", customer);

            Collection<Long> ids = safe(this.findChargeInstances(customer));
            log.debug(" {} ChargeInstance to delete ", ids.size());
            for (Long ciId : ids) {
                this.chargeInstanceService.remove(ciId);
            }
            log.debug(" End removeChargeInstances for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findChargeInstances(Customer customer) {
        try {
            log.debug(" findChargeInstances for customer={} ", customer);
            String query = "select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customerId", customer.getId());
            Object ids = this.chargeInstanceService.executeSelectQuery(query, queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findChargeInstances : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private void removeSubscriptions(Customer customer) throws BusinessException {
        try {
            log.debug(" Start removeSubscriptions for customer = {} ", customer);
            Collection<Long> ids = safe(this.findSubscriptions(customer));
            log.debug(" {} Subscription to delete ", ids.size());

            for (Long subscriptionId : ids) {
                this.subscriptionService.remove(subscriptionId);
            }
            log.debug(" End removeSubscriptions for customer = {} ", customer);
        } catch (Exception e) {
            log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
            throw new BusinessException(e);
        }
    }

    private List<Long> findSubscriptions(Customer customer) {
        try {
            log.debug(" findSubscriptions for customer={} ", customer);
            StringBuffer query = new StringBuffer(
                    "select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer ");

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customer", customer);
            Object ids = this.subscriptionService.executeSelectQuery(query.toString(), queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on findSubscriptions : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private List<Long> findInvoicesIds(Customer customer) {
        try {
            log.debug(" findInvoicesIds for customer={} ", customer);
            StringBuffer query = new StringBuffer(
                    "select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer =:customer ");

            Map<String, Object> queryParams = new HashMap<>();
            queryParams.put("customer", customer);
            Object ids = this.invoiceService.executeSelectQuery(query.toString(), queryParams);

            return ids != null ? ((List<Long>) ids) : null;
        } catch (Exception e) {
            log.error(" Error on getSubscription : [{}] ", e.getMessage(), e);
            return null;
        }
    }

    private <T> Collection<T> safe(Collection<T> collection) {
        return collection == null ? Collections.EMPTY_LIST : collection;
    }
}'
            WHERE code = 'org.meveo.service.script.DeleteCustomersScript';
           ]]>
        </sql>
    </changeSet>

	<changeSet author="AmineBENAICHA" id="#6048_20210611">
		<sql>
<![CDATA[INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-30, 0, 0, ${db.current.time}, 'org.meveo.service.script.ServiceTemplateToProductScript', 'Migration ServiceTemplate To Product', 'JAVA', 'package org.meveo.service.script;

import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.util.pagination.PaginationConfiguration;
import org.meveo.model.article.AccountingArticle;
import org.meveo.model.article.ArticleMapping;
import org.meveo.model.article.ArticleMappingLine;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.catalog.ProductChargeTemplateMapping;
import org.meveo.model.catalog.ServiceChargeTemplate;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.cpq.Product;
import org.meveo.model.cpq.ProductVersion;
import org.meveo.model.cpq.enums.VersionStatusEnum;
import org.meveo.model.cpq.offer.OfferComponent;
import org.meveo.model.tax.TaxClass;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.article.AccountingArticleService;
import org.meveo.service.billing.impl.article.ArticleMappingLineService;
import org.meveo.service.billing.impl.article.ArticleMappingService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.cpq.ProductService;
import org.meveo.service.cpq.ProductVersionService;
import org.meveo.service.tax.TaxClassService;
import  org.meveo.api.dto.response.PagingAndFiltering.SortOrder;

public class ServiceTemplateToProductScript extends Script {

    public static final String DEFAULT_TAX_CLASS_CODE = "CMP_DATA";
    public static final long ARTICLE_MAPPING_ID = 1L;
    private static final Integer PAGE_COUNT = 100;
    private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(ServiceInstanceService.class.getSimpleName());
    private ProductService productService = (ProductService) getServiceInterface(ProductService.class.getSimpleName());
    private ProductVersionService productVersionService = (ProductVersionService) getServiceInterface(ProductVersionService.class.getSimpleName());
    private OfferTemplateService offerTemplateService= (OfferTemplateService) getServiceInterface(OfferTemplateService.class.getSimpleName());
    private AccountingArticleService accountingArticleService = (AccountingArticleService) getServiceInterface(AccountingArticleService.class.getSimpleName());
    private ArticleMappingService articleMappingService = (ArticleMappingService) getServiceInterface(ArticleMappingService.class.getSimpleName());
    private ArticleMappingLineService articleMappingLineService = (ArticleMappingLineService) getServiceInterface(ArticleMappingLineService.class.getSimpleName());
    private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(ServiceTemplateService.class.getSimpleName());
    private TaxClassService taxClassService = (TaxClassService) getServiceInterface(TaxClassService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        List<ServiceTemplate> serviceTemplates = (List<ServiceTemplate>) methodContext.get("SERVICE_TEMPLATE");

        if(serviceTemplates != null && !serviceTemplates.isEmpty()){
            serviceTemplates.forEach(this::map);
        } else {

            long count = serviceTemplateService.count(new PaginationConfiguration("id", SortOrder.ASCENDING));

            if (PAGE_COUNT < count) {
                serviceTemplateService.list(new PaginationConfiguration(null, null))
                        .forEach(this::map);
            } else {
                for (int index = 0; index < count; index = index + PAGE_COUNT) {
                    serviceTemplateService.list(new PaginationConfiguration(index, PAGE_COUNT, null, null, null, "id", SortOrder.ASCENDING))
                            .forEach(this::map);
                }
            }
        }

    }

    public Product map(ServiceTemplate serviceTemplate) {
        Product product = createProduct(serviceTemplate);
        createArticle(product);

        ProductVersion productVersion = createProductVersion(product);

        List<ServiceInstance> serviceInstances = serviceInstanceService.findByServiceTemplate(serviceTemplate);

        serviceInstances.forEach(serviceInstance -> {

            serviceInstance.setProductVersion(productVersion);
            serviceInstance.setServiceTemplate(null);
            serviceInstanceService.update(serviceInstance);

            OfferTemplate offer = serviceInstance.getSubscription().getOffer();
            OfferComponent offerComponent = new OfferComponent();
            offerComponent.setProduct(product);
            offerComponent.setOfferTemplate(offer);
            offer.getOfferComponents().add(offerComponent);
            offer.getOfferServiceTemplates().removeIf(o -> o.getServiceTemplate().getId().equals(serviceTemplate.getId()));
            offerTemplateService.update(offer);
        });

        return product;
    }

    private void createArticle(Product product) {
        product.getProductCharges().stream()
                .map(pc -> pc.getChargeTemplate())
                .forEach(chargeTemplate -> {
                    AccountingArticle accountingArticle;
                    List<AccountingArticle> accountingArticles = accountingArticleService.findByTaxClassAndSubCategory(chargeTemplate.getTaxClass(), chargeTemplate.getInvoiceSubCategory());
                    if(accountingArticles.isEmpty()){
                        TaxClass taxClass = taxClassService.findByCode(DEFAULT_TAX_CLASS_CODE);
                        accountingArticle = new AccountingArticle(UUID.randomUUID().toString(), "Migration Accounting article", taxClass, chargeTemplate.getInvoiceSubCategory());
                        accountingArticleService.create(accountingArticle);
                    }else {
                        accountingArticle = accountingArticles.get(0);
                    }
                    ArticleMapping defaultArticleMapping = articleMappingService.findById(ARTICLE_MAPPING_ID);
                    ArticleMappingLine articleMappingLine = new ArticleMappingLine();
                    articleMappingLine.setChargeTemplate(chargeTemplate);
                    articleMappingLine.setArticleMapping(defaultArticleMapping);
                    articleMappingLine.setProduct(product);
                    articleMappingLine.setAccountingArticle(accountingArticle);
                    articleMappingLineService.create(articleMappingLine);
                });

    }

    private Product createProduct(ServiceTemplate serviceTemplate) {
        Product product = new Product();
        product.setCode(serviceTemplate.getCode());
        product.setDescription(serviceTemplate.getDescription());
        List<ProductChargeTemplateMapping> productCharges = getProductCharges(serviceTemplate);
        product.setProductCharges(productCharges);
        product.setCfValues(serviceTemplate.getCfValues());
        product.setCfAccumulatedValues(serviceTemplate.getCfAccumulatedValues());
        product.setDisabled(serviceTemplate.isDisabled());
        productService.create(product);
        return product;
    }

    private ProductVersion createProductVersion(Product product) {
        ProductVersion productVersion= new ProductVersion();
        productVersion.setProduct(product);
        productVersion.setShortDescription(product.getDescription());
        productVersion.setStatus(VersionStatusEnum.PUBLISHED);
        productVersion.setStatusDate(Calendar.getInstance().getTime());
        productVersionService.create(productVersion);
        return productVersion;
    }

    private ProductChargeTemplateMapping mapToProductChargeTemplate(ServiceChargeTemplate serviceCharge) {
        ProductChargeTemplateMapping productChargeTemplateMapping = new ProductChargeTemplateMapping();
        productChargeTemplateMapping.setChargeTemplate(serviceCharge.getChargeTemplate());
        return productChargeTemplateMapping;
    }

    private List<ProductChargeTemplateMapping> getProductCharges(ServiceTemplate serviceTemplate) {
        List<ProductChargeTemplateMapping> productCharges = serviceTemplate.getServiceSubscriptionCharges()
                .stream()
                .map(this::mapToProductChargeTemplate)
                .collect(Collectors.toList());

        productCharges.addAll(
                serviceTemplate.getServiceRecurringCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceTerminationCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceUsageCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );
        return productCharges;
    }
}');]]>
			</sql>

			<insert tableName="meveo_job_instance">
	            <column name="id" valueNumeric="-40" />
	            <column name="version" valueNumeric="0" />
	            <column name="disabled" valueNumeric="0" />
	            <column name="created" valueDate="${db.current.time}" />
	            <column name="updated" valueDate="null" />
	            <column name="uuid" value="ServiceTemplateToProductJob" />
	            <column name="code" value="ServiceTemplateToProductJob" />
	            <column name="description" value="ServiceTemplateToProductJob" />
	            <column name="job_category" value="MEDIATION" />
	            <column name="job_template" value="ScriptingJob" />
	            <column name="parametres" valueNumeric="null" />
	            <column name="creator" value="opencell.admin" />
	            <column name="updater" value="null" />
	            <column name="timerentity_id" value="null" />
	            <column name="cf_values">
	            	<![CDATA[
	            		{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ServiceTemplateToProductScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
	            	]]>
				</column>
	       	</insert>
	</changeSet>

    <changeSet id="INTRD-263_20210716" author="ZBariki">
        <insert tableName="com_message_template">
            <column name="media" value="EMAIL" />
            <column name="id" valueSequenceNext="com_msg_tmpl_seq" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="REPORT_QUERY_RESULT_SUCCESS" />
            <column name="type" value="OTHER" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="description" value="Report query result" />
            <column name="subject" value="[opencell] Query result query.name query execution start date" />
            <column name="textcontent">
                <![CDATA[Dear #{userName},

The result for your query is ready.
Check the result on Opencell Portal direct link to the result on the portal

Query : #{reportQueryName}
Started : #{startDate}
Duration : #{duration}
Line count : #{lineCount}

Best regards,

Opencell team.
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="EMAIL" />
            <column name="id" valueSequenceNext="com_msg_tmpl_seq" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="REPORT_QUERY_RESULT_FAILURE" />
            <column name="type" value="OTHER" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="description" value="Report query failure notification" />
            <column name="subject" value="[opencell] Query failed query.name query execution start date" />
            <column name="textcontent">
                <![CDATA[Dear #{userName},

Query execution failed with error :
#{error}

Contact your administrator or support.

Query : #{reportQueryName}
Started : #{startDate}
Duration : #{duration}

Best regards,

Opencell team.
                ]]>
            </column>
        </insert>
    </changeSet>

    <changeSet id="#20210607_540_563" author="TarikFA." failOnError="false">
        <insert tableName="billing_accounting_article">
        	<column name="id" value='-10'/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="PROD-STD"/>
            <column name="tax_class_id" value="-1"/>
            <column name="invoice_sub_category_id" value="-2"/>
            <column name="description_i18n" value='{"FRA":"Remise de pied de facture","ENG":"Invoice discount"}'/>
            <column name="description" value='Invoice discount'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="63ef9cee-f498-4908-PROD-STD" />
        </insert>
    </changeSet>

    <changeSet id="#INTRD-1090_20210729" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq"/>
            <column name="version" valueNumeric="0"/>
            <column name="disabled" valueNumeric="0"/>
            <column name="created" valueDate="2021-07-29 00:04:19.913"/>
            <column name="job_category" value="INVOICING"/>
            <column name="job_template" value="XMLInvoiceGenerationJobV2"/>
            <column name="code" value="XMLInvoiceGenerationJobV2"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
            <column name="timerentity_id" valueNumeric="-3"/>
            <column name="uuid" value="XML_Invoice_Generation_Job_V2"/>
        </insert>
    </changeSet>

       <changeSet id="J215_20210708" author="Mohammed_ELAZZOUZI" dbms="postgresql">

        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-43" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.ServiceImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import service instances]"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.model.billing.SubscriptionTerminationReason;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.crm.impl.SubscriptionTerminationReasonService;


public class ServiceImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";

	private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			"ServiceInstanceService");
	CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface(
			"CustomFieldTemplateService");
	private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(
			"ServiceTemplateService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			"SubscriptionService");
	private SubscriptionTerminationReasonService reasonService = (SubscriptionTerminationReasonService) getServiceInterface(
			"SubscriptionTerminationReasonService");
	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"ServiceInstance".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(ServiceInstanceActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				ServiceInstanceActionEnum action = ServiceInstanceActionEnum.valueOf(OC_ACTION);

				String OC_Subscription_code = (String) recordMap.get("OC_Subscription_code");
				String OC_ServiceInstance_code = (String) recordMap.get("OC_ServiceInstance_code");
				List<ServiceInstance> serviceInstances = serviceInstanceService
						.findByCodeAndCodeSubscription(OC_ServiceInstance_code, OC_Subscription_code);

				ServiceInstance serviceInstance = null;
				if (action==ServiceInstanceActionEnum.INSTANTIATE ) {
					serviceInstance = new ServiceInstance();
					mapServiceInstanceFields(recordMap, serviceInstance);
					serviceInstance.setCode(OC_ServiceInstance_code);
					Subscription subscription = subscriptionService.findByCode(OC_Subscription_code);
					if(subscription==null) {
						throw new ValidationException("no Subscription found with subscriptionCode: '" + OC_Subscription_code + "'");
					}
					serviceInstance.setSubscription(subscription );
					ServiceTemplate serviceTemplate = serviceTemplateService.findByCode(OC_ServiceInstance_code);
					if(serviceTemplate==null) {
						throw new ValidationException("no serviceTemplate found with code: '" + OC_ServiceInstance_code + "'");
					}
					serviceInstance.setServiceTemplate(serviceTemplate);
					serviceInstanceService.create(serviceInstance);
				} else {
					if (serviceInstances == null || serviceInstances.isEmpty()) {
						throw new ValidationException("no ServiceInstanceFound for subscriptionCode/serviceInstanceCode: '"
										+ OC_Subscription_code + "'/'" + OC_ServiceInstance_code + "'");
					}
					serviceInstance = serviceInstances.get(0);
				}


				switch (action) {
				case INSTANTIATE:
					serviceInstanceService.serviceInstanciation(serviceInstance);
					break;
				case ACTIVATE:
					serviceInstanceService.serviceActivation(serviceInstance);
					break;
				case RESUME:
					serviceInstanceService.serviceReactivation(serviceInstance, new Date(), true, false);
					break;
				case SUSPEND:
					serviceInstanceService.serviceSuspension(serviceInstance, new Date());
					break;
				case TERMINATE:
					Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));
					String OC_terminationReason = (String) recordMap.get("OC_terminationReason");
					if(StringUtils.isBlank(OC_terminationReason)) {
						throw new ValidationException("OC_terminationReason is mandatory to terminate subscription" );
					}
					SubscriptionTerminationReason reason = reasonService.findByCodeReason(OC_terminationReason);
					if(reason==null) {
						throw new ValidationException("no TerminationReason found with code: '" + OC_terminationReason + "'");
					}
					serviceInstanceService.terminateService(serviceInstance, OC_terminationDate, reason, serviceInstance.getOrderNumber());
					break;
				case UPDATE:
					updateService(recordMap, serviceInstance);
					break;
				default:
					break;
				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private void updateService(Map<String, Object> recordMap, ServiceInstance serviceInstance) throws Exception {
		mapServiceInstanceFields(recordMap, serviceInstance);
		serviceInstanceService.update(serviceInstance);
	}

	private void mapServiceInstanceFields(Map<String, Object> recordMap, ServiceInstance serviceInstance)
			throws ParseException {

		Date subscriptionDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_subscriptionDate"));;
		Date rateUntilDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_rateUntilDate"));
		Date endAgreementDate = DateUtils.validateParseDate((String) recordMap.get("OC_ServiceInstance_endAgreementDate"));
		String OC_ServiceInstance_description = (String) recordMap.get("OC_ServiceInstance_description");
		String OC_ServiceInstance_quantity = (String) recordMap.get("OC_ServiceInstance_quantity");

		serviceInstance.setSubscriptionDate(subscriptionDate);
		serviceInstance.setRateUntilDate(rateUntilDate);
		serviceInstance.setEndAgreementDate(endAgreementDate);
		serviceInstance.setQuantity(new BigDecimal(OC_ServiceInstance_quantity));
		serviceInstance.setDescription(OC_ServiceInstance_description);
		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> serviceInstance.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "ServiceInstance")));
	}
	public enum ServiceInstanceActionEnum {
		INSTANTIATE, ACTIVATE, RESUME, SUSPEND, TERMINATE, UPDATE
	}
}]]></column>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-44" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.AccessImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import access points"/>
            <column name="created" valueDate="${db.current.time}"/>
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.model.billing.Subscription;
import org.meveo.model.mediation.Access;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.medina.impl.AccessService;

public class AccessImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";

	private AccessService accessService = (AccessService) getServiceInterface("AccessService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
	CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface(
			"CustomFieldTemplateService");

	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"AccessPoint".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(AccessActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				AccessActionEnum action = AccessActionEnum.valueOf(OC_ACTION);

				Access access = validateAndGetAccess(action, recordMap);

				if (AccessActionEnum.DELETE.equals(action)) {
					accessService.remove(access);
				} else {
					setAccessValues(recordMap, access);
					if (AccessActionEnum.CREATE.equals(action)) {
				        if (accessService.isDuplicateAndOverlaps(access)) {
				            throw new BusinessException( "Duplicate subscription/access point: '"+access.getSubscription().getCode()+"'/'"+access.getAccessUserId()+"'");
				        }
						accessService.create(access);
					} else if (AccessActionEnum.UPDATE.equals(action)) {
						accessService.update(access);
					}

				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private Access validateAndGetAccess(AccessActionEnum action, Map<String, Object> recordMap) {
		Access access = null;
		String OC_subscription_code = (String) recordMap.get("OC_Subscription_code");
		String OC_Access_code = (String) recordMap.get("OC_accessPoint_code");
		List<Access> accessList = accessService.getActiveAccessByCodeAndCodeSubscription(OC_Access_code, OC_subscription_code);
		if (!AccessActionEnum.CREATE.equals(action)) {
			if (accessList == null || accessList.isEmpty()) {
				throw new ValidationException("no Access found for subscriptionCode/AccessCode: '"
						+ OC_subscription_code + "'/'" + OC_Access_code + "'");
			}
			access = accessList.get(0);
		} else {
			access = new Access();
			Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
			if (subscription == null) {
				throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
			}
			access.setSubscription(subscription);
			access.setAccessUserId(OC_Access_code);
		}
		return access;
	}

	private void setAccessValues(Map<String, Object> recordMap, Access access) throws ParseException {
		Date startDate = DateUtils.validateParseDate((String) recordMap.get("OC_accessPoint_startDate"));
		Date endDate = DateUtils.validateParseDate((String) recordMap.get("OC_accessPoint_endDate"));
		access.setEndDate(endDate);
		access.setStartDate(startDate);

		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> access.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "Access")));
	}

	public enum AccessActionEnum {
		CREATE, UPDATE, DELETE
	}
}]]></column>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-45" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.SubscriptionImportScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="script processor to import subscriptions"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[package org.meveo.service.script;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.exception.EntityDoesNotExistsException;
import org.meveo.model.admin.Seller;
import org.meveo.model.billing.Subscription;
import org.meveo.model.billing.SubscriptionTerminationReason;
import org.meveo.model.billing.UserAccount;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.crm.CustomFieldTemplate;
import org.meveo.model.crm.custom.CustomFieldMatrixColumn;
import org.meveo.model.crm.custom.CustomFieldStorageTypeEnum;
import org.meveo.model.crm.custom.CustomFieldTypeEnum;
import org.meveo.model.shared.DateUtils;
import org.meveo.service.admin.impl.SellerService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.UserAccountService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.crm.impl.CustomFieldTemplateService;
import org.meveo.service.crm.impl.SubscriptionTerminationReasonService;

public class SubscriptionImportScript extends GenericImportScript {

	private static final String RECORD_VARIABLE_NAME = "record";
	private SubscriptionTerminationReasonService reasonService= (SubscriptionTerminationReasonService) getServiceInterface("SubscriptionTerminationReasonService");
	private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
	private UserAccountService userAccountService = (UserAccountService) getServiceInterface("UserAccountService");
	private SellerService sellerService = (SellerService) getServiceInterface("SellerService");
	private OfferTemplateService offerService = (OfferTemplateService) getServiceInterface("OfferTemplateService");
	private CustomFieldTemplateService customFieldTemplateService =(CustomFieldTemplateService) getServiceInterface("CustomFieldTemplateService");

	@Override
	public void execute(Map<String, Object> context) throws BusinessException {
		try {
			Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
			if (recordMap != null && !recordMap.isEmpty()) {
				String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
				if (!"SUBSCRIPTION".equals(OC_ENTITY)) {
					throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
				}
				String OC_ACTION = (String) recordMap.get("OC_ACTION");
				if (!Stream.of(SubscriptionActionEnum.values()).anyMatch(e -> e.toString().equals(OC_ACTION))) {
					throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
				}
				SubscriptionActionEnum action = SubscriptionActionEnum.valueOf(OC_ACTION);

				String OC_subscription_code = (String) recordMap.get("OC_subscription_code");
				Subscription subscription = subscriptionService
						.findByCode(OC_subscription_code);
				if (subscription == null && !SubscriptionActionEnum.CREATE.equals(action)) {
					throw new ValidationException("no Subscription Found for subscriptionCode: '"
							+ OC_subscription_code + "'");
				}
				if (subscription != null && SubscriptionActionEnum.CREATE.equals(action)) {
					throw new ValidationException("subscription already exists with code: '"
							+ OC_subscription_code + "'");
				}

				switch (action) {
				case CREATE:
					subscription = new Subscription();
					subscription.setCode(OC_subscription_code);
					mapSubscriptionValues(recordMap, subscription);
					subscriptionService.create(subscription);
					break;
				case ACTIVATE:
					subscriptionService.activateInstantiatedService(subscription);
					break;
				case RESUME:
					subscriptionService.subscriptionReactivation(subscription, new Date());
					break;
				case SUSPEND:
					subscriptionService.subscriptionSuspension(subscription, new Date());
					break;
				case TERMINATE:
					Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));
					String terminationCode = (String)recordMap.get("OC_subscriptionTerminationReason_code");
					if(terminationCode==null) {
						throw new ValidationException("OC_subscriptionTerminationReason_code is mandatory to terminate subscription" );
					}
					SubscriptionTerminationReason terminationReason = reasonService.findByCodeReason(terminationCode);
					if(terminationReason==null) {
						throw new EntityDoesNotExistsException(SubscriptionTerminationReason.class, terminationCode);
					}
					subscription.setSubscriptionTerminationReason(terminationReason);
					subscriptionService.terminateSubscription(subscription, OC_terminationDate, terminationReason, null);
					break;
				case UPDATE:
					mapSubscriptionValues(recordMap, subscription);
					subscriptionService.update(subscription);
					break;
				default:
					break;
				}
			}
		} catch (Exception exception) {
			throw new BusinessException(exception);
		}
	}

	private void mapSubscriptionValues(Map<String, Object> recordMap, Subscription subscription) throws ParseException {
		String OC_seller_code = (String) recordMap.get("OC_seller_code");
		String OC_offer_code = (String) recordMap.get("OC_offer_code");
		String OC_userAccount_code = (String) recordMap.get("OC_userAccount_code");
		Date subscriptionDate = DateUtils.validateParseDate((String) recordMap.get("OC_subscriptionDate"));
		Date endAgreementDate = DateUtils.validateParseDate((String) recordMap.get("OC_endAgreementDate"));
		Date OC_terminationDate = DateUtils.validateParseDate((String) recordMap.get("OC_terminationDate"));

		String OC_subscription_description = (String) recordMap.get("OC_subscription_description");



		UserAccount userAccount = userAccountService.findByCode(OC_userAccount_code);
		if(userAccount==null) {
			throw new EntityDoesNotExistsException(UserAccount.class, OC_userAccount_code);
		}
		Seller seller = sellerService.findByCode(OC_seller_code);
		if(seller==null) {
			throw new EntityDoesNotExistsException(Seller.class, OC_seller_code);
		}
		OfferTemplate offer = offerService.findByCode(OC_offer_code);
		if(offer==null) {
			throw new EntityDoesNotExistsException(OfferTemplate.class, OC_offer_code);
		}
		subscription.setUserAccount(userAccount);
		subscription.setSeller(seller);
		subscription.setOffer(offer);
		subscription.setTerminationDate(OC_terminationDate);
		subscription.setSubscriptionDate(subscriptionDate);
		subscription.setEndAgreementDate(endAgreementDate);
		subscription.setDescription(OC_subscription_description);
		recordMap.keySet().stream().filter(key -> key.startsWith("CF_"))
				.forEach(key -> subscription.setCfValue(key.substring(3), parseStringCf(key.substring(3), (String)recordMap.get(key), "Subscription")));
	}

	public enum SubscriptionActionEnum {
		CREATE, UPDATE, SUSPEND, RESUME, ACTIVATE, TERMINATE
	}
}]]></column>
        </insert>

        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-46" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importServicesJob" />
            <column name="description" value="importServicesJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importServicesJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/services/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio xmlns=\"http://www.beanio.org/2012/03\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n          \t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_description\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_quantity\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_subscriptionDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_rateUntilDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_endAgreementDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationReason\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PPC_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PRIXMINUTE_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_NRC\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_CHATS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_SMS_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_NRC_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUTPARUNITE_APPEL_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_LICENCE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_SMS_SORTANT_ZONE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_UNITAIRE_OPTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_REC_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_REC\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUT_APPEL_ENTRANT\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_EMAILS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_HITS_PALIER\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_TRANCHE_STOCKAGE_GO\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_TAILLE_TRANCHE_STOCKAGE_GO\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_STOCKAGE_EMAILS_GO_INCLUS\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_MIN_FACTURATION\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_description\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_quantity\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_subscriptionDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_rateUntilDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationReason\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_ServiceInstance_endAgreementDate\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PPC_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_APPEL_SORTANT_PRIXMINUTE_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_NRC\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_CHATS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_SMS_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_NRC_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUTPARUNITE_APPEL_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_LICENCE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_SMS_SORTANT_ZONE\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_UNITAIRE_OPTION\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_PRIX_REC_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_REC\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MATRICE_COUT_APPEL_ENTRANT\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_EMAILS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_PRIX_HITS_PALIER\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PRIX_TRANCHE_STOCKAGE_GO\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_TAILLE_TRANCHE_STOCKAGE_GO\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_STOCKAGE_EMAILS_GO_INCLUS\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_MAP_MIN_FACTURATION\" required=\"false\"/>\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/services/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/services/inputs"}],
	            "waitingMillis":[{"long":0}],
	            "FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],
	            "FlatFileProcessingJob_rejectDir":[{"string":"/imports/services/rejects"}],
	            "nbRuns":[{"long":1}],
	            "FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.ServiceImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
          </insert>
          <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-47" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importSubscriptionsJob" />
            <column name="description" value="importSubscriptionsJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importSubscriptionsJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/subscriptions/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_description\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_userAccount_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_offer_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_seller_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscriptionDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_endAgreementDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_subscriptionTerminationReason_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_REACH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_PAYS_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_TYPE_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NIVEAU_NUM\" ignore=\"true\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_COMMANDE_SUB\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_subscription_description\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_userAccount_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_offer_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_seller_code\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_subscriptionDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_endAgreementDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_terminationDate\" required=\"false\"/>\r\n\t\t\t<field name=\"OC_subscriptionTerminationReason_code\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_REACH\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_PAYS_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_TYPE_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NIVEAU_NUM\" required=\"false\"/>\r\n\t\t\t<field name=\"CF_CF_NUM_COMMANDE_SUB\" required=\"false\"/>\r\n\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/subscriptions/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/subscriptions/inputs"}],
	            "waitingMillis":[{"long":0}],"FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],"FlatFileProcessingJob_rejectDir":[{"string":"/imports/subscriptions/rejects"}],
	            "nbRuns":[{"long":1}],"FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.SubscriptionImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-48" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="importAccesPointsJob" />
            <column name="description" value="importAccesPointsJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="importAccesPointsJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values">
	            <![CDATA[{"oneFilePerJob":[{"boolean":false}],
	            "FlatFileProcessingJob_outputDir":[{"string":"/imports/accessPoints/outputs"}],
	            "FlatFileProcessingJob_mappingConf":[{"string":"<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\",\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_code\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_startDate\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_endDate\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_Subscription_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_code\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_startDate\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_accessPoint_endDate\" required=\"true\"/>\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}],
	            "FlatFileProcessingJob_recordVariableName":[{"string":"record"}],
	            "FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}],
	            "FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}],
	            "FlatFileProcessingJob_archiveDir":[{"string":"/imports/accessPoints/archives"}],
	            "FlatFileProcessingJob_inputDir":[{"string":"/imports/accessPoints/inputs"}],
	            "waitingMillis":[{"long":0}],
	            "FlatFileProcessingJob_nbLinesToProcess":[{"long":1}],
	            "FlatFileProcessingJob_formatTransfo":[{"string":"None"}],
	            "FlatFileProcessingJob_rejectDir":[{"string":"/imports/accessPoints/rejects"}],
	            "nbRuns":[{"long":1}],
	            "FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.AccessImportScript"}]}]]>
            </column>
            <column name="verbose_report" value="1" />
        </insert>
	</changeSet>

	<changeSet id="#INTRD-292_20210816" author="HatimOUDAD">
        <insert tableName="journal">
            <column name="id" valueNumeric="-1"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="SAL"/>
            <column name="description" value="Sales Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-2"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="BAN"/>
            <column name="description" value="Bank Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-3"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="MSC"/>
            <column name="description" value="Miscellaneous Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
        <insert tableName="journal">
            <column name="id" valueNumeric="-4"/>
            <column name="version" valueNumeric="0"/>
            <column name="created" valueDate="2021-08-16 00:04:19.913"/>
            <column name="code" value="TAX"/>
            <column name="description" value="Tax Journal"/>
            <column name="creator" value="OPENCELL.ADMIN"/>
        </insert>
    </changeSet>
	<changeSet id="#INTRD-1406_20210826" author="HatimOUDAD">
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-2" />
    		<where>code in ('PAY_CHK','PAY_TIP','PAY_DDT','REJ_CHK','REJ_DDT','REJ_TIP','PAY_NID','PAY_REC','REF_CHK','REF_DDT','PAY_DEP','REF_CRD','REJ_CRD','REJ_RCR','REJ_RDD','REF_TIP','PAY_CRD','PAY_PAL','PAY_STP','DBT_TRS','CRD_TRS')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-3" />
    		<where>code in ('EXP_WRT','INV_FEE','RND_INC','RND_EXP')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-1" />
    		<where>code in ('INV_STD','INV_REB','INV_DIS','INV_CRN')</where>
    </update>
    <update tableName="ar_occ_template">
    		<column name="journal_id" value="-4" />
    		<where>code in ('TAX_VAT_00','TAX_VAT_05','TAX_VAT_20','TAX_VAT_10')</where>
    </update>
    </changeSet>


    <changeSet id="#INTRD-1589_2021_14_09" author="ZBariki">
        <insert tableName="meveo_job_instance">
            <column name="id" valueSequenceNext="meveo_job_instance_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="1" />
            <column name="created" valueDate="2021-09-14 00:04:19.913" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="FlatFileProcessingJob" />
            <column name="code" value="ProcessCustomerPaymentsFileJob" />
            <column name="description" value="Process customer payments file job"/>
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="job_speed" value="NORMAL" />
            <column name="single_node" valueNumeric="1" />
            <column name="verbose_report" valueNumeric="1" />
            <column name="disabled" valueNumeric="0" />
            <column name="uuid" value="ProcessCustomerPaymentsFileJob" />
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="oneFilePerJob"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Process files separately"/>
            <column name="field_type" value="BOOLEAN"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="default_value" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_outputDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Output directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="default_value" value="imports/payment/output"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:4"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_mappingConf"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Record descriptor"/>
            <column name="field_type" value="TEXT_AREA"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Record configuration:2;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_recordVariableName"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Record variable name"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="record"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="50"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_originFilename"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Filename variable name"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="origin_filename"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:3"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_archiveDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Archive directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="imports/payment/archive"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:2"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_inputDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Input directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="imports/payment/input"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="waitingMillis"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Waiting before next launch (ms)"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="0"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_variables"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Init and finalize variables"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="MAP"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="mapkey_type" value="STRING"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Dataprocessing configuration:3;field:1"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_errorAction"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Error action"/>
            <column name="field_type" value="LIST"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="CONTINUE"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:5"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileFormat"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="File format"/>
            <column name="field_type" value="ENTITY"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="entity_clazz" value="org.meveo.model.admin.FileFormat"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileNameFilter"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="File name filter"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:5"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_fileNameExtension"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Extension"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="csv"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:6"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_formatTransfo"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Format transformation"/>
            <column name="field_type" value="LIST"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" value="None"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:4"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_rejectDir"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Reject directory"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:3"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_scriptsFlow"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Script flow"/>
            <column name="field_type" value="STRING"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="max_value" valueNumeric="256"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Data processing configuration:3;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="nbRuns"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Number of parallel execution"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="1"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:Execution configuration:0;field:0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FlatFileProcessingJob_nbLinesToProcess"/>
            <column name="applies_to" value="JobInstance_ProcessCustomerPaymentsFileJob"/>
            <column name="description" value="Nb of lines to process"/>
            <column name="field_type" value="LONG"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="default_value" valueNumeric="1"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="gui_position" value="tab:Configuration:0;fieldGroup:File configuration:1;field:7"/>
        </insert>
		<insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-40" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="now()" />
            <column name="updated" valueDate="null" />
            <column name="uuid" value="ServiceTemplateToProductJob" />
            <column name="code" value="ServiceTemplateToProductJob" />
            <column name="description" value="ServiceTemplateToProductJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="ScriptingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="null" />
            <column name="timerentity_id" value="null" />
            <column name="cf_values">
            	<![CDATA[
            		{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ServiceTemplateToProductScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
            	]]>
			</column>
       	</insert>
	</changeSet>
	<changeSet id="INTRD_1985_20210923_data" author="TarikFA.">


        <insert tableName="generic_sequence">
            <column name="id" valueSequenceNext="generic_sequence_seq" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="quote_offer_sequence" />
            <column name="description" value="Quote Offer sequence" />
            <column name="sequence_type" value="SEQUENCE" />
            <column name="sequence_size" valueNumeric="9" />
            <column name="current_number" valueNumeric="0" />
        </insert>


		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="QuoteOffer" />
			<column name="code_el" value="#{entity.quoteVersion.id}_#{entity.offerTemplate.code}_#{sequenceNextValue}" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="sequence_id" valueSequenceCurrent="generic_sequence_seq" />
		</insert>

        <insert tableName="generic_sequence">
            <column name="id" valueSequenceNext="generic_sequence_seq"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="order_offer_sequence" />
            <column name="description" value="Order Offer sequence" />
            <column name="sequence_type" value="SEQUENCE" />
            <column name="sequence_size" valueNumeric="9" />
            <column name="current_number" valueNumeric="0" />
        </insert>


		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="OrderOffer" />
			<column name="code_el" value="#{entity.order.code}_#{entity.offerTemplate.code}_#{sequenceNextValue}" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="sequence_id" valueSequenceCurrent="generic_sequence_seq" />
		</insert>
	</changeSet>

	<changeSet id="#2122_20211001" author="YoussefIZEM">
        <update tableName="ar_account_operation">
            <column name="accounting_date" valueComputed="transaction_date"></column>
        </update>
    </changeSet>
	<changeSet id="1589_20210930" author="YoussefIZEM" dbms="postgresql">
        <insert tableName="billing_accounting_code">
            <column name="id" valueNumeric="-35" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="T3P9476" />
            <column name="description" value="WS BAD DEBT WRITE-OFFS IRRE"></column>
            <column name="chart_of_account_type" value="REVENUE" />
            <column name="chart_of_account_view_type" value="REGULAR" />
        </insert>
		<insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-50" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="accounting_code_id" valueNumeric="-35" />
            <column name="code" value="PAY_BATCH" />
            <column name="description" value="Payment from batch payment file" />
            <column name="occ_category" value="CREDIT" />
            <column name="journal_id" value="-2" />
        </insert>
        <update tableName="meveo_job_instance" >
            <column name="cf_values">
	            <![CDATA[{"FlatFileProcessingJob_mappingConf":[{"string":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beanio xmlns=\"http://www.beanio.org/2012/03\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\n   <stream name=\"record\" format=\"fixedlength\" strict=\"true\">\n      <record name=\"payment\" occurs=\"0+\" class=\"org.meveo.api.dto.payment.CustomerPaymentRecordDto\" minLength=\"80\" maxLength=\"80\">\n         <field name=\"payCode\" minOccurs=\"0\" length=\"3\" />\n         <field name=\"accountNumber\" minOccurs=\"0\" length=\"11\" />\n         <field name=\"checkDigit\" minOccurs=\"0\" length=\"2\" />\n         <field name=\"paidAmount\" minOccurs=\"0\" length=\"10\" />\n         <field name=\"filler\" minOccurs=\"0\" length=\"5\" />\n         <field name=\"date\" minOccurs=\"0\" length=\"6\" format=\"ddMMyy\"/>\n         <field name=\"reference\" minOccurs=\"0\" length=\"42\" />\n         <field name=\"endOfRecord\" minOccurs=\"0\" length=\"1\" />\n      </record>\n   </stream>\n</beanio>"}]
						,"FlatFileProcessingJob_recordVariableName":[{"string":"record"}]
						,"FlatFileProcessingJob_errorAction":[{"string":"CONTINUE"}]
						,"FlatFileProcessingJob_originFilename":[{"string":"origin_filename"}]
						,"FlatFileProcessingJob_fileNameExtension":[{"string":"PMT"}]
						,"FlatFileProcessingJob_scriptsFlow":[{"string":"org.meveo.service.script.ProcessCustomerPaymentsFileScript"}]
						,"FlatFileProcessingJob_archiveDir":[{"string":"imports/payment/archive"}]
						,"FlatFileProcessingJob_rejectDir":[{"string":"imports/payment/reject"}]
						,"FlatFileProcessingJob_outputDir":[{"string":"imports/payment/output"}]
						,"FlatFileProcessingJob_inputDir":[{"string":"imports/payment/input"}]}]]>
			</column>
            <where>code ='ProcessCustomerPaymentsFileJob'</where>
        </update>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-55" />
            <column name="version" valueNumeric="0" />
            <column name="code" value="org.meveo.service.script.ProcessCustomerPaymentsFileScript" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="Process customer payments file script"/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="script"><![CDATA[
package org.meveo.service.script;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Map;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.meveo.admin.exception.BusinessException;
import org.meveo.api.dto.payment.CustomerPaymentRecordDto;
import org.meveo.commons.utils.StringUtils;
import org.meveo.model.billing.BillingAccount;
import org.meveo.model.payments.MatchingStatusEnum;
import org.meveo.model.payments.OCCTemplate;
import org.meveo.model.payments.OperationCategoryEnum;
import org.meveo.model.payments.Payment;
import org.meveo.model.payments.PaymentMethodEnum;
import org.meveo.service.billing.impl.BillingAccountService;
import org.meveo.service.billing.impl.RatingService;
import org.meveo.service.payments.impl.OCCTemplateService;
import org.meveo.service.payments.impl.PaymentService;
import org.meveo.service.script.Script;

import org.meveo.model.payments.ApplicationPropertiesEnum;
import org.meveo.model.payments.AccountOperationCFsEnum;

/**
 * @author Abdellatif BARI
 */
@Stateless
public class ProcessCustomerPaymentsFileScript extends Script {

	private transient BillingAccountService billingAccountService = (BillingAccountService) getServiceInterface(BillingAccountService.class.getSimpleName());

    private transient PaymentService paymentService = (PaymentService) getServiceInterface(PaymentService.class.getSimpleName());

	private transient OCCTemplateService oCCTemplateService = (OCCTemplateService) getServiceInterface(OCCTemplateService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> parameters) throws BusinessException {
        try {
            CustomerPaymentRecordDto customerPaymentRecordDto = initContext(parameters);
            processItem(customerPaymentRecordDto);
        } catch (Exception e) {
            log.error("error on process customer payments file {} ", e.getMessage(), e);
            if (e instanceof BusinessException) {
                throw e;
            } else {
                // wrap the exception in a business exception and throwing it
                throw new BusinessException(e);
            }
        }
    }

    /**
     * Init context
     *
     * @param parameters parameters
     * @return the customer payment record Dto
     * @throws BusinessException the business exception
     */
    private CustomerPaymentRecordDto initContext(Map<String, Object> parameters) throws BusinessException {
        CustomerPaymentRecordDto customerPaymentRecordDto = (CustomerPaymentRecordDto) parameters.get("record");
        if (customerPaymentRecordDto == null) {
            throw new BusinessException(String.format("Parameter record is missing"));
        }
        customerPaymentRecordDto.setErrorMessage(new StringBuilder());
        String fileName = (String) parameters.get("origin_filename");
        if (StringUtils.isBlank(fileName)) {
            throw new BusinessException(String.format("Parameter origin_filename is missing"));
        }
        customerPaymentRecordDto.setFileName(fileName);
        return customerPaymentRecordDto;
    }

    /**
     * Process item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void processItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        validateItem(customerPaymentRecordDto);
        populateItem(customerPaymentRecordDto);
        if (customerPaymentRecordDto.getErrorMessage().length() > 0) {
            throw new BusinessException(customerPaymentRecordDto.getErrorMessage().toString());
        }
    }

    /**
     * Validate item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void validateItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        if (StringUtils.isBlank(customerPaymentRecordDto.getPaidAmount())) {
            customerPaymentRecordDto.getErrorMessage().append("The payment amount is required.");
        } else {
            customerPaymentRecordDto.setPaidAmount(customerPaymentRecordDto.getPaidAmount().trim());
            if (!isDouble(customerPaymentRecordDto.getPaidAmount())) {
                customerPaymentRecordDto.getErrorMessage().append("The payment amount is invalid");
            }
        }
        if (customerPaymentRecordDto.getDate() == null) {
            customerPaymentRecordDto.getErrorMessage().append("The payment date is required");
        }
        if (StringUtils.isBlank(customerPaymentRecordDto.getEndOfRecord()) || !customerPaymentRecordDto.getEndOfRecord().equalsIgnoreCase("V")) {
            customerPaymentRecordDto.getErrorMessage().append("The end of record must always hard coded as V.");
        }
    }

    /**
     * Check number is double
     *
     * @param strNum the string number
     * @return true is the string is double.
     */
    public static boolean isDouble(String strNum) {
        if (StringUtils.isBlank(strNum)) {
            return false;
        }
        try {
            Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }

    /**
     * Convert String to integer value (possibility to have null as default value)
     *
     * @param str string to be converted
     * @return the integer value
     */
    public static Integer toInteger(String str) {
        return toInteger(str, null);
    }

    /**
     * Convert String to integer value (possibility to have null as default value)
     *
     * @param str          string to be converted
     * @param defaultValue the default value
     * @return the integer value
     */
    public static Integer toInteger(String str, Integer defaultValue) {
        if (StringUtils.isBlank(str)) {
            return defaultValue;
        } else {
            try {
                return Integer.parseInt(str.trim());
            } catch (NumberFormatException ne) {
                return defaultValue;
            }
        }
    }

    /**
     * Populate tariff plan item
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void populateItem(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        // if everything is OK and no errors
        if (customerPaymentRecordDto.getErrorMessage().length() == 0) {
            Integer accountNumber = toInteger(customerPaymentRecordDto.getAccountNumber());
            if (accountNumber != null) {
                customerPaymentRecordDto.setAccountNumber(accountNumber.toString());
            }

            BillingAccount billingAccount = billingAccountService.findByNumber(customerPaymentRecordDto.getAccountNumber());
            if (billingAccount != null) {
                // create payment.
                createPayment(customerPaymentRecordDto, billingAccount);
            } else { // the billing account is not found in Opencell
                log.warn("The billing account " + customerPaymentRecordDto.getAccountNumber() + " is not found ");
                postUnmatchedPayment(customerPaymentRecordDto);
            }
        }
    }

    /**
     * post unmatched payment into the suspense billing account
     *
     * @param customerPaymentRecordDto the customerPayment record Dto
     * @throws BusinessException the business exception
     */
    private void postUnmatchedPayment(CustomerPaymentRecordDto customerPaymentRecordDto) throws BusinessException {
        // get the suspense billing account
        String suspenseBillingAccountCode = ApplicationPropertiesEnum.SUSPENSE_BILLING_ACCOUNT_CODE.getProperty();
        BillingAccount billingAccount = billingAccountService.findByCode(suspenseBillingAccountCode);
        if (billingAccount != null) {
            // Create payment and put it into the suspense billing account
            createPayment(customerPaymentRecordDto, billingAccount);
        } else {
            log.error("The suspense billing account {} is not found", suspenseBillingAccountCode);
            customerPaymentRecordDto.getErrorMessage().append("The suspense billing account " + suspenseBillingAccountCode + " is not found ");
        }
    }

    /**
     * create the customer payment
     *
     * @param billingAccount the billing account
     * @return the payment
     * @throws BusinessException the business exception
     */
    private Payment createNewPayment(CustomerPaymentRecordDto customerPaymentRecordDto, BillingAccount billingAccount) throws BusinessException {

        String occTemplateCode = ApplicationPropertiesEnum.TEMPLATE_BATCH_PAYMENT_CREDIT.getProperty();
        OCCTemplate occTemplate = oCCTemplateService.findByCode(occTemplateCode);
        if (occTemplate == null) {
            throw new BusinessException("Cannot find OCC Template with code=" + occTemplateCode);
        }

        BigDecimal amount = new BigDecimal(customerPaymentRecordDto.getPaidAmount()).divide(BigDecimal.valueOf(100));
        /*
         * if (!StringUtils.isBlank(checkDigit)) { checkDigit = checkDigit.trim(); if (checkDigit.equals("-")) { amount = amount.negate(); } }
         */

        Payment payment = new Payment();
        payment.setCustomerAccount(billingAccount.getCustomerAccount());
        payment.setPaymentMethod(PaymentMethodEnum.CARD);
        // payment.setOrderNumber(?);
        payment.setAmountWithoutTax(amount);
        payment.setAmount(amount);
        payment.setMatchingAmount(BigDecimal.ZERO);
        payment.setUnMatchingAmount(amount);
        payment.setAccountingCode(occTemplate.getAccountingCode());
        payment.setCode(occTemplate.getCode());
        payment.setDescription(occTemplate.getDescription());
        payment.setTransactionCategory(OperationCategoryEnum.CREDIT); // EIR must provide the category of the transaction CREDIT or DEBIT
        payment.setAccountCodeClientSide(occTemplate.getAccountCodeClientSide());
        payment.setReference(customerPaymentRecordDto.getReference());
        payment.setTransactionDate(customerPaymentRecordDto.getDate());
        // using the date the file is processed as the Payment Date (to be displayed on the invoice)
        payment.setDueDate(new Date());
        payment.setMatchingStatus(MatchingStatusEnum.O);
        payment.setCfValue(AccountOperationCFsEnum.BILLING_ACCOUNT_NUMBER.name(), billingAccount.getExternalRef1());
        //payment.setCfValue(FROM_AccountOperationCFsEnum.BILLING_ACCOUNT_NUMBER.name(), billingAccount.getExternalRef1());
        payment.setCfValue(AccountOperationCFsEnum.PAYMENT_FILE_ACCOUNT_CUSTOMER_NUMBER.name(), customerPaymentRecordDto.getAccountNumber());
        payment.setCfValue(AccountOperationCFsEnum.PAYMENT_FILE_NAME.name(), customerPaymentRecordDto.getFileName());
        return payment;
    }

    /**
     * create the customer payment
     *
     * @param billingAccount the billing account
     * @return the customer payment record Dto
     * @throws BusinessException the business exception
     */
    private void createPayment(CustomerPaymentRecordDto customerPaymentRecordDto, BillingAccount billingAccount) throws BusinessException {
        try {
            Payment payment = createNewPayment(customerPaymentRecordDto, billingAccount);
            paymentService.create(payment);
        } catch (BusinessException e) {
            log.error("Couldn't create Payement. error : {}", e);
            customerPaymentRecordDto.getErrorMessage().append("Couldn't create payment. error : " + e.getMessage());
        }
    }
}		]]></column>
        </insert>
    </changeSet>

     <changeSet id="INTRD-2143_20211006" author="TarikFA.">
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.OrderValidationScript" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script;
            		public class OrderValidation extends OrderValidationScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
        </insert>
    </changeSet>

	<changeSet id="INTRD_2290_20211015_build" author="TarikFA.">
		<insert tableName="dunning_settings">
			<column name="id" valueSequenceNext="dunning_settings_seq" />
			<column name="code" value="DUN_DEF"/>
			<column name="description" value="Default Dunning Settings generated"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="max_dunning_levels" valueNumeric="5" />
			<column name="max_days_outstanding" valueNumeric="3" />
			<column name="dunning_mode" value="CUSTOMER_LEVEL" />
		</insert>
		<insert tableName="dunning_pause_reasons">
			<column name="id" valueSequenceNext="dunning_pause_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="pause_reason" value="5 jours (ouvrés) avant paiement"/>
			<column name="description" value="Client demande 5 jours (ouvrés) avant de payer"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_pause_reasons">
			<column name="id" valueSequenceNext="dunning_pause_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="pause_reason" value="10 jours (ouvrés) avant paiement"/>
			<column name="description" value="Client demande 10 jours (ouvrés) avant de payer"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>

		</insert>
		<insert tableName="dunning_pause_reasons">
			<column name="id" valueSequenceNext="dunning_pause_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="pause_reason" value="30 jours (ouvrés) avant paiement"/>
			<column name="description" value="Client demande 30 jours (ouvrés) avant de payer"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_stop_reasons">
			<column name="id" valueSequenceNext="dunning_stop_reasons_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="stop_reason" value="Client conteste la facture" />
			<column name="description" value="Client conteste la facture. Dept comptable reprend la suite" />
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq" />
		</insert>
		<insert tableName="dunning_stop_reasons">
			<column name="id" valueSequenceNext="dunning_stop_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="stop_reason" value="Client insolvable"/>
			<column name="description" value="Client se déclare insolvable. Renvoi au dept comptale"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_stop_reasons">
			<column name="id" valueSequenceNext="dunning_stop_reasons_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="stop_reason" value="Entreprise dépose le bilan"/>
			<column name="description" value="L’entreprise a débuté une procédure de dépôt de bilan. Renvoi au dept comptable"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>

		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Pause"/>
			<column name="description" value="PAUSED_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Stop"/>
			<column name="description" value="STOPPED_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Succès"/>
			<column name="description" value="SUCCESSFUL_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Echec"/>
			<column name="description" value="FAILED_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
		<insert tableName="dunning_collection_plan_statuses">
			<column name="id" valueSequenceNext="dunning_collection_plan_statuses_seq"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="creator" value="OPENCELL.ADMIN"/>
			<column name="version" valueNumeric="1"/>
			<column name="status" value="Actif"/>
			<column name="description" value="ACTIVE_DUNNING"/>
			<column name="dunning_settings_id" valueSequenceCurrent="dunning_settings_seq"/>
		</insert>
	</changeSet>

	<changeSet id="INTRD-2634_20211027" author="YoussefIZEM">
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-1" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2B relance 1 (J+15)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Reminder – Past due invoice#{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""><p class="MsoNormal"><i><span lang="EN-US" style="mso-ascii-font-family:Calibri;
mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US">Hello #{Title}
#{CustomerAccount.LastName},</span></i><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;
mso-bidi-font-family:Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US"><o:p></o:p></span></p>

<p class="MsoNormal"><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal"><i><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US">We are reaching out to you in regards of your invoice #{Invoice.Number} and more specifically
its payment that was due on the #{Invoice.DueDate}. You can find a copy of the invoice attached to this email.</span></i><span lang="EN-US" style="mso-ascii-font-family:
Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;color:black;mso-themecolor:text1;mso-ansi-language:
EN-US"><o:p></o:p></span></p>

<p class="MsoNormal"><i><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US">Please make sure to pay the invoice in full as soon as possible. If you have any additional
question, do not hesitate to contact our services or your point of contact in our company.</span></i><span lang="EN-US" style="mso-ascii-font-family:Calibri;
mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US"><o:p></o:p></span></p>

<p class="MsoNormal"><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US"><o:p>&nbsp;</o:p></span></p>

<p class="MsoNormal"><i><span lang="EN-US" style="mso-ascii-font-family:Calibri;mso-fareast-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:
Calibri;color:black;mso-themecolor:text1;mso-ansi-language:EN-US">Best regards,</span></i></p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-2" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2B relance 4 (J+35)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="DunningLetter for Invoice #{Invoice.number}" />
            <column name="is_active" value="1" />
            <column name="channel" value="LETTER" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">#{Compagny.name}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.adress}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.postalcode}; #{Compagny.city}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.phone}</span></i><span lang="EN-US"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></span><span lang="EN-US"><o:p></o:p></span></p><p class="MsoNormal"><span lang="EN-US" segoe="" ui",="" "sans-serif";"="">

</span></p><p class="MsoNormal"><i><span lang="EN-US">#{Contact.client}
</span></i><span lang="EN-US"> / <i>#{Compagny.client.name}</i></span><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.adress}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.postalcode}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.city}</span></i><span lang="EN-US"><br>
<!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></span><i><span lang="EN-US"><o:p></o:p></span></i></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">#{Compagny.city}, on #{day.date}</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">#{Title.client},</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">By a first email dated (Date of 1st reminder), then a second one dated
(Date of 2nd reminder), weaskedyou to proceed to the payment of the invoice</span><i><span lang="EN-US">#{Invoice.number}</span></i><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"=""> for an
amount of </span><i><span lang="EN-US">#{Invoice.total}</span></i></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">Unless we are mistaken, we regret to say that we have not
yet received payment of invoice. We therefore ask you to proceed immediately to
its payment.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">You will find a copy of the invoice attached to this letter.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">Please disregard this letter if your payment has been sent to us prior to
receiving this letter.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">We remain at your disposal in case of any questions. Please accept,
Madam / Sir, the assurance of our best regards.</span></p><p class="MsoNormal"><span style="font-family: " segoe="" ui",="" "sans-serif";"="">Signature </span></p><p class="MsoNormal">
</p><p class="MsoNormal"><span style="font-family: " segoe="" ui",="" "sans-serif";"="">Yourname and surname</span></p><p></p>                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-3" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2C relance 1 (J+1)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Reminder – Past due invoice #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">Hello #{Title}
#{CustomerAccount.LastName},</span></i><span lang="EN-US"><o:p></o:p></span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal"><i><span lang="EN-US">We are reaching
out to you in regards of your invoice #{Invoice.Number} and more specifically
its payment that was due on the #{Invoice.DueDate}. You can find a copy of the
invoice attached to this email.</span></i><span lang="EN-US"><o:p></o:p></span></p><p class="MsoNormal"><i><span lang="EN-US">Please make
sure to pay the invoice in full as soon as possible. If you have any additional
question, do not hesitate to contact our services or your point of contact in our
company.</span></i><span lang="EN-US"><o:p></o:p></span></p><p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p><p class="MsoNormal">
</p><p class="MsoNormal"><i><span lang="EN-US">Best regards,</span></i><o:p></o:p></p><p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-4" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2C relance 1 (J+7)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Reminder – Past due invoice #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">Hello #{Title}
#{CustomerAccount.LastName},</span></i></p><p class="MsoNormal"><i><span lang="EN-US">We are following up on our email dated on the #{Last.action.date} where we informed
you that invoice ##{Invoice.Number} was overdue for payment since #{Invoice.DueDate}.
We regret to inform you that we have not yet received payment from you for this matter.&nbsp;</span></i></p><p class="MsoNormal"><i><span lang="EN-US">We ask that
you proceed with the payment of the invoice as soon as possible and invite you to contact our customer support if you have any difficulties in paying this
invoice.</span></i></p><p class="MsoNormal"><i><span lang="EN-US">You will find a copy of the invoice attached.</span></i></p><p class="MsoNormal">
</p><p class="MsoNormal"><i><span lang="EN-US">Kind regards,&nbsp;</span></i></p><p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-5" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ENG - B2C relance 4 (J+14)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="DunningLetter for Invoice #{Invoice.number}" />
            <column name="is_active" value="1" />
            <column name="channel" value="LETTER" />
            <column name="trading_language_id" value="-1" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">#{Compagny.name}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.adress}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.postalcode}; #{Compagny.city}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.phone}</span></i><span lang="EN-US"><br><!--[if !supportLineBreakNewLine]--><br><!--[endif]--></span><span lang="EN-US"><o:p></o:p></span></p>

<p class="MsoNormal"><i><span lang="EN-US">#{Title.client}
#{Contact.client} </span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.adress}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.postalcode}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.client.city}</span></i><span lang="EN-US"><br>
<!--[if !supportLineBreakNewLine]--><br><!--[endif]--></span><i><span lang="EN-US"><o:p></o:p></span></i></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">#{Compagny.city}, on #{day.date}</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">#{Title.client},</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">By a first email dated (Date of 1st reminder), then a second one dated
(Date of 2nd reminder), we asked you to proceed to the payment of the invoice&nbsp;</span><i><span lang="EN-US">#{Invoice.number}</span></i><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"=""> for an
amount of </span><i><span lang="EN-US">#{Invoice.total}</span></i><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"=""><o:p></o:p></span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">Unless we are mistaken, we regret to say that we have not
yet received payment of invoice. We therefore asky ou to proceed immediately to
its payment.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">You will find a copy of the invoice attached to this letter.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">Please disregard this letter if your payment has been sent to us prior to
receiving this letter.</span></p><p class="MsoNormal"><span lang="EN-US" style="font-family: " segoe="" ui",="" "sans-serif";"="">We remain at your disposal in case of any questions. Please accept,
Madam / Sir, the assurance of our best regards.</span></p><p class="MsoNormal"><span style="font-family: " segoe="" ui",="" "sans-serif";"="">Signature </span></p><p class="MsoNormal">
</p><p class="MsoNormal"><span style="font-family: " segoe="" ui",="" "sans-serif";"="">Yourname and surname</span></p><p></p>                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-6" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2B relance 1 (J+15)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="règlement facture #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i>Bonjour #{Title} #{CustomerAccount.LastName},<o:p></o:p></i></p><p class="MsoNormal"><i>&nbsp;</i></p><p class="MsoNormal"><i>Nous vous contactons concernant votre facture #{Invoice.Number}
qui est en retard de paiement depuis le #{Invoice.DueDate}. Vous trouverez une
copie de la facture en pièce jointe.<o:p></o:p></i></p><p class="MsoNormal"><i>Merci de procéder au règlement de la facture dans les
plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de
prendre contact avec nos services ou votre interlocuteur habituel afin de
trouver une solution.<o:p></o:p></i></p><p class="MsoNormal"></p><p class="MsoNormal"><i>Bien à vous,</i><o:p></o:p></p><p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-7" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2B relance 4 (J+35)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Lettre de relance pour la facture #{Invoice.number}" />
            <column name="is_active" value="1" />
            <column name="channel" value="LETTER" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">#{Compagny.name}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.adress}</span></i><span lang="EN-US"><br></span><i><span lang="EN-US">#{Compagny.postalcode}; #{Compagny.city}</span></i><span lang="EN-US"><br></span><i><span lang="EN-US">#{Compagny.phone}</span></i><span lang="EN-US"><br><!--[if !supportLineBreakNewLine]--><br><!--[endif]--><o:p></o:p></span></p>

<i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Contact.client} </span></i><span lang="EN-US" style="font-size:11.0pt;line-height:107%;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">&nbsp;/ </span><i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Compagny.client.name}</span></i><span lang="EN-US" style="font-size:11.0pt;line-height:107%;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;
mso-ascii-theme-font:minor-latin;mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;
mso-bidi-theme-font:minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA"><br>
</span><i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Compagny.client.adress}</span></i><span lang="EN-US" style="font-size:
11.0pt;line-height:107%;font-family:&quot;Calibri&quot;,&quot;sans-serif&quot;;mso-ascii-theme-font:minor-latin;mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;mso-hansi-theme-font:minor-latin;mso-bidi-font-family:Arial;mso-bidi-theme-font:
minor-bidi;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA"><br>
</span><i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Compagny.client.postalcode}</span></i><div><i style="font-size: 10pt;"><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, &quot;sans-serif&quot;;">#{Compagny.client.city}</span></i><p class="MsoNormal"><i><br></i></p><p class="MsoNormal"><i>#{Compagny.city}</i>, le <i>#<a>{day.date}</a></i><br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal"><i>#{Title.client}</i>,<br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal">Par un premier courriel en date du (Date de la 1ère relance),
puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder
au paiement de la facture <i>#{Invoice.number}</i>) d’un montant de <i>#{Invoice.total}</i>).<br><!--[endif]--></p><p class="MsoNormal">Sauf erreur de notre part, nous sommes au regret de constater
que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture.
Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.<br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal">Vous trouverez en pièce jointe de ce courrier une copie de lafacture en question.</p><p class="MsoNormal">Veuillez ne pas tenir compte de cette lettres si votre règlement
nous a été adressé avant la réception du présent courrier.<br><!--[if !supportLineBreakNewLine]--><br><!--[endif]--></p><p class="MsoNormal">Nous restons à votre disposition dans
l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.<br><br><!--[endif]--></p><p class="MsoNormal"><i>Company Signature</i></p><div><div><div id="_com_1" class="msocomtxt" language="JavaScript"><!--[if !supportAnnotations]--></div><!--[endif]--></div></div><p></p></div>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-8" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2C relance 1 (J+1)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="règlement facture #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style=""></p><p class="MsoNormal"><i><span lang="EN-US">Bonjour #{Title} #{CustomerAccount.LastName},</span></i></p><p class="MsoNormal"><i>Nous vous contactons concernant votre facture #{Invoice.Number}
qui est en retard de paiement depuis le #{Invoice.DueDate}. Vous trouverez une
copie de la facture en pièce jointe.<o:p></o:p></i></p><p class="MsoNormal"><i>Merci de procéder au règlement de la facture dans les
plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de
prendre contact avec nos services ou votre interlocuteur habituel afin de
trouver une solution.<o:p></o:p></i></p><p class="MsoNormal"></p><p class="MsoNormal"><i>Bien à vous,</i><o:p></o:p></p><div><div><div id="_com_1" class="msocomtxt" language="JavaScript">
<!--[if !supportAnnotations]--></div><!--[endif]--></div></div><p></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-9" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2C relance 2 (J+7)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="règlement facture #{Invoice.Number} - #{Company.Name}" />
            <column name="is_active" value="1" />
            <column name="channel" value="EMAIL" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style="font-style: normal;"></p><p class="MsoNormal"><i><span lang="EN-US">Bonjour #{Title} #{CustomerAccount.LastName},<o:p></o:p></span></i></p><p class="MsoNormal"><br></p><p class="MsoNormal"><span style="font-style: italic;">Nous faisons suite à notre courriel en date du#</span><a style=""><span style="font-style: italic;">{Last.action.date}</span>&nbsp;</a><i>où
nous vous informions que votre facture #{Invoice.Number}était en retard de paiement depuis le #{Invoice.DueDate}. Nous sommes dans le regret de vous
informer que nous n’avons toujours pas reçu de paiement de votre part à ce sujet. <o:p></o:p></i></p><p class="MsoNormal"><i>Nous vous demandons de procéder au règlement de la
facture dans les meilleurs délais et nous invitons à contacter au plus vite notre assistance client si vous éprouvez des difficultés à régler cette
facture.<o:p></o:p></i></p><p class="MsoNormal"><i>Vous trouverez à nouveau une copie de la facture en pièce jointe.<o:p></o:p></i></p><p class="MsoNormal"><i>Bien à vous,</i></p><div><div><div id="_com_1" class="msocomtxt" language="JavaScript"><p class="MsoNormal"><!--[endif]--></p>
<!--[if !supportAnnotations]--></div><!--[endif]--></div></div><div style="font-style: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript"><p class="MsoNormal"><!--[endif]--></p><!--[if !supportAnnotations]--></div>
<!--[endif]--></div></div><div style="font-style: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript"><!--[if !supportAnnotations]--></div><!--[endif]--></div></div><p style="font-style: normal;"></p>
                ]]>
            </column>
        </insert>
        <insert tableName="com_message_template">
            <column name="media" value="DUNNING_MEDIA" />
            <column name="id" value="-10" />
            <column name="version" value="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FR - B2C relance 4 (J+14)" />
            <column name="type" value="DUNNING" />
            <column name="tag_start" value="#{" />
            <column name="tag_end" value="}" />
            <column name="subject" value="Lettre de relance pour la facture #{Invoice.number})" />
            <column name="is_active" value="1" />
            <column name="channel" value="LETTER" />
            <column name="trading_language_id" value="-2" />
            <column name="htmlcontent">
                <![CDATA[
<p class="MsoNormal" style="font-weight: normal; font-style: normal;"></p><p class="MsoNormal" style="font-weight: normal;"><i><span lang="EN-US">#{Compagny.name}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.adress}</span></i><span lang="EN-US"><br></span><i><span lang="EN-US">#{Compagny.postalcode}; #{Compagny.city}</span></i><span lang="EN-US"><br>
</span><i><span lang="EN-US">#{Compagny.phone}</span></i><span lang="EN-US"><br><!--[if !supportLineBreakNewLine]--><br><!--[endif]--><o:p></o:p></span></p>

<i style=""><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";">#{client.title} , #{Contact.client}
</span></i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";"><br>
</span><i style=""><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";">#{Compagny.client.adress}</span></i><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";"><br>
</span><i style=""><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";">#{Compagny.client.postalcode}</span></i><div style=""><i style="font-size: 10pt;"><span lang="EN-US" style="font-size: 11pt; line-height: 107%; font-family: Calibri, "sans-serif";">#{Compagny.client.city}</span></i><p class="MsoNormal" style="font-weight: normal;"><i><br></i></p><p class="MsoNormal" style="font-weight: normal;"><i>#{Compagny.city}</i>, le <i>#{day.date}</i><br>
<!--[if !supportLineBreakNewLine]--><br><!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;"><i>#{Title.client}</i>,<br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de
procéder au paiement de la facture <i>#{Invoice.number}</i>) d’un montant de <i>#{Invoice.total}</i>).<br><!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">Sauf erreur de notre part, nous sommes au regret de constater
que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture.
Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.<br>
<!--[if !supportLineBreakNewLine]--><br><!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">Vous trouverez en pièce jointe de ce courrier une copie de la
facture en question.</p><p class="MsoNormal" style="font-weight: normal;">Veuillez ne pas tenir compte de cette lettre si votre règlement
nous a été adressé avant la réception du présent courrier.<br><!--[if !supportLineBreakNewLine]--><br>
<!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos
salutations les meilleures.<br> <!--[if !supportLineBreakNewLine]--><br> <!--[endif]--></p><p class="MsoNormal" style="font-weight: normal;">
</p><p class="MsoNormal" style="font-weight: normal;"><i>Company Signature<o:p></o:p></i></p><div style="font-weight: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript"><p class="MsoNormal"><!--[endif]--></p>
<!--[if !supportAnnotations]--></div><!--[endif]--></div></div><div style="font-weight: normal; font-style: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript"><p class="MsoNormal"><!--[endif]--></p><!--[if !supportAnnotations]--></div>
<!--[endif]--></div></div><div style="font-weight: normal; font-style: normal;"><div><div id="_com_1" class="msocomtxt" language="JavaScript">
<!--[if !supportAnnotations]--></div><!--[endif]--></div></div><p style="font-weight: normal; font-style: normal;"></p></div>
                ]]>
            </column>
        </insert>
    </changeSet>

    <changeSet author="AbdelkaderBouazza" id="INTRD-2698-20211028">
		<insert tableName="meveo_script_instance_cat">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />

			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="DUNNING_ACTION" />
			<column name="description" value="dunning action" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-2547-2480-2482-2478_20211021" author="khalidHORRI" failOnError="false">
		<insert tableName="billing_trading_language">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />

			<column name="created" valueDate="2015-03-19 00:04:19.152" />
			<column name="pr_description" value="English" />
			<column name="language_id" valueNumeric="2" />
		</insert>
		<insert tableName="billing_trading_language">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />

			<column name="created" valueDate="2015-03-19 00:04:19.174" />
			<column name="pr_description" value="French" />
			<column name="language_id" valueNumeric="12" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-2731_20211103" author="AmineBENAICHA">

		<!-- Dunning Policies B2C -->
		<insert tableName="dunning_policy">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_name" value="Default policy B2C-EN" />
			<column name="policy_description" value="This is a default policy for B2C" />
			<column name="min_balance_trigger" valueNumeric="1" />
			<column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
			<column name="determine_level_by" value="DAYS_OVERDUE" />
			<column name="policy_priority" valueNumeric="null" />
			<column name="attach_invoices_to_emails" valueNumeric="1" />
			<column name="is_active_policy" valueNumeric="1" />
		</insert>
		<insert tableName="dunning_policy_rule">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="rule_joint" value="null" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>
		<insert tableName="dunning_policy_rule_line">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_condition_target" value="IsIndividual" />
			<column name="policy_condition_operator" value="equals" />
			<column name="policy_condition_target_value" value="TRUE" />
			<column name="rule_line_joint" value="null" />
			<column name="dunning_policy_rule_id" valueNumeric="-1" />
		</insert>

		<!-- Level 1 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL1" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="1" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-1" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2C LVL1" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-3" /><!-- Template name= ENG - B2C relance 1 (J+1) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-1" />
			<column name="dunning_level_id" valueNumeric="-1" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="1" />
			<column name="dunning_level_id" valueNumeric="-1" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>
		
		<!-- Level 2 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL2" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="7" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2C LVL2" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-4" /><!-- Template name= ENG - B2C relance 2 (J+7) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-2" />
			<column name="dunning_level_id" valueNumeric="-2" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="2" />
			<column name="dunning_level_id" valueNumeric="-2" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>
		
		<!-- Level 3 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-3" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL3" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="10" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-3" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2C LVL3" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-3" />
			<column name="dunning_level_id" valueNumeric="-3" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="3" />
			<column name="dunning_level_id" valueNumeric="-3" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>
		
		<!-- Level 4 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-4" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL4" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="1" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="14" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-4" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Letter B2C LVL4" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="LETTER" />
			<column name="action_notification_template_id" valueNumeric="-5" /><!-- Template name= ENG - B2C relance 4 (J+14) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-4" />
			<column name="dunning_level_id" valueNumeric="-4" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="4" />
			<column name="dunning_level_id" valueNumeric="-4" />
			<column name="dunning_policy_id" valueNumeric="-1" />
		</insert>		
		<!-- ****************************************** -->
		<!-- ****************************************** -->
		<!-- ****************************************** -->
		<!-- Dunning Policies B2B -->
		<insert tableName="dunning_policy">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_name" value="Default policy B2B-EN" />
			<column name="policy_description" value="This is a default policy for B2B" />
			<column name="min_balance_trigger" valueNumeric="1" />
			<column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
			<column name="determine_level_by" value="DAYS_OVERDUE" />
			<column name="policy_priority" valueNumeric="null" />
			<column name="attach_invoices_to_emails" valueNumeric="1" />
			<column name="is_active_policy" valueNumeric="1" />
		</insert>
		<insert tableName="dunning_policy_rule">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="rule_joint" value="null" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>
		<insert tableName="dunning_policy_rule_line">
			<column name="id" valueNumeric="-2" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_condition_target" value="IsCompany" />
			<column name="policy_condition_operator" value="equals" />
			<column name="policy_condition_target_value" value="TRUE" />
			<column name="rule_line_joint" value="null" />
			<column name="dunning_policy_rule_id" valueNumeric="-2" />
		</insert>

		<!-- Level 1 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-5" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL1B2B" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="15" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-5" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2B LVL1" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-1" /><!-- Template name= ENG - B2B relance 1 (J+15) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-5" />
			<column name="dunning_level_id" valueNumeric="-5" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="1" />
			<column name="dunning_level_id" valueNumeric="-5" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>
		
		<!-- Level 2 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-6" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL2B2B" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="22" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-6" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2B LVL2" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-6" />
			<column name="dunning_level_id" valueNumeric="-6" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="2" />
			<column name="dunning_level_id" valueNumeric="-6" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>
		
		<!-- Level 3 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-7" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL3B2B" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="27" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-7" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2B LVL3" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-7" />
			<column name="dunning_level_id" valueNumeric="-7" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="3" />
			<column name="dunning_level_id" valueNumeric="-7" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>
		
		<!-- Level 4 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-8" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL4B2B" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="1" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="35" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-8" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Letter B2B LVL4" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="LETTER" />
			<column name="action_notification_template_id" valueNumeric="-2" /><!-- Template name= ENG - B2B relance 4 (J+35) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-8" />
			<column name="dunning_level_id" valueNumeric="-8" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="4" />
			<column name="dunning_level_id" valueNumeric="-8" />
			<column name="dunning_policy_id" valueNumeric="-2" />
		</insert>

	</changeSet>

	<changeSet id="INTRD-2732_20211104" author="AmineBENAICHA">

		<!-- Dunning Policies B2C -->
		<insert tableName="dunning_policy">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_name" value="Default policy B2C-FR" />
			<column name="policy_description" value="This is a default policy for B2C" />
			<column name="min_balance_trigger" valueNumeric="1" />
			<column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
			<column name="determine_level_by" value="DAYS_OVERDUE" />
			<column name="policy_priority" valueNumeric="null" />
			<column name="attach_invoices_to_emails" valueNumeric="1" />
			<column name="is_active_policy" valueNumeric="1" />
		</insert>
		<insert tableName="dunning_policy_rule">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="rule_joint" value="null" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>
		<insert tableName="dunning_policy_rule_line">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_condition_target" value="IsIndividual" />
			<column name="policy_condition_operator" value="equals" />
			<column name="policy_condition_target_value" value="TRUE" />
			<column name="rule_line_joint" value="null" />
			<column name="dunning_policy_rule_id" valueNumeric="-10" />
		</insert>

		<!-- Level 1 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL1-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="1" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-10" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2C LVL1-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-8" /><!-- Template name= FR - B2C relance 1 (J+1) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-10" />
			<column name="dunning_level_id" valueNumeric="-10" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="1" />
			<column name="dunning_level_id" valueNumeric="-10" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>
		
		<!-- Level 2 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL2-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="7" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2C LVL2-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-9" /><!-- Template name= FR - B2C relance 2 (J+7) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-20" />
			<column name="dunning_level_id" valueNumeric="-20" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="2" />
			<column name="dunning_level_id" valueNumeric="-20" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>
		
		<!-- Level 3 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-30" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL3-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="10" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-30" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2C LVL3-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-30" />
			<column name="dunning_level_id" valueNumeric="-30" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="3" />
			<column name="dunning_level_id" valueNumeric="-30" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>
		
		<!-- Level 4 B2C -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-40" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL4-B2C-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="1" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="14" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-40" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Letter B2C LVL4-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="LETTER" />
			<column name="action_notification_template_id" valueNumeric="-10" /><!-- Template name= FR - B2C relance 4 (J+14) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-40" />
			<column name="dunning_level_id" valueNumeric="-40" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="4" />
			<column name="dunning_level_id" valueNumeric="-40" />
			<column name="dunning_policy_id" valueNumeric="-10" />
		</insert>		
		<!-- ****************************************** -->
		<!-- ****************************************** -->
		<!-- ****************************************** -->
		<!-- Dunning Policies B2B -->
		<insert tableName="dunning_policy">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_name" value="Default policy B2B-FR" />
			<column name="policy_description" value="This is a default policy for B2B" />
			<column name="min_balance_trigger" valueNumeric="1" />
			<column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
			<column name="determine_level_by" value="DAYS_OVERDUE" />
			<column name="policy_priority" valueNumeric="null" />
			<column name="attach_invoices_to_emails" valueNumeric="1" />
			<column name="is_active_policy" valueNumeric="1" />
		</insert>
		<insert tableName="dunning_policy_rule">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="rule_joint" value="null" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>
		<insert tableName="dunning_policy_rule_line">
			<column name="id" valueNumeric="-20" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="policy_condition_target" value="IsCompany" />
			<column name="policy_condition_operator" value="equals" />
			<column name="policy_condition_target_value" value="TRUE" />
			<column name="rule_line_joint" value="null" />
			<column name="dunning_policy_rule_id" valueNumeric="-20" />
		</insert>

		<!-- Level 1 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-50" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL1B2B-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="15" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-50" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Email B2B LVL1-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="AUTOMATIC" />
			<column name="action_channel" value="EMAIL" />
			<column name="action_notification_template_id" valueNumeric="-6" /><!-- Template name= FR - B2B relance 1 (J+15) -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-50" />
			<column name="dunning_level_id" valueNumeric="-50" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="1" />
			<column name="dunning_level_id" valueNumeric="-50" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>
		
		<!-- Level 2 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-60" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL2B2B-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="22" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-60" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2B LVL2-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-60" />
			<column name="dunning_level_id" valueNumeric="-60" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="2" />
			<column name="dunning_level_id" valueNumeric="-60" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>
		
		<!-- Level 3 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-70" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL3B2B-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="0" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="27" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-70" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Call B2B LVL3-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="CALL" />
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-70" />
			<column name="dunning_level_id" valueNumeric="-70" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="3" />
			<column name="dunning_level_id" valueNumeric="-70" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>
		
		<!-- Level 4 B2B -->
		<insert tableName="dunning_level">
			<column name="id" valueNumeric="-80" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="LVL4-B2B-FR" />
			<column name="description" value="N/A" />
			<column name="reminder" valueNumeric="0" />
			<column name="end_dunning_level" valueNumeric="1" />
			<column name="active" valueNumeric="1" />
			<column name="days_overdue" valueNumeric="35" />
			<column name="min_balance" valueNumeric="0" />
			<column name="charge_currency_id" valueNumeric="null" />
			<column name="soft_decline" valueNumeric="0" />
		</insert>
		<insert tableName="ar_dunning_action">
			<column name="id" valueNumeric="-80" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="Letter B2B LVL4-FR" />
			<column name="description" value="N/A" />
			<column name="is_action_active" valueNumeric="1" />
			<column name="action_type" value="SEND_NOTIFICATION" />
			<column name="action_mode" value="MANUAL" />
			<column name="action_channel" value="LETTER" />
			<column name="action_notification_template_id" valueNumeric="-7" /><!-- Template name= FR - B2B relance 4 (J+35)  -->
		</insert>
		<insert tableName="dunning_level_dunning_action">
			<column name="dunning_action_id" valueNumeric="-80" />
			<column name="dunning_level_id" valueNumeric="-80" />
		</insert>
		<insert tableName="dunning_policy_level">
			<column name="id" valueSequenceNext="dunning_policy_level_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence" valueNumeric="4" />
			<column name="dunning_level_id" valueNumeric="-80" />
			<column name="dunning_policy_id" valueNumeric="-20" />
		</insert>

	</changeSet>

	<changeSet id="INTRD-2849_20211110" author="TarikRabeh">
		<update tableName="com_message_template">
            <column name="subject" value="Reminder – Past due invoice #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Hello #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>We are reaching out to you in regards of your invoice #{invoice.invoiceNumber} and more specifically its payment that was due on the #{invoice.dueDate}. You can find a copy of the invoice attached to this email.</p>
<p>Please make sure to pay the invoice in full as soon as possible. If you have any additional question, do not hesitate to contact our services or your point of contact in our company.</p>
<p>Best regards,</p>
                ]]>
			</column>
			<where>id=-1</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Dunning Letter for Invoice #{invoice.invoiceNumber}" />
			<column name="htmlcontent">
			    <![CDATA[
#{billingAccount.description}<br>
#{billingAccount.address.address1}<br>
#{billingAccount.address.zipCode}; #{billingAccount.address.city}<br>
#{billingAccount.contactInformation.phone}<br>
<br>
#{customerAccount.description} / #{customerAccount.name.firstName}<br>
#{customerAccount.address.address1}<br>
#{customerAccount.address.zipCode}<br>
#{customerAccount.address.city}<br>

<p>#{billingAccount.address.city}, on #{day.date}</p>
<p>#{customerAccount.legalEntityType.code},</p>
<p>By a first email dated (Date of 1st reminder), then a second one dated (Date of 2nd reminder), we asked you to proceed to the payment of the invoice #{invoice.invoiceNumber} for an amount of #{invoice.amountWithTax}</p>
<p>Unless we are mistaken, we regret to say that we have not yet received payment of invoice. We therefore ask you to proceed immediately to its payment.</p>
<p>You will find a copy of the invoice attached to this letter.</p>
<p>Please disregard this letter if your payment has been sent to us prior to receiving this letter letter.</p>
<p>We remain at your disposal in case of any questions. Please accept, Madam / Sir, the assurance of our best regards.</p>
<p>Signature</p>
<p>Your name and surname</p>
                ]]>
			</column>
			<where>id=-2</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Reminder – Past due invoice #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Hello #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>We are reaching out to you in regards of your invoice #{invoice.invoiceNumber} and more specifically its payment that was due on the #{invoice.dueDate}. You can find a copy of the invoice attached to this email.</p>
<p>Please make sure to pay the invoice in full as soon as possible. If you have any additional question, do not hesitate to contact our services or your point of contact in our company.</p>
<p>Best regards,</p>	
                ]]>
			</column>
			<where>id=-3</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Reminder – Past due invoice #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Hello #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>We are following up on our email dated on the #{dunningCollectionPlan.lastActionDate} where we informed you that invoice #{invoice.invoiceNumber} was overdue for payment since #{invoice.dueDate}. We regret to inform you that we have not yet received payment from you for this matter.</p>
<p>We ask that you proceed with the payment of the invoice as soon as possible and invite you to contact our customer support if you have any difficulties in paying this invoice.</p>
<p>You will find a copy of the invoice attached.</p>
<p>Kind regards,</p>
                ]]>			
			</column>
			<where>id=-4</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Dunning Letter for Invoice #{invoice.invoiceNumber}" />
			<column name="htmlcontent">
			    <![CDATA[
#{billingAccount.description}<br>
#{billingAccount.address.address1}<br>
#{billingAccount.address.zipCode}; #{billingAccount.address.city}<br>
#{billingAccount.contactInformation.phone}<br>
<br>
#{customerAccount.legalEntityType.code}   #{customerAccount.description}<br>
#{customerAccount.address.address1}<br>
#{customerAccount.address.zipCode}<br>
#{customerAccount.address.city}<br>

<p>#{billingAccount.address.city}, on #{day.date}</p> 
<p>#{customerAccount.legalEntityType.code},</p>
<p>By a first email dated (Date of 1st reminder), then a second one dated (Date of 2nd reminder), we asked you to proceed to the payment of the invoice #{invoice.invoiceNumber} for an amount of #{invoice.amountWithTax}</p>
<p>Unless we are mistaken, we regret to say that we have not yet received payment of invoice. We therefore ask you to proceed immediately to its payment.</p>
<p>You will find a copy of the invoice attached to this letter.</p>
<p>Please disregard this letter if your payment has been sent to us prior to receiving this letter letter.</p>
<p>We remain at your disposal in case of any questions. Please accept, Madam / Sir, the assurance of our best regards. </p>
<p>Signature</p>
<p>Your name and surname</p>
                ]]>
			</column>
			<where>id=-5</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Règlement facture #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Bonjour #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>Nous vous contactons concernant votre facture #{invoice.invoiceNumber} qui est en retard de paiement depuis le #{invoice.dueDate}. Vous trouverez une copie de la facture en pièce jointe.</p>
<p>Merci de procéder au règlement de la facture dans les plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de prendre contact avec nos services ou votre interlocuteur habituel afin de trouver une solution.</p>
<p>Bien à vous,</p>
                ]]>
			</column>
			<where>id=-6</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Lettre de relance pour la facture #{invoice.invoiceNumber}" />
			<column name="htmlcontent">
			    <![CDATA[
#{billingAccount.description}<br>
#{billingAccount.address.address1}<br>
#{billingAccount.address.zipCode}; #{billingAccount.address.city}<br>
#{billingAccount.contactInformation.phone}<br>
<br>
#{customerAccount.description} / #{customerAccount.name.firstName}<br>
#{customerAccount.address.address1}<br>
#{customerAccount.address.zipCode}<br>
#{customerAccount.address.city}<br>

<p>#{billingAccount.address.city}, le #{day.date}</p>
<p>#{customerAccount.legalEntityType.code},</p>
<p>Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder au paiement de la facture #{invoice.invoiceNumber}) d’un montant de #{invoice.amountWithTax}).</p>
<p>Sauf erreur de notre part, nous sommes au regret de constater que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture. Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.</p>
<p>Vous trouverez en pièce jointe de ce courrier une copie de la facture en question.</p>
<p>Veuillez ne pas tenir compte de cette lettre si votre règlement nous a été adressé avant la réception du présent courrier.</p>
<p>Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.</p>
<p>Company Signature</p>
                ]]>
			</column>
			<where>id=-7</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Règlement facture #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Bonjour #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>Nous vous contactons concernant votre facture #{invoice.invoiceNumber} qui est en retard de paiement depuis le #{invoice.dueDate}. Vous trouverez une copie de la facture en pièce jointe.</p>
<p>Merci de procéder au règlement de la facture dans les plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de prendre contact avec nos services ou votre interlocuteur habituel afin de trouver une solution.</p>
<p>Bien à vous,</p>
                ]]>
			</column>
			<where>id=-8</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Règlement facture #{invoice.invoiceNumber} - #{billingAccount.description}" />
			<column name="htmlcontent">
			    <![CDATA[
<p>Bonjour #{customerAccount.legalEntityType.code} #{customerAccount.name.lastName},</p>
<p>Nous faisons suite à notre courriel en date du #{dunningCollectionPlan.lastActionDate}  où nous vous informions que votre facture #{invoice.invoiceNumber} était en retard de paiement depuis le #{invoice.dueDate}. Nous sommes dans le regret de vous informer que nous n’avons toujours pas reçu de paiement de votre part à ce sujet.</p> 
<p>Nous vous demandons de procéder au règlement de la facture dans les meilleurs délais et nous invitons à contacter au plus vite notre assistance client si vous éprouvez des difficultés à régler cette facture.</p>
<p>Vous trouverez à nouveau une copie de la facture en pièce jointe.</p>
<p>Bien à vous,</p>
                ]]>
			</column>
			<where>id=-9</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="Lettre de relance pour la facture #{invoice.invoiceNumber})" />
			<column name="htmlcontent">
			    <![CDATA[
#{billingAccount.description}<br>
#{billingAccount.address.address1}<br>
#{billingAccount.address.zipCode}; #{billingAccount.address.city}<br>
#{billingAccount.contactInformation.phone}<br>
<br>
#{customerAccount.legalEntityType.code} , #{customerAccount.description}<br>
#{customerAccount.address.address1}<br>
#{customerAccount.address.zipCode}<br>
#{customerAccount.address.city}<br>

<p>#{billingAccount.address.city}, le #{day.date}</p>
<p>#{customerAccount.legalEntityType.code},</p>
<p>Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder au paiement de la facture #{invoice.invoiceNumber}) d’un montant de #{invoice.amountWithTax}).</p>
<p>Sauf erreur de notre part, nous sommes au regret de constater que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture. Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.</p>
<p>Vous trouverez en pièce jointe de ce courrier une copie de la facture en question.</p>
Veuillez ne pas tenir compte de cette lettre si votre règlement nous a été adressé avant la réception du présent courrier.</p>
<p>Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.</p>
<p>Company Signature</p>
                ]]>
			</column>
			<where>id=-10</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-2961_20211109-add-status-color_code" author="AmineBENAICHA">
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#FFA000</column>
			<where>status='Pause'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#991A12</column>
			<where>status='Stop'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#1976D2</column>
			<where>status='Succès'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#F44336</column>
			<where>status='Echec'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="color_code">#00C853</column>
			<where>status='Actif'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-2962_20211110" author="AmineBENAICHA">
		<insert tableName="dunning_stop_reasons">
			<column name="id" valueSequenceNext="dunning_stop_reasons_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
        	<column name="stop_reason" value="Exclusion" />
        	<column name="description" value="Client exclu du plan de recouvrement pour raison légitime. A expliciter par l'agent de recouvrement" />
        	<column name="dunning_settings_id" valueNumeric="1" />
       	</insert>
       	<insert tableName="dunning_stop_reasons">
       		<column name="id" valueSequenceNext="dunning_stop_reasons_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
        	<column name="stop_reason" value="Changement de politique de recouvrement" />
        	<column name="description" value="Changement de politique de recouvrement amenant la génération d’un nouveau plan de recouvrement" />
        	<column name="dunning_settings_id" valueNumeric="1" />
       	</insert>
   	</changeSet>
	<changeSet id="INTRD-2701_20211124" author="hichamElHaloui">
		<update tableName="meveo_timer">
			<column name="sc_d_o_week" value="*" />
			<where>id=-2</where>
		</update>
	</changeSet>

    <changeSet id="#INTRD-3262_20211123" author="YoussefIZEM">
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">ACTIVE</column>
			<where>status = 'Actif'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">SUCCESS</column>
			<where>status = 'Succès'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">FAILED</column>
			<where>status = 'Echec'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">PAUSED</column>
			<where>status = 'Pause'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">STOPPED</column>
			<where>status = 'Stop'</where>
		</update>
	</changeSet>

	<changeSet id="INTRD-3334_2021_11_26" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="job_category" value="ACCOUNTING" />
			<column name="job_template" value="AccountingPeriodClosingJob" />
			<column name="code" value="AccountingPeriodClosingJob" />
			<column name="creator" value="applicationInitializer" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="description" value="Accounting Period Closing Job" />
			<column name="uuid" value="AccountingPeriodClosingJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-3316_20211129_query_notification_template" author="TarikRabeh">
		<update tableName="com_message_template">
            <column name="subject" value="[opencell] Query result #{reportQueryName} #{startDate}" />
            <column name="textcontent"></column>
            <column name="htmlcontent">
                <![CDATA[Dear #{userName},

The result for your query is ready.
Check the result on <a href="#{portalResultLink}">Opencell Portal</a>

Query : #{reportQueryName}
Started : #{startDate}
Duration : #{duration}
Line count : #{lineCount}

Best regards,

Opencell team.
                ]]>
            </column>
            <where>code='REPORT_QUERY_RESULT_SUCCESS'</where>
		</update>
		<update tableName="com_message_template">
            <column name="subject" value="[opencell] Query failed #{reportQueryName} #{startDate}" />
			<where>code='REPORT_QUERY_RESULT_FAILURE'</where>
		</update>
    </changeSet>

	<changeSet id="INTRD-2756_20211110" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id"  valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2015-03-19 00:04:19.913" />
			<column name="job_category" value="DUNNING" />
			<column name="job_template" value="DunningCollectionPlanJob" />
			<column name="code" value="DunningCollectionPlan_Job" />

			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="DunningCollectionPlanJob_Job" />
		</insert>
	</changeSet>

	<changeSet author="ZBariki" id="INTRD-3040_20211110">
		<update tableName="dunning_policy_rule_line">
			<column name="policy_condition_target" value="isCompany" />
			<column name="policy_condition_target_value" value="FALSE" />
			<column name="policy_condition_operator" value="EQUALS" />
			<where> policy_condition_target='IsIndividual'</where>
		</update>
		<update tableName="dunning_policy_rule_line">
			<column name="policy_condition_target" value="isCompany" />
			<column name="policy_condition_operator" value="EQUALS" />
			<where> policy_condition_target='IsCompany'</where>
		</update>
	</changeSet>
	
	<changeSet id="#INTRD-3262_20211123" author="YoussefIZEM">
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">ACTIVE</column>
			<where>status = 'Actif'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">SUCCESS</column>
			<where>status = 'Succès'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">FAILED</column>
			<where>status = 'Echec'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">PAUSED</column>
			<where>status = 'Pause'</where>
		</update>
		<update tableName="dunning_collection_plan_statuses">
			<column name="status">STOPPED</column>
			<where>status = 'Stop'</where>
		</update>
	</changeSet>
	
    <changeSet id="INTRD-2756_20211110" author="Mohammed_ELAZZOUZI">
		<insert tableName="meveo_job_instance">
			<column name="id"  valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="DUNNING" />
			<column name="job_template" value="ResumeDunningCollectionPlanJob" />
			<column name="code" value="ResumeDunningCollectionPlan_Job" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="uuid" value="ResumeDunningCollectionPlan_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-2910_20211124" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2021-11-24 00:04:19.913" />
			<column name="job_category" value="DUNNING" />
			<column name="job_template" value="TriggerReminderDunningLevelJob" />
			<column name="code" value="TriggerReminderDunningLevel_Job" />

			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="TriggerReminderDunningLevelJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-2909_20211201" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2021-12-01 00:04:19.913" />
			<column name="job_category" value="DUNNING" />
			<column name="job_template" value="TriggerCollectionPlanLevelsJob" />
			<column name="code" value="TriggerCollectionPlanLevelsJob_Job" />

			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="TriggerCollectionPlanLevelsJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-3507_20220218" author="HatimOUDAD">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2022-02-18 00:04:19.913" />
			<column name="job_category" value="PAYMENT" />
			<column name="job_template" value="AutoRefundSecurityDepositJob" />
			<column name="code" value="AutoRefundSecurityDepositJob_Job" />

			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="AutoRefundSecurityDepositJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-5669_20220324" author="HichamHANINE">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="2022-02-18 00:04:19.913" />
			<column name="job_category" value="UTILS" />
			<column name="job_template" value="AutoUpdateCurrentRateJob" />
			<column name="code" value="AutoUpdateCurrentRateJob_Job" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-3" />
			<column name="uuid" value="AutoUpdateCurrentRateJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="INTRD-3678_20211214" author="AmineBENAICHA">
		<update tableName="meveo_script_instance">
			<column name="script">
	<![CDATA[package org.meveo.service.script;
    
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.util.pagination.PaginationConfiguration;
import org.meveo.api.dto.response.PagingAndFiltering.SortOrder;
import org.meveo.api.exception.EntityDoesNotExistsException;
import org.meveo.model.article.AccountingArticle;
import org.meveo.model.article.ArticleMapping;
import org.meveo.model.article.ArticleMappingLine;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.catalog.OfferTemplate;
import org.meveo.model.catalog.ProductChargeTemplateMapping;
import org.meveo.model.catalog.ServiceChargeTemplate;
import org.meveo.model.catalog.ServiceTemplate;
import org.meveo.model.cpq.Product;
import org.meveo.model.cpq.ProductVersion;
import org.meveo.model.cpq.enums.VersionStatusEnum;
import org.meveo.model.cpq.offer.OfferComponent;
import org.meveo.model.tax.TaxClass;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.article.AccountingArticleService;
import org.meveo.service.billing.impl.article.ArticleMappingLineService;
import org.meveo.service.billing.impl.article.ArticleMappingService;
import org.meveo.service.catalog.impl.OfferTemplateService;
import org.meveo.service.catalog.impl.ServiceTemplateService;
import org.meveo.service.cpq.ProductService;
import org.meveo.service.cpq.ProductVersionService;
import org.meveo.service.tax.TaxClassService;

public class ServiceTemplateToProductScript extends Script {
    private static final long serialVersionUID = -6513133027379352381L;

    // Script parameters
    public static final String DEFAULT_TAX_CLASS_CODE = "NORMAL";
    public static final long ARTICLE_MAPPING_ID = 1L;
    private static final Integer PAGE_COUNT = 100;

    private ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(ServiceInstanceService.class.getSimpleName());
    private ProductService productService = (ProductService) getServiceInterface(ProductService.class.getSimpleName());
    private ProductVersionService productVersionService = (ProductVersionService) getServiceInterface(ProductVersionService.class.getSimpleName());
    private OfferTemplateService offerTemplateService= (OfferTemplateService) getServiceInterface(OfferTemplateService.class.getSimpleName());
    private AccountingArticleService accountingArticleService = (AccountingArticleService) getServiceInterface(AccountingArticleService.class.getSimpleName());
    private ArticleMappingService articleMappingService = (ArticleMappingService) getServiceInterface(ArticleMappingService.class.getSimpleName());
    private ArticleMappingLineService articleMappingLineService = (ArticleMappingLineService) getServiceInterface(ArticleMappingLineService.class.getSimpleName());
    private ServiceTemplateService serviceTemplateService = (ServiceTemplateService) getServiceInterface(ServiceTemplateService.class.getSimpleName());
    private TaxClassService taxClassService = (TaxClassService) getServiceInterface(TaxClassService.class.getSimpleName());

    private TaxClass defaultTaxClass;
    private ArticleMapping defaultArticleMapping;

    @Override
    public void init(Map<String, Object> methodContext) throws BusinessException {
        defaultTaxClass = taxClassService.findByCode(DEFAULT_TAX_CLASS_CODE);
        if (defaultTaxClass == null) {
            throw new EntityDoesNotExistsException(TaxClass.class, DEFAULT_TAX_CLASS_CODE);
        }

        defaultArticleMapping = articleMappingService.findById(ARTICLE_MAPPING_ID);
        if (defaultArticleMapping == null) {
            throw new EntityDoesNotExistsException(ArticleMapping.class, ARTICLE_MAPPING_ID);
        }
    }

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        log.info("Migration started at {}", new Date());

        long count = 0;
        List<ServiceTemplate> serviceTemplates = (List<ServiceTemplate>) methodContext.get("SERVICE_TEMPLATE");
        
        if(serviceTemplates != null && !serviceTemplates.isEmpty()) {
            count = serviceTemplates.size();
            serviceTemplates.forEach(this::map);
        } else {

            count = serviceTemplateService.count(new PaginationConfiguration("id", SortOrder.ASCENDING));

            if (PAGE_COUNT < count) {
                serviceTemplateService.list(new PaginationConfiguration(null, null))
                        .forEach(this::map);
            } else {
                for (int index = 0; index < count; index = index + PAGE_COUNT) {
                    serviceTemplateService.list(new PaginationConfiguration(index, PAGE_COUNT, null, null, null, "id", SortOrder.ASCENDING))
                            .forEach(this::map);
                }
            }
        }

        log.info("Number of services migrated={}", count);
        log.info("Migration ended at {}", new Date());
    }

    public Product map(ServiceTemplate serviceTemplate) {
        Product product = createProduct(serviceTemplate);
        createArticle(product);

        ProductVersion productVersion = createProductVersion(product);

        List<ServiceInstance> serviceInstances = serviceInstanceService.findByServiceTemplate(serviceTemplate);

        serviceInstances.forEach(serviceInstance -> {

            serviceInstance.setProductVersion(productVersion);
            serviceInstance.setServiceTemplate(null);
            serviceInstanceService.update(serviceInstance);

            OfferTemplate offer = serviceInstance.getSubscription().getOffer();
            OfferComponent offerComponent = new OfferComponent();
            offerComponent.setProduct(product);
            offerComponent.setOfferTemplate(offer);
            offer.getOfferComponents().add(offerComponent);
            offer.getOfferServiceTemplates().removeIf(o -> o.getServiceTemplate().getId().equals(serviceTemplate.getId()));
            offerTemplateService.update(offer);
        });

        return product;
    }

    private void createArticle(Product product) {
        product.getProductCharges().stream()
                .map(pc -> pc.getChargeTemplate())
                .forEach(chargeTemplate -> {
                    AccountingArticle accountingArticle;
                    List<AccountingArticle> accountingArticles = accountingArticleService.findByTaxClassAndSubCategory(chargeTemplate.getTaxClass(), chargeTemplate.getInvoiceSubCategory());
                    if(accountingArticles.isEmpty()) {
                        accountingArticle = new AccountingArticle(UUID.randomUUID().toString(), "Migration Accounting article", defaultTaxClass, chargeTemplate.getInvoiceSubCategory());
                        accountingArticleService.create(accountingArticle);
                    } else {
                        accountingArticle = accountingArticles.get(0);
                    }

                    ArticleMappingLine articleMappingLine = new ArticleMappingLine();
                    articleMappingLine.setChargeTemplate(chargeTemplate);
                    articleMappingLine.setArticleMapping(defaultArticleMapping);
                    articleMappingLine.setProduct(product);
                    articleMappingLine.setAccountingArticle(accountingArticle);
                    articleMappingLineService.create(articleMappingLine);
                });

    }

    private Product createProduct(ServiceTemplate serviceTemplate) {
        Product product = new Product();
        product.setCode(serviceTemplate.getCode());
        product.setDescription(serviceTemplate.getDescription());
        List<ProductChargeTemplateMapping> productCharges = getProductCharges(serviceTemplate);
        product.setProductCharges(productCharges);
        product.setCfValues(serviceTemplate.getCfValues());
        product.setCfAccumulatedValues(serviceTemplate.getCfAccumulatedValues());
        product.setDisabled(serviceTemplate.isDisabled());
        productService.create(product);
        return product;
    }

    private ProductVersion createProductVersion(Product product) {
        ProductVersion productVersion= new ProductVersion();
        productVersion.setProduct(product);
        productVersion.setShortDescription(product.getDescription());
        productVersion.setStatus(VersionStatusEnum.PUBLISHED);
        productVersion.setStatusDate(Calendar.getInstance().getTime());
        productVersionService.create(productVersion);
        return productVersion;
    }

    private ProductChargeTemplateMapping mapToProductChargeTemplate(ServiceChargeTemplate serviceCharge) {
        ProductChargeTemplateMapping productChargeTemplateMapping = new ProductChargeTemplateMapping();
        productChargeTemplateMapping.setChargeTemplate(serviceCharge.getChargeTemplate());
        return productChargeTemplateMapping;
    }

    private List<ProductChargeTemplateMapping> getProductCharges(ServiceTemplate serviceTemplate) {
        List<ProductChargeTemplateMapping> productCharges = serviceTemplate.getServiceSubscriptionCharges()
                .stream()
                .map(this::mapToProductChargeTemplate)
                .collect(Collectors.toList());

        productCharges.addAll(
                serviceTemplate.getServiceRecurringCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceTerminationCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );

        productCharges.addAll(
                serviceTemplate.getServiceUsageCharges()
                        .stream()
                        .map(this::mapToProductChargeTemplate)
                        .collect(Collectors.toList())
        );
        return productCharges;
    }
}]]>
			</column>
		</update>
	</changeSet>
	<changeSet id="INTRD-3316_20211215_query_notification_template" author="TarikRabeh">
		<update tableName="com_message_template">
            <column name="htmlcontent">
                <![CDATA[Dear #{userName},<br>
<br>
The result for your query is ready.<br>
Check the result on <a href="#{portalResultLink}">Opencell Portal</a><br>
Query : #{reportQueryName}<br>
Started : #{startDate}<br>
Duration : #{duration}<br>
Line count : #{lineCount}<br>
<br>
Best regards,<br>
Opencell team.
                ]]>
            </column>
            <where>code='REPORT_QUERY_RESULT_SUCCESS'</where>
		</update>
    </changeSet>

	<changeSet id="INTRD-3751_20211216" author="AmineBENAICHA">
		<update tableName="cpq_order_offer" >
            <column name="order_line_type"
                    value="CREATE"/>
            <where>order_line_type is null</where>
        </update>
        
        <update tableName="quote_offer" >
            <column name="quote_line_type"
                    value="CREATE"/>
            <where>quote_line_type is null</where>
        </update>
	</changeSet>

	
	<changeSet id="#4044_30122021_counter_period_job" author="Mbarek-Ay">
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-49" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2021-12-30 00:00:00.000" />
            <column name="job_category" value="UTILS" />
            <column name="job_template" value="CounterPeriodJob" />
            <column name="code" value="CounterPeriodJob" />
            <column name="creator" value="opencell.admin" />
            <column name="description" value="Counter period job"/>
            <column name="uuid" value="CounterPeriodJob" />
        </insert>
    </changeSet>

   	<changeSet id="#INTRD-4267_20220108" author="AmineBENAICHA">
		<insert tableName="billing_tax_mapping">
        	<column name="id" value='-20'/>
            <column name="tax_category_id" value="-1"/>
            <column name="tax_class_id" value="null"/>
            <column name="tax_id" value='-2'/>
            <column name="priority" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-21'/>
            <column name="tax_category_id" value="-3"/>
            <column name="tax_class_id" value="null"/>
            <column name="tax_id" value='-5'/>
            <column name="priority" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-22'/>
            <column name="tax_category_id" value="-2"/>
            <column name="tax_class_id" value="null"/>
            <column name="tax_id" value='-1'/>
            <column name="priority" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
        </insert>
        <insert tableName="billing_tax_mapping">
        	<column name="id" value='-23'/>
            <column name="tax_category_id" value="null"/>
            <column name="tax_class_id" value="null"/>
            <column name="tax_id" value='-1'/>
            <column name="priority" value='-1'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
     	</insert>
     </changeSet>

	<changeSet author="ZBariki" id="INTRD-4227_20220110">
		<update tableName="com_message_template">
			<column name="subject" value="Reminder – Past due invoice #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Hello #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>We are reaching out to you in regards of your invoice #{invoiceInvoiceNumber} and more specifically its payment that was due on the #{invoiceDueDate}. You can find a copy of the invoice attached to this email.</p>
					<p>Please make sure to pay the invoice in full as soon as possible. If you have any additional question, do not hesitate to contact our services or your point of contact in our company.</p>
					<p>Best regards,</p>
                ]]>
			</column>
			<where>code='ENG - B2B relance 1 (J+15)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Dunning Letter for Invoice #{invoiceInvoiceNumber}" />
			<column name="htmlcontent">
				<![CDATA[
					#{billingAccountDescription}<br>
					#{billingAccountAddressAddress1}<br>
					#{billingAccountAddressZipCode}; #{billingAccountAddressCity}<br>
					#{billingAccountContactInformationPhone}<br>
					<br>
					#{customerAccountDescription} / #{customerAccountFirstName}<br>
					#{customerAccountAddressAddress1}<br>
					#{customerAccountAddressZipCode}<br>
					#{customerAccountAddressCity}<br>

					<p>#{billingAccountAddressCity}, on #{dayDate}</p>
					<p>#{customerAccountLegalEntityTypeCode},</p>
					<p>By a first email dated (Date of 1st reminder), then a second one dated (Date of 2nd reminder), we asked you to proceed to the payment of the invoice #{invoiceInvoiceNumber} for an amount of #{invoiceTotal}</p>
					<p>Unless we are mistaken, we regret to say that we have not yet received payment of invoice. We therefore ask you to proceed immediately to its payment.</p>
					<p>You will find a copy of the invoice attached to this letter.</p>
					<p>Please disregard this letter if your payment has been sent to us prior to receiving this letter letter.</p>
					<p>We remain at your disposal in case of any questions. Please accept, Madam / Sir, the assurance of our best regards.</p>
					<p>Signature</p>
					<p>Your name and surname</p>
                ]]>
			</column>
			<where>code='ENG - B2B relance 4 (J+35)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Reminder – Past due invoice #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Hello #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>We are reaching out to you in regards of your invoice #{invoiceInvoiceNumber} and more specifically its payment that was due on the #{invoiceDueDate}. You can find a copy of the invoice attached to this email.</p>
					<p>Please make sure to pay the invoice in full as soon as possible. If you have any additional question, do not hesitate to contact our services or your point of contact in our company.</p>
					<p>Best regards,</p>
                ]]>
			</column>
			<where>code='ENG - B2C relance 1 (J+1)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Reminder – Past due invoice #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Hello #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>We are following up on our email dated on the #{dunningCollectionPlanLastActionDate} where we informed you that invoice #{invoiceInvoiceNumber} was overdue for payment since #{invoiceDueDate}. We regret to inform you that we have not yet received payment from you for this matter.</p>
					<p>We ask that you proceed with the payment of the invoice as soon as possible and invite you to contact our customer support if you have any difficulties in paying this invoice.</p>
					<p>You will find a copy of the invoice attached.</p>
					<p>Kind regards,</p>
                ]]>
			</column>
			<where>code='ENG - B2C relance 1 (J+7)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Dunning Letter for Invoice #{invoiceInvoiceNumber}" />
			<column name="htmlcontent">
				<![CDATA[
					#{billingAccountDescription}<br>
					#{billingAccountAddressAddress1}<br>
					#{billingAccountAddressZipCode}; #{billingAccountAddressCity}<br>
					#{billingAccountContactInformationPhone}<br>
					<br>
					#{customerAccountLegalEntityTypeCode}   #{customerAccountDescription}<br>
					#{customerAccountAddressAddress1}<br>
					#{customerAccountAddressZipCode}<br>
					#{customerAccountAddressCity}<br>

					<p>#{billingAccountAddressCity}, on #{dayDate}</p>
					<p>#{customerAccountLegalEntityTypeCode},</p>
					<p>By a first email dated (Date of 1st reminder), then a second one dated (Date of 2nd reminder), we asked you to proceed to the payment of the invoice #{invoiceInvoiceNumber} for an amount of #{invoiceTotal}</p>
					<p>Unless we are mistaken, we regret to say that we have not yet received payment of invoice. We therefore ask you to proceed immediately to its payment.</p>
					<p>You will find a copy of the invoice attached to this letter.</p>
					<p>Please disregard this letter if your payment has been sent to us prior to receiving this letter letter.</p>
					<p>We remain at your disposal in case of any questions. Please accept, Madam / Sir, the assurance of our best regards. </p>
					<p>Signature</p>
					<p>Your name and surname</p>
                ]]>
			</column>
			<where>code='ENG - B2C relance 4 (J+14)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Règlement facture #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Bonjour #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>Nous vous contactons concernant votre facture #{invoiceInvoiceNumber} qui est en retard de paiement depuis le #{invoiceDueDate}. Vous trouverez une copie de la facture en pièce jointe.</p>
					<p>Merci de procéder au règlement de la facture dans les plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de prendre contact avec nos services ou votre interlocuteur habituel afin de trouver une solution.</p>
					<p>Bien à vous,</p>
                ]]>
			</column>
			<where>code='FR - B2B relance 1 (J+15)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Lettre de relance pour la facture #{invoiceInvoiceNumber}" />
			<column name="htmlcontent">
				<![CDATA[
					#{billingAccountDescription}<br>
					#{billingAccountAddressAddress1}<br>
					#{billingAccountAddressZipCode}; #{billingAccountAddressCity}<br>
					#{billingAccountContactInformationPhone}<br>
					<br>
					#{customerAccountDescription} / #{customerAccountFirstName}<br>
					#{customerAccountAddressAddress1}<br>
					#{customerAccountAddressZipCode}<br>
					#{customerAccountAddressCity}<br>

					<p>#{billingAccountAddressCity}, le #{dayDate}</p>
					<p>#{customerAccountLegalEntityTypeCode},</p>
					<p>Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder au paiement de la facture #{invoiceInvoiceNumber}) d’un montant de #{invoiceTotal}).</p>
					<p>Sauf erreur de notre part, nous sommes au regret de constater que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture. Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.</p>
					<p>Vous trouverez en pièce jointe de ce courrier une copie de la facture en question.</p>
					<p>Veuillez ne pas tenir compte de cette lettre si votre règlement nous a été adressé avant la réception du présent courrier.</p>
					<p>Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.</p>
					<p>Company Signature</p>
                ]]>
			</column>
			<where>code='FR - B2B relance 4 (J+35)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Règlement facture #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Bonjour #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>Nous vous contactons concernant votre facture #{invoiceInvoiceNumber} qui est en retard de paiement depuis le #{invoiceDueDate}. Vous trouverez une copie de la facture en pièce jointe.</p>
					<p>Merci de procéder au règlement de la facture dans les plus brefs délais. Si vous souhaitez avoir davantage d’informations, merci de prendre contact avec nos services ou votre interlocuteur habituel afin de trouver une solution.</p>
					<p>Bien à vous,</p>
                ]]>            </column>
			<where>code='FR - B2C relance 1 (J+1)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Règlement facture #{invoiceInvoiceNumber} - #{billingAccountDescription}" />
			<column name="htmlcontent">
				<![CDATA[
					<p>Bonjour #{customerAccountLegalEntityTypeCode} #{customerAccountLastName},</p>
					<p>Nous faisons suite à notre courriel en date du #{dunningCollectionPlanLastActionDate}  où nous vous informions que votre facture #{invoiceInvoiceNumber} était en retard de paiement depuis le #{invoiceDueDate}. Nous sommes dans le regret de vous informer que nous n’avons toujours pas reçu de paiement de votre part à ce sujet.</p>
					<p>Nous vous demandons de procéder au règlement de la facture dans les meilleurs délais et nous invitons à contacter au plus vite notre assistance client si vous éprouvez des difficultés à régler cette facture.</p>
					<p>Vous trouverez à nouveau une copie de la facture en pièce jointe.</p>
					<p>Bien à vous,</p>
                ]]>
			</column>
			<where>code='FR - B2C relance 2 (J+7)'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Lettre de relance pour la facture #{invoiceInvoiceNumber}" />
			<column name="htmlcontent">
				<![CDATA[
					#{billingAccountDescription}<br>
					#{billingAccountAddressAddress1}<br>
					#{billingAccountAddressZipCode}; #{billingAccountAddressCity}<br>
					#{billingAccountContactInformationPhone}<br>
					<br>
					#{customerAccountLegalEntityTypeCode} , #{customerAccountDescription}<br>
					#{customerAccountAddressAddress1}<br>
					#{customerAccountAddressZipCode}<br>
					#{customerAccountAddressCity}<br>

					<p>#{billingAccountAddressCity}, le #{dayDate}</p>
					<p>#{customerAccountLegalEntityTypeCode},</p>
					<p>Par un premier courriel en date du (Date de la 1ère relance), puis un second en date du (Date de la 2ème relance), nous vous avions demandé de procéder au paiement de la facture #{invoiceInvoiceNumber}) d’un montant de #{invoiceTotal}).</p>
					<p>Sauf erreur de notre part, nous sommes au regret de constater que nous n’avons, à ce jour, toujours pas reçu le paiement de ladite facture. Nous vous demandons donc de bien vouloir procéder immédiatement à son règlement.</p>
					<p>Vous trouverez en pièce jointe de ce courrier une copie de la facture en question.</p>
					Veuillez ne pas tenir compte de cette lettre si votre règlement nous a été adressé avant la réception du présent courrier.</p>
					<p>Nous restons à votre disposition dans l’hypothèse d’éventuelles questions. Nous vous prions d'agréer l’assurance de nos salutations les meilleures.</p>
					<p>Company Signature</p>
                ]]>
			</column>
			<where>code='FR - B2C relance 4 (J+14)'</where>
		</update>
	</changeSet>
	<changeSet id="INTRD-3765_07012022" author="hichamElHaloui">
        <sql><![CDATA[ UPDATE ${db.schema.adapted}meveo_script_instance set script = '
package org.meveo.service.script;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.billing.WalletInstance;
import org.meveo.model.crm.Customer;
import org.meveo.service.base.BusinessEntityService;
import org.meveo.service.billing.impl.ChargeInstanceService;
import org.meveo.service.billing.impl.CounterInstanceService;
import org.meveo.service.billing.impl.CounterPeriodService;
import org.meveo.service.billing.impl.EdrService;
import org.meveo.service.billing.impl.InvoiceService;
import org.meveo.service.billing.impl.ProductInstanceService;
import org.meveo.service.billing.impl.RatedTransactionService;
import org.meveo.service.billing.impl.RejectedBillingAccountService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.billing.impl.WalletOperationService;
import org.meveo.service.billing.impl.WalletService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.medina.impl.AccessService;
import org.meveo.service.order.OrderItemService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.MatchingAmountService;

import javax.persistence.Query;

/**
 *
 * @author Said Ramli
 */
@SuppressWarnings({ "unchecked", "unused" })
public class DeleteCustomersScript extends Script {

	private final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
			AccountOperationService.class.getSimpleName());
	private final CustomerService customerService = (CustomerService) getServiceInterface(
			CustomerService.class.getSimpleName());
	private final InvoiceService invoiceService = (InvoiceService) getServiceInterface(
			InvoiceService.class.getSimpleName());
	private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(
			SubscriptionService.class.getSimpleName());
	private final RatedTransactionService ratedTransactionService = (RatedTransactionService) getServiceInterface(
			RatedTransactionService.class.getSimpleName());
	private final WalletService walletService = (WalletService) getServiceInterface(
			WalletService.class.getSimpleName());
	private final RejectedBillingAccountService rejectedBillingAccountService = (RejectedBillingAccountService) getServiceInterface(
			RejectedBillingAccountService.class.getSimpleName());
	private final CounterInstanceService counterInstanceService = (CounterInstanceService) getServiceInterface(
			CounterInstanceService.class.getSimpleName());
	private final CounterPeriodService counterPeriodService = (CounterPeriodService) getServiceInterface(
			CounterPeriodService.class.getSimpleName());
	private final OrderItemService orderItemService = (OrderItemService) getServiceInterface(
			OrderItemService.class.getSimpleName());
	private final ProductInstanceService productInstanceService = (ProductInstanceService) getServiceInterface(
			ProductInstanceService.class.getSimpleName());
	private final BusinessEntityService businessEntityService = (BusinessEntityService) getServiceInterface(
			BusinessEntityService.class.getSimpleName());
	private final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
			WalletOperationService.class.getSimpleName());
	private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface(
			ServiceInstanceService.class.getSimpleName());

	private final EdrService edrService = (EdrService) getServiceInterface(EdrService.class.getSimpleName());

	@SuppressWarnings("rawtypes")
	private final ChargeInstanceService chargeInstanceService = (ChargeInstanceService) getServiceInterface(
			ChargeInstanceService.class.getSimpleName());

	private static final List<String> noCheckAllowedValues = Arrays.asList("0", "1");

	@Override
	public void execute(Map<String, Object> methodContext) throws BusinessException {

		log.debug(" >>> execute {} ", methodContext.entrySet());

		try {

			Map<String, String> record = (Map<String, String>) methodContext.get("RECORD");
			if (MapUtils.isEmpty(record)) {
				throw new BusinessException(String.format("Parameter RECORD is missing"));
			}

			final String customerCode = record.get("customerCode");
			Customer customer = customerService.findByCode(customerCode);
			if (customer == null) {
				throw new BusinessException(String.format("No customer found having code = %s ", customerCode));
			}

			String noCheckVal = record.get("noCheck");
			if (isNotBlank(noCheckVal) && !noCheckAllowedValues.contains(noCheckVal)) {
				throw new BusinessException(
						String.format("Invalid ''noCheck'' value = %s , allowed values are [0,1]", noCheckVal));
			}
			boolean noCheck = "1".contentEquals(noCheckVal);

			if (!noCheck) {
				// If noCheck is 0 then the following conditions must be met in order to allow
				// deletion:
				// No unmatched AO
				// No open EDR/WO/RT

				this.checkUnmatchedAOs(customer);
				this.checkOpenEDRs(customer);
				this.checkOpenWOs(customer);
				this.checkOpenRTs(customer);
			}

			this.removeCustomerHirarchy(customer);

		} catch (BusinessException be) {
			throw be;
		} catch (Exception e) {
			log.error(" Error executing DeleteCustomersScript ", e);
			throw new BusinessException(e.getMessage());
		}
	}

	private void checkOpenEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenEDRs for customer = {} ", customer);
			String query = "select count(edr.id) from EDR edr where edr.status = ''OPEN'' and edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId ";

			Object count = edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId())
					.getSingleResult();
			log.debug(" count of open EDRs = {} ", count);
			log.debug(" End checkOpenEDRs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open EDRs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenWOs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start checkOpenWOs for customer = {} ", customer);
			String query = "select count(wo.id) from WalletOperation wo where wo.status = ''OPEN'' and wo.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId ";
			final WalletOperationService walletOperationService = (WalletOperationService) getServiceInterface(
					WalletOperationService.class.getSimpleName());

			Object count = walletOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open WOs = {} ", count);
			log.debug(" End checkOpenWOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open WOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenWOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkOpenRTs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkOpenRTs for customer = {} ", customer);
			String query = "select count(rt.id) from RatedTransaction rt where rt.status = ''OPEN'' and rt.billingAccount.customerAccount.customer.id =:customerId ";
			Object count = this.ratedTransactionService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of open RTs = {} ", count);
			log.debug(" End checkOpenRTs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] open RTs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkOpenRTs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void checkUnmatchedAOs(Customer customer) throws BusinessException {
		try {

			log.debug(" Start checkUnmatchedAOs for customer = {} ", customer);
			String query = "select count(ao.id) from AccountOperation ao where ao.matchingStatus = ''O'' and ao.customerAccount.customer.id =:customerId ";
			final AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(
					AccountOperationService.class.getSimpleName());
			Object count = accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).getSingleResult();
			log.debug(" count of unmatched AOs = {} ", count);
			log.debug(" End checkUnmatchedAOs for customer = {} ", customer);

			if (((Long) count).intValue() > 0) {
				throw new BusinessException(" Customer has [" + count + "] unmatched AOs ");
			}
		} catch (Exception e) {
			log.error(" Error on checkUnmatchedAOs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeCustomerHirarchy(Customer customer) throws BusinessException {
		log.debug(" Start removeCustomerHirarchy for customer = {} ", customer);

		//
		// A workaround for #4134 , no need for this method if #4134 is fixed (only
		// 6.1.X is concerned)!
      	this.nullifyDDRequestItem(customer);
		this.nullifyAOsSeller(customer);

      	this.removeWalletOperations(customer);
		this.removeChargeInstances(customer);
		// the relationship [SubCategoryInvoiceAgregate <=> WalletInstance] should be broke fisrt
		this.nullifySubCategoryInvoiceAgregatesWallet(customer);
		this.removeRatedTransactions(customer);
		this.nullifyWalletInstanceInUserAccount(customer);
		this.removeWalletInstances(customer);

		this.removePaymentHistory(customer);
//		this.removeRatedTransactions(customer);

		this.removeMatchingAmounts(customer);
		this.nullifyRecordedInvoice(customer);
		this.removeInvoices(customer);



		this.removeServiceInstances(customer);
		this.removeAccess(customer);
		this.removeEDRs(customer);
		this.removeDiscountPlanInstance(customer);
		this.nullifyAOSubscriptions(customer);
		this.removeSubscriptions(customer);
		this.removeRejectedBAs(customer);

		this.removeCounterPeriods(customer);
		this.removeCounterInstances(customer);
		this.removeOrderItems(customer);
		this.removeProductInstances(customer);


		this.customerService.remove(customer);

		log.debug(" End removeCustomerHirarchy for customer = {} ", customer);
	}

	private void nullifyWalletInstanceInUserAccount(Customer customer) {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);
		String query = "Update UserAccount ua set ua.wallet = null where ua.wallet.id in (select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId)";
		edrService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeEDRs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeEDRs for customer = {} ", customer);

			String queryText = "delete from EDR edr1 where edr1.id in (select edr.id from EDR edr where edr.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			edrService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeEDRs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeEDRs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeMatchingAmounts(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeMatchingAmounts for customer = {} ", customer);

			final MatchingAmountService matchingAmountService = (MatchingAmountService) getServiceInterface(MatchingAmountService.class.getSimpleName());
			final String query = "delete from MatchingAmount ma1 where ma1.id in (select ma.id from MatchingAmount ma where ma.accountOperation.customerAccount.customer.id =:customerId )";
			matchingAmountService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeMatchingAmounts for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeMatchingAmounts : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeAccess(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeAccess for customer = {} ", customer);

			final AccessService accessService = (AccessService) getServiceInterface(
					AccessService.class.getSimpleName());

			final String queryText = "delete from Access a1 where a1.id in (select a.id from Access a where a.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			accessService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeAccess for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeAccess : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeServiceInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeServiceInstances for customer = {} ", customer);

			String queryText = "delete from ServiceInstance si1 where si1.id in (select si.id from ServiceInstance si where si.subscription.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";
			this.serviceInstanceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeServiceInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeServiceInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeWalletOperations(Customer customer) throws BusinessException {
		try {
			log.debug(" removeWalletOperations for customer={} ", customer);
			String queryText = "delete from WalletOperation wo where wo.id in ( select wo1.id from WalletOperation wo1  where wo1.chargeInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";

			Query query = this.walletOperationService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();
		} catch (Exception e) {
			log.error(" Error on removeWalletOperations : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */
	private void removePaymentHistory(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removePaymentHistory for customer = {} ", customer);

			String query = "delete from PaymentHistory ph1 where ph1.id in (select ph2.id from PaymentHistory ph2 where ph2.customerCode=:customerCode) ";
			int count = this.businessEntityService.getEntityManager().createQuery(query)
					.setParameter("customerCode", customer.getCode()).executeUpdate();

			log.debug(" {} PaymentHistory to delete ", count);
			log.debug(" End removePaymentHistory for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removePaymentHistory : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	/**
	 * using Sub-queries to Resolve Error: ERROR: syntax error at or near "cross"
	 *
	 * @param customer
	 * @throws BusinessException
	 */

 private void nullifyDDRequestItem(Customer customer){

    try {
			log.debug(" Start deleteDDRequestItem for customer = {} ", customer);

			String query = "update DDRequestItem ddri set ddri.automatedPayment= null where ddri.automatedPayment.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
  }
	private void nullifyAOsSeller(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOsSeller for customer = {} ", customer);

			String query = "UPDATE AccountOperation ao1 SET ao1.seller = null where ao1.id in (select ao2.id from AccountOperation ao2 where ao2.customerAccount.customer.id =:customerId) ";
			int count = this.accountOperationService.getEntityManager().createQuery(query)
					.setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" seller to nullify for {} AOs ", count);
			log.debug(" End nullifyAOsSeller for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOsSeller : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void nullifySubCategoryInvoiceAgregatesWallet(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);

			StringBuilder query = new StringBuilder( "UPDATE SubCategoryInvoiceAgregate subCat SET subCat.wallet = null ")
					.append(" where subCat.id in (select subCatIn.id from SubCategoryInvoiceAgregate subCatIn where subCatIn.wallet.userAccount.billingAccount.customerAccount.customer.id =:customerId) ");

			int count = this.accountOperationService.getEntityManager().createQuery(query.toString()).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" wallet to nullify for {} SubCategoryInvoiceAgregate ", count);
			log.debug(" End nullifySubCategoryInvoiceAgregatesWallet for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifySubCategoryInvoiceAgregatesWallet : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeProductInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeProductInstances for customer = {} ", customer);
			String query = "delete from ProductInstance pi where pi.id in (select p.id from ProductInstance p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			productInstanceService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();
			log.debug(" End removeProductInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeProductInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void removeOrderItems(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeOrderItem for customer = {} ", customer);

			String query = "delete from OrderItem oi where oi.id in (select p.id from OrderItem p where p.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";

			orderItemService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeOrderItem for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeOrderItem : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeCounterPeriods(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterPeriods for customer = {} ", customer);
			String queryText = "delete from CounterPeriod cp1 where cp1.id in ( select c.id from CounterPeriod c where c.counterInstance.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			counterInstanceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();
			log.debug(" End removeCounterPeriods for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterPeriods : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeCounterInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeCounterInstances for customer = {} ", customer);

			String query = "delete from CounterInstance c1 where c1.id in (select c.id from CounterInstance c where c.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			counterInstanceService.getEntityManager().createQuery(query).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeCounterInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeCounterInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void removeRejectedBAs(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRejectedBAs for customer = {} ", customer);

			String queryText = "delete from RejectedBillingAccount rba1 where rba1.id in (select rba.id from RejectedBillingAccount rba where rba.billingAccount.customerAccount.customer.id =:customerId )";
			rejectedBillingAccountService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeRejectedBAs for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRejectedBAs : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}




	private void nullifyRecordedInvoice(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRecordedInvoice for customer = {} ", customer);

			String queryText = "update  RecordedInvoice ri   set ri.invoice = null where ri.invoice.id in ( select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer.id =:customerId )";
			invoiceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeRecordedInvoice for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRecordedInvoice : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeInvoices(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeInvoices for customer = {} ", customer);

			String queryText = "delete from Invoice inv1 where inv1.id in (select inv.id from Invoice inv where inv.billingAccount.customerAccount.customer.id =:customerId )";
			invoiceService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeInvoices for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeInvoices : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeWalletInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeWalletInstances for customer = {} ", customer);

			String queryText = "delete from WalletInstance wi1 where wi1.id in (select wi.id from WalletInstance wi where wi.userAccount.billingAccount.customerAccount.customer.id =:customerId) ";
			this.walletService.getEntityManager().createQuery(queryText).setParameter("customerId", customer.getId()).executeUpdate();

			log.debug(" End removeWalletInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeWalletInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private void removeRatedTransactions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeRatedTransactions for customer = {} ", customer);

						String queryText = "delete from RatedTransaction rt1 where rt1.id in (select rt.id from RatedTransaction rt where rt.billingAccount.customerAccount.customer.id =:customerId )";
			Query query =chargeInstanceService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();

			log.debug(" End removeRatedTransactions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeRatedTransactions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}

	}


	private void removeChargeInstances(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeChargeInstances for customer = {} ", customer);

			String queryText = "delete from ChargeInstance ci1 where ci1.id in (select ci.id from ChargeInstance ci where ci.userAccount.billingAccount.customerAccount.customer.id =:customerId )";
			Query query =chargeInstanceService.getEntityManager().createQuery(queryText);
			query.setParameter("customerId", customer.getId());
			query.executeUpdate();

			log.debug(" End removeChargeInstances for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeChargeInstances : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}


	private void nullifyAOSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start nullifyAOSubscriptions for customer = {} ", customer);
						String queryText = "update AccountOperation  ao set ao.subscription= null where ao.subscription.id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End nullifyAOSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on nullifyAOSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeSubscriptions(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
						String queryText = "delete from Subscription s1 where s1.id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}

	private void removeDiscountPlanInstance(Customer customer) throws BusinessException {
		try {
			log.debug(" Start removeSubscriptions for customer = {} ", customer);
						String queryText = "delete from DiscountPlanInstance dpi where subscription_id in (select s.id from Subscription s where s.userAccount.billingAccount.customerAccount.customer =:customer) ";
			subscriptionService.getEntityManager().createQuery(queryText).setParameter("customer", customer).executeUpdate();
			log.debug(" End removeSubscriptions for customer = {} ", customer);
		} catch (Exception e) {
			log.error(" Error on removeSubscriptions : [{}] ", e.getMessage(), e);
			throw new BusinessException(e);
		}
	}



	private <T> Collection<T> safe(Collection<T> collection) {
		return collection == null ? Collections.EMPTY_LIST : collection;
	}
}' where id= -23 ;]]>
		</sql>
	</changeSet>
<changeSet id="INTRD-3432_21012022_Manual_refund_by_card_KO" author="anasseh">
	<update tableName="meveo_script_instance">
           <column name="script">
               <![CDATA[package org.meveo.service.script.demo;

import java.io.StringReader;
import java.util.Map;
import javax.xml.xpath.*;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.payments.*;
import org.meveo.service.script.payment.PaymentScript;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.InputSource;

/**
 * @author anasseh
 */
public class CustomGatewayPaymentScript extends PaymentScript{
    private static final Logger log = LoggerFactory.getLogger(CustomGatewayPaymentScript.class);

    public void createCardToken(Map<String, Object> methodContext) throws BusinessException {           
        methodContext.put(PaymentScript.RESULT_TOKEN, "7ced0000-3ab2-000d-6a50-08d4b8a6"+(int )(Math.random() * 1000 + 1));
    }
    public void doPaymentToken(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "PAL");
    }
      public void doPaymentCard(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "PAL_CARD");
    }
  
    public void doRefundToken(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "RFD");
    }
   public void doRefundCard(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "RFD_CARD");
    }
  
    private void doIt(Map<String, Object> methodContext,String operationType) throws BusinessException {
        try{
            log.debug("EXECUTE  methodContext {} ", methodContext);
            Long amountCts = (Long)methodContext.get(PaymentScript.CONTEXT_AMOUNT_CTS);
            if(amountCts == null){
                throw new BusinessException("amountCts is null");
            }
            CardPaymentMethod paymentToken = (CardPaymentMethod)methodContext.get(PaymentScript.CONTEXT_TOKEN);
            if(paymentToken == null && (operationType.equals("PAL") || operationType.equals("RFD"))){
                throw new BusinessException("paymentMethod is null");
            }
            
            //DEMO : get tokenId or card infos from context
            String body  = "{";
            body  += " \"PSPID\" : \"PSPID\" ,";
            body  += " \"USERID\" : \"USERID\" ,";
            body  += " \"PSWD\" : \"PSWD\" ,";
            body  += " \"REFKIND\" :  \"PSPID\" ,";
            body  += " \"REFID\" : \"PSPID\" ,";
            body  += " \"OPERATION\" : \""+operationType +"\" ,";
            body  += " \"AMOUNT\" : \""+amountCts.longValue()+"\" ,";
            body  += " \"SHASIGN\" : \"SHASIGN\" ,";
            body  += " }";
          
        
            String paymentResponse = "<root>";
            paymentResponse += "<STATUS>92</STATUS>";
            paymentResponse += "<PAYID>"+((int )(Math.random() * 100000 + 1))+"</PAYID>"; 
            paymentResponse += "<TRANSACTIONID>92</TRANSACTIONID>";
            paymentResponse += "<CRMTOKEN>clientSide</CRMTOKEN>"; 
            paymentResponse += "<BRAND>VISA</BRAND>";
            paymentResponse += "<ACCEPTENCE>bankRef</ACCEPTENCE>"; 
            paymentResponse += "</root>";
            methodContext.put(PaymentScript.RESULT_PAYMENT_STATUS, PaymentStatusEnum.PENDING);
            methodContext.put(PaymentScript.RESULT_PAYMENT_ID, getValue(paymentResponse,"/root/PAYID"));
            methodContext.put(PaymentScript.RESULT_TRANSACTION_ID, getValue(paymentResponse,"/root/TRANSACTIONID"));
            methodContext.put(PaymentScript.RESULT_CODE_CLIENT_SIDE, getValue(paymentResponse,"/root/CRMTOKEN"));
            methodContext.put(PaymentScript.RESULT_PAYMENT_BRAND, getValue(paymentResponse,"/root/BRAND"));
            methodContext.put(PaymentScript.RESULT_BANK_REFERENCE, getValue(paymentResponse,"/root/ACCEPTENCE"));           
        } catch (Exception e) {
            throw new BusinessException(e.getMessage());
        }
    }
    private String getValue(String sourceXML,String expression) throws XPathExpressionException{        
        InputSource iSource = new InputSource(new StringReader(sourceXML));
        XPathFactory xpathFactory = XPathFactory.newInstance();
        XPath xpath = xpathFactory.newXPath();      
        return xpath.evaluate(expression, iSource);         
    }
}
                ]]>
           </column>
           <where>code='org.meveo.service.script.demo.CustomGatewayPaymentScript'</where>
	</update>
   </changeSet>

	<changeSet id="INTRD-4724_20220201" author="TarikRabeh">
		<insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-36" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="165000000" />
			<column name="description" value="Deposits and sureties received"></column>
			<column name="chart_of_account_type" value="LIABILITIES" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-51" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="accounting_code_id" valueNumeric="-3" />
			<column name="account_code_client_side" valueNumeric="165000000" />
			<column name="code" value="CRD_SD" />
			<column name="description" value="Credit for Security deposit transfer" />
			<column name="occ_category" value="CREDIT" />
			<column name="journal_id" value="-2" />
		</insert>
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-52" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="accounting_code_id" valueNumeric="-36" />
			<column name="account_code_client_side" valueNumeric="41100000" />
			<column name="code" value="DEB_SD" />
			<column name="description" value="Debit for Security deposit transfer" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
		</insert>
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-53" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-36" />
			<column name="account_code_client_side" valueNumeric="512010000" />
			<column name="code" value="REF_SD" />
			<column name="description" value="Refund of Security deposit transfer" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
		<insert tableName="billing_seq_invoice">
			<column name="id" valueNumeric="-6" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="SECURITY_DEPOSIT" />
			<column name="description" value="Security Deposit" />
			<column name="sequence_size" valueNumeric="9" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
		</insert>
		<insert tableName="billing_invoice_type">
			<column name="id" valueNumeric="-6" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="SECURITY_DEPOSIT" />
			<column name="description" value="SD - Security Deposit" />
			<column name="invoice_sequence_id" valueNumeric="-6" />
			<column name="occ_template_id" valueNumeric="-52" />
			<column name="uuid" value="InvoiceType-SECURITY_DEPOSIT" />
		</insert>
		<insert tableName="billing_invoice_cat">
			<column name="id" value='-4'/>
			<column name="code" value="ICAT_SECURITY_DEPOSIT"/>
			<column name="description" value="ICAT_SECURITY_DEPOSIT"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="uuid" value="billing_invoice_cat_icat_security_deposit" />
		</insert>
		<insert tableName="billing_invoice_sub_cat">
			<column name="id" value='-4'/>
			<column name="invoice_category_id" value='-4'/>
			<column name="version" valueNumeric="0" />
			<column name="code" value="ISCAT_SECURITY_DEPOSIT"/>
			<column name="description" value="ISCAT_SECURITY_DEPOSIT"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="uuid" value="billing_invoice_sub_cat_iscat_security_deposit" />
		</insert>
		<insert tableName="billing_accounting_article">
			<column name="id" value='-11'/>
			<column name="version" valueNumeric="0" />
			<column name="code" value="ART_SECURITY_DEPOSIT"/>
			<column name="tax_class_id" value="-3"/>
			<column name="invoice_sub_category_id" value="-4"/>
			<column name="invoice_type_id" value="-6"/>
			<column name="description" value="Article Security Deposit"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="uuid" value="billing_accounting_article_art_security_deposit" />
		</insert>
	</changeSet>
	<changeSet id="#INTRD-4950-20220208" author="MohammedSTITANE">
		<insert tableName="meveo_script_instance_cat">
			<column name="id" valueSequenceNext="meveo_script_instance_cat_seq"/>
			<column name="version" valueNumeric="0"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="code" value="FILE_ACCOUNTING_SCHEMES"/>
			<column name="description" value="File accounting schemes"/>
		</insert>
		<insert tableName="generic_sequence">
			<column name="id" valueSequenceNext="generic_sequence_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="code" value="accounting_scheme_sequence" />
			<column name="description" value="AccountingScheme sequence" />
			<column name="sequence_type" value="SEQUENCE" />
			<column name="sequence_size" valueNumeric="10" />
			<column name="current_number" valueNumeric="0" />
		</insert>
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="AccountingScheme" />
			<column name="code_el" value="#{sequenceNextValue}" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="sequence_id" valueSequenceCurrent="generic_sequence_seq" />
		</insert>
	</changeSet>
    <changeSet id="INTRD-5089_20220215" author="TarikRabeh">
        <update tableName="billing_accounting_article">
			<column name="accounting_code_id" value="-36"/>
            <where>code='ART_SECURITY_DEPOSIT'</where>
        </update>
    </changeSet>
    <changeSet id="#INTRD-5242__22-02-2022" author="Mohammed_ELAZZOUZI">
    	<sql>delete from ${db.schema.adapted}crm_custom_field_tmpl_val where customfieldtemplate_id = (SELECT id from crm_custom_field_tmpl where code = 'AggregationOptions')</sql>
	    <sql>delete from ${db.schema.adapted}crm_custom_field_tmpl where applies_to='JobInstance_InvoiceLinesJob' and code ='AggregationOptions'</sql>
	    <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="JobInstance_InvoiceLinesJob_AggregationPerUnitAmount"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="description" value="aggregation per unit amount"/>
            <column name="field_type" value="BOOLEAN"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="value_required" value="0"/>
            <column name="default_value" value="0"/>
            <column name="creator" value="applicationInitializer"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="JobInstance_InvoiceLinesJob_ILDateAggregationOptions"/>
            <column name="description" value="date aggregation options"/>
            <column name="field_type" value="LIST"/>
            <column name="value_required" value="0"/>
            <column name="creator" value="applicationInitializer"/>
            <column name="versionable" value="0"/>
            <column name="storage_type" value="SINGLE"/>
            <column name="trigger_end_period_event" value="0"/>
            <column name="applies_to" value="JobInstance_InvoiceLinesJob"/>
            <column name="allow_edit" value="1"/>
            <column name="hide_on_new" value="0"/>
            <column name="inh_as_def_value" value="0"/>
            <column name="cf_protectable" value="0"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="NO_DATE_AGGREGATION"/>
            <column name="listvalues_key" value="NO_DATE_AGGREGATION"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="MONTH_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="MONTH_OF_USAGE_DATE"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="WEEK_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="WEEK_OF_USAGE_DATE"/>
        </insert>
        <insert tableName="crm_custom_field_tmpl_val">
            <column name="customfieldtemplate_id" valueComputed="(SELECT id from crm_custom_field_tmpl where code = 'JobInstance_InvoiceLinesJob_ILDateAggregationOptions')"/>
            <column name="listvalues" value="DAY_OF_USAGE_DATE"/>
            <column name="listvalues_key" value="DAY_OF_USAGE_DATE"/>
        </insert>
    </changeSet>
	<changeSet id="INTRD-4891-25022022" author="Abdelkader.Bouazza">
		<update tableName="cpq_attribute">
			<column name="el_value">${sub.getSubscriptionDate()}</column>
			<where>id=-8</where>
		</update>
	</changeSet>
	<changeSet id="INTRD-4680-01032022" author="TarikRabeh">
		<update tableName="billing_user_account">
			<column name="is_consumer">1</column>
		</update>
	</changeSet>

	<changeSet id="INTRD-5691-20220315" author="ZBariki">
		<insert tableName="crm_provider_pay_methods">
			<column name="provider_id" valueNumeric="1" />
			<column name="payment_method" value="CHECK" />
		</insert>
	</changeSet>
	
	<changeSet id="INTRD-5701_20220215" author="HatimOUDAD">
        <insert tableName="billing_accounting_article">
        	<column name="id" value="-5"/>
        	<column name="version" valueNumeric="0" />
        	<column name="code" value="ADV-STD"/>
        	<column name="tax_class_id" value="-1"/>
            <column name="invoice_sub_category_id" value="-3"/>
            <column name="description_i18n" value='{"FRA":"Acompte","ENG":"Advance payment"}'/>
            <column name="description" value='Advance payment'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_accounting_article-ADV-STD" />
        </insert>
    </changeSet>
    
	<changeSet id="#INTRD-4702-20220321" author="ZBariki">
		<update tableName="meveo_script_instance_cat">
			<column name="code" value="ACCOUNTING_SCHEMES"></column>
			<column name="description" value="Accounting schemes"></column>
			<where>code='FILE_ACCOUNTING_SCHEMES'</where>
		</update>
	</changeSet>
	<changeSet id="#INTRD-5888_2022-03_23" author="hichamELHALOUI" >

		<update tableName="billing_trading_currency">
			<column name="symbol" value="$US"  />
            <column name="decimal_places" valueNumeric="2" />
			<where>currency_id=49</where>
		</update>
		<update tableName="billing_trading_currency">
			<column name="symbol" value="€"  />
            <column name="decimal_places" valueNumeric="2" />
			<where>currency_id=5</where>
		</update>
    </changeSet>

	<changeSet id="#INTRD-5831_20220325" author="aelmalki">
		<sql>UPDATE ar_occ_template occ SET contra_accounting_code_id = (SELECT ac.id FROM billing_accounting_code ac WHERE ac.code=occ.account_code_client_side) WHERE occ.contra_accounting_code_id IS NULL</sql>
	</changeSet>

	<changeSet id="#INTRD-5830_20220324" author="aelmalki">
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="org.meveo.service.script.accountingscheme.DefaultAccountingSchemeScript" />
			<column name="src_type" value="JAVA_CLASS" />
			<column name="description" value="Default Journal entry builder, from AccountOperation"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="script">
				<![CDATA[package org.meveo.service.script.accountingscheme;
						public class SampleAccountingSchemeScript extends DefaultAccountingSchemeScript {}
				]]>
			</column>
		</insert>
	</changeSet>

	<changeSet id="#INTRD-5960_20220328" author="HichamHANINE">
    	<sql>Update  cpq_order_offer o set subscription_id = (select id from billing_subscription s where s.order_offer_id = o.id) where o.subscription_id is null</sql>
    </changeSet>

	<changeSet id="#INTRD-5955_20220324" author="aelmalki">
		<insert tableName="ar_accounting_scheme">
			<column name="id" valueSequenceNext="ar_accounting_scheme_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="org.meveo.service.script.accountingscheme.DefaultAccountingSchemeScript" />
			<column name="description" value="Default Accounting Scheme"/>
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.accountingscheme.DefaultAccountingSchemeScript')"/>
		</insert>
	</changeSet>

	<changeSet id="#INTRD-5958_20220328" author="aelmalki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="2022-03-28 00:00:00.000" />
			<column name="job_category" value="ACCOUNTING" />
			<column name="job_template" value="AccountingSchemesJob" />
			<column name="code" value="AccountingSchemesJob" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="-1" />
			<column name="uuid" value="AccountingSchemesJob" />
		</insert>
	</changeSet>

	<changeSet id="#INTRD-5992_20220329" author="aelmalki">
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript" />
			<column name="src_type" value="JAVA_CLASS" />
			<column name="description" value="Invoice accounting scheme script"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="script">
				<![CDATA[package org.meveo.service.script.accountingscheme;
						public class SampleInvoiceAccountingSchemeScript extends InvoiceAccountingSchemeScript {}
				]]>
			</column>
		</insert>
		<insert tableName="ar_accounting_scheme">
			<column name="id" valueSequenceNext="ar_accounting_scheme_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="Invoice and Credit Note" />
			<column name="description" value="Invoice accounting scheme"/>
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript')"/>
		</insert>
		<update tableName="ar_occ_template">
			<column name="accounting_scheme_id" valueComputed="(SELECT id FROM ar_accounting_scheme WHERE code='Invoice and Credit Note')" />
			<where> code IN ('INV_STD', 'INV_CRN')</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-6075_20220330" author="aelmalki">
		<update tableName="meveo_script_instance">
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='ACCOUNTING_SCHEMES')" />
			<where> code IN ('org.meveo.service.script.accountingscheme.DefaultAccountingSchemeScript', 'org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript')</where>
		</update>
	</changeSet>

    	<changeSet id="INTRD-5997_20220330" author="HichamELHALOUI">
		<insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-37" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511011000" />
			<column name="description" value="CB à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

        <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-38" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511002000" />
			<column name="description" value="Paypal à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

          <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-39" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511003000" />
			<column name="description" value="Stripe à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

         <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-40" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511000610" />
			<column name="description" value="TIP à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

         <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-41" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="531100000" />
			<column name="description" value="Caisse en monnaie nationale"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>

          <insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-42" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="code" value="511200000" />
			<column name="description" value="Chèques à encaisser"></column>
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
		</insert>


        <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-54" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-42" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_CHECK" />
			<column name="description" value="Payment - check" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-55" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-37" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_CB" />
			<column name="description" value="Payment - card" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-56" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-20" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_DIRECT_DEBIT" />
			<column name="description" value="Payment - direct debit (prélèvement)" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-57" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-38" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_PAYPAL" />
			<column name="description" value="Payment Paypal" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-58" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-39" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_STRIPE" />
			<column name="description" value="Payment Stripe" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-59" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-40" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_TIP_DEBIT" />
			<column name="description" value="Payment - TIP" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-60" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-41" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_CASH" />
			<column name="description" value="Payment - cash" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-61" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-20" />
			<column name="contra_accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PAY_WIRE" />
			<column name="description" value="WIRETRANSFER (virement)" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-2" />
			<column name="creator" value="opencell.admin" />
		</insert>


        </changeSet>

    <changeSet id="#INTRD-4666_20220331" author="HatimOUDAD">
		<update tableName="cpq_order_product">
			<column name="production_action_type" value="CREATE" />
			<where> production_action_type is null</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-5924-20220401" author="ZBariki">
		<insert tableName="generic_sequence">
			<column name="id" valueSequenceNext="generic_sequence_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="discount_plan_item_seq" />
			<column name="description" value="Discount plan item sequence" />
			<column name="sequence_type" value="SEQUENCE" />
			<column name="sequence_size" valueNumeric="10" />
			<column name="current_number" valueNumeric="0" />
		</insert>
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="org.meveo.model.catalog.DiscountPlanItem" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence_id"
					valueComputed="(SELECT id from generic_sequence where code = 'discount_plan_item_seq')" />
		</insert>
	</changeSet>



	<changeSet id="#INTRD-6283_20220404" author="AbdelmounaimAkadid">
		<update tableName="ar_occ_template">
			<column name="description" value="WIRETRANSFER" />
			<where>id=-61</where>
		</update>
		<update tableName="ar_occ_template">
			<column name="description" value="Payment - direct debit" />
			<where>id=-56</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-6298_20220405" author="aelmalki">
		<update tableName="ar_accounting_scheme">
			<column name="long_description_i18n">
				<![CDATA[{"FRA":"<p>Ce schéma produit 2 lignes d'écriture:</p><ul><li>Une ligne pour le compte et le sens définis sur le type d'opération de de compte</li><li>Une ligne pour le compte de contrepartie défini sur le type d'opération de compte, mais avec un sens opposé</li></ul>","ENG":"<p>This scheme produces 2 accounting entries:</p><ul><li>An entry for the accounting code and the direction defined on the account operation type</li><li>An entry for the contra account defined on the account operation, type but with the opposite direction</li></ul>"}]]>
			</column>
			<column name="code" value="Dual entry scheme" />
			<where>code='DefaultAccountingScheme'</where>
		</update>

		<update tableName="ar_accounting_scheme">
			<column name="long_description_i18n">
				<![CDATA[{"FRA":"<p>Ce schéma produit des lignes d'écritures pour une facture ou un avoir (ci-dessous \"document\") :</p><ul><li>Une ligne unique pour le total TTC du document, sur le compte client (de la catégorie de client ou à défaut du type d'opération de compte).</li></ul><p class=\"ql-indent-1\">Le sens est celui de l'opération de compte (pour une facture : DEBIT, pour un avoir : CREDIT).</p><ul><li>Des lignes de contrepartie (au moins une) pour les montants HT pour les comptes de revenus, en utilisant les codes comptables des articles liés aux lignes du document.</li></ul><p class=\"ql-indent-1\">Le sens est l'opposé de celui du type d'opération (pour une facture : CREDIT, pour un avoir : DEBIT).</p><ul><li>S'il y a lieu, des lignes pour les montants des différentes taxes appliquées au document, en utilisant les codes comptables de ces taxes.</li></ul><p class=\"ql-indent-1\">Le sens est l'opposé de celui du type d'opération (pour une facture : CREDIT, pour un avoir : DEBIT).</p>","ENG":"<p>This scheme produces entries for an invoice or credit note (here after \"document\"):</p><ul><li>A single entry with the document total amount with tax using the customer accounting code (from the customer category, or if not set from the account operation type). </li></ul><p class=\"ql-indent-1\">Line direction is the one from the account operation type (for invoice: DEBIT, for credit note: CREDIT).</p><ul><li>\"Contra\" entries (at least one) with the amounts without tax for revenue accounts, using the accounting codes from the article linked to the document lines. </li></ul><p class=\"ql-indent-1\">Line direction is the opposite of direction set on the account operation type (for invoices: CREDIT, for credit note: DEBIT).</p><ul><li>\"Contra\" entries (if applies) with the tax amounts for the different taxes applied on the document, using the accounting codes from these taxes.</li></ul><p class=\"ql-indent-1\">Line direction is the opposite of direction set on the account operation type (for invoices: CREDIT, for credit note: DEBIT).</p>"}]]>
			</column>
			<column name="code" value="Invoice and Credit Note" />
			<where>code='org.meveo.service.script.accountingscheme.InvoiceAccountingSchemeScript'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-6291_20220406" author="AbdelmounaimAkadid">
		 <update tableName="ar_occ_template">
			<column name="version" valueNumeric="1" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="contra_accounting_code_id" valueNumeric="-42" />
            <where>id=-1</where>
		</update>

		<update tableName="ar_occ_template">
			<column name="version" valueNumeric="1" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="contra_accounting_code_id" valueNumeric="-37" />
            <where>id=-43</where>
		</update>

        <update tableName="ar_occ_template">
			<column name="version" valueNumeric="1" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="contra_accounting_code_id" valueNumeric="-20" />
            <where>id=-3</where>
		</update>

        <update tableName="ar_occ_template">
			<column name="version" valueNumeric="1" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="contra_accounting_code_id" valueNumeric="-38" />
            <where>id=-46</where>
		</update>

        <update tableName="ar_occ_template">
			<column name="version" valueNumeric="1" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="contra_accounting_code_id" valueNumeric="-39" />
            <where>id=-47</where>
		</update>

        <update tableName="ar_occ_template">
			<column name="version" valueNumeric="1" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="contra_accounting_code_id" valueNumeric="-40" />
            <where>id=-2</where>
		</update>

		<update tableName="ar_occ_template">
			<column name="version" valueNumeric="1" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="contra_accounting_code_id" valueNumeric="-41" />
			<column name="occ_category" value="CREDIT" />
            <where>id=-60</where>
		</update>

		<update tableName="ar_occ_template">
			<column name="version" valueNumeric="1" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="contra_accounting_code_id" valueNumeric="-20" />
			<column name="occ_category" value="CREDIT" />
            <where>id=-61</where>
		</update>

		<delete tableName="ar_occ_template">
	        <where>id IN (-54, -55, -56, -57, -58, -59)</where>
	    </delete>
	</changeSet>

	<changeSet id="#INTRD-6341_20220406" author="aelmalki">
		<update tableName="ar_occ_template">
			<column name="contra_accounting_code_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='701000000')" />
			<column name="contra_accounting_code2_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='445710000')" />
			<where> code IN ('INV_STD', 'INV_CRN')</where>
		</update>
	</changeSet>
	<changeSet id="INTRD-6305-07042022" author="Abdelkader.Bouazza">
		<update tableName="dunning_settings">
			<column name="dunning_mode">INVOICE_LEVEL</column>
			<where>code='DUN_DEF'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-6484" author="hichamElHaloui" dbms="postgres">
		<sql>
			with cte as
					 (
						 select bil.id, btc.current_rate
						 from billing_invoice_line bil
								  left join billing_invoice invoice on bil.invoice_id = invoice.id
								  left join billing_trading_currency btc on invoice.trading_currency_id = btc.id
					 )
			update billing_invoice_line bil
			set functional_unit_price = (select current_rate from cte where cte.id = bil.id) * bil.unit_price
			where exists(select id from cte where cte.id = bil.id and cte.current_rate is not null);


			with cte as
					 (
						 select bil.id, btc.current_rate
						 from billing_invoice_line bil
								  left join billing_invoice invoice on bil.invoice_id = invoice.id
								  left join billing_trading_currency btc on invoice.trading_currency_id = btc.id
					 )
			update billing_invoice_line bil
			set functional_unit_price = unit_price
			where exists(select id from cte where cte.id = bil.id and cte.current_rate is null);
		</sql>
	</changeSet>
	
	<changeSet id="#INTRD-7339_20220607" author="hichamhanine">
		<insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-62" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="${db.current.time}" />
            <column name="code" value="ImportCustomerBankDetailsJob" />
            <column name="description" value="ImportCustomerBankDetailsJob" />
            <column name="job_category" value="IMPORT_HIERARCHY" />
            <column name="job_template" value="ImportCustomerBankDetailsJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="opencell.admin" />
            <column name="timerentity_id" value="null" />
            <column name="following_job_id" value="null" />
            <column name="uuid" value="ImportCustomerBankDetailsJob" />
            <column name="run_on_nodes" value="null" />
            <column name="single_node" value="1" />
            <column name="cf_values" value="null" />
            <column name="verbose_report" value="1" />
        </insert>
	</changeSet>
	
	<changeSet id="#INTRD-6056_20220415" author="HatimOUDAD">
		<update tableName="cpq_quote_product">
			<column name="product_action_type" value="CREATE" />
			<where> product_action_type is null</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-6668_20220421" author="TarikRabeh">
		<update tableName="adm_currency">
			<column name="symbol" value="€" />
			<where> currency_code = 'EUR'</where>
		</update>
		<update tableName="adm_currency">
			<column name="symbol" value="$US" />
			<where> currency_code = 'USD'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-6283_20220422" author="HichamELHALOUI">
		<update tableName="ar_occ_template">
			<column name="description" value="Payment - wiretransfer"/>
			<where>id=-61</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-6638_20220422" author="aelmalki">
		<!-- Add Payment Script -->
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="org.meveo.service.script.accountingscheme.PaymentAccountingSchemeScript" />
			<column name="src_type" value="JAVA_CLASS" />
			<column name="description" value="Payment Journal entry builder, from AccountOperation"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="script">
				<![CDATA[package org.meveo.service.script.accountingscheme;
						public class SamplePaymentAccountingSchemeScript extends PaymentAccountingSchemeScript {}
				]]>
			</column>
		</insert>

		<!-- Add Scheme -->
		<insert tableName="ar_accounting_scheme">
			<column name="id" valueSequenceNext="ar_accounting_scheme_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="Payment entry scheme" />
			<column name="description" value="Payment Accounting Scheme"/>
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.accountingscheme.PaymentAccountingSchemeScript')"/>
		</insert>

		<!-- Add New 419100000 AccountinCode -->
		<insert tableName="billing_accounting_code">
			<column name="id" valueNumeric="-45" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="419100000" />
			<column name="description" value="Client non renconnu" />
			<column name="chart_of_account_type" value="ASSETS" />
			<column name="chart_of_account_view_type" value="REGULAR" />
			<column name="migrated" value="0" />
			<column name="disabled" value="0" />
		</insert>
	</changeSet>

	<changeSet id="#INTRD-6638_20220422-update-occT" author="aelmalki">
		<!-- Link to OCCTemplate Payment -->
		<update tableName="ar_occ_template">
			<column name="accounting_scheme_id" valueComputed="(SELECT id FROM ar_accounting_scheme WHERE code='Payment entry scheme')" />
			<column name="contra_accounting_code2_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='419100000')" />
			<column name="occ_category" value="CREDIT" />
			<where> code IN ('PAY_CHK','PAY_CRD','PAY_DDT','PAY_PAL','PAY_STP','PAY_TIP','PAY_CASH','PAY_WIRE')</where>
		</update>
	</changeSet>

	<changeSet id="INTRD-6908_20220503" author="HichamELHALOUI">
		<update tableName="billing_accounting_code">
			<column name="description" value="Payment Card to collect"></column>
			<where>id=-37</where>
		</update>

        <update tableName="billing_accounting_code">
			<column name="description" value="Payment Paypal to collect"></column>
			<where>id=-38</where>
		</update>

          <update tableName="billing_accounting_code">
			<column name="description" value="Payment Stripe to collect"></column>
			<where>id=-39</where>
		</update>

         <update tableName="billing_accounting_code">
			<column name="description" value="Payment - TIP to collect"></column>
			<where>id=-40</where>
		</update>

         <update tableName="billing_accounting_code">
			<column name="description" value="Cash in local currency"></column>
			<where>id=-41</where>
		</update>

          <update tableName="billing_accounting_code">
			<column name="description" value="Checks to collect"></column>
			<where>id=-42</where>
		</update>
	</changeSet>

    <changeSet id="#INTRD-7049_20220509" author="TarikRabeh">
        <sql>
	        update public.accounting_journal_entry set 
		        trading_currency = (select ac.currency_code from adm_currency ac, billing_trading_currency btc, billing_invoice inv, ar_account_operation aco 
		        	where ac.id = btc.currency_id and inv.trading_currency_id = btc.id and inv.id = aco.invoice_id and aco.id =  accounting_operation_id),
		        trading_amount = (select inv.amount_without_tax from billing_invoice inv, ar_account_operation aco 
		        	where inv.id = aco.invoice_id and aco.id =  accounting_operation_id)
        </sql>
    </changeSet>

	<changeSet id="#INTRD-6961_20220511" author="aelmalki">
		<update tableName="billing_accounting_code">
			<column name="description" value="Unidentified customer" />
			<where>code='419100000'</where>
		</update>
		<update tableName="billing_accounting_code">
			<column name="description" value="Banks" />
			<where>code='512000000'</where>
		</update>
	</changeSet>
	<changeSet id="#6023_130522" author="AbdelkaderBouazza">
		<update tableName="crm_seller">
			<column name="email" value="test@opencell.com" />
			<where>email is null</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-7144_05162022" author="ZBariki">
		<insert tableName="billing_article_mapping">
			<column name="id" valueSequenceNext="billing_article_mapping_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="DEFAULT_ARTICLE_MAPPING" />
			<column name="description" value="Default article mapping" />
		</insert>
	</changeSet>
	
	<changeSet id="FIX validateBR script compile" author="AbdelmounaimAkadid">
        <update tableName="meveo_script_instance">
            <column name="script" >
            	<![CDATA[
			package org.meveo.service.script;

			import java.util.List;
			import java.util.Map;

			import org.meveo.admin.exception.BusinessException;
			import org.meveo.model.billing.BillingRun;
			import org.meveo.model.billing.BillingRunStatusEnum;
			import org.meveo.service.billing.impl.BillingRunExtensionService;
			import org.meveo.service.billing.impl.BillingRunService;

			public class ValidateBRScript extends Script {

				@Override
				public void execute(Map<String, Object> methodContext) throws BusinessException {

					BillingRunService billingRunService = (BillingRunService) getServiceInterface("BillingRunService");

					BillingRunExtensionService billingRunExtensionService = (BillingRunExtensionService) getServiceInterface(
							"BillingRunExtensionService");

					if (billingRunService != null) {
						List<BillingRun> billingRuns = billingRunService.getBillingRuns(BillingRunStatusEnum.PREINVOICED,  BillingRunStatusEnum.POSTINVOICED);

						for (BillingRun billingRun : billingRuns) {

							try {
								billingRunExtensionService.updateBillingRun(billingRun.getId(), null, null,
										BillingRunStatusEnum.POSTVALIDATED, null);
							} catch (Exception e) {
								System.err.println("Error " + e.getMessage());
							}
						}

					}

				}
			}
					]]>
            </column>
            <where>id=-24</where>
        </update>
    </changeSet>

	<changeSet id="#INTRD-7375_20220523" author="ZBariki">
		<update tableName="finance_settings">
			<column name="auxiliary_account_code_el" value="#{substring(gcl.code, 0, 3), String.class)ca.description};" />
			<column name="auxiliary_account_label_el" value="#{ca.description};" />
			<where> auxiliary_account_label_el is NULL AND auxiliary_account_code_el is NULL</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-7428_20220524" author="ZBariki">
		<update tableName="finance_settings">
			<column name="auxiliary_account_code_el" value="#{substring(gcl.code, 0, 3)ca.description};" />
			<where> auxiliary_account_code_el = '#{substring(gcl.code, 0, 3), String.class)ca.description};' </where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-7360_20220525" author="hichamhanine">
		<update tableName="ar_accounting_scheme">
			<column name="long_description_i18n">
				<![CDATA[{"FRA":"<p>Ce schéma produit 2 lignes d'écriture:</p><ul><li>Une ligne pour le compte et le sens définis sur le type d'opération de de compte</li><li>Une ligne pour le compte de contrepartie défini sur le type d'opération de compte, mais avec un sens opposé</li></ul>","ENG":"<p>This scheme produces 2 accounting entries:</p><ul><li>An entry for the accounting code and the direction defined on the account operation type</li><li>An entry for the contra account defined on the account operation, type but with the opposite direction</li></ul>"}]]>
			</column>
			<where>code='Dual entry scheme'</where>
		</update>
	</changeSet>

	<changeSet id="#7477-260522" author="HatimOUDAD">
		<update tableName="global_settings">
			<column name="quote_default_validity_delay" value="30" />
			<where>quote_default_validity_delay is null</where>
	</update>
	</changeSet>

	<changeSet id="#INTRD-7573_20220602" author="TarikFA.">
		<update tableName="billing_invoice_cat">
			<column name="version" value="0" />
			<where>code='ICAT_SECURITY_DEPOSIT'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-7750_20220608" author="ZBariki">
		<update tableName="open_order_template">
			<column name="status" valueComputed="upper(status)"/>
			<where>status IS NOT NULL</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-7402_20220608" author="aelmalki" failOnError="false">
		<!-- failOnError because some one added thos occ_templae manualy in dev env -->
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-62" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PPL_CREATION" />
			<column name="description" value="Payment plan Creation" />
			<column name="occ_category" value="CREDIT" />
			<column name="journal_id" value="-3" />
			<column name="manual_creation_enabled" value="0"/>
		</insert>
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-63" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="accounting_code_id" valueNumeric="-6" />
			<column name="code" value="PPL_INSTALLMENT" />
			<column name="description" value="Payment plan Installment" />
			<column name="occ_category" value="DEBIT" />
			<column name="journal_id" value="-3" />
			<column name="manual_creation_enabled" value="0"/>
		</insert>
	</changeSet>
	
	<changeSet id="#INTRD-7632_20220611" author="HatimOUDAD">
		<update tableName="cpq_order_product">
			<column name="instance_status" value="ACTIVE" />
			<where> instance_status is null and production_action_type = 'ACTIVATE'</where>
		</update>
		<update tableName="cpq_order_product">
			<column name="instance_status" value="INACTIVE" />
			<where> instance_status is null and production_action_type = 'CREATE'</where>
		</update>
		<update tableName="cpq_order_product">
			<column name="instance_status" value="SUSPENDED" />
			<where> instance_status is null and production_action_type = 'SUSPEND'</where>
		</update>
		<update tableName="cpq_order_product">
			<column name="instance_status" value="TERMINATED" />
			<where> instance_status is null and production_action_type = 'TERMINATE'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-7722_20220618" author="ZBariki">
		<delete tableName="adm_custom_generic_entity_code" />
		<delete tableName="generic_sequence" />

		<insert tableName="generic_sequence">
			<column name="id" valueSequenceNext="bill_seq_invoice_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="code" value="quote_offer_sequence" />
			<column name="description" value="Quote Offer sequence" />
			<column name="sequence_type" value="SEQUENCE" />
			<column name="sequence_size" valueNumeric="9" />
			<column name="current_number" valueNumeric="0" />
		</insert>
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="QuoteOffer" />
			<column name="code_el" value="#{entity.quoteVersion.id}_#{entity.offerTemplate.code}_#{sequenceNextValue}" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="sequence_id" valueSequenceCurrent="bill_seq_invoice_seq" />
		</insert>

		<insert tableName="generic_sequence">
			<column name="id" valueSequenceNext="bill_seq_invoice_seq"/>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="code" value="order_offer_sequence" />
			<column name="description" value="Order Offer sequence" />
			<column name="sequence_type" value="SEQUENCE" />
			<column name="sequence_size" valueNumeric="9" />
			<column name="current_number" valueNumeric="0" />
		</insert>
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="OrderOffer" />
			<column name="code_el" value="#{entity.order.code}_#{entity.offerTemplate.code}_#{sequenceNextValue}" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="sequence_id" valueSequenceCurrent="bill_seq_invoice_seq" />
		</insert>

		<insert tableName="generic_sequence">
			<column name="id" valueSequenceNext="bill_seq_invoice_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="version" valueNumeric="1" />
			<column name="code" value="accounting_scheme_sequence" />
			<column name="description" value="AccountingScheme sequence" />
			<column name="sequence_type" value="SEQUENCE" />
			<column name="sequence_size" valueNumeric="10" />
			<column name="current_number" valueNumeric="0" />
		</insert>
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="AccountingScheme" />
			<column name="code_el" value="#{sequenceNextValue}" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="sequence_id" valueSequenceCurrent="bill_seq_invoice_seq" />
		</insert>

		<insert tableName="generic_sequence">
			<column name="id" valueSequenceNext="bill_seq_invoice_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="discount_plan_item_seq" />
			<column name="description" value="Discount plan item sequence" />
			<column name="sequence_type" value="SEQUENCE" />
			<column name="sequence_size" valueNumeric="10" />
			<column name="current_number" valueNumeric="0" />
		</insert>
		<insert tableName="adm_custom_generic_entity_code">
			<column name="id" valueSequenceNext="adm_custom_generic_entity_code_seq" />
			<column name="entity_class" value="org.meveo.model.catalog.DiscountPlanItem" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="sequence_id"
					valueComputed="(SELECT id from generic_sequence where code = 'discount_plan_item_seq')" />
		</insert>
	</changeSet>
	<changeSet id="#INTRD-8004_210622" author="AbdelkaderBouazza">
		<insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-64" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="code" value="REF_CASH" />
			<column name="description" value="Refund - cash" />
			<column name="occ_category" value="DEBIT" />
			<column name="account_code_client_side" value="411000000" />
			<column name="journal_id" value="-2" />
			<column name="accounting_code_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='411000000')" />
			<column name="contra_accounting_code_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='531100000')" />
			<column name="contra_accounting_code2_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='419000000')" />
			<column name="accounting_scheme_id" valueComputed="(SELECT id FROM ar_accounting_scheme WHERE code = 'Dual entry scheme')" />
		</insert>
	</changeSet>

	<changeSet id="#INTRD-1304_21062022" author="AbdelmounaimAkadid">
		<insert tableName="global_settings">
			<column name="id" valueSequenceNext="global_settings_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="quote_default_validity_delay" value="30" />
		</insert>
	</changeSet>
	
	<changeSet id="#INTRD-8420_20220708" author="hichamHANINE">
		<update tableName="meveo_script_instance">
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='ACCOUNTING_SCHEMES')" />
			<where> code IN ('org.meveo.service.script.accountingscheme.PaymentAccountingSchemeScript')</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-8507_20220715" author="ZBariki">
		<update tableName="billing_wallet_operation">
			<column name="rated_transaction_id" value="null"/>
			<where>rated_transaction_id NOT IN (SELECT id FROM billing_rated_transaction)</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-8618-20220719" author="aelmalki">
		<update tableName="cpq_attribute">
			<column name="el_value">${sub.getSubscriptionDate()}</column>
			<where>id=-8</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-8700_20220728" author="ZBariki">
		<update tableName="billing_tax">
			<column name="composite" valueNumeric="0"/>
			<where>composite IS NULL</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-8946_20220804" author="aelmalki">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[package org.meveo.service.script.demo;

import java.io.StringReader;
import java.util.Map;
import javax.xml.xpath.*;
import org.meveo.admin.exception.BusinessException;
import org.meveo.model.payments.*;
import org.meveo.service.script.payment.PaymentScript;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.xml.sax.InputSource;

/**
 * @author anasseh
 */
public class CustomGatewayPaymentScript extends PaymentScript{
    private static final Logger log = LoggerFactory.getLogger(CustomGatewayPaymentScript.class);

    public void createCardToken(Map<String, Object> methodContext) throws BusinessException {
        methodContext.put(PaymentScript.RESULT_TOKEN, "7ced0000-3ab2-000d-6a50-08d4b8a6"+(int )(Math.random() * 1000 + 1));
    }
    public void doPaymentToken(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "PAL");
    }
      public void doPaymentCard(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "PAL_CARD");
    }

    public void doRefundToken(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "RFD");
    }
   public void doRefundCard(Map<String, Object> methodContext) throws BusinessException {
        doIt(methodContext, "RFD_CARD");
    }

    private void doIt(Map<String, Object> methodContext,String operationType) throws BusinessException {
        try{
            log.debug("EXECUTE  methodContext {} ", methodContext);
            Long amountCts = (Long)methodContext.get(PaymentScript.CONTEXT_AMOUNT_CTS);
            if(amountCts == null){
                throw new BusinessException("amountCts is null");
            }
            CardPaymentMethod paymentToken = (CardPaymentMethod)methodContext.get(PaymentScript.CONTEXT_TOKEN);
            if(paymentToken == null && (operationType.equals("PAL") || operationType.equals("RFD"))){
                throw new BusinessException("paymentMethod is null");
            }

            //DEMO : get tokenId or card infos from context
            String body  = "{";
            body  += " \"PSPID\" : \"PSPID\" ,";
            body  += " \"USERID\" : \"USERID\" ,";
            body  += " \"PSWD\" : \"PSWD\" ,";
            body  += " \"REFKIND\" :  \"PSPID\" ,";
            body  += " \"REFID\" : \"PSPID\" ,";
            body  += " \"OPERATION\" : \""+operationType +"\" ,";
            body  += " \"AMOUNT\" : \""+amountCts.longValue()+"\" ,";
            body  += " \"SHASIGN\" : \"SHASIGN\" ,";
            body  += " }";


            String paymentResponse = "<root>";
            paymentResponse += "<STATUS>92</STATUS>";
            paymentResponse += "<PAYID>"+((int )(Math.random() * 100000 + 1))+"</PAYID>";
            paymentResponse += "<TRANSACTIONID>92</TRANSACTIONID>";
            paymentResponse += "<CRMTOKEN>clientSide</CRMTOKEN>";
            paymentResponse += "<BRAND>VISA</BRAND>";
            paymentResponse += "<ACCEPTENCE>bankRef</ACCEPTENCE>";
            paymentResponse += "</root>";
            methodContext.put(PaymentScript.RESULT_PAYMENT_STATUS, PaymentStatusEnum.PENDING);
            methodContext.put(PaymentScript.RESULT_PAYMENT_ID, getValue(paymentResponse,"/root/PAYID"));
            methodContext.put(PaymentScript.RESULT_TRANSACTION_ID, getValue(paymentResponse,"/root/TRANSACTIONID"));
            methodContext.put(PaymentScript.RESULT_CODE_CLIENT_SIDE, getValue(paymentResponse,"/root/CRMTOKEN"));
            methodContext.put(PaymentScript.RESULT_PAYMENT_BRAND, getValue(paymentResponse,"/root/BRAND"));
            methodContext.put(PaymentScript.RESULT_BANK_REFERENCE, getValue(paymentResponse,"/root/ACCEPTENCE"));
        } catch (Exception e) {
            throw new BusinessException(e.getMessage());
        }
    }
    private String getValue(String sourceXML,String expression) throws XPathExpressionException{
        InputSource iSource = new InputSource(new StringReader(sourceXML));
        XPathFactory xpathFactory = XPathFactory.newInstance();
        XPath xpath = xpathFactory.newXPath();
        return xpath.evaluate(expression, iSource);
    }
}
                ]]>
			</column>
			<where>code='org.meveo.service.script.demo.CustomGatewayPaymentScript'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-8903_08112022" author="ZBariki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="2022-08-11 15:13:19.913" />
			<column name="job_category" value="ORDERING" />
			<column name="job_template" value="OpenOrderStatusJob" />
			<column name="code" value="OpenOrderStatusJob" />
			<column name="creator" value="applicationInitializer" />
			<column name="timerentity_id"
					valueComputed="(SELECT id from meveo_timer where code = 'Daily-midnight')" />
			<column name="uuid" value="OpenOrderStatusJob_Job" />
		</insert>
	</changeSet>

	<changeSet id="#INTRD-9839_19012022" author="TarikRabeh">
        <update tableName="dwh_report_extract">
            <column name="sql_query" >
                <![CDATA[SELECT
				    TO_CHAR(ao.invoice_date,'MM') AS "Mois",
				    TO_CHAR(ao.invoice_date,'DD/MM/YYYY') AS "Date facture",
				    text('HG') AS "Code comptable",
				    ae.code AS "Client facturé",
				    text('MAI') AS "Type article",
				    split_part(bac.code, ',', 6) AS "Famille statistique",
				    split_part(bac.code, ',', 2) AS "Article",
				    trim(TO_CHAR(ia.amount_without_tax,'9999990D00')) AS "Montant HT",
				    trim(TO_CHAR(ia.quantity,'9999990')) AS "Qté facturée",
				    ao.reference AS "No facture",
				    ao.description AS "Catégorie facture",
				    ao.code AS "Type de pièce",
				    text('VEN') AS "Journal"
				FROM
				    ar_customer_account ae
				INNER JOIN ar_account_operation ao ON ao.customer_account_id = ae.id
				INNER JOIN billing_invoice i ON i.invoice_number = ao.reference
				INNER JOIN billing_invoice_agregate ia ON (ia.invoice_id = i.id AND type = 'F')
				LEFT JOIN billing_accounting_code bac ON bac.id = ia.accounting_code_id
				WHERE :START_DATE<>:END_DATE
				AND ao.invoice_date >= to_date('01/' || TO_CHAR(CURRENT_DATE,'MM/YYYY'),'DD/MM/YYYY') + interval '-12 month'
				AND ao.invoice_date <= to_date('01/' || TO_CHAR(CURRENT_DATE,'MM/YYYY'),'DD/MM/YYYY') + interval '0 month'
				ORDER BY
				    ae.code,
				    ao.code,
				    split_part(bac.code, ',', 6),
				    split_part(bac.code, ',', 2)
			    ]]></column>
            <where>code='SALES_JOURNAL'</where>
        </update>
    </changeSet>
    
    <changeSet id="#INTRD-10047_20220926_default_sd_template" author="a.rouaguebe">
		<insert tableName="security_deposit_templat">
			<column name="id" valueSequenceNext="security_deposit_templat_seq" />
			<column name="template_name" value="DEFAULT_SD_TEMPLATE" />
			<column name="code" valueComputed="${uuid_function}" />
			<column name="status" value="ACTIVE" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="version" valueNumeric="0" />
			<column name="creator" value="applicationInitializer"></column>
		</insert>
		<modifySql dbms="postgresql">
			<append value=" on conflict do nothing"/>
		</modifySql>
		<modifySql dbms="mysql">
			<replace replace="INSERT" with="INSERT IGNORE"/>
		</modifySql>
		<modifySql dbms="oracle">
			<replace replace="INSERT" with="INSERT /*+ ignore_row_on_dupkey_index(security_deposit_templat, uk_security_deposit_template_name) */"/>
		</modifySql>
    </changeSet>

	<changeSet id="#INTRD-10247_20220928_default_currency_sd_template" author="a.rouaguebe">
		<update tableName="security_deposit_templat">
			<column name="currency_id" valueComputed="(SELECT currency_id from crm_provider where id = 1)"></column>
			<where>template_name = 'DEFAULT_SD_TEMPLATE'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-10400_20221007" author="HichamHANINE">
    	<update tableName="security_deposit">
    	<column name="status" value="VALIDATED"/>
    	<where>status='NEW'</where>
    	</update>
    </changeSet>
	
	<changeSet id="#9811_10102022" author="Mbarek-Ay">
	<insert tableName="meveo_job_instance">
		<column name="id" valueSequenceNext="meveo_job_instance_seq" />
		<column name="version" valueNumeric="0" />
		<column name="disabled" valueNumeric="1" />
		<column name="created" valueDate="2022-10-10 15:04:19.913" />
		<column name="job_category" value="INVOICING" />
		<column name="job_template" value="InvoiceLinesMinimumJob" />
		<column name="code" value="Invoice_Lines_Minimum_Job" />
		<column name="creator" value="OPENCELL.ADMIN" />
		<column name="timerentity_id" valueNumeric="-1" />
		<column name="uuid" value="Invoice_Lines_Minimum_Job" />
		<column name="cf_values"
			value='{"waitingMillis":[{"long":0}],"nbRuns":[{"long":-1}]}' />
	  </insert>
    </changeSet>
    
    <changeSet id="#INTRD-10592_20221014" author="TarikFA.">
    	<update tableName="billing_accounting_code">
            <column name="description" value="General accounts payable"></column>
    		<where>code = '401000000'</where>
    	</update>
    </changeSet>

    <changeSet id="#INTRD-10587_20221014" author="TarikFA.">
    	<update tableName="ar_occ_template" >
			<column name="accounting_code_id" valueNumeric="null"></column>
			<where>id in (SELECT id from billing_accounting_code where code in ('120.121.21.4', '120.121.21.2', 'T3P9476'))</where>
		</update>
		<update tableName="billing_invoice_sub_cat" >
            <column name="accounting_code_id" value="null" />
			<where>id in (SELECT id from billing_accounting_code where code in ('120.121.21.4', '120.121.21.2', 'T3P9476'))</where>
		</update>
		<delete tableName="billing_accounting_code">
			<where>code in ('120.121.21.4', '120.121.21.2')</where>
		</delete>
		
		<update tableName="ar_occ_template" >
            <column name="accounting_code_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='411000000')" />
			<where>code = 'PAY_BATCH'</where>
		</update>
    </changeSet>
    
    <changeSet id="#INTRD-10541_20221017" author="TarikFA.">
    	<update tableName="billing_linked_invoices">
    		<column name="type" value="ADJUSTMENT" />
    	</update>
    </changeSet>

	<changeSet id="#INTRD-10572_20221014" author="HichamHANINE">
		<update tableName="crm_customer_category">
			<column name="tax_category_id" value="-3" />
			<where>id in (-1,-2)</where>
		</update>
    </changeSet>
    
   	<changeSet id="#INTRD-10572_20221018" author="HichamHANINE">
   		<update tableName="crm_customer_category">
			<column name="tax_category_id" value="-1" />
			<where>id in (-1,-2)</where>
		</update>
		<update tableName="billing_tax_mapping">
			<column name="tax_category_id" value="-1" />
			<where>tax_category_id = -3</where>
		</update>
		<update tableName="billing_billing_account">
			<column name="tax_category_id" value="-1" />
			<where>tax_category_id = -3</where>
		</update>
		<update tableName="billing_tax_category">			
			<column name="code" value="REGULAR1"/>        
			<where>id = -3</where>
		</update>
		<update tableName="billing_tax_category">			
			<column name="code" value="REGULAR"/>
            <column name="description_i18n" value='{"FRA":"Standard","ENG":"Regular"}'/>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="uuid" value="billing_tax_category_regular" />            
			<where>id = -1</where>
		</update>
		<delete tableName="billing_tax_category">
			<where>id = -3</where>
		</delete>
    </changeSet>

	<changeSet id="#INTRD-10692_20221019_ajd_occ_template" author="a.rouaguebe">
		<insert tableName="ar_occ_template">
			<column name="id" valueSequenceNext="ar_occ_template_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="applicationInitializer" />
			<column name="code" value="ADJ_SD" />
			<column name="description" value="Adjustment to refund security deposit" />
			<column name="occ_category" value="CREDIT" />
			<column name="accounting_code_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='411000000')" />
			<column name="contra_accounting_code_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='165000000')" />
			<column name="accounting_scheme_id" valueComputed="(SELECT id FROM ar_accounting_scheme WHERE code = 'Dual entry scheme')" />
			<column name="journal_id" valueComputed="(SELECT id FROM journal WHERE code = 'SAL')" />
		</insert>
	</changeSet>

	<changeSet id="#INTRD-10523_20221020" author="aelmalki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="2022-10-20 00:00:00.000" />
			<column name="job_category" value="ACCOUNTING" />
			<column name="job_template" value="AssignMatchingCodeToOldEntriesJob" />
			<column name="code" value="AssignMatchingCodeToOldEntriesJob" />
			<column name="creator" value="OPENCELL.ADMIN" />
			<column name="timerentity_id" valueNumeric="null" />
			<column name="uuid" value="AssignMatchingCodeToOldEntriesJob" />
		</insert>
	</changeSet>

	<changeSet id="#INTRD-10907_20221026" author="EBOURRAS">
		<insert tableName="billing_invoice_type_applies_to">
			<column name="invoice_type_id" value="-1"/>
			<column name="applies_to_id" value="-5"/>
		</insert>
	</changeSet>


	<changeSet id="#INTRD-10772_20221025_ajd_occ_template" author="e.bourras">
		<insert tableName="ar_occ_template">
			<column name="id" valueSequenceNext="ar_occ_template_seq" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="code" value="PAY_SD" />
			<column name="description" value="Security Deposit Payment" />
			<column name="occ_category" value="CREDIT" /><column name="manual_creation_enabled" value="0"/>
			<column name="journal_id" valueComputed="(SELECT id FROM journal where code = 'SAL')"/>
			<column name="manual_creation_enabled" value="0"/>
		</insert>
	</changeSet>
	
	<changeSet id="#INTRD-11124_20221102" author="HatimOUDAD">
		<update tableName="meveo_job_instance">
			<column name="disabled" value="0" />
			<where>code = 'AutoUpdateCurrentRateJob_Job'</where>
		</update>
    </changeSet>
    
    <changeSet id="#INTRD-11154_20221102" author="TarikFA.">
    	<update tableName="billing_accounting_article">
            <column name="accounting_code_id" value="-6" />
            <column name="invoice_type_id" value="-5" />
        	<column name="tax_class_id" value="-3"/>
        	<where> code = 'ADV-STD'</where>
    	</update>
    </changeSet>
    
    <changeSet id="#INTRD-9161_20221102" author="TarikFA.">
    	<update tableName="billing_invoice_type">
           <column name="description" value="Call for advance payment" />
        	<where> code = 'ADV'</where>
    	</update>
    </changeSet>
    
    <changeSet id="INTRD-11152_20221102" author="TarikFA.">
         <insert tableName="ar_occ_template">
			<column name="id" valueNumeric="-65" />
			<column name="version" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="INV_ADV" />
			<column name="description" value="Call for advance payment" />
		</insert>
		<update tableName="billing_invoice_type">
           <column name="occ_template_id"  valueComputed="(SELECT id FROM ar_occ_template WHERE code='INV_ADV')" />
			<column name="description" value="Call for advance payment" />
        	<where> code = 'ADV'</where>
    	</update>
	</changeSet>
	
	<changeSet id="#INTRD-11244_20221104" author="TarikFA.">
		<update tableName="ar_occ_template">
			<column name="occ_category" value="DEBIT" />
			<where> code = 'INV_ADV'</where>
		</update>
	</changeSet>
	
	<changeSet id="#INTRD-10199_20221010" author="TarikFA.">
		<update tableName="ar_occ_template" >
			<column name="accounting_code_id" valueNumeric="null"></column>
			<where>id = -50</where>
		</update>
		<delete tableName="billing_accounting_code">
			<where>code = 'T3P9476'</where>
		</delete>
	</changeSet>
	
	<changeSet id="#INTRD-11165_20221108" author="HatimOUDAD">
		<update tableName="billing_invoice_line">
			<column name="adjustment_status" value="NOT_ADJUSTED" />
			<where> adjustment_status is null</where>
		</update>
	</changeSet>

	<changeSet id="INTRD-11122_20221104" author="HichamELHALOUI">
		<insert tableName="meveo_script_instance_cat">
			<column name="id" valueNumeric="-3"/>
			<column name="version" valueNumeric="0"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="code" value="INVOICE_VALIDATION"/>
			<column name="description" value="Invoice validation"/>
			<column name="description_i18n" value='{"FR":"Validation de facture","EN":"Invoice validation"}'/>
		</insert>
		<insert tableName="meveo_script_instance_cat">
			<column name="id" valueNumeric="-4"/>
			<column name="version" valueNumeric="0"/>
			<column name="created" valueDate="${db.current.time}"/>
			<column name="code" value="BILLING_RUN_VALIDATION"/>
			<column name="description" value="Billing run validation"/>
			<column name="description_i18n"
					value='{"FR":"Validation de run de facturation","EN":"Billing run validation"}'/>
		</insert>
		<update tableName="meveo_script_instance_cat">
			<column name="description_i18n" value='{"FR":"Extraction de rapport","EN":"Report Extract"}'/>
			<where>code = 'REPORT_EXTRACT'</where>
		</update>
		<update tableName="meveo_script_instance_cat">
			<column name="description_i18n" value='{"FR":"Schéma comptable","EN":"Accounting schemes"}'/>
			<where>code = 'ACCOUNTING_SCHEMES'</where>
		</update>
		<update tableName="meveo_script_instance_cat">
			<column name="description_i18n" value='{"FR":"Action de recouvrement","EN":"Dunning action"}'/>
			<where>code = 'DUNNING_ACTION'</where>
		</update>


	</changeSet>

	<changeSet id="INTRD-11124_20221109" author="aelmalki">
		<insert tableName="meveo_timer">
			<column name="id" valueNumeric="-4" />
			<column name="version" valueNumeric="0" />
			<column name="sc_d_o_month" value="*" />
			<column name="sc_d_o_week" value="*" />
			<column name="sc_hour" value="0" />
			<column name="sc_min" value="0" />
			<column name="sc_month" value="*" />
			<column name="sc_sec" value="1" />
			<column name="sc_year" value="*" />
			<column name="code" value="Daily-midnight-start-of-day" />
			<column name="created" valueDate="2017-06-29 00:04:19.913" />
		</insert>
		<update tableName="meveo_job_instance">
			<column name="timerentity_id">-4</column>
			<where>code='AutoUpdateCurrentRateJob_Job'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-11328_20221110" author="aelmalki">
		<insert tableName="crm_custom_field_tmpl">
			<column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="cleanAppliedRateInvoice"/>
			<column name="applies_to" value="JobInstance_AutoUpdateCurrentRateJob"/>
			<column name="description" value="Clean Invoice applied rate"/>
			<column name="field_type" value="BOOLEAN"/>
			<column name="storage_type" value="SINGLE"/>
			<column name="value_required" value="0"/>
			<column name="default_value" value="0"/>
			<column name="creator" value="applicationInitializer"/>
			<column name="gui_position" value="tab:Configuration:0;field:0"/>
		</insert>

		<update tableName="meveo_job_instance">
			<column name="cf_values" value='{"cleanAppliedRateInvoice": [{"boolean": false}]}' />
			<where> code='AutoUpdateCurrentRateJob_Job'</where>
		</update>
	</changeSet>
    
    <changeSet id="#INTR-11598_20221116" author="TarikFA.">
        <update tableName="meveo_job_instance">
            <column name="code" value="AutoUpdateCurrentRateJob"/>
            <where>code = 'AutoUpdateCurrentRateJob_Job'</where>
        </update>
        <update tableName="meveo_job_instance">
            <column name="code" value="AutoRefundSecurityDepositJob"/>
            <where>code = 'AutoRefundSecurityDepositJob_Job'</where>
        </update>
    </changeSet>

	<changeSet id="#INTRD-11681_20221117" author="ebourras">
		<update tableName="ar_occ_template">
			<column name="description" value="Payment by security deposit" />
			<column name="accounting_code_id" valueComputed="(select id from public.billing_accounting_code where code = '411000000')"/>
			<column name="contra_accounting_code_id" valueComputed="(select id from public.billing_accounting_code where code = '165000000')"/>
			<column name="accounting_scheme_id" valueComputed="(select id from ar_accounting_scheme where code = 'Dual entry scheme')"/>
			<where>code = 'PAY_SD'</where>
		</update>
	</changeSet>
	<changeSet id="#INTRD-11503_20221116" author="aeljaouhari">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="INVOICING" />
			<column name="job_template" value="MassAdjustmentJob" />
			<column name="code" value="Mass_Adjustment" />
			<column name="description" value="Mass Adjustment Job" />
			<column name="creator" value="applicationInitializer" />
			<column name="uuid" value="Mass_Adjustment" />
		</insert>
	</changeSet>
	
	<changeSet id="#INTRD-11745_20221130" author="TarikFA.">
		<update tableName="billing_invoice_type">
			<column name="description" value="Manual adjustment"/>
			<where>code = 'ADJ'</where>
		</update>
		
		<insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-26" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ADJ_REF" />
            <column name="description" value="Refundable adjustment" />
            <column name="occ_category" value="CREDIT" />
			<column name="manual_creation_enabled" value="0"/>
            <column name="contra_accounting_code_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='701000000')" />
            <column name="contra_accounting_code2_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='445710000')" />
			<column name="accounting_scheme_id" valueComputed="(SELECT id FROM ar_accounting_scheme WHERE code='Invoice and Credit Note')" />
            <column name="account_code_client_side" value="701000000" />
    		<column name="journal_id" value="-1" />
    		<column name="accounting_code_id" value="-6" />
		</insert>
		
		<insert tableName="ar_occ_template">
            <column name="id" valueNumeric="-27" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ADJ_INV" />
            <column name="description" value="Adjustment on invoice" />
            <column name="occ_category" value="CREDIT" />
			<column name="manual_creation_enabled" value="0"/>
            <column name="contra_accounting_code_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='701000000')" />
            <column name="contra_accounting_code2_id" valueComputed="(SELECT id FROM billing_accounting_code WHERE code='445710000')" />
			<column name="accounting_scheme_id" valueComputed="(SELECT id FROM ar_accounting_scheme WHERE code='Invoice and Credit Note')" />
            <column name="account_code_client_side" value="701000000" />
    		<column name="journal_id" value="-1" />
    		<column name="accounting_code_id" value="-6" />
		</insert>
		
		<insert tableName="billing_invoice_type">
            <column name="id" valueNumeric="-7" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
			<column name="code" value='ADJ_REF' />
			<column name="description" value='Refundable adjustment' />
            <column name="invoice_sequence_id" valueComputed="(SELECT id from billing_seq_invoice where code = 'ADJ')" />
            <column name="occ_template_id" value="-26" />
            <column name="matching_auto" valueNumeric="0" />
            <column name="uuid" value="InvoiceType-ADJ-REF" />
            <column name="invoice_accountable" value="1" />
		</insert>
		
		<insert tableName="billing_invoice_type">
            <column name="id" valueNumeric="-8" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
			<column name="code" value='ADJ_INV' />
			<column name="description" value='Adjustment on invoice' />
            <column name="invoice_sequence_id" valueComputed="(SELECT id from billing_seq_invoice where code = 'ADJ')" />
            <column name="occ_template_id" value="-27" />
            <column name="matching_auto" valueNumeric="0" />
            <column name="uuid" value="InvoiceType-ADJ-INV" />
            <column name="invoice_accountable" value="1" />
		</insert>
		
		<insert tableName="billing_invoice_type_applies_to">
			<column name="invoice_type_id" valueNumeric="-8" />
			<column name="applies_to_id" valueNumeric="-1" />
		</insert>
	</changeSet>
	
	<changeSet id="INTRD_11783_20221201_compate_invoice_amount" author="a.rouaguebe">
    
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.CompareInvoiceAmount" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script;
            		public class CompareInvoiceAmount extends CompareInvoiceAmountScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
			<column name="description" value="Invoice amount will be compared to provided amount using the selected operator. Invoice must match this criteria to be valid."/>
			<column name="description_i18n" value='{"FR":"Le montant de la facture sera comparé au montant indiqué en utilisant l’opérateur sélectionné. La facture doit répondre à se critère pour être valide.","EN":"Invoice amount will be compared to provided amount using the selected operator. Invoice must match this criteria to be valid."}'/>
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='INVOICE_VALIDATION')" />
        </insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="withOrWithoutTax" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareInvoiceAmount')" />
			<column name="description_i18n" value='{"FR":"Montant à tester","EN":"Amount to test"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value="withoutTax" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="withoutTax|withTax" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="operator" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareInvoiceAmount')" />
			<column name="description_i18n" value='{"FR":"Operateur de comparaison","EN":"Comparison operator"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value=">" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="&lt;|&lt;=|=|!=|&gt;|&gt;=" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="value" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareInvoiceAmount')" />
			<column name="description_i18n" value='{"FR":"Valeur","EN":"Value"}'/>
			<column name="class_name" value="java.math.BigDecimal" />
			<column name="default_value" value="0" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
		</insert>
    </changeSet>

	<changeSet id="#INTRD-12024_20221202" author="aeljaouhari">
		<update tableName="billing_invoice_type">
			<column name="description" value="Security Deposit"/>
			<where>code = 'SECURITY_DEPOSIT'</where>
		</update>
		<update tableName="billing_invoice_type">
			<column name="description" value="Commercial order"/>
			<where>code = 'COMMERCIAL_ORDER'</where>
		</update>
		<update tableName="billing_invoice_type">
			<column name="description" value="Quote"/>
			<where>code = 'QUOTE'</where>
		</update>
		<delete tableName="billing_invoice_type">
			<where>code='DRAFT'</where>
		</delete>
	</changeSet>
	
	
	<changeSet id="INTRD_12001_20221205" author="TarikFA.">
    
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.CompareOfferAmountScript" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script;
            		public class CompareOfferAmount extends CompareOfferAmountScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
			<column name="description" value="Amount invoiced for each offer in the list will be compared to the provided value using the selected operator. For the invoice to be valid, tested amount must pass the test. If offer list is empty, then rule will always pass. Only offer actually present on invoice will be tested."/>
			<column name="description_i18n" value='{"FR":"Le montant facturé pour chacune des offres dans la liste sera comparé à la valeur indiquée, en utilisant l’opérateur sélectionné. 
			Pour que la facture soit valide, le montant testé doit passer le test. 
			Si la liste des offres est vide, alors la règle passera toujours. 
			Seule les offres effectivement présentes sur la facture seront testées.",
			"EN":"Amount invoiced for each offer in the list will be compared to the provided value using the selected operator. 
			For the invoice to be valid, tested amount must pass the test. 
			If offer list is empty, then rule will always pass. 
			Only offer actually present on invoice will be tested."}'/>
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='INVOICE_VALIDATION')" />
        </insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="offers" />
			<column name="description_i18n" value='{"FR":"Offres à vérifier","EN":"Offers to check"}'/>
			<column name="class_name" value="org.meveo.model.catalog.OfferTemplate" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="1" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferAmountScript')" />
		</insert>
		
		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="withOrWithoutTax" />
			<column name="description_i18n" value='{"FR":"Montant à tester","EN":"Amount to test"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value="withoutTax" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="withoutTax|withTax" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferAmountScript')" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="operator" />
			<column name="description_i18n" value='{"FR":"Operateur de comparaison","EN":"Comparison operator"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value=">" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="&lt;|&lt;=|=|!=|&gt;|&gt;=" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferAmountScript')" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="value" />
			<column name="description_i18n" value='{"FR":"Valeur","EN":"Value"}'/>
			<column name="class_name" value="java.math.BigDecimal" />
			<column name="default_value" value="0" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferAmountScript')" />
		</insert>
    </changeSet>
    
    <changeSet id="INTRD-12266_20221214" author="aeljaouhari">
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.validation.ValidateCreditCategoryScript" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script.validation;
            		public class ValidateCreditCategory extends ValidateCreditCategoryScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="The customer (customer account actually) credit category must not be in the provided list for the rule to pass.If customer credit category is in the list, the rule will fail.If credit category list is empty, then rule will always pass."/>
            <column name="description_i18n">
				<![CDATA[{"EN":"<p>The customer's (customer account actually) credit category must not be in the provided list for the rule to pass.</p><p>If customer's credit category is in the list, the rule will fail.</p><p>If credit category list is empty, then rule will always pass.</p>","FR":"<p>Le catégorie de crédit du client (customer account) ne doit pas être dans la liste fournie pour que la règle passe.</p><p>Si la catégorie de crédit du client est dans la liste, la règle va échouer.</p><p>Si la liste de catégories de crédit est vide, la règle passera toujours.</p>"}]]>
			</column>
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='INVOICE_VALIDATION')" />
        </insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="CheckCreditCategory" />
			<column name="description_i18n" value='{"FR":"Catégories de crédit interdites","EN":"Forbidden credit categories"}'/>
			<column name="class_name" value="org.meveo.model.payments.CreditCategory" />
			<column name="mandatory" valueNumeric="0" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="1" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.validation.ValidateCreditCategoryScript')" />
		</insert>
    </changeSet>

    <changeSet id="INTRD-12103_20221215_rebuild" author="HichamHANINE">
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.CompareOfferLinesAmountScript" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script;
            		public class CompareOfferLinesAmount extends CompareOfferLinesAmountScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
			<column name="description" value="Amount of each invoice line coming from offers in the list will be compared to the provided value using the selected operator.
For the invoice to be valid, all tested invoice lines must pass the test.
If offer list is empty, then rule will always pass.
Only offer actually present on invoice will be tested."/>
			<column name="description_i18n" value='{"FR":"Le montant de chaque ligne de facture provenant d’une offre de la liste sera comparé à la valeur indiquée, en utilisant l’opérateur sélectionné.
Pour que la facture soit valide, toutes les lignes de facture testées doivent passer le test.
Si la liste des offres est vide, alors la règle passera toujours.
Seule les offres effectivement présentes sur la facture seront testées.",
			"EN":"Amount of each invoice line coming from offers in the list will be compared to the provided value using the selected operator.
For the invoice to be valid, all tested invoice lines must pass the test.
If offer list is empty, then rule will always pass.
Only offer actually present on invoice will be tested."}'/>
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='INVOICE_VALIDATION')" />
        </insert>
		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="offers" />
			<column name="description_i18n" value='{"FR":"Offres à vérifier","EN":"Offers to check"}'/>
			<column name="class_name" value="org.meveo.model.catalog.OfferTemplate" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="1" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="withOrWithoutTax" />
			<column name="description_i18n" value='{"FR":"Montant à tester","EN":"Amount to test"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value="withoutTax" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="withoutTax|withTax" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')" />
		</insert>
		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="operator" />
			<column name="description_i18n" value='{"FR":"Operateur de comparaison","EN":"Comparison operator"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value=">" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="&lt;|&lt;=|=|!=|&gt;|&gt;=" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')" />
		</insert>
		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="value" />
			<column name="description_i18n" value='{"FR":"Valeur","EN":"Value"}'/>
			<column name="class_name" value="java.math.BigDecimal" />
			<column name="default_value" value="0" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')" />
		</insert>
    </changeSet>
    
    <changeSet id="INTRD-12598_20221227_rebuild" author="HichamHANINE">    	
	    <delete tableName="meveo_script_parameter">
	        <where>script_instance_id = (SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')</where>
	    </delete>
	    <delete tableName="meveo_script_instance">
	        <where>code = 'org.meveo.service.script.CompareOfferLinesAmountScript'</where>
	    </delete>
		
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.CompareOfferLinesAmountScript" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script;
            		public class CompareOfferLinesAmount extends CompareOfferLinesAmountScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
			<column name="description" value="Amount of each invoice line coming from offers in the list will be compared to the provided value using the selected operator.
For the invoice to be valid, all tested invoice lines must pass the test.
If offer list is empty, then rule will always pass.
Only offer actually present on invoice will be tested."/>
			<column name="description_i18n" value='{"FR":"Le montant de chaque ligne de facture provenant d’une offre de la liste sera comparé à la valeur indiquée, en utilisant l’opérateur sélectionné.
Pour que la facture soit valide, toutes les lignes de facture testées doivent passer le test.
Si la liste des offres est vide, alors la règle passera toujours.
Seule les offres effectivement présentes sur la facture seront testées.",
			"EN":"Amount of each invoice line coming from offers in the list will be compared to the provided value using the selected operator.
For the invoice to be valid, all tested invoice lines must pass the test.
If offer list is empty, then rule will always pass.
Only offer actually present on invoice will be tested."}'/>
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='INVOICE_VALIDATION')" />
        </insert>
		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="offers" />
			<column name="description_i18n" value='{"FR":"Offres à vérifier","EN":"Offers to check"}'/>
			<column name="class_name" value="org.meveo.model.catalog.OfferTemplate" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="1" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="withOrWithoutTax" />
			<column name="description_i18n" value='{"FR":"Montant à tester","EN":"Amount to test"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value="without tax" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="without tax|with tax" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')" />
		</insert>
		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="operator" />
			<column name="description_i18n" value='{"FR":"Operateur de comparaison","EN":"Comparison operator"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value=">" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="&lt;|≤|=|≠|&gt;|≥" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')" />
		</insert>
		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="value" />
			<column name="description_i18n" value='{"FR":"Valeur","EN":"Value"}'/>
			<column name="class_name" value="java.math.BigDecimal" />
			<column name="default_value" value="0" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.CompareOfferLinesAmountScript')" />
		</insert>
    </changeSet>
    
    <changeSet id="INTRD-12267_20221219" author="aeljaouhari">
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.validation.ValidateCustomerAge" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script.validation;
            		public class ValidateCustomerAge extends ValidateCustomerAgeScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="The invoice’s customer (Customer/Group, Customer Account/Payer, Billing account) age is compared to a provided number of days. Age is computed at invoice date. For the invoice to be valid, age must pass the test."/>
            <column name="description_i18n">
				<![CDATA[{"EN":"<p>The invoice’s customer (Customer/Group, Customer Account/Payer, Billing account) age is compared to a provided number of days.</p><p>Age is computed at invoice date.</p><p>For the invoice to be valid, age must pass the test.</p>","FR":"<p>L’âge du client (Customer/Groupe, Customer Account/Compte payeur, Billing account/Compte de facturation) est comparé au nombre de jours indiqué.</p><p>L'âge est calculé à la date de facture.</p><p>Pour que la facture soit valide, l'âge doit passer le test.</p>"}]]>
			</column>
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='INVOICE_VALIDATION')" />
        </insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="referenceDate" />
			<column name="description_i18n" value='{"FR":"Date à tester","EN":"Date to test"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="mandatory" valueNumeric="1" />
			<column name="default_value" value="Billling Account subscription" />
			<column name="allowed_values" value="Customer creation|Customer Account creation|Billing Account creation|Billing Account subscription" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.validation.ValidateCustomerAge')" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="operator" />
			<column name="description_i18n" value='{"FR":"Operateur de comparaison","EN":"Comparison operator"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value=">" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="&lt;|≤|=|≠|&gt;|≥" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.validation.ValidateCustomerAge')" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="age" />
			<column name="description_i18n" value='{"FR":"Âge en jour","EN":"Age in days"}'/>
			<column name="class_name" value="java.lang.Integer" />
			<column name="default_value" value="30" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.validation.ValidateCustomerAge')" />
		</insert>
    </changeSet>

	<changeSet id="#INTRD-12335_20221216" author="Bourras">
		<update tableName="billing_invoice_sub_cat">
			<column name="accounting_code_id" value="null"/>
		</update>
	</changeSet>
	
	<changeSet id="INTRD-12268_20221221" author="aeljaouhari">
        <insert tableName="meveo_script_instance">
        	<column name="id" valueSequenceNext="meveo_script_instance_seq" />
        	<column name="code" value="org.meveo.service.script.validation.ValidateSubscriptionAge" />
        	<column name="script">
        		<![CDATA[   package org.meveo.service.script.validation;
            		public class ValidateSubscriptionAge extends ValidateSubscriptionAgeScript {}]]>
        	</column>
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="src_type" value="JAVA" />
            <column name="description" value="The invoice’s subscriptions age in Opencell is compared to a provided number of days. Age is computed at invoice date. For the invoice to be valid, age must pass the test."/>
            <column name="description_i18n">
				<![CDATA[{"EN":"<p>The invoice’s subscriptions age in Opencell is compared to a provided number of days.</p><p>Age is computed at invoice date.</p><p>For the invoice to be valid, age must pass the test.</p>","FR":"<p><L’âge des souscriptions de la facture est comparé au nombre de jours indiqué.</p><p>L'âge est calculé à la date de facture.</p><p>Pour que la facture soit valide, l'âge doit passer le test.</p>"}]]>
			</column>
			<column name="script_instance_cat_id" valueComputed="(SELECT id FROM meveo_script_instance_cat WHERE code='INVOICE_VALIDATION')" />
        </insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="referenceDate" />
			<column name="description_i18n" value='{"FR":"Date à tester","EN":"Date to test"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="mandatory" valueNumeric="1" />
			<column name="default_value" value="Subscription date" />
			<column name="allowed_values" value="Subscription creation|Subscription date" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.validation.ValidateSubscriptionAge')" />
		</insert>
	
		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="operator" />
			<column name="description_i18n" value='{"FR":"Operateur de comparaison","EN":"Comparison operator"}'/>
			<column name="class_name" value="java.lang.String" />
			<column name="default_value" value=">" />
			<column name="mandatory" valueNumeric="1" />
			<column name="allowed_values" value="&lt;|≤|=|≠|&gt;|≥" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.validation.ValidateSubscriptionAge')" />
		</insert>

		<insert tableName="meveo_script_parameter">
			<column name="id" valueSequenceNext="meveo_script_parameter_seq" />
			<column name="version" valueNumeric="0" />
			<column name="code" value="age" />
			<column name="description_i18n" value='{"FR":"Âge en jour","EN":"Age in days"}'/>
			<column name="class_name" value="java.lang.Integer" />
			<column name="default_value" value="30" />
			<column name="mandatory" valueNumeric="1" />
			<column name="values_separator" value="\|" />
			<column name="collection" valueNumeric="0" />
			<column name="script_instance_id" valueComputed="(SELECT id FROM meveo_script_instance WHERE code='org.meveo.service.script.validation.ValidateSubscriptionAge')" />
		</insert>
    </changeSet>
	<changeSet id="#12569_20221222" author="HichamELHALOUI">
		<delete tableName="dwh_report_extract_params">
			<where> reportextract_id IN (-31, -32, -33, -34 )</where>
		</delete>
		<delete tableName="dwh_report_extract_execution">
	        <where>report_extract_id IN (-31, -32, -33, -34 )</where>
	    </delete>
		<delete tableName="dwh_report_extract">
	        <where>code IN ('KPIAgedBalanceReporting', 'KPICustomerRevenuReporting', 'KPICustomersPerDunningReport', 'KPICustomersPerOfferReport')</where>
	    </delete>
		<delete tableName="meveo_script_instance">
	        <where>code IN ('org.meveo.service.script.presale.KPIAgedBalanceReporting', 'org.meveo.service.script.presale.KPICustomerRevenuReporting', 'org.meveo.service.script.presale.KPICustomerPerDunningReporting', 'org.meveo.service.script.presale.KPICustomerPerOfferReporting')</where>
	    </delete>
	</changeSet>
	<changeSet id="#12573_20221223" author="HichamELHALOUI">
		<delete tableName="dwh_report_extract_params">
			<where> reportextract_id = -29</where>
		</delete>
	    <delete tableName="dwh_report_extract_execution">
	        <where>report_extract_id = -29</where>
	    </delete>
	    <delete tableName="dwh_report_extract">
	        <where>code = 'CustomersPerDunningReport'</where>
	    </delete>
		<delete tableName="meveo_script_instance">
	        <where>code = 'org.meveo.service.script.presale.CustomerPerDunningReporting'</where>
	    </delete>
	</changeSet>
	
	<changeSet id="#OUTRD-3_20221012-job" author="MohamedChaouki">
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq"  />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="updated" valueDate="${db.current.time}" />
			<column name="code" value="CDRtoEDR" />
			<column name="description" value="CDRtoEDR" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="MediationJobV2" />
			<column name="creator" value="opencell.admin" />
			<column name="updater" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
		</insert>
	</changeSet>
	<changeSet id="#OUTRD-3_20221006-scripts" author="MohamedChaouki">
		<!-- SCRIPTS -->
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.CdrFlatFileImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.commons.utils.ParamBeanFactory;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.model.rating.CDR;
import org.meveo.service.medina.impl.CDRService;

import java.io.*;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

public class CdrFlatFileImportScript extends Script {

	private static final String DATE_FORMAT_PATTERN = "yyyy-MM-dd'T'HH:mm:ssXXX";
	private final ParamBeanFactory paramBeanFactory = (ParamBeanFactory) getServiceInterface(ParamBeanFactory.class.getSimpleName());
	private final CDRService cdrService = (CDRService) getServiceInterface(CDRService.class.getSimpleName());

	public static boolean elementExisted(Map<String, String> context, String[] header, String[] body, String element) {
		return ArrayUtils.indexOf(header, context.get(element)) >= 0
				&& ArrayUtils.indexOf(header, context.get(element)) < body.length;
	}

	@Override
	public void execute(Map<String, Object> contextMethod) throws BusinessException {
		DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
		JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) contextMethod.get("JobExecutionResult");
		Map<String, String> context = (Map<String, String>) jobExecutionResult.getJobInstance().getCfValues().getValues().get("mapping");
		String pathFile = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get("pathFile");

		CDR cdr;
		String rootPathFile = getProviderRootDir() + File.separator + pathFile;
		File dir = new File(rootPathFile);

		File[] fileList = dir.listFiles();
		try {
			for(File fileInput : fileList) {
				File file = new File(fileInput.getAbsolutePath().replace("input", "reject") + ".rejected");
				if (!file.getParentFile().exists()) {
					file.getParentFile().mkdirs();
				}
				if (!file.exists()) {
					file.createNewFile();
				}
				FileWriter rejectFile = new FileWriter(fileInput.getAbsolutePath().replace("input", "reject") + ".rejected");
				FileReader fread = new FileReader(fileInput.getAbsolutePath());
				BufferedReader br = new BufferedReader(fread);
				String line = "";
				String splitBy = ";";
				String[] header = br.readLine().split(splitBy);
				while ((line = br.readLine()) != null) {
					cdr = new CDR();
					String[] body = line.split(splitBy);
					Date dateEvent = null;
					Date dateParam1 = null;
					Date dateParam2 = null;
					Date dateParam3 = null;
					Date dateParam4 = null;
					Date dateParam5 = null;
					boolean reject = false;
					try {
						dateEvent = elementExisted(context, header, body, "eventDate") && !body[ArrayUtils.indexOf(header, context.get("eventDate"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("eventDate"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("eventDate"))]) : null;
					} catch (ParseException e) {
						if (!reject)
							rejectFile.write(line + " => Incorrect format date for cdr " + context.get("eventDate") + " \n");
						reject = true;
					}
					String ac = elementExisted(context, header, body, "accessCode") && !body[ArrayUtils.indexOf(header, context.get("accessCode"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("accessCode"))] : null;
					BigDecimal quantity = elementExisted(context, header, body, "quantity") && !body[ArrayUtils.indexOf(header, context.get("quantity"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("quantity"))]) : null;
					String parameter1 = elementExisted(context, header, body, "parameter1") && !body[ArrayUtils.indexOf(header, context.get("parameter1"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter1"))] : null;
					String parameter2 = elementExisted(context, header, body, "parameter2") && !body[ArrayUtils.indexOf(header, context.get("parameter2"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter2"))] : null;
					String parameter3 = elementExisted(context, header, body, "parameter3") && !body[ArrayUtils.indexOf(header, context.get("parameter3"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter3"))] : null;
					String parameter4 = elementExisted(context, header, body, "parameter4") && !body[ArrayUtils.indexOf(header, context.get("parameter4"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter4"))] : null;
					String parameter5 = elementExisted(context, header, body, "parameter5") && !body[ArrayUtils.indexOf(header, context.get("parameter5"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter5"))] : null;
					String parameter6 = elementExisted(context, header, body, "parameter6") && !body[ArrayUtils.indexOf(header, context.get("parameter6"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter6"))] : null;
					String parameter7 = elementExisted(context, header, body, "parameter7") && !body[ArrayUtils.indexOf(header, context.get("parameter7"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter7"))] : null;
					String parameter8 = elementExisted(context, header, body, "parameter8") && !body[ArrayUtils.indexOf(header, context.get("parameter8"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter8"))] : null;
					String parameter9 = elementExisted(context, header, body, "parameter9") && !body[ArrayUtils.indexOf(header, context.get("parameter9"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter9"))] : null;
					try {
						dateParam1 = elementExisted(context, header, body, "dateParam1") && !body[ArrayUtils.indexOf(header, context.get("dateParam1"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam1"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam1"))]) : null;
					} catch (ParseException e) {
						if (!reject)
							rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam1") + " \n");
						reject = true;
					}
					try {
						dateParam2 = elementExisted(context, header, body, "dateParam2") && !body[ArrayUtils.indexOf(header, context.get("dateParam2"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam2"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam2"))]) : null;
					} catch (ParseException e) {
						if (!reject)
							rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam2") + " \n");
						reject = true;
					}
					try {
						dateParam3 = elementExisted(context, header, body, "dateParam3") && !body[ArrayUtils.indexOf(header, context.get("dateParam3"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam3"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam3"))]) : null;
					} catch (ParseException e) {
						if (!reject)
							rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam3") + " \n");
						reject = true;
					}
					try {
						dateParam4 = elementExisted(context, header, body, "dateParam4") && !body[ArrayUtils.indexOf(header, context.get("dateParam4"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam4"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam4"))]) : null;
					} catch (ParseException e) {
						if (!reject)
							rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam4") + " \n");
						reject = true;
					}
					try {
						dateParam5 = elementExisted(context, header, body, "dateParam5") && !body[ArrayUtils.indexOf(header, context.get("dateParam5"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam5"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam5"))]) : null;
					} catch (ParseException e) {
						if (!reject)
							rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam5") + " \n");
						reject = true;
					}

					BigDecimal decimalParam1 = elementExisted(context, header, body, "decimalParam1") && !body[ArrayUtils.indexOf(header, context.get("decimalParam1"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam1"))]) : null;
					BigDecimal decimalParam2 = elementExisted(context, header, body, "decimalParam2") && !body[ArrayUtils.indexOf(header, context.get("decimalParam2"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam2"))]) : null;
					BigDecimal decimalParam3 = elementExisted(context, header, body, "decimalParam3") && !body[ArrayUtils.indexOf(header, context.get("decimalParam3"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam3"))]) : null;
					BigDecimal decimalParam4 = elementExisted(context, header, body, "decimalParam4") && !body[ArrayUtils.indexOf(header, context.get("decimalParam4"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam4"))]) : null;
					BigDecimal decimalParam5 = elementExisted(context, header, body, "decimalParam5") && !body[ArrayUtils.indexOf(header, context.get("decimalParam5"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam5"))]) : null;

					cdr.setEventDate(dateEvent);
					cdr.setAccessCode(ac);
					cdr.setQuantity(quantity);
					cdr.setParameter1(parameter1);
					cdr.setParameter2(parameter2);
					cdr.setParameter3(parameter3);
					cdr.setParameter4(parameter4);
					cdr.setParameter5(parameter5);
					cdr.setParameter6(parameter6);
					cdr.setParameter7(parameter7);
					cdr.setParameter8(parameter8);
					cdr.setParameter9(parameter9);
					cdr.setDateParam1(dateParam1);
					cdr.setDateParam2(dateParam2);
					cdr.setDateParam3(dateParam3);
					cdr.setDateParam4(dateParam4);
					cdr.setDateParam5(dateParam5);
					cdr.setDecimalParam1(decimalParam1);
					cdr.setDecimalParam2(decimalParam2);
					cdr.setDecimalParam3(decimalParam3);
					cdr.setDecimalParam4(decimalParam4);
					cdr.setDecimalParam5(decimalParam5);
					if (!reject && cdr.getEventDate() != null && cdr.getQuantity() != null && cdr.getAccessCode() != null && cdr.getParameter1() != null)
						cdrService.create(cdr);
					else if (!reject) {
						validateCdr(line, cdr, context, rejectFile);
					}

				}
				rejectFile.close();
				br.close();
				fread.close();
				fileInput.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private void validateCdr(String line, CDR cdr, Map<String, String> context, FileWriter file) throws IOException {
		if (cdr.getEventDate() == null) file.write(line + " => " + context.get("eventDate") + " is required\n");
		else if (cdr.getQuantity() == null) file.write(line + " => " + context.get("quantity") + " is required\n");
		else if (cdr.getAccessCode() == null) file.write(line + " => " + context.get("accessCode") + " is required\n");
		else if (cdr.getParameter1() == null) file.write(line + " => " + context.get("parameter1") + " is required\n");

	}


	public String getProviderRootDir() {
		return paramBeanFactory.getDefaultChrootDir();
	}

}				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.CdrJsonImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.meveo.admin.exception.BusinessException;
import org.meveo.commons.utils.ParamBeanFactory;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.model.rating.CDR;
import org.meveo.service.medina.impl.CDRService;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;

public class CdrJsonImportScript extends Script {

    private static final String DATE_FORMAT_PATTERN = "yyyy-MM-dd'T'HH:mm:ssXXX";
    private final ParamBeanFactory paramBeanFactory = (ParamBeanFactory) getServiceInterface(ParamBeanFactory.class.getSimpleName());
    private final CDRService cdrService = (CDRService) getServiceInterface(CDRService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> contextMethod) throws BusinessException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        JSONParser parser = new JSONParser();
        JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) contextMethod.get("JobExecutionResult");
        Map<String, String> context = (Map<String, String>) jobExecutionResult.getJobInstance().getCfValues().getValues().get("mapping");
        String pathFile = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get("pathFile");
        CDR cdr;
        String rootPathFile = getProviderRootDir() + File.separator + pathFile;
        File dir = new File(rootPathFile);

        File[] fileList = dir.listFiles();
        try {
            for(File fileInput : fileList) {
            File file = new File(fileInput.getAbsolutePath().replace("input", "reject") + ".rejected");
            if (!file.getParentFile().exists()) {
                file.getParentFile().mkdirs();
            }
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter rejectFile = new FileWriter(fileInput.getAbsolutePath().replace("input", "reject") + ".rejected");
            FileReader fread = new FileReader(fileInput.getAbsolutePath());
            Object obj = parser.parse(fread);
            JSONArray subjects = (JSONArray) obj;
            Iterator iterator = subjects.iterator();
            while (iterator.hasNext()) {
                cdr = new CDR();
                JSONObject jsonObject = (JSONObject) iterator.next();

                Date dateEvent = null;
                Date dateParam1 = null;
                Date dateParam2 = null;
                Date dateParam3 = null;
                Date dateParam4 = null;
                Date dateParam5 = null;
                boolean reject = false;
                try {
                    dateEvent = StringUtils.isEmpty((String) jsonObject.get(context.get("eventDate"))) ? null : dateFormat.parse((String) jsonObject.get(context.get("eventDate")));
                } catch (ParseException e) {
                    if (!reject)
                        rejectFile.write(jsonObject + " => Incorrect format date for cdr " + context.get("eventDate") + " \n");
                    reject = true;
                }

                String ac = (String) jsonObject.get(context.get("accessCode"));
                BigDecimal quantity = new BigDecimal(String.valueOf(jsonObject.get(context.get("quantity"))));
                String parameter1 = (String) jsonObject.get(context.get("parameter1"));
                String parameter2 = (String) jsonObject.get(context.get("parameter2"));
                String parameter3 = (String) jsonObject.get(context.get("parameter3"));
                String parameter4 = (String) jsonObject.get(context.get("parameter4"));
                String parameter5 = (String) jsonObject.get(context.get("parameter5"));
                String parameter6 = (String) jsonObject.get(context.get("parameter6"));
                String parameter7 = (String) jsonObject.get(context.get("parameter7"));
                String parameter8 = (String) jsonObject.get(context.get("parameter8"));
                String parameter9 = (String) jsonObject.get(context.get("parameter9"));

                try {
                    dateParam1 = StringUtils.isEmpty((String) jsonObject.get(context.get("dateParam1"))) ? null : dateFormat.parse((String) jsonObject.get(context.get("dateParam1")));
                } catch (ParseException e) {
                    if (!reject)
                        rejectFile.write(jsonObject + " => Incorrect format date for cdr " + context.get("dateParam1") + " \n");
                    reject = true;
                }
                try {
                    dateParam2 = StringUtils.isEmpty((String) jsonObject.get(context.get("dateParam2"))) ? null : dateFormat.parse((String) jsonObject.get(context.get("dateParam2")));
                } catch (ParseException e) {
                    if (!reject)
                        rejectFile.write(jsonObject + " => Incorrect format date for cdr " + context.get("dateParam2") + " \n");
                    reject = true;
                }
                try {
                    dateParam3 = StringUtils.isEmpty((String) jsonObject.get(context.get("dateParam3"))) ? null : dateFormat.parse((String) jsonObject.get(context.get("dateParam3")));
                } catch (ParseException e) {
                    if (!reject)
                        rejectFile.write(jsonObject + " => Incorrect format date for cdr " + context.get("dateParam3") + " \n");
                    reject = true;
                }
                try {
                    dateParam4 = StringUtils.isEmpty((String) jsonObject.get(context.get("dateParam4"))) ? null : dateFormat.parse((String) jsonObject.get(context.get("dateParam4")));
                } catch (ParseException e) {
                    if (!reject)
                        rejectFile.write(jsonObject + " => Incorrect format date for cdr " + context.get("dateParam4") + " \n");
                    reject = true;
                }
                try {
                    dateParam5 = StringUtils.isEmpty((String) jsonObject.get(context.get("dateParam5"))) ? null : dateFormat.parse((String) jsonObject.get(context.get("dateParam5")));
                } catch (ParseException e) {
                    if (!reject)
                        rejectFile.write(jsonObject + " => Incorrect format date for cdr " + context.get("dateParam5") + " \n");
                    reject = true;
                }
                BigDecimal decimalParam1 = StringUtils.isEmpty((String) jsonObject.get(context.get("decimalParam1"))) ? null : new BigDecimal(String.valueOf(jsonObject.get(context.get("decimalParam1"))));
                BigDecimal decimalParam2 = StringUtils.isEmpty((String) jsonObject.get(context.get("decimalParam2"))) ? null : new BigDecimal(String.valueOf(jsonObject.get(context.get("decimalParam2"))));
                BigDecimal decimalParam3 = StringUtils.isEmpty((String) jsonObject.get(context.get("decimalParam3"))) ? null : new BigDecimal(String.valueOf(jsonObject.get(context.get("decimalParam3"))));
                BigDecimal decimalParam4 = StringUtils.isEmpty((String) jsonObject.get(context.get("decimalParam4"))) ? null : new BigDecimal(String.valueOf(jsonObject.get(context.get("decimalParam4"))));
                BigDecimal decimalParam5 = StringUtils.isEmpty((String) jsonObject.get(context.get("decimalParam5"))) ? null : new BigDecimal(String.valueOf(jsonObject.get(context.get("decimalParam5"))));

                String extraParam = String.valueOf(jsonObject);
                cdr.setEventDate(dateEvent);
                cdr.setAccessCode(ac);
                cdr.setQuantity(quantity);
                cdr.setParameter1(parameter1);
                cdr.setParameter2(parameter2);
                cdr.setParameter3(parameter3);
                cdr.setParameter4(parameter4);
                cdr.setParameter5(parameter5);
                cdr.setParameter6(parameter6);
                cdr.setParameter7(parameter7);
                cdr.setParameter8(parameter8);
                cdr.setParameter9(parameter9);
                cdr.setDateParam1(dateParam1);
                cdr.setDateParam2(dateParam2);
                cdr.setDateParam3(dateParam3);
                cdr.setDateParam4(dateParam4);
                cdr.setDateParam5(dateParam5);
                cdr.setDecimalParam1(decimalParam1);
                cdr.setDecimalParam2(decimalParam2);
                cdr.setDecimalParam3(decimalParam3);
                cdr.setDecimalParam4(decimalParam4);
                cdr.setDecimalParam5(decimalParam5);
                cdr.setExtraParameter(extraParam);
                if (!reject && cdr.getEventDate() != null && cdr.getQuantity() != null && cdr.getAccessCode() != null && cdr.getParameter1() != null)
                    cdrService.create(cdr);
                else if (!reject) {
                    validateCdr(jsonObject, cdr, context, rejectFile);
                }
            }
                rejectFile.close();
                fread.close();
                fileInput.delete();
            }
        }catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void validateCdr(JSONObject line, CDR cdr, Map<String, String> context, FileWriter file) throws IOException {
        if (cdr.getEventDate() == null) file.write(line + " => " + context.get("eventDate") + " is required\n");
        else if (cdr.getQuantity() == null) file.write(line + " => " + context.get("quantity") + " is required\n");
        else if (cdr.getAccessCode() == null) file.write(line + " => " + context.get("accessCode") + " is required\n");
        else if (cdr.getParameter1() == null) file.write(line + " => " + context.get("parameter1") + " is required\n");

    }

    public String getProviderRootDir() {
        return paramBeanFactory.getDefaultChrootDir();
    }
}
				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.CdrCsvImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.model.rating.CDR;
import org.meveo.service.medina.impl.CDRService;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

public class CdrMassImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "yyyy-MM-dd'T'HH:mm:ssXXX";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "CDR";
    private static final String ENTITY_NAME = "Cdr";
    private final CDRService cdrService = (CDRService) getServiceInterface(CDRService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked") Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                CdrActionEnum action = CdrActionEnum.CREATE;

                CDR cdrDto = validateAndGetCdr(action, recordMap);


                if (CdrActionEnum.CREATE.equals(action)) {
                    setCdrValues(recordMap, cdrDto);
                    cdrService.create(cdrDto);

                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private CDR validateAndGetCdr(CdrActionEnum action, Map<String, Object> recordMap) {
        CDR cdr = null;

        String ocDate = (String) recordMap.get("OC_CDR_DATE");
        if (ocDate.isEmpty()) {
            throw new ValidationException("OC_CDR_DATE is required");
        }
        String ocQantity = (String) recordMap.get("OC_QANTITY");
        if (ocQantity.isEmpty()) {
            throw new ValidationException("OC_QANTITY is required");
        }
        String ocAp = (String) recordMap.get("OC_AC");
        if (ocAp.isEmpty()) {
            throw new ValidationException("OC_AC is required");
        }
        String ocParametre1 = (String) recordMap.get("OC_PARAMETER_1");
        if (ocParametre1.isEmpty()) {
            throw new ValidationException("OC_PARAMETER_1 is required");
        }

        cdr = new CDR();

        return cdr;
    }

    private void setCdrValues(Map<String, Object> recordMap, CDR cdr) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);

        String OC_cdr_date = (String) recordMap.get("OC_CDR_DATE");
        String OC_quantity = (String) recordMap.get("OC_QANTITY");
        String OC_ac = (String) recordMap.get("OC_AC");
        Date cdrDate;
        try {
            cdrDate = StringUtils.isEmpty(OC_cdr_date) ? null : dateFormat.parse(OC_cdr_date);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect format date for cdr OC_CDR_DATE");
        }
        BigDecimal cdrQuantity = OC_quantity.isEmpty() ? null : new BigDecimal(OC_quantity);


        String OC_date_param_1 = (String) recordMap.get("OC_DATE_PARAM_1");
        String OC_date_param_2 = (String) recordMap.get("OC_DATE_PARAM_2");
        String OC_date_param_3 = (String) recordMap.get("OC_DATE_PARAM_3");
        String OC_date_param_4 = (String) recordMap.get("OC_DATE_PARAM_4");
        String OC_date_param_5 = (String) recordMap.get("OC_DATE_PARAM_5");
        Date cdrDateParam1;
        Date cdrDateParam2;
        Date cdrDateParam3;
        Date cdrDateParam4;
        Date cdrDateParam5;
        try {
            cdrDateParam1 = StringUtils.isEmpty(OC_date_param_1) ? null : dateFormat.parse(OC_date_param_1);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect format date for cdr OC_DATE_PARAM_1");
        }
        try {
            cdrDateParam2 = StringUtils.isEmpty(OC_date_param_2) ? null : dateFormat.parse(OC_date_param_2);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect format date for cdr OC_DATE_PARAM_2");
        }
        try {
            cdrDateParam3 = StringUtils.isEmpty(OC_date_param_3) ? null : dateFormat.parse(OC_date_param_3);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect format date for cdr OC_DATE_PARAM_3");
        }
        try {
            cdrDateParam4 = StringUtils.isEmpty(OC_date_param_4) ? null : dateFormat.parse(OC_date_param_4);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect format date for cdr OC_DATE_PARAM_4");
        }
        try {
            cdrDateParam5 = StringUtils.isEmpty(OC_date_param_5) ? null : dateFormat.parse(OC_date_param_5);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect format date for cdr OC_DATE_PARAM_5");
        }

        String OC_decimal_param_1 = (String) recordMap.get("OC_DECIMAL_PARAM_1");
        String OC_decimal_param_2 = (String) recordMap.get("OC_DECIMAL_PARAM_2");
        String OC_decimal_param_3 = (String) recordMap.get("OC_DECIMAL_PARAM_3");
        String OC_decimal_param_4 = (String) recordMap.get("OC_DECIMAL_PARAM_4");
        String OC_decimal_param_5 = (String) recordMap.get("OC_DECIMAL_PARAM_5");

        BigDecimal cdrDecimalParam1 = OC_decimal_param_1.isEmpty() ? null : new BigDecimal(OC_decimal_param_1);
        BigDecimal cdrDecimalParam2 = OC_decimal_param_2.isEmpty() ? null : new BigDecimal(OC_decimal_param_2);
        BigDecimal cdrDecimalParam3 = OC_decimal_param_3.isEmpty() ? null : new BigDecimal(OC_decimal_param_3);
        BigDecimal cdrDecimalParam4 = OC_decimal_param_4.isEmpty() ? null : new BigDecimal(OC_decimal_param_4);
        BigDecimal cdrDecimalParam5 = OC_decimal_param_5.isEmpty() ? null : new BigDecimal(OC_decimal_param_5);

        cdr.setEventDate(cdrDate);
        cdr.setQuantity(cdrQuantity);
        cdr.setAccessCode(OC_ac);

        cdr.setParameter1((String) recordMap.get("OC_PARAMETER_1"));
        cdr.setParameter2((String) recordMap.get("OC_PARAMETER_2"));
        cdr.setParameter3((String) recordMap.get("OC_PARAMETER_3"));
        cdr.setParameter4((String) recordMap.get("OC_PARAMETER_4"));
        cdr.setParameter5((String) recordMap.get("OC_PARAMETER_5"));
        cdr.setParameter6((String) recordMap.get("OC_PARAMETER_6"));
        cdr.setParameter7((String) recordMap.get("OC_PARAMETER_7"));
        cdr.setParameter8((String) recordMap.get("OC_PARAMETER_8"));
        cdr.setParameter9((String) recordMap.get("OC_PARAMETER_9"));

        cdr.setDateParam1(cdrDateParam1);
        cdr.setDateParam2(cdrDateParam2);
        cdr.setDateParam3(cdrDateParam3);
        cdr.setDateParam4(cdrDateParam4);
        cdr.setDateParam5(cdrDateParam5);

        cdr.setDecimalParam1(cdrDecimalParam1);
        cdr.setDecimalParam2(cdrDecimalParam2);
        cdr.setDecimalParam3(cdrDecimalParam3);
        cdr.setDecimalParam4(cdrDecimalParam4);
        cdr.setDecimalParam5(cdrDecimalParam5);

        cdr.setExtraParameter((String) recordMap.get("OC_EXTRA_PARAM"));

    }

    public enum CdrActionEnum {CREATE, UPDATE, SUSPEND, RESUME, ACTIVATE, TERMINATE}
}


				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
	</changeSet>
	<changeSet id="#OUTRD-3_20221006-jobs" author="MohamedChaouki">
		<!-- JOBS -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="CsvImportCDR" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "/imports/cdr/csv/input"}], "FlatFileProcessingJob_outputDir": [{"string": "/imports/cdr/csv/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "/imports/cdr/csv/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "/imports/cdr/csv/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n        xmlns=\"http://www.beanio.org/2012/03\"\r\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n    <stream name=\"record\" format=\"csv\">\r\n        <parser>\r\n            <property name=\"delimiter\" value=\";\" />\r\n            <property name=\"comments\" value=\"END\" />\r\n            <property name=\"multilineEnabled\" value=\"true\" />\r\n        </parser>\r\n  <record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n  <field name=\"OC_CDR_DATE\" ignore=\"true\"/>\r\n  <field name=\"OC_QANTITY\" ignore=\"true\"/>\r\n  <field name=\"OC_AC\" ignore=\"true\"/>\r\n  <field name=\"OC_PARAMETER_1\" ignore=\"true\"/>\r\n <field name=\"OC_PARAMETER_2\" ignore=\"true\"/>\r\n  <field name=\"OC_PARAMETER_3\" ignore=\"true\"/>\r\n <field name=\"OC_PARAMETER_4\" ignore=\"true\"/>\r\n   <field name=\"OC_PARAMETER_5\" ignore=\"true\"/>\r\n  <field name=\"OC_PARAMETER_6\" ignore=\"true\"/>\r\n  <field name=\"OC_PARAMETER_7\" ignore=\"true\"/>\r\n  <field name=\"OC_PARAMETER_8\" ignore=\"true\"/>\r\n   <field name=\"OC_PARAMETER_9\" ignore=\"true\"/>\r\n  <field name=\"OC_DATE_PARAM_1\" ignore=\"true\"/>\r\n   <field name=\"OC_DATE_PARAM_2\" ignore=\"true\"/>\r\n  <field name=\"OC_DATE_PARAM_3\" ignore=\"true\"/>\r\n   <field name=\"OC_DATE_PARAM_4\" ignore=\"true\"/>\r\n  <field name=\"OC_DATE_PARAM_5\" ignore=\"true\"/>\r\n  <field name=\"OC_DECIMAL_PARAM_1\" ignore=\"true\"/>\r\n  <field name=\"OC_DECIMAL_PARAM_2\" ignore=\"true\"/>\r\n   <field name=\"OC_DECIMAL_PARAM_3\" ignore=\"true\"/>\r\n   <field name=\"OC_DECIMAL_PARAM_4\" ignore=\"true\"/>\r\n   <field name=\"OC_DECIMAL_PARAM_5\" ignore=\"true\"/>\r\n  <field name=\"OC_EXTRA_PARAM\" ignore=\"true\"/>\r\n  </record>\r\n  <record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n  <field name=\"OC_CDR_DATE\" required=\"true\"/>\r\n  <field name=\"OC_QANTITY\" required=\"true\"/>\r\n  <field name=\"OC_AC\" required=\"true\"/>\r\n   <field name=\"OC_PARAMETER_1\"/>\r\n  <field name=\"OC_PARAMETER_2\"/>\r\n  <field name=\"OC_PARAMETER_3\" />\r\n   <field name=\"OC_PARAMETER_4\" />\r\n  <field name=\"OC_PARAMETER_5\" />\r\n  <field name=\"OC_PARAMETER_6\" />\r\n  <field name=\"OC_PARAMETER_7\" />\r\n <field name=\"OC_PARAMETER_8\" />\r\n <field name=\"OC_PARAMETER_9\" />\r\n  <field name=\"OC_DATE_PARAM_1\"/>\r\n  <field name=\"OC_DATE_PARAM_2\"/>\r\n <field name=\"OC_DATE_PARAM_3\" />\r\n  <field name=\"OC_DATE_PARAM_4\" />\r\n  <field name=\"OC_DATE_PARAM_5\" />\r\n   <field name=\"OC_DECIMAL_PARAM_1\"/>\r\n  <field name=\"OC_DECIMAL_PARAM_2\"/>\r\n <field name=\"OC_DECIMAL_PARAM_3\" />\r\n <field name=\"OC_DECIMAL_PARAM_4\" />\r\n  <field name=\"OC_DECIMAL_PARAM_5\" />\r\n  <field name=\"OC_EXTRA_PARAM\" />\r\n  </record>\r\n  </stream>\r\n  </beanio>\r\n"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.CdrCsvImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="now()" />
			<column name="updated" valueDate="null" />
			<column name="uuid" value="FlatFileImportCDR" />
			<column name="code" value="FlatFileImportCDR" />
			<column name="description" value="FlatFileImportCDR" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="ScriptingJob" />
			<column name="parametres" valueNumeric="null" />
			<column name="creator" value="opencell.admin" />
			<column name="updater" value="null" />
			<column name="timerentity_id" value="null" />
			<column name="cf_values">
				<![CDATA[
            		{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.CdrFlatFileImportScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
            	]]>
			</column>
		</insert>
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="now()" />
			<column name="updated" valueDate="null" />
			<column name="uuid" value="JsonImportCDR" />
			<column name="code" value="JsonImportCDR" />
			<column name="description" value="JsonImportCDR" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="ScriptingJob" />
			<column name="parametres" valueNumeric="null" />
			<column name="creator" value="opencell.admin" />
			<column name="updater" value="null" />
			<column name="timerentity_id" value="null" />
			<column name="cf_values">
				<![CDATA[
            		{"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.CdrJsonImportScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
            	]]>
			</column>
		</insert>

	</changeSet>
	<changeSet id="#OUTRD-3_20221006-custom-field" author="MohamedChaouki">
		<insert tableName="crm_custom_field_tmpl">
			<column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="pathFile"/>
			<column name="applies_to" value="JobInstance_ScriptingJob"/>
			<column name="description" value="pathFile"/>
			<column name="field_type" value="STRING"/>
			<column name="value_required" value="0"/>
			<column name="creator" value="applicationInitializer"/>
			<column name="versionable" value="0"/>
			<column name="storage_type" value="SINGLE"/>
			<column name="gui_position" value=""/>
			<column name="allow_edit" value="1"/>
			<column name="hide_on_new" value="0"/>
			<column name="inh_as_def_value" value="0"/>
			<column name="max_value" valueNumeric="256"/>
			<column name="cf_protectable" value="0"/>
		</insert>
		<insert tableName="crm_custom_field_tmpl">
			<column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="mapping"/>
			<column name="applies_to" value="JobInstance_ScriptingJob"/>
			<column name="description" value="mapping"/>
			<column name="field_type" value="STRING"/>
			<column name="value_required" value="0"/>
			<column name="creator" value="applicationInitializer"/>
			<column name="versionable" value="0"/>
			<column name="storage_type" value="MAP"/>
			<column name="gui_position" value=""/>
			<column name="allow_edit" value="1"/>
			<column name="hide_on_new" value="0"/>
			<column name="inh_as_def_value" value="0"/>
			<column name="mapkey_type" value="STRING"/>
			<column name="max_value" valueNumeric="256"/>
			<column name="cf_protectable" value="0"/>
		</insert>

	</changeSet>


<changeSet id="#OUTRD-49_20220913-scripts" author="HamzaBiadi">
		<!-- SCRIPTS -->
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.CustomerImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.CustomerApi;
import org.meveo.api.dto.account.CustomerDto;
import org.meveo.api.dto.account.NameDto;
import org.meveo.model.crm.Customer;
import org.meveo.model.crm.CustomerCategory;
import org.meveo.service.crm.impl.CustomerCategoryService;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.script.GenericMassImportScript;

import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class CustomerImportScript extends GenericMassImportScript {

    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "CUSTOMER";
    private static final String ENTITY_NAME = "Customer";

    public enum CustomerActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final CustomerCategoryService customerCategoryService = (CustomerCategoryService) getServiceInterface(
            "CustomerCategoryService");
    private final CustomerService customerService = (CustomerService) getServiceInterface("CustomerService");
    private final CustomerApi customerApi = (CustomerApi) getServiceInterface(CustomerApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(CustomerActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                CustomerActionEnum action = CustomerActionEnum.valueOf(ocAction);

                CustomerDto customerDto = validateAndGetCustomer(action, recordMap);

                if (CustomerActionEnum.DELETE.equals(action)) {
                    customerApi.remove(customerDto.getCode());
                } else {
                    setCustomerValues(recordMap, customerDto);
                    if (CustomerActionEnum.CREATE.equals(action)) {
                        Customer customer = customerApi.create(customerDto);

                        this.setCFValues(recordMap, customer, ENTITY_NAME);
                    } else if (CustomerActionEnum.UPDATE.equals(action)) {
                        customerApi.update(customerDto);
                    }

                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private CustomerDto validateAndGetCustomer(CustomerActionEnum action, Map<String, Object> recordMap) {
        CustomerDto customerDto;

        String customerCode = (String) recordMap.get("OC_CUSTOMER_CODE");
        if (customerCode.isEmpty()) {
            throw new ValidationException("customer_code is required");
        }
        Customer customer = customerService.findByCode(customerCode);

        // For update and delete : check if there is a record
        if (!CustomerActionEnum.CREATE.equals(action)) {
            if (customer == null) {
                throw new ValidationException("no customer found for customer_code: '" + customerCode + "'");
            }
            customerDto = customerApi.find(customerCode);
            // Create action : check if there is no record
        } else {
            customerDto = new CustomerDto();
            String ocCustomerCategory = (String) recordMap.get("OC_CU_CATEGORY");
            CustomerCategory customerCategory = customerCategoryService.findByCode(ocCustomerCategory);
            if (customerCategory == null) {
                throw new ValidationException("no customer category found for code: '" + ocCustomerCategory + "'");
            }
        }
        return customerDto;
    }

    private void setCustomerValues(Map<String, Object> recordMap, CustomerDto customerDto) {
        customerDto.setCode((String) recordMap.get("OC_CUSTOMER_CODE"));
        customerDto.setDescription((String) recordMap.get("OC_CUSTOMER_DESCRIPTION"));
        customerDto.setRegistrationNo((String) recordMap.get("OC_CU_REGISTRATION"));
        customerDto.setVatNo((String) recordMap.get("OC_CU_TVANUMBER"));
        customerDto.setSeller((String) recordMap.get("OC_CUSTOMER_SELLER"));
        customerDto.setCustomerCategory((String) recordMap.get("OC_CU_CATEGORY"));
        customerDto.setIsCompany(Objects.equals(recordMap.get("OC_CU_IS_COMPANY"), "X"));
        NameDto nameDto = new NameDto();
        nameDto.setTitle((String) recordMap.get("OC_CU_TITLE"));
        nameDto.setFirstName((String) recordMap.get("OC_CU_FIRST_NAME"));
        nameDto.setLastName((String) recordMap.get("OC_CU_LAST_NAME"));
        customerDto.setName(nameDto);
    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.CustomerAccountImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.CustomerAccountApi;
import org.meveo.api.dto.account.CustomerAccountDto;
import org.meveo.model.crm.Customer;
import org.meveo.model.payments.CustomerAccount;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.script.GenericMassImportScript;

import java.util.Map;
import java.util.stream.Stream;


public class CustomerAccountImportScript extends GenericMassImportScript {

    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "CUSTOMER_ACCOUNT";
    private static final String ENTITY_NAME = "CustomerAccount";

    public enum CustomerAccountActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final CustomerService customerService = (CustomerService) getServiceInterface("CustomerService");
    private final CustomerAccountApi customerAccountApi = (CustomerAccountApi) getServiceInterface(CustomerAccountApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(CustomerAccountActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                CustomerAccountActionEnum action = CustomerAccountActionEnum.valueOf(ocAction);

                CustomerAccountDto customerAccountDto = validateAndGetCustomerAccount(action, recordMap);

                if (CustomerAccountActionEnum.DELETE.equals(action)) {
                    customerAccountApi.remove(customerAccountDto.getCode());
                } else {
                    setCustomerAccountValues(recordMap, customerAccountDto);
                    if (CustomerAccountActionEnum.CREATE.equals(action)) {
                        CustomerAccount customerAccount = customerAccountApi.create(customerAccountDto);

                        this.setCFValues(recordMap, customerAccount, ENTITY_NAME);
                    } else if (CustomerAccountActionEnum.UPDATE.equals(action)) {
                        customerAccountApi.update(customerAccountDto);
                    }

                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private CustomerAccountDto validateAndGetCustomerAccount(CustomerAccountActionEnum action, Map<String, Object> recordMap) throws Exception {
        CustomerAccountDto customerAccountDto;

        String customerAccountCode = (String) recordMap.get("OC_CUSTOMERACCOUNT_CODE");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        String customerCode = (String) recordMap.get("OC_CUSTOMER_CODE");
        if (customerCode.isEmpty()) {
            throw new ValidationException("customer_code is required");
        }
        Customer customer = customerService.findByCode(customerCode);

        // For update and delete : check if there is a record
        if (!CustomerAccountActionEnum.CREATE.equals(action)) {
            if (customer == null) {
                throw new ValidationException("no customer found for customer_code: '" + customerCode + "'");
            }
            customerAccountDto = customerAccountApi.find(customerAccountCode, false);
            // Create action : check if there is no record
        } else {
            customerAccountDto = new CustomerAccountDto();
        }
        return customerAccountDto;
    }

    private void setCustomerAccountValues(Map<String, Object> recordMap, CustomerAccountDto customerAccountDto) {
        customerAccountDto.setCustomer((String) recordMap.get("OC_CUSTOMER_CODE"));
        customerAccountDto.setCode((String) recordMap.get("OC_CUSTOMERACCOUNT_CODE"));
        customerAccountDto.setCurrency((String) recordMap.get("OC_CUSTOMERACCOUNT_CURRENCY"));
        customerAccountDto.setDueDateDelayEL((String) recordMap.get("OC_CUSTOMERACCOUNT_PAYTERM"));
        customerAccountDto.setCreditCategory((String) recordMap.get("OC_CUSTOMERACCOUNT_CREDCAT"));
        customerAccountDto.setLanguage((String) recordMap.get("OC_CUSTOMERACCOUNT_LANG"));
    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.PaymentMethodImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.dto.account.BankCoordinatesDto;
import org.meveo.api.dto.payment.PaymentMethodDto;
import org.meveo.api.payment.PaymentMethodApi;
import org.meveo.model.payments.CreditCardTypeEnum;
import org.meveo.model.payments.PaymentMethod;
import org.meveo.model.payments.PaymentMethodEnum;
import org.meveo.service.payments.impl.PaymentMethodService;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class PaymentMethodImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "PAYMENT_METHOD";
    private static final String ENTITY_NAME = "PaymentMethod";

    public enum PaymentMethodActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface("PaymentMethodService");
    private final PaymentMethodApi paymentMethodApi = (PaymentMethodApi) getServiceInterface(PaymentMethodApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(PaymentMethodActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                PaymentMethodActionEnum action = PaymentMethodActionEnum.valueOf(ocAction);

                PaymentMethodDto paymentMethodDto = validateAndGetPaymentMethod(recordMap);


                if (action == PaymentMethodActionEnum.CREATE &&
                        PaymentMethodEnum.valueOf((String) recordMap.get("OC_PMT_TYPE")) != PaymentMethodEnum.CARD) {
                    setPaymentMethodValues(recordMap, paymentMethodDto);
                    Long paymentMethodId = paymentMethodApi.create(paymentMethodDto);
                    PaymentMethod paymentMethod = paymentMethodService.findById(paymentMethodId);
                    this.setCFValues(recordMap, paymentMethod, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private PaymentMethodDto validateAndGetPaymentMethod(Map<String, Object> recordMap) {
        PaymentMethodDto paymentMethodDto = new PaymentMethodDto();

        String customerAccountCode = (String) recordMap.get("OC_PMT_CA");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        return paymentMethodDto;
    }

    private void setPaymentMethodValues(Map<String, Object> recordMap, PaymentMethodDto paymentMethodDto) throws ParseException {
        PaymentMethodEnum ocPaymentMethodType = PaymentMethodEnum.valueOf((String) recordMap.get("OC_PMT_TYPE"));
        paymentMethodDto.setPaymentMethodType(ocPaymentMethodType);
        paymentMethodDto.setPreferred(Objects.equals(recordMap.get("OC_PMT_PREFERRED"), "X"));
        paymentMethodDto.setAlias((String) recordMap.get("OC_PMT_ALIAS"));
        paymentMethodDto.setCustomerAccountCode((String) recordMap.get("OC_PMT_CA"));
        if (!((String) recordMap.get("OC_PMT_cardType")).isEmpty()) {
            paymentMethodDto.setCardType(CreditCardTypeEnum.valueOf((String) recordMap.get("OC_PMT_cardType")));
        }
        if (!((String) recordMap.get("OC_PMT_monthExpiration")).isEmpty()) {
            paymentMethodDto.setMonthExpiration(Integer.parseInt((String) recordMap.get("OC_PMT_monthExpiration")));
        }
        if (!((String) recordMap.get("OC_PMT_yearExpiration")).isEmpty()) {
            paymentMethodDto.setYearExpiration(Integer.parseInt((String) recordMap.get("OC_PMT_yearExpiration")));
        }
        paymentMethodDto.setTokenId((String) recordMap.get("OC_PMT_tokenId"));
        paymentMethodDto.setCardNumber((String) recordMap.get("OC_PMT_cardNumber"));
        paymentMethodDto.setIssueNumber((String) recordMap.get("OC_PMT_issueNumber"));
        paymentMethodDto.setUserId((String) recordMap.get("OC_PMT_userId"));
        paymentMethodDto.setEmail((String) recordMap.get("OC_PMT_email"));
        if (!((String) recordMap.get("OC_PMT_referenceDocumentCode")).isEmpty()) {
            paymentMethodDto.setReferenceDocumentCode((String) recordMap.get("OC_PMT_referenceDocumentCode"));
        }

        if (ocPaymentMethodType == PaymentMethodEnum.DIRECTDEBIT) {
            BankCoordinatesDto bankCoordinatesDto = new BankCoordinatesDto();
            bankCoordinatesDto.setBankCode((String) recordMap.get("OC_PMT_bankCode"));
            bankCoordinatesDto.setBranchCode((String) recordMap.get("OC_PMT_branchCode"));
            bankCoordinatesDto.setAccountNumber((String) recordMap.get("OC_PMT_accountNumber"));
            bankCoordinatesDto.setKey((String) recordMap.get("OC_PMT_key"));
            bankCoordinatesDto.setIban((String) recordMap.get("OC_PMT_iban"));
            bankCoordinatesDto.setBic((String) recordMap.get("OC_PMT_bic"));
            bankCoordinatesDto.setAccountOwner((String) recordMap.get("OC_PMT_accountOwner"));
            bankCoordinatesDto.setBankName((String) recordMap.get("OC_PMT_bankName"));
            bankCoordinatesDto.setBankId((String) recordMap.get("OC_PMT_bankId"));
            bankCoordinatesDto.setIssuerNumber((String) recordMap.get("OC_PMT_issuerNumber"));
            bankCoordinatesDto.setIssuerName((String) recordMap.get("OC_PMT_issuerName"));
            bankCoordinatesDto.setIcs((String) recordMap.get("OC_PMT_ics"));
            paymentMethodDto.setBankCoordinates(bankCoordinatesDto);
        }

        paymentMethodDto.setMandateIdentification((String) recordMap.get("OC_PMT_mandateIdentification"));

        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        String ocPaymentMethodMandateDate = (String) recordMap.get("OC_PMT_mandateDate");
        Date mandateDate = StringUtils.isEmpty(ocPaymentMethodMandateDate) ? null : dateFormat.parse(ocPaymentMethodMandateDate);
        paymentMethodDto.setMandateDate(mandateDate);
    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.BillingAccountImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.BillingAccountApi;
import org.meveo.api.dto.account.AddressDto;
import org.meveo.api.dto.account.BillingAccountDto;
import org.meveo.api.dto.account.NameDto;
import org.meveo.model.billing.BillingAccount;
import org.meveo.service.script.GenericMassImportScript;

import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class BillingAccountImportScript extends GenericMassImportScript {

    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "BILLING_ACCOUNT";
    private static final String ENTITY_NAME = "BillingAccount";

    public enum BillingAccountActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final BillingAccountApi billingAccountApi = (BillingAccountApi) getServiceInterface(BillingAccountApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(BillingAccountActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                BillingAccountActionEnum action = BillingAccountActionEnum.valueOf(ocAction);

                BillingAccountDto billingAccountDto = validateAndGetBillingAccount(recordMap);

                if (BillingAccountActionEnum.CREATE.equals(action)) {
                    setBillingAccountValues(recordMap, billingAccountDto);
                    BillingAccount billingAccount = billingAccountApi.create(billingAccountDto);
                    this.setCFValues(recordMap, billingAccount, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private BillingAccountDto validateAndGetBillingAccount(Map<String, Object> recordMap) {
        BillingAccountDto billingAccountDto;

        String customerAccountCode = (String) recordMap.get("OC_CUSTOMERACCOUNT_CODE");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        String billingAccountCode = (String) recordMap.get("OC_BILLINGACCOUNT_CODE");
        if (billingAccountCode.isEmpty()) {
            throw new ValidationException("billing_account_code is required");
        }

        billingAccountDto = new BillingAccountDto();

        return billingAccountDto;
    }

    private void setBillingAccountValues(Map<String, Object> recordMap, BillingAccountDto billingAccountDto) {
        billingAccountDto.setCustomerAccount((String) recordMap.get("OC_CUSTOMERACCOUNT_CODE"));
        billingAccountDto.setCode((String) recordMap.get("OC_BILLINGACCOUNT_CODE"));
        billingAccountDto.setDescription((String) recordMap.get("OC_BILLINGACCOUNT_DESCRIPTION"));
        billingAccountDto.setBillingCycle((String) recordMap.get("OC_BILLINGACCOUNT_BC"));
        billingAccountDto.setCountry((String) recordMap.get("OC_BILLINGACCOUNT_COUNTRY"));
        billingAccountDto.setLanguage((String) recordMap.get("OC_BILLINGACCOUNT_LANGUAGE"));
        billingAccountDto.setTradingCurrency((String) recordMap.get("OC_BILLINGACCOUNT_CURRENCY"));
        billingAccountDto.setTaxCategoryCode((String) recordMap.get("OC_BILLINGACCOUNT_TAXCAT"));
        billingAccountDto.setRegistrationNo((String) recordMap.get("OC_BA_REGISTRATION"));
        billingAccountDto.setVatNo((String) recordMap.get("OC_BA_TVANUMBER"));

        NameDto name = new NameDto();
        name.setTitle((String) recordMap.get("OC_BA_TITLE"));
        name.setFirstName((String) recordMap.get("OC_BA_FNAME"));
        name.setLastName((String) recordMap.get("OC_BA_LNAME"));
        billingAccountDto.setName(name);

        billingAccountDto.setIsCompany(Objects.equals(recordMap.get("OC_BA_ORGANIZATION"), "X"));
        billingAccountDto.setElectronicBilling(Objects.equals(recordMap.get("OC_BA_EBILL"), "X"));
        billingAccountDto.setEmail((String) recordMap.get("OC_BA_EBILLEMAIL"));
        billingAccountDto.setCcedEmails((String) recordMap.get("OC_BA_EBILLEMAILS"));

        AddressDto addressDto = new AddressDto();
        addressDto.setAddress1((String) recordMap.get("OC_BA_ADDRESS"));
        addressDto.setZipCode((String) recordMap.get("OC_BA_ZIPCODE"));
        addressDto.setCity((String) recordMap.get("OC_BA_CITY"));
        addressDto.setState((String) recordMap.get("OC_BA_STATE"));
        addressDto.setCountry((String) recordMap.get("OC_BA_COUNTRY"));
        billingAccountDto.setAddress(addressDto);
    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.UserAccountImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.UserAccountApi;
import org.meveo.api.dto.account.NameDto;
import org.meveo.api.dto.account.UserAccountDto;
import org.meveo.model.billing.UserAccount;

import java.text.ParseException;
import java.util.Map;
import java.util.stream.Stream;


public class UserAccountImportScript extends GenericMassImportScript {

    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "USER_ACCOUNT";
    private static final String ENTITY_NAME = "UserAccount";

    public enum UserAccountActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final UserAccountApi userAccountApi = (UserAccountApi) getServiceInterface(UserAccountApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(UserAccountActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                UserAccountActionEnum action = UserAccountActionEnum.valueOf(OC_ACTION);

                UserAccountDto userAccountDto = validateAndGetCustomer(action, recordMap);

                if (UserAccountActionEnum.CREATE.equals(action)) {
                    setAccessValues(recordMap, userAccountDto);
                    UserAccount userAccount = userAccountApi.create(userAccountDto);
                    this.setCFValues(recordMap, userAccount, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private UserAccountDto validateAndGetCustomer(UserAccountActionEnum action, Map<String, Object> recordMap) throws Exception {
        UserAccountDto userAccountDto = null;

        String billingAccountCode = (String) recordMap.get("OC_BILLINGACCOUNT_CODE");
        if (billingAccountCode.isEmpty()) {
            throw new ValidationException("billing_account_code is required");
        }

        String userAccountCode = (String) recordMap.get("OC_USERACCOUNT_CODE");
        if (userAccountCode.isEmpty()) {
            throw new ValidationException("user_account_code is required");
        }

        userAccountDto = new UserAccountDto();

        return userAccountDto;
    }

    private void setAccessValues(Map<String, Object> recordMap, UserAccountDto userAccountDto) throws ParseException {
        userAccountDto.setBillingAccount((String) recordMap.get("OC_BILLINGACCOUNT_CODE"));
        userAccountDto.setCode((String) recordMap.get("OC_USERACCOUNT_CODE"));
      	String ocParentUACode = (String) recordMap.get("OC_PARENT_UA_CODE");
        if(!ocParentUACode.isEmpty()) {
            userAccountDto.setParentUserAccountCode(ocParentUACode);
        }
        userAccountDto.setDescription((String) recordMap.get("OC_USERACCOUNT_ DESCRIPTION"));
        userAccountDto.setRegistrationNo((String) recordMap.get("OC_UA_REGISTRATION"));
        userAccountDto.setVatNo((String) recordMap.get("OC_UA_TVANUMBER"));

        NameDto name = new NameDto();
        name.setTitle((String) recordMap.get("OC_UA_TITLE"));
        name.setFirstName((String) recordMap.get("OC_UA_FNAME"));
        name.setLastName((String) recordMap.get("OC_UA_LNAME"));
        userAccountDto.setName(name);

        userAccountDto.setIsCompany((String) recordMap.get("OC_UA_ORGANIZATION") == "X");
    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
		<!-- Job notification script -->
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.CustomerJobNotification" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.joda.time.DateTime;
import org.meveo.admin.exception.BusinessException;
import org.meveo.api.UserApi;
import org.meveo.api.dto.CustomFieldDto;
import org.meveo.api.dto.CustomFieldsDto;
import org.meveo.api.dto.job.JobInstanceInfoDto;
import org.meveo.api.job.JobApi;
import org.meveo.model.communication.email.EmailTemplate;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.service.communication.impl.EmailSender;
import org.meveo.service.communication.impl.EmailTemplateService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.meveo.service.base.ValueExpressionWrapper.evaluateExpression;

public class CustomerJobNotification extends Script {
    private static final String USER_CODE = "user";
    private static final String FROM_EMAIL = "noreply@itnewvision.oc-sb.eu";

    private static final String MASS_IMPORT_SUCCESS_EMAIL = "MASS_IMPORT_SUCCESS_EMAIL";
    private static final String MASS_IMPORT_FAILURE_EMAIL = "MASS_IMPORT_FAILURE_EMAIL";
    private static final String MASS_IMPORT_ISSUES_EMAIL = "MASS_IMPORT_ISSUES_EMAIL";

    private static final String CUSTOMER_JOB_CODE = "massImportCustomerJob";
    private static final String CUSTOMER_ACCOUNT_JOB_CODE = "massImportCustomerAccountJob";
    private static final String PAYMENT_METHOD_JOB_CODE = "massImportPaymentMethodJob";
    private static final String BILLING_ACCOUNT_JOB_CODE = "massImportBillingAccountJob";
    private static final String USER_ACCOUNT_JOB_CODE = "massImportUserAccountJob";

    private final transient JobApi jobApi = (JobApi) getServiceInterface(JobApi.class.getSimpleName());
    private final transient UserApi userApi = (UserApi) getServiceInterface(UserApi.class.getSimpleName());

    private final transient EmailSender emailSender = (EmailSender) getServiceInterface(EmailSender.class.getSimpleName());
    private final transient EmailTemplateService emailTemplateService = (EmailTemplateService) getServiceInterface(EmailTemplateService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        try {
            String category = (String) methodContext.get("category");
            JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) methodContext.get("entityOrEvent");
            JobResultStatusEnum jobStatus = getJobResultStatus(jobExecutionResult);
            String userName = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE);

            if (category == null || !category.equals("customer") || userName == null) return;
            executeNextJob(jobExecutionResult);

            // if there are no rows to process, we don't send a notification
            if(jobExecutionResult.getNbItemsToProcess() == 0) return;

            String subject;
            String contentHtml;
            Map<Object, Object> params = new HashMap<>();
            EmailTemplate emailTemplate;

            switch (jobStatus) {
                case SUCCESS:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_SUCCESS_EMAIL);
                    DateTime startDateTime = new DateTime(jobExecutionResult.getStartDate());
                    params.put("date", startDateTime.toLocalDate());
                    params.put("time", startDateTime.toLocalTime());
                    params.put("job", jobExecutionResult.getJobInstance().getCode());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                case FAILURE:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_FAILURE_EMAIL);
                    params.put("job", jobExecutionResult.getJobInstance().getCode());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                default:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_ISSUES_EMAIL);
                    params.put("job", jobExecutionResult.getJobInstance().getCode());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
            }

            List<String> toEmails = List.of(userApi.find(userName).getEmail());
            emailSender.send(FROM_EMAIL, null, toEmails, subject, null, contentHtml);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void executeNextJob(JobExecutionResultImpl jobExecutionResult) {
        String nextJobCode;
        switch (jobExecutionResult.getJobInstance().getCode()) {
            case CUSTOMER_JOB_CODE:
                nextJobCode = CUSTOMER_ACCOUNT_JOB_CODE;
                break;
            case CUSTOMER_ACCOUNT_JOB_CODE:
                nextJobCode = PAYMENT_METHOD_JOB_CODE;
                break;
            case PAYMENT_METHOD_JOB_CODE:
                nextJobCode = BILLING_ACCOUNT_JOB_CODE;
                break;
            case BILLING_ACCOUNT_JOB_CODE:
                nextJobCode = USER_ACCOUNT_JOB_CODE;
                break;
            default:
                return;
        }
        JobInstanceInfoDto jobInstanceInfoDto = new JobInstanceInfoDto();
        jobInstanceInfoDto.setCode(nextJobCode);
        CustomFieldsDto customFields = new CustomFieldsDto();
        CustomFieldDto customFieldDto = new CustomFieldDto();
        customFieldDto.setCode(USER_CODE);
        customFieldDto.setStringValue((String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE));
        customFields.setCustomField(List.of(customFieldDto));
        jobInstanceInfoDto.setCustomFields(customFields);

        jobApi.executeJob(jobInstanceInfoDto);
    }

    private JobResultStatusEnum getJobResultStatus(JobExecutionResultImpl jobExecutionResult) {
        if(jobExecutionResult.getNbItemsToProcess() == 0)
            return JobResultStatusEnum.NULL;
        else if (jobExecutionResult.getNbItemsProcessedWithError() + 1 == jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.FAILURE;
        else if(jobExecutionResult.getNbItemsCorrectlyProcessed() < jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.PARTIAL_SUCCESS;
        else return JobResultStatusEnum.SUCCESS;
    }

    private enum JobResultStatusEnum {
        SUCCESS,
        FAILURE,
        PARTIAL_SUCCESS,
        NULL
    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
	</changeSet>

	<changeSet id="#OUTRD-49_20220913" author="HamzaBiadi">
		<insert tableName="crm_custom_field_tmpl">
			<column name="id" valueSequenceNext="crm_custom_fld_tmp_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="user"/>
			<column name="description" value="User"/>
			<column name="field_type" value="STRING"/>
			<column name="value_required" value="0"/>
			<column name="creator" value="opencell.admin"/>
			<column name="versionable" value="0"/>
			<column name="storage_type" value="SINGLE"/>
			<column name="trigger_end_period_event" value="0"/>
			<column name="applies_to" value="JobInstance_FlatFileProcessingJob"/>
			<column name="allow_edit" value="1"/>
			<column name="max_value" value="50"/>
			<column name="hide_on_new" value="0"/>
			<column name="inh_as_def_value" value="0"/>
			<column name="gui_position" value="tab:Configuration:1;fieldGroup:Execution configuration:0;field:3"/>
			<column name="cf_protectable" value="0"/>
		</insert>
		<!-- CUSTOMER -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportCustomerJob" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "/imports/massImport/customer/input"}], "FlatFileProcessingJob_outputDir": [{"string": "/imports/massImport/customer/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "/imports/massImport/customer/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "/imports/massImport/customer/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n        xmlns=\"http://www.beanio.org/2012/03\"\r\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n    <stream name=\"record\" format=\"csv\">\r\n        <parser>\r\n            <property name=\"delimiter\" value=\";\" />\r\n            <property name=\"comments\" value=\"END\" />\r\n            <property name=\"multilineEnabled\" value=\"true\" />\r\n        </parser>\r\n        <record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n            <field name=\"OC_ACTION\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMER_CODE\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMER_DESCRIPTION\" ignore=\"true\"/>\r\n            <field name=\"OC_CU_REGISTRATION\" ignore=\"true\"/>\r\n            <field name=\"OC_CU_TVANUMBER\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMER_SELLER\" ignore=\"true\"/>\r\n            <field name=\"OC_CU_CATEGORY\" ignore=\"true\"/>\r\n            <field name=\"OC_CU_IS_COMPANY\" ignore=\"true\"/>\r\n            <field name=\"OC_CU_TITLE\" ignore=\"true\"/>\r\n            <field name=\"OC_CU_FIRST_NAME\" ignore=\"true\"/>\r\n            <field name=\"OC_CU_LAST_NAME\" ignore=\"true\"/>\r\n        </record>\r\n        <record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" required=\"true\"/>\r\n            <field name=\"OC_ACTION\" required=\"true\"/>\r\n            <field name=\"OC_CUSTOMER_CODE\" required=\"true\"/>\r\n            <field name=\"OC_CUSTOMER_DESCRIPTION\"/>\r\n            <field name=\"OC_CU_REGISTRATION\"/>\r\n            <field name=\"OC_CU_TVANUMBER\" />\r\n            <field name=\"OC_CUSTOMER_SELLER\" />\r\n            <field name=\"OC_CU_CATEGORY\" />\r\n            <field name=\"OC_CU_IS_COMPANY\" />\r\n            <field name=\"OC_CU_TITLE\" />\r\n            <field name=\"OC_CU_FIRST_NAME\" />\r\n            <field name=\"OC_CU_LAST_NAME\" />\r\n            <field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n        </record>\r\n    </stream>\r\n</beanio>\r\n"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.CustomerImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>
		<!-- CUSTOMER_ACCOUNT -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportCustomerAccountJob" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "/imports/massImport/customerAccount/input"}], "FlatFileProcessingJob_outputDir": [{"string": "/imports/massImport/customerAccount/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "/imports/massImport/customerAccount/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "/imports/massImport/customerAccount/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n        xmlns=\"http://www.beanio.org/2012/03\"\r\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n    <stream name=\"record\" format=\"csv\">\r\n        <parser>\r\n            <property name=\"delimiter\" value=\";\" />\r\n            <property name=\"comments\" value=\"END\" />\r\n            <property name=\"multilineEnabled\" value=\"true\" />\r\n        </parser>\r\n        <record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n            <field name=\"OC_ACTION\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMER_CODE\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_CODE\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_CURRENCY\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_PAYTERM\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_CREDCAT\" ignore=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_LANG\" ignore=\"true\"/>\r\n        </record>\r\n        <record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" required=\"true\"/>\r\n            <field name=\"OC_ACTION\" required=\"true\"/>\r\n            <field name=\"OC_CUSTOMER_CODE\" required=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_CODE\" required=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_CURRENCY\" required=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_PAYTERM\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_CREDCAT\" required=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_LANG\" required=\"true\"/>\r\n            <field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n        </record>\r\n    </stream>\r\n</beanio>"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.CustomerAccountImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>
		<!--	PAYMENT_METHOD	-->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportPaymentMethodJob" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "/imports/massImport/paymentMethod/input"}], "FlatFileProcessingJob_outputDir": [{"string": "/imports/massImport/paymentMethod/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "/imports/massImport/paymentMethod/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "/imports/massImport/paymentMethod/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n        xmlns=\"http://www.beanio.org/2012/03\"\r\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n    <stream name=\"record\" format=\"csv\">\r\n        <parser>\r\n            <property name=\"delimiter\" value=\";\"/>\r\n            <property name=\"comments\" value=\"END\"/>\r\n            <property name=\"multilineEnabled\" value=\"true\"/>\r\n        </parser>\r\n        <record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n            <field name=\"OC_ACTION\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_TYPE\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_PREFERRED\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_ALIAS\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_CA\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_cardType\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_monthExpiration\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_yearExpiration\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_tokenId\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_cardNumber\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_issueNumber\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_userId\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_email\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_referenceDocumentCode\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_bankCode\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_branchCode\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_accountNumber\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_key\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_iban\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_bic\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_accountOwner\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_bankName\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_bankId\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_issuerNumber\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_issuerName\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_ics\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_mandateIdentification\" ignore=\"true\"/>\r\n            <field name=\"OC_PMT_mandateDate\" ignore=\"true\"/>\r\n        </record>\r\n        <record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" required=\"true\"/>\r\n            <field name=\"OC_ACTION\" required=\"true\"/>\r\n            <field name=\"OC_PMT_TYPE\" required=\"true\"/>\r\n            <field name=\"OC_PMT_PREFERRED\"/>\r\n            <field name=\"OC_PMT_ALIAS\"/>\r\n            <field name=\"OC_PMT_CA\"/>\r\n            <field name=\"OC_PMT_cardType\"/>\r\n            <field name=\"OC_PMT_monthExpiration\"/>\r\n            <field name=\"OC_PMT_yearExpiration\"/>\r\n            <field name=\"OC_PMT_tokenId\"/>\r\n            <field name=\"OC_PMT_cardNumber\"/>\r\n            <field name=\"OC_PMT_issueNumber\"/>\r\n            <field name=\"OC_PMT_userId\"/>\r\n            <field name=\"OC_PMT_email\"/>\r\n            <field name=\"OC_PMT_referenceDocumentCode\"/>\r\n            <field name=\"OC_PMT_bankCode\" />\r\n            <field name=\"OC_PMT_branchCode\" />\r\n            <field name=\"OC_PMT_accountNumber\" />\r\n            <field name=\"OC_PMT_key\" />\r\n            <field name=\"OC_PMT_iban\" />\r\n            <field name=\"OC_PMT_bic\" />\r\n            <field name=\"OC_PMT_accountOwner\"/>\r\n            <field name=\"OC_PMT_bankName\"/>\r\n            <field name=\"OC_PMT_bankId\"/>\r\n            <field name=\"OC_PMT_issuerNumber\"/>\r\n            <field name=\"OC_PMT_issuerName\"/>\r\n            <field name=\"OC_PMT_ics\"/>\r\n            <field name=\"OC_PMT_mandateIdentification\"/>\r\n            <field name=\"OC_PMT_mandateDate\"/>\r\n            <field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n        </record>\r\n    </stream>\r\n</beanio>\r\n"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.PaymentMethodImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>
		<!-- BILLING_ACCOUNT -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportBillingAccountJob" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "/imports/massImport/billingAccount/input"}], "FlatFileProcessingJob_outputDir": [{"string": "/imports/massImport/billingAccount/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "/imports/massImport/billingAccount/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "/imports/massImport/billingAccount/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n        xmlns=\"http://www.beanio.org/2012/03\"\r\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n    <stream name=\"record\" format=\"csv\">\r\n        <parser>\r\n            <property name=\"delimiter\" value=\";\"/>\r\n            <property name=\"comments\" value=\"END\"/>\r\n            <property name=\"multilineEnabled\" value=\"true\"/>\r\n        </parser>\r\n        <record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" ignore=\"true\" />\r\n            <field name=\"OC_ACTION\" ignore=\"true\" />\r\n            <field name=\"OC_CUSTOMERACCOUNT_CODE\" ignore=\"true\" />\r\n            <field name=\"OC_BILLINGACCOUNT_CODE\" ignore=\"true\" />\r\n            <field name=\"OC_BILLINGACCOUNT_DESCRIPTION\" ignore=\"true\" />\r\n            <field name=\"OC_BILLINGACCOUNT_BC\" ignore=\"true\" />\r\n            <field name=\"OC_BILLINGACCOUNT_COUNTRY\" ignore=\"true\" />\r\n            <field name=\"OC_BILLINGACCOUNT_LANGUAGE\" ignore=\"true\" />\r\n            <field name=\"OC_BILLINGACCOUNT_CURRENCY\" ignore=\"true\" />\r\n            <field name=\"OC_BILLINGACCOUNT_TAXCAT\" ignore=\"true\" />\r\n            <field name=\"OC_BA_DATE\" ignore=\"true\" />\r\n            <field name=\"OC_BA_REGISTRATION\" ignore=\"true\" />\r\n            <field name=\"OC_BA_TVANUMBER\" ignore=\"true\" />\r\n            <field name=\"OC_BA_TITLE\" ignore=\"true\" />\r\n            <field name=\"OC_BA_FNAME\" ignore=\"true\" />\r\n            <field name=\"OC_BA_LNAME\" ignore=\"true\" />\r\n            <field name=\"OC_BA_ORGANIZATION\" ignore=\"true\" />\r\n            <field name=\"OC_BA_EBILL\" ignore=\"true\" />\r\n            <field name=\"OC_BA_EBILLEMAIL\" ignore=\"true\" />\r\n            <field name=\"OC_BA_EBILLEMAILS\" ignore=\"true\" />\r\n            <field name=\"OC_BA_ADDRESS\" ignore=\"true\" />\r\n            <field name=\"OC_BA_ZIPCODE\" ignore=\"true\" />\r\n            <field name=\"OC_BA_CITY\" ignore=\"true\" />\r\n            <field name=\"OC_BA_STATE\" ignore=\"true\" />\r\n            <field name=\"OC_BA_COUNTRY\" ignore=\"true\" />\r\n        </record>\r\n        <record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" required=\"true\"/>\r\n            <field name=\"OC_ACTION\" required=\"true\"/>\r\n            <field name=\"OC_CUSTOMERACCOUNT_CODE\" />\r\n            <field name=\"OC_BILLINGACCOUNT_CODE\" />\r\n            <field name=\"OC_BILLINGACCOUNT_DESCRIPTION\" />\r\n            <field name=\"OC_BILLINGACCOUNT_BC\" required=\"true\"/>\r\n            <field name=\"OC_BILLINGACCOUNT_COUNTRY\" required=\"true\"/>\r\n            <field name=\"OC_BILLINGACCOUNT_LANGUAGE\" required=\"true\"/>\r\n            <field name=\"OC_BILLINGACCOUNT_CURRENCY\" />\r\n            <field name=\"OC_BILLINGACCOUNT_TAXCAT\" />\r\n            <field name=\"OC_BA_DATE\" />\r\n            <field name=\"OC_BA_REGISTRATION\" />\r\n            <field name=\"OC_BA_TVANUMBER\" />\r\n            <field name=\"OC_BA_TITLE\" />\r\n            <field name=\"OC_BA_FNAME\" />\r\n            <field name=\"OC_BA_LNAME\" required=\"true\"/>\r\n            <field name=\"OC_BA_ORGANIZATION\" />\r\n            <field name=\"OC_BA_EBILL\" />\r\n            <field name=\"OC_BA_EBILLEMAIL\" />\r\n            <field name=\"OC_BA_EBILLEMAILS\" />\r\n            <field name=\"OC_BA_ADDRESS\" />\r\n            <field name=\"OC_BA_ZIPCODE\" />\r\n            <field name=\"OC_BA_CITY\" />\r\n            <field name=\"OC_BA_STATE\" />\r\n            <field name=\"OC_BA_COUNTRY\" />\r\n            <field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n        </record>\r\n    </stream>\r\n</beanio>\r\n"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.BillingAccountImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>
		<!-- USER_ACCOUNT -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportUserAccountJob" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "/imports/massImport/userAccount/input"}], "FlatFileProcessingJob_outputDir": [{"string": "/imports/massImport/userAccount/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "/imports/massImport/userAccount/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "/imports/massImport/userAccount/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n        xmlns=\"http://www.beanio.org/2012/03\"\r\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n    <stream name=\"record\" format=\"csv\">\r\n        <parser>\r\n            <property name=\"delimiter\" value=\";\"/>\r\n            <property name=\"comments\" value=\"END\"/>\r\n            <property name=\"multilineEnabled\" value=\"true\"/>\r\n        </parser>\r\n        <record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" ignore=\"true\" />\r\n            <field name=\"OC_ACTION\" ignore=\"true\" />\r\n            <field name=\"OC_BILLINGACCOUNT_CODE\" ignore=\"true\"/>\r\n          \t<field name=\"OC_PARENT_UA_CODE\" ignore=\"true\"/>\r\n            <field name=\"OC_USERACCOUNT_CODE\" ignore=\"true\"/>\r\n            <field name=\"OC_USERACCOUNT_ DESCRIPTION\" ignore=\"true\"/>\r\n            <field name=\"OC_UA_DATE\" ignore=\"true\"/>\r\n            <field name=\"OC_UA_REGISTRATION\" ignore=\"true\"/>\r\n            <field name=\"OC_UA_TVANUMBER\" ignore=\"true\"/>\r\n            <field name=\"OC_UA_TITLE\" ignore=\"true\"/>\r\n            <field name=\"OC_UA_FNAME\" ignore=\"true\"/>\r\n            <field name=\"OC_UA_LNAME\" ignore=\"true\"/>\r\n            <field name=\"OC_UA_ORGANIZATION\" ignore=\"true\"/>\r\n        </record>\r\n        <record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n            <field name=\"OC_ENTITY\" required=\"true\"/>\r\n            <field name=\"OC_ACTION\" required=\"true\"/>\r\n            <field name=\"OC_BILLINGACCOUNT_CODE\"/>\r\n          \t<field name=\"OC_PARENT_UA_CODE\"/>\r\n            <field name=\"OC_USERACCOUNT_CODE\"/>\r\n            <field name=\"OC_USERACCOUNT_ DESCRIPTION\"/>\r\n            <field name=\"OC_UA_DATE\"/>\r\n            <field name=\"OC_UA_REGISTRATION\"/>\r\n            <field name=\"OC_UA_TVANUMBER\"/>\r\n            <field name=\"OC_UA_TITLE\"/>\r\n            <field name=\"OC_UA_FNAME\"/>\r\n            <field name=\"OC_UA_LNAME\" required=\"true\"/>\r\n            <field name=\"OC_UA_ORGANIZATION\"/>\r\n            <field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n        </record>\r\n    </stream>\r\n</beanio>\r\n"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.UserAccountImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>

		<!-- Email templates -->
		<insert tableName="com_message_template">
			<column name="media" value="EMAIL" />
			<column name="id" valueSequenceNext="com_msg_tmpl_seq" />
			<column name="version" value="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="MASS_IMPORT_ISSUES_EMAIL" />
			<column name="tag_start" value="#{" />
			<column name="tag_end" value="}" />
			<column name="subject" value="Your import had a few issues : #{job}" />
			<column name="htmlcontent">
				<![CDATA[
				Your import was not a 100% success and some records were not created. Please review the rejection file.
                ]]>
			</column>
		</insert>
		<insert tableName="com_message_template">
			<column name="media" value="EMAIL" />
			<column name="id" valueSequenceNext="com_msg_tmpl_seq" />
			<column name="version" value="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="MASS_IMPORT_FAILURE_EMAIL" />
			<column name="tag_start" value="#{" />
			<column name="tag_end" value="}" />
			<column name="subject" value="Your import has failed : #{job}" />
			<column name="htmlcontent">
				<![CDATA[
				<font face="Arial, Verdana">Import process has failed. Please check the rejection file for more details. If this persists, please contact&nbsp;</font>your integrator or our support team.
                ]]>
			</column>
		</insert>
		<insert tableName="com_message_template">
			<column name="media" value="EMAIL" />
			<column name="id" valueSequenceNext="com_msg_tmpl_seq" />
			<column name="version" value="0" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="MASS_IMPORT_SUCCESS_EMAIL" />
			<column name="tag_start" value="#{" />
			<column name="tag_end" value="}" />
			<column name="subject" value="Your import was a success : #{job}" />
			<column name="htmlcontent">
				<![CDATA[
				<font face="Arial, Verdana">Your import that started&nbsp;<b>#{date}</b>&nbsp;at&nbsp;<b>#{time}&nbsp;</b>has been&nbsp;</font>processed successfully.
                ]]>
			</column>
		</insert>
		<!-- Job notification -->
		<insert tableName="adm_notification">
			<column name="id" valueSequenceNext="adm_notification_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="OC_CUSTOMER_JOB_NOTIFICATION" />
			<column name="class_name_filter" value="org.meveo.model.jobs.JobExecutionResultImpl" />
			<column name="event_type_filter" value="PROCESSED" />
			<column name="version" value="0" />
			<column name="creator" value="opencell.admin" />
			<column name="uuid" value="e60e376e-dbb7-424c-a37d-350280d6e033" />
			<column name="script_instance_id"
					valueComputed="(SELECT id from meveo_script_instance where code = 'org.meveo.service.script.CustomerJobNotification')"/>
		</insert>
		<insert tableName="adm_notif_job">
			<column name="id"
					valueComputed="(SELECT id from adm_notification where code = 'OC_CUSTOMER_JOB_NOTIFICATION')" />
			<column name="job_instance_id"
					valueComputed="(SELECT id from meveo_job_instance where code = 'massImportCustomerJob')"/>
		</insert>
		<insert tableName="adm_notification_params">
			<column name="notification_id"
					valueComputed="(SELECT id from adm_notification where code = 'OC_CUSTOMER_JOB_NOTIFICATION')" />
			<column name="params" value="customer"/>
			<column name="params_key" value="category"/>
		</insert>
	</changeSet>

	<changeSet id="#OUTRD-49-SUB_20220914-scripts" author="HamzaBiadi">
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.SubscriptionMassImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.EnumUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.billing.SubscriptionDto;
import org.meveo.api.dto.billing.SubscriptionRenewalDto;
import org.meveo.model.billing.*;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.stream.Stream;


public class SubscriptionMassImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "SUBSCRIPTION";
    private static final String ENTITY_NAME = "Subscription";

    public enum SubscriptionActionEnum {
        CREATE, UPDATE, SUSPEND, RESUME, ACTIVATE, TERMINATE
    }

    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(SubscriptionActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                SubscriptionActionEnum action = SubscriptionActionEnum.valueOf(OC_ACTION);

                SubscriptionDto subscriptionDto = validateAndGetSubscription(action, recordMap);

                if (SubscriptionActionEnum.CREATE.equals(action)) {
                    setSubscriptionValues(recordMap, subscriptionDto);
                    Subscription subscription = subscriptionApi.create(subscriptionDto);
                    this.setCFValues(recordMap, subscription, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private SubscriptionDto validateAndGetSubscription(SubscriptionActionEnum action, Map<String, Object> recordMap) {
        SubscriptionDto subscriptionDto = null;

        String subscriptionCode = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (subscriptionCode.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String useraccountCode = (String) recordMap.get("OC_USERACCOUNT_CODE");
        if (useraccountCode.isEmpty()) {
            throw new ValidationException("useraccount_code is required");
        }

        subscriptionDto = new SubscriptionDto();

        return subscriptionDto;
    }

    private void setSubscriptionValues(Map<String, Object> recordMap, SubscriptionDto subscriptionDto) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);


        String OC_subscription_date = (String) recordMap.get("OC_SUBSCRIPTION_DATE");
        String OC_endagreement_date = (String) recordMap.get("OC_ENDAGREEMENTDATE");
        String OC_termination_date = (String) recordMap.get("OC_TERMINATIONDATE");

        String OC_sub_inittermtype = (String) recordMap.get("OC_SUB_INITTERMTYPE");
        String OC_sub_durationtype = (String) recordMap.get("OC_SUB_DURATIONTYPE");
        Integer OC_sub_inittermlength = ((String) recordMap.get("OC_SUB_INITTERMLENGTH")).isEmpty() ? null
                : Integer.parseInt( (String) recordMap.get("OC_SUB_INITTERMLENGTH"));

        String OC_sub_inittermunit = (String) recordMap.get("OC_SUB_INITTERMUNIT");
        String OC_sub_endtermaction = (String) recordMap.get("OC_SUB_ENDTERMACTION");

        Date subscriptionDate = StringUtils.isEmpty(OC_subscription_date) ? null : dateFormat.parse(OC_subscription_date);
        Date endagreementDate = StringUtils.isEmpty(OC_endagreement_date) ? null : dateFormat.parse(OC_endagreement_date);
        Date terminationDate = StringUtils.isEmpty(OC_termination_date) ? null : dateFormat.parse(OC_termination_date);

        SubscriptionRenewal.InitialTermTypeEnum initialTermTypeEnum = (!EnumUtils.isValidEnum(SubscriptionRenewal.InitialTermTypeEnum.class, OC_sub_inittermtype)) ? null
                : SubscriptionRenewal.InitialTermTypeEnum.valueOf(OC_sub_inittermtype);
        SubscriptionRenewal.RenewalPeriodUnitEnum renewalPeriodUnit = (!EnumUtils.isValidEnum(SubscriptionRenewal.RenewalPeriodUnitEnum.class, OC_sub_durationtype)) ? null
                : SubscriptionRenewal.RenewalPeriodUnitEnum.valueOf(OC_sub_durationtype);

        SubscriptionRenewal.RenewalPeriodUnitEnum initialyActiveForUnit = (!EnumUtils.isValidEnum(SubscriptionRenewal.RenewalPeriodUnitEnum.class, OC_sub_inittermunit)) ? null
                : SubscriptionRenewal.RenewalPeriodUnitEnum.valueOf(OC_sub_inittermunit);
        SubscriptionRenewal.EndOfTermActionEnum endOfTermAction = (!EnumUtils.isValidEnum(SubscriptionRenewal.EndOfTermActionEnum.class, OC_sub_endtermaction)) ? null
                : SubscriptionRenewal.EndOfTermActionEnum.valueOf(OC_sub_endtermaction);
        String terminationReason = StringUtils.isEmpty((String) recordMap.get("OC_SUB_TERMINATIONREASON")) ? null : ((String) recordMap.get("OC_SUB_TERMINATIONREASON"));

        SubscriptionRenewalDto subscriptionRenewalDto = new SubscriptionRenewalDto();
        subscriptionRenewalDto.setInitialTermType(initialTermTypeEnum);
        subscriptionRenewalDto.setRenewForUnit(renewalPeriodUnit);
        subscriptionRenewalDto.setInitialyActiveFor(OC_sub_inittermlength);
        subscriptionRenewalDto.setInitialyActiveForUnit(initialyActiveForUnit);
        subscriptionRenewalDto.setEndOfTermAction(endOfTermAction);
        subscriptionRenewalDto.setTerminationReasonCode(terminationReason);

        subscriptionDto.setUserAccount((String) recordMap.get("OC_USERACCOUNT_CODE"));
        subscriptionDto.setCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        subscriptionDto.setStatus(SubscriptionStatusEnum.valueOf((String) recordMap.get("OC_STATUS")));
        subscriptionDto.setDescription((String) recordMap.get("OC_SUBSCRIPTION_DESCRIPTION"));
        subscriptionDto.setOfferTemplate((String) recordMap.get("OC_OFFER_CODE"));
        subscriptionDto.setSeller((String) recordMap.get("OC_SELLER_CODE"));
        subscriptionDto.setSubscriptionDate(subscriptionDate);
        subscriptionDto.setEndAgreementDate(endagreementDate);
        subscriptionDto.setTerminationDate(terminationDate);
        subscriptionDto.setBillingCycle((String) recordMap.get("OC_SUB_BC"));

        subscriptionDto.setRenewalRule(subscriptionRenewalDto);
        subscriptionDto.setElectronicBilling(recordMap.get("OC_SUB_EBILL").toString().equals("X"));
        subscriptionDto.setEmail((String) recordMap.get("OC_SUB_EBILLEMAIL"));
        subscriptionDto.setCcedEmails((String) recordMap.get("OC_SUB_EBILLEMAILS"));

    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>

		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.ServiceInstanceImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.cpq.ProductToInstantiateDto;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.script.GenericMassImportScript;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

public class ServiceInstanceImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "SERVICE_INSTANCE";
    private static final String ENTITY_NAME = "ServiceInstance";

    public enum ServiceInstanceActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface("ServiceInstanceService");
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(ServiceInstanceActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                ServiceInstanceActionEnum action = ServiceInstanceActionEnum.valueOf(OC_ACTION);

                ServiceInstance serviceInstance = validateAndGetServiceInstance(action, recordMap);

                if (ServiceInstanceActionEnum.CREATE.equals(action)) {
                    setServiceInstanceValues(recordMap, serviceInstance);
                    serviceInstanceService.create(serviceInstance);
                    this.setCFValues(recordMap, serviceInstance, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private ServiceInstance validateAndGetServiceInstance(ServiceInstanceActionEnum action, Map<String, Object> recordMap) {
        ServiceInstance serviceInstance = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String OC_si_code = (String) recordMap.get("OC_SI_CODE");
        if (OC_si_code.isEmpty()) {
            throw new ValidationException("serviceinstance_code is required");
        }

        serviceInstance = new ServiceInstance();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        return serviceInstance;
    }

    private void setServiceInstanceValues(Map<String, Object> recordMap, ServiceInstance serviceInstance) throws ParseException {
        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);

        serviceInstance.setCode((String) recordMap.get("OC_SI_CODE"));
        serviceInstance.setSubscription(subscription);
        serviceInstance.setDescription((String) recordMap.get("OC_SI_DESC"));

        // Instantiate products
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        String OC_product_deliv_dt = (String) recordMap.get("OC_PRODUCT_DELIV_DT");
        Date deliveryDate = StringUtils.isEmpty(OC_product_deliv_dt) ? null : dateFormat.parse(OC_product_deliv_dt);

        ProductToInstantiateDto productToInstantiateDto = new ProductToInstantiateDto();
        productToInstantiateDto.setProductCode((String) recordMap.get("OC_PRODUCT_CODE"));
        productToInstantiateDto.setQuantity(new BigDecimal((String) recordMap.get("OC_PRODUCT_QTY")));
        productToInstantiateDto.setDeliveryDate(deliveryDate);

        List<ProductToInstantiateDto> products = new ArrayList<>();
        products.add(productToInstantiateDto);

        subscriptionApi.instanciateProduct(OC_subscription_code, products);

    }

}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>

		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.AttributeInstanceImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;


import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.billing.AttributeInstanceDto;
import org.meveo.api.dto.billing.ServiceToUpdateDto;
import org.meveo.api.dto.billing.UpdateServicesRequestDto;
import org.meveo.model.billing.AttributeInstance;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.model.cpq.Attribute;
import org.meveo.model.cpq.enums.AttributeTypeEnum;
import org.meveo.service.billing.impl.AttributeInstanceService;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.cpq.AttributeService;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Map;
import java.util.stream.Stream;


public class AttributeInstanceImportScript extends GenericMassImportScript {
    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "ATTRIBUTE_INSTANCE";
    private static final String ENTITY_NAME = "AttributeInstance";

    public enum AttributeInstanceActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final AttributeInstanceService attributeInstanceService = (AttributeInstanceService) getServiceInterface("AttributeInstanceService");
    private final AttributeService attributeService = (AttributeService) getServiceInterface("AttributeService");
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface("ServiceInstanceService");

    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());


    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(AttributeInstanceActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                AttributeInstanceActionEnum action = AttributeInstanceActionEnum.valueOf(OC_ACTION);

                AttributeInstanceDto attributeInstanceDto = validateAndGetAttributeInstance(action, recordMap);

                AttributeInstance attributeInstance = new AttributeInstance();

                if (AttributeInstanceActionEnum.CREATE.equals(action)) {
                    setAttributeInstanceValues(recordMap, attributeInstanceDto, attributeInstance);
                    this.setCFValues(recordMap, attributeInstance, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }


    private AttributeInstanceDto validateAndGetAttributeInstance(AttributeInstanceActionEnum action, Map<String, Object> recordMap) {
        AttributeInstanceDto attributeInstanceDto = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String OC_si_code = (String) recordMap.get("OC_SERVICE_INSTANCE_CODE");
        if (OC_si_code.isEmpty()) {
            throw new ValidationException("serviceinstance_code is required");
        }

        attributeInstanceDto = new AttributeInstanceDto();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        ServiceInstance serviceInstance = serviceInstanceService.findByCode(OC_si_code);
        if (serviceInstance == null) {
            throw new ValidationException("no service instance found for code: '" + OC_si_code + "'");
        }

        return attributeInstanceDto;
    }


    private void setAttributeInstanceValues(Map<String, Object> recordMap, AttributeInstanceDto attributeInstanceDto, AttributeInstance attributeInstance) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);

        Attribute attribute = attributeService.findByCode((String) recordMap.get("OC_SI_ATTRIB_CODE"));
        AttributeTypeEnum type = attribute.getAttributeType();


        attributeInstanceDto.setAttributeCode((String) recordMap.get("OC_SI_ATTRIB_CODE"));
        attributeInstance.setAttribute(attribute);

        switch (type) {
            case TEXT:
                attributeInstanceDto.setStringValue((String) recordMap.get("OC_SI_ATTRIB_VALUE"));
                attributeInstance.setStringValue((String) recordMap.get("OC_SI_ATTRIB_VALUE"));
                break;
            case DATE:
                attributeInstanceDto.setDateValue(StringUtils.isEmpty((String) recordMap.get("OC_SI_ATTRIB_VALUE")) ? null
                        : dateFormat.parse((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                attributeInstance.setDateValue(StringUtils.isEmpty((String) recordMap.get("OC_SI_ATTRIB_VALUE")) ? null
                        : dateFormat.parse((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                break;
            case BOOLEAN:
                attributeInstanceDto.setBooleanValue((recordMap.get("OC_SI_ATTRIB_VALUE")).equals("X"));
                attributeInstance.setBooleanValue((recordMap.get("OC_SI_ATTRIB_VALUE")).equals("X"));
                break;
            case INTEGER:
                attributeInstanceDto.setDoubleValue(Double.valueOf((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                attributeInstance.setDoubleValue(Double.valueOf((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                break;
        }

        // ATTRIBUTE INSTANTIIATION
        UpdateServicesRequestDto requestDto = new UpdateServicesRequestDto();
        ServiceInstance serviceInstance = serviceInstanceService.findByCode((String) recordMap.get("OC_SERVICE_INSTANCE_CODE"));
        requestDto.setSubscriptionCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        ServiceToUpdateDto serviceDto = new ServiceToUpdateDto();
        serviceDto.setId(serviceInstance.getId());
        serviceDto.setCode(serviceInstance.getCode());

        requestDto.addService(serviceDto);

        requestDto.setAttributeInstances(new ArrayList<>());
        requestDto.getAttributeInstances().add(attributeInstanceDto);

        subscriptionApi.updateServiceInstance(requestDto);

    }

}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>

		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.AccessPointImportScript" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.AccessApi;
import org.meveo.api.dto.account.AccessDto;
import org.meveo.model.billing.Subscription;
import org.meveo.model.mediation.Access;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.stream.Stream;

public class AccessPointImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "ACCESS_POINT";
    private static final String ENTITY_NAME = "Access";

    public enum AccessPointActionEnum {
        CREATE, UPDATE, DELETE
    }


    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final AccessApi accessApi = (AccessApi) getServiceInterface(AccessApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(AccessPointActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                AccessPointActionEnum action = AccessPointActionEnum.valueOf(OC_ACTION);

                AccessDto accessDto = validateAndGetAccessPoint(action, recordMap);

                if (AccessPointActionEnum.CREATE.equals(action)) {
                    setAccessValues(recordMap, accessDto);
                    Access access = accessApi.create(accessDto);
                    this.setCFValues(recordMap, access, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }


    private AccessDto validateAndGetAccessPoint(AccessPointActionEnum action, Map<String, Object> recordMap) {
        AccessDto accessDto = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        accessDto = new AccessDto();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        return accessDto;
    }


    private void setAccessValues(Map<String, Object> recordMap, AccessDto accessDto) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        String OC_accessPoint_startDate = (String) recordMap.get("OC_ACCESSPOINT_STARTDATE");
        String OC_accessPoint_endDate = (String) recordMap.get("OC_ACCESSPOINT_ENDDATE");
        Date startDate = StringUtils.isEmpty(OC_accessPoint_startDate) ? null : dateFormat.parse(OC_accessPoint_startDate);
        Date endDate = StringUtils.isEmpty(OC_accessPoint_endDate) ? null : dateFormat.parse(OC_accessPoint_endDate);

        accessDto.setSubscription((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        accessDto.setCode((String) recordMap.get("OC_ACCESSPOINT_CODE"));
        accessDto.setEndDate(endDate);
        accessDto.setStartDate(startDate);

    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>

		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.SubscriptionJobNotification" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.joda.time.DateTime;
import org.meveo.admin.exception.BusinessException;
import org.meveo.api.UserApi;
import org.meveo.api.dto.CustomFieldDto;
import org.meveo.api.dto.CustomFieldsDto;
import org.meveo.api.dto.job.JobInstanceInfoDto;
import org.meveo.api.job.JobApi;
import org.meveo.model.communication.email.EmailTemplate;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.service.communication.impl.EmailSender;
import org.meveo.service.communication.impl.EmailTemplateService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.meveo.service.base.ValueExpressionWrapper.evaluateExpression;

public class SubscriptionJobNotification extends Script {
    private static final String USER_CODE = "user";
    private static final String FROM_EMAIL = "noreply@itnewvision.oc-sb.eu";

    private static final String MASS_IMPORT_SUCCESS_EMAIL = "MASS_IMPORT_SUCCESS_EMAIL";
    private static final String MASS_IMPORT_FAILURE_EMAIL = "MASS_IMPORT_FAILURE_EMAIL";
    private static final String MASS_IMPORT_ISSUES_EMAIL = "MASS_IMPORT_ISSUES_EMAIL";

    private static final String CUSTOMER_JOB_CODE = "massImportSubscriptionJob";
    private static final String CUSTOMER_ACCOUNT_JOB_CODE = "massImportServiceInstanceJob";
    private static final String PAYMENT_METHOD_JOB_CODE = "massImportAttributeInstance";
    private static final String BILLING_ACCOUNT_JOB_CODE = "importBillingAccountJob";
    private static final String USER_ACCOUNT_JOB_CODE = "importUserAccountJob";

    private final transient JobApi jobApi = (JobApi) getServiceInterface(JobApi.class.getSimpleName());
    private final transient UserApi userApi = (UserApi) getServiceInterface(UserApi.class.getSimpleName());

    private final transient EmailSender emailSender = (EmailSender) getServiceInterface(EmailSender.class.getSimpleName());
    private final transient EmailTemplateService emailTemplateService = (EmailTemplateService) getServiceInterface(EmailTemplateService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        try {
            String category = (String) methodContext.get("category");
            JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) methodContext.get("entityOrEvent");
            JobResultStatusEnum jobStatus = getJobResultStatus(jobExecutionResult);
            String userName = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE);

            if (category == null || !category.equals("customer") || userName == null) return;
            executeNextJob(jobExecutionResult);

            // if there are no rows to process, we don't send a notification
            if(jobExecutionResult.getNbItemsToProcess() == 0) return;

            String subject;
            String contentHtml;
            Map<Object, Object> params = new HashMap<>();
            EmailTemplate emailTemplate;

            switch (jobStatus) {
                case SUCCESS:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_SUCCESS_EMAIL);
                    DateTime startDateTime = new DateTime(jobExecutionResult.getStartDate());
                    params.put("date", startDateTime.toLocalDate());
                    params.put("time", startDateTime.toLocalTime());
                    params.put("job", jobExecutionResult.getJobInstance().getCode());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                case FAILURE:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_FAILURE_EMAIL);
                    params.put("job", jobExecutionResult.getJobInstance().getCode());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                default:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_ISSUES_EMAIL);
                    params.put("job", jobExecutionResult.getJobInstance().getCode());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
            }

            List<String> toEmails = List.of(userApi.find(userName).getEmail());
            emailSender.send(FROM_EMAIL, null, toEmails, subject, null, contentHtml);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void executeNextJob(JobExecutionResultImpl jobExecutionResult) {
        String nextJobCode;
        switch (jobExecutionResult.getJobInstance().getCode()) {
            case CUSTOMER_JOB_CODE:
                nextJobCode = CUSTOMER_ACCOUNT_JOB_CODE;
                break;
            case CUSTOMER_ACCOUNT_JOB_CODE:
                nextJobCode = PAYMENT_METHOD_JOB_CODE;
                break;
            case PAYMENT_METHOD_JOB_CODE:
                nextJobCode = BILLING_ACCOUNT_JOB_CODE;
                break;
            case BILLING_ACCOUNT_JOB_CODE:
                nextJobCode = USER_ACCOUNT_JOB_CODE;
                break;
            default:
                return;
        }
        JobInstanceInfoDto jobInstanceInfoDto = new JobInstanceInfoDto();
        jobInstanceInfoDto.setCode(nextJobCode);
        CustomFieldsDto customFields = new CustomFieldsDto();
        CustomFieldDto customFieldDto = new CustomFieldDto();
        customFieldDto.setCode(USER_CODE);
        customFieldDto.setStringValue((String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE));
        customFields.setCustomField(List.of(customFieldDto));
        jobInstanceInfoDto.setCustomFields(customFields);

        jobApi.executeJob(jobInstanceInfoDto);
    }

    private JobResultStatusEnum getJobResultStatus(JobExecutionResultImpl jobExecutionResult) {
        if(jobExecutionResult.getNbItemsToProcess() == 0)
            return JobResultStatusEnum.NULL;
        else if (jobExecutionResult.getNbItemsProcessedWithError() + 1 == jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.FAILURE;
        else if(jobExecutionResult.getNbItemsCorrectlyProcessed() < jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.PARTIAL_SUCCESS;
        else return JobResultStatusEnum.SUCCESS;
    }

    private enum JobResultStatusEnum {
        SUCCESS,
        FAILURE,
        PARTIAL_SUCCESS,
        NULL
    }
}

				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>
	</changeSet>

	<changeSet id="#OUTRD-49-SUB_20220914" author="HamzaBiadi">
		<!-- Subscription Job -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportSubscriptionJob" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "imports/massImport/subscription/input"}], "FlatFileProcessingJob_outputDir": [{"string": "imports/massImport/subscription/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "imports/massImport/subscription/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "imports/massImport/subscription/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\";\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_USERACCOUNT_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_STATUS\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_DESCRIPTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_OFFER_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SELLER_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_DATE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ENDAGREEMENTDATE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_TERMINATIONDATE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_BC\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_INITTERMTYPE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_DURATIONTYPE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_INITTERMLENGTH\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_INITTERMUNIT\"  ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_ENDTERMACTION\"  ignore=\"true\" />\r\n\t\t\t<field name=\"OC_SUB_TERMINATIONREASON\"  ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_EBILL\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_EBILLEMAIL\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUB_EBILLEMAILS\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_USERACCOUNT_CODE\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_CODE\"/>\r\n\t\t\t<field name=\"OC_STATUS\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_DESCRIPTION\" />\r\n\t\t\t<field name=\"OC_OFFER_CODE\" />\r\n\t\t\t<field name=\"OC_SELLER_CODE\" />\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_DATE\" />\r\n\t\t\t<field name=\"OC_ENDAGREEMENTDATE\" />\r\n\t\t\t<field name=\"OC_TERMINATIONDATE\" />\r\n\t\t\t<field name=\"OC_SUB_BC\" />\r\n\t\t\t<field name=\"OC_SUB_INITTERMTYPE\" />\r\n\t\t\t<field name=\"OC_SUB_DURATIONTYPE\" />\r\n\t\t\t<field name=\"OC_SUB_INITTERMLENGTH\" />\r\n\t\t\t<field name=\"OC_SUB_INITTERMUNIT\" />\r\n\t\t\t<field name=\"OC_SUB_ENDTERMACTION\" />\r\n\t\t\t<field name=\"OC_SUB_TERMINATIONREASON\" />\r\n\t\t\t<field name=\"OC_SUB_EBILL\" />\r\n\t\t\t<field name=\"OC_SUB_EBILLEMAIL\" />\r\n\t\t\t<field name=\"OC_SUB_EBILLEMAILS\" />\r\n          \t<field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.SubscriptionMassImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>
		<!-- Service instance Job -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportServiceInstanceJob" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "imports/massImport/serviceInstance/input"}], "FlatFileProcessingJob_outputDir": [{"string": "imports/massImport/serviceInstance/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "imports/massImport/serviceInstance/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "imports/massImport/serviceInstance/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\";\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SI_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SI_DESC\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_PRODUCT_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_PRODUCT_QTY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_PRODUCT_DELIV_DT\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_CODE\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_SI_CODE\"/>\r\n\t\t\t<field name=\"OC_SI_DESC\"/>\r\n\t\t\t<field name=\"OC_PRODUCT_CODE\" />\r\n\t\t\t<field name=\"OC_PRODUCT_QTY\" />\r\n\t\t\t<field name=\"OC_PRODUCT_DELIV_DT\" />\r\n          \t<field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.ServiceInstanceImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>
		<!-- Attribute Instance Job -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportAttributeInstance" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "imports/massImport/attributeInstance/input"}], "FlatFileProcessingJob_outputDir": [{"string": "imports/massImport/attributeInstance/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "imports/massImport/attributeInstance/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "imports/massImport/attributeInstance/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\";\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SERVICE_INSTANCE_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SI_ATTRIB_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SI_ATTRIB_VALUE\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_CODE\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_SERVICE_INSTANCE_CODE\"/>\r\n\t\t\t<field name=\"OC_SI_ATTRIB_CODE\"/>\r\n\t\t\t<field name=\"OC_SI_ATTRIB_VALUE\" />\r\n          \t<field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.AttributeInstanceImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>
		<!-- Access Point Job -->
		<insert tableName="meveo_job_instance">
			<column name="id" valueSequenceNext="meveo_job_instance_seq" />
			<column name="version" valueNumeric="0" />
			<column name="disabled" valueNumeric="1" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="job_category" value="MEDIATION" />
			<column name="job_template" value="FlatFileProcessingJob" />
			<column name="code" value="massImportAccessPoint" />
			<column name="creator" value="opencell.admin" />
			<column name="job_speed" value="NORMAL" />
			<column name="single_node" valueNumeric="1" />
			<column name="verbose_report" valueNumeric="1" />
			<column name="disabled" valueNumeric="0" />
			<column name="cf_values">
				<![CDATA[
				{"nbRuns": [{"long": 1}], "oneFilePerJob": [{"boolean": false}], "waitingMillis": [{"long": 0}], "FlatFileProcessingJob_inputDir": [{"string": "imports/massImport/accessPoint/input"}], "FlatFileProcessingJob_outputDir": [{"string": "imports/massImport/accessPoint/output"}], "FlatFileProcessingJob_rejectDir": [{"string": "imports/massImport/accessPoint/reject"}], "FlatFileProcessingJob_archiveDir": [{"string": "imports/massImport/accessPoint/archive"}], "FlatFileProcessingJob_errorAction": [{"string": "CONTINUE"}], "FlatFileProcessingJob_mappingConf": [{"string": "<beanio\r\n\txmlns=\"http://www.beanio.org/2012/03\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://www.beanio.org/2012/03 http://www.beanio.org/2012/03/mapping.xsd\">\r\n\t<stream name=\"record\" format=\"csv\">\r\n\t\t<parser>\r\n\t\t\t<property name=\"delimiter\" value=\";\" />\r\n\t\t\t<property name=\"comments\" value=\"END\" />\r\n\t\t\t<property name=\"multilineEnabled\" value=\"true\" />\r\n\t\t</parser>\r\n\t\t<record name=\"header\" minOccurs=\"1\" maxOccurs=\"1\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACCESSPOINT_CODE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACCESSPOINT_STARTDATE\" ignore=\"true\"/>\r\n\t\t\t<field name=\"OC_ACCESSPOINT_ENDDATE\" ignore=\"true\"/>\r\n\t\t</record>\r\n\t\t<record name=\"details\" minOccurs=\"1\" maxOccurs=\"unbounded\" class=\"map\">\r\n\t\t\t<field name=\"OC_ENTITY\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACTION\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_SUBSCRIPTION_CODE\" required=\"true\"/>\r\n\t\t\t<field name=\"OC_ACCESSPOINT_CODE\"/>\r\n\t\t\t<field name=\"OC_ACCESSPOINT_STARTDATE\"/>\r\n\t\t\t<field name=\"OC_ACCESSPOINT_ENDDATE\" />\r\n          \t<field name=\"OC_CFS\" type=\"String\" collection=\"list\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\r\n\t\t</record>\r\n\t</stream>\r\n</beanio>"}], "FlatFileProcessingJob_scriptsFlow": [{"string": "org.meveo.service.script.AccessPointImportScript"}], "FlatFileProcessingJob_formatTransfo": [{"string": "None"}], "FlatFileProcessingJob_originFilename": [{"string": "origin_filename"}], "FlatFileProcessingJob_nbLinesToProcess": [{"long": 1}], "FlatFileProcessingJob_fileNameExtension": [{"string": "csv"}], "FlatFileProcessingJob_recordVariableName": [{"string": "record"}]}
				]]>
			</column>
		</insert>

		<insert tableName="adm_notification">
			<column name="id" valueSequenceNext="adm_notification_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="OC_CUSTOMER_SUBSCRIPTION_NOTIFICATION" />
			<column name="class_name_filter" value="org.meveo.model.jobs.JobExecutionResultImpl" />
			<column name="event_type_filter" value="PROCESSED" />
			<column name="version" value="0" />
			<column name="creator" value="opencell.admin" />
			<column name="script_instance_id"
					valueComputed="(SELECT id from meveo_script_instance where code = 'org.meveo.service.script.SubscriptionJobNotification')"/>
		</insert>
		<insert tableName="adm_notif_job">
			<column name="id"
					valueComputed="(SELECT id from adm_notification where code = 'OC_CUSTOMER_SUBSCRIPTION_NOTIFICATION')" />
			<column name="job_instance_id"
					valueComputed="(SELECT id from meveo_job_instance where code = 'massImportSubscriptionJob')"/>
		</insert>
		<insert tableName="adm_notification_params">
			<column name="notification_id"
					valueComputed="(SELECT id from adm_notification where code = 'OC_CUSTOMER_SUBSCRIPTION_NOTIFICATION')" />
			<column name="params" value="customer"/>
			<column name="params_key" value="category"/>
		</insert>
	</changeSet>


	<changeSet id="#OUTRD-63-SUB_20220926-scripts" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.CustomerAccountApi;
import org.meveo.api.dto.account.CustomerAccountDto;
import org.meveo.model.crm.Customer;
import org.meveo.model.payments.CustomerAccount;
import org.meveo.service.crm.impl.CustomerService;
import org.meveo.service.script.GenericMassImportScript;

import java.util.Map;
import java.util.stream.Stream;


public class CustomerAccountImportScript extends GenericMassImportScript {

    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "CUSTOMER_ACCOUNT";
    private static final String ENTITY_NAME = "CustomerAccount";

    public enum CustomerAccountActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final CustomerService customerService = (CustomerService) getServiceInterface("CustomerService");
    private final CustomerAccountApi customerAccountApi = (CustomerAccountApi) getServiceInterface(CustomerAccountApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(CustomerAccountActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                CustomerAccountActionEnum action = CustomerAccountActionEnum.valueOf(ocAction);

                CustomerAccountDto customerAccountDto = validateAndGetCustomerAccount(action, recordMap);

                if (CustomerAccountActionEnum.DELETE.equals(action)) {
                    customerAccountApi.remove(customerAccountDto.getCode());
                } else {
                    setCustomerAccountValues(recordMap, customerAccountDto);
                    if (CustomerAccountActionEnum.CREATE.equals(action)) {
                        CustomerAccount customerAccount = customerAccountApi.create(customerAccountDto);

                        this.setCFValues(recordMap, customerAccount, ENTITY_NAME);
                    } else if (CustomerAccountActionEnum.UPDATE.equals(action)) {
                        customerAccountApi.update(customerAccountDto);
                    }

                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private CustomerAccountDto validateAndGetCustomerAccount(CustomerAccountActionEnum action, Map<String, Object> recordMap) throws Exception {
        CustomerAccountDto customerAccountDto;

        String customerAccountCode = (String) recordMap.get("OC_CUSTOMERACCOUNT_CODE");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        String customerCode = (String) recordMap.get("OC_CUSTOMER_CODE");
        if (customerCode.isEmpty()) {
            throw new ValidationException("customer_code is required");
        }
        Customer customer = customerService.findByCode(customerCode);

        // For update and delete : check if there is a record
        if (!CustomerAccountActionEnum.CREATE.equals(action)) {
            if (customer == null) {
                throw new ValidationException("no customer found for customer_code: '" + customerCode + "'");
            }
            customerAccountDto = customerAccountApi.find(customerAccountCode, false);
            // Create action : check if there is no record
        } else {
            customerAccountDto = new CustomerAccountDto();
        }
        return customerAccountDto;
    }

    private void setCustomerAccountValues(Map<String, Object> recordMap, CustomerAccountDto customerAccountDto) {
        customerAccountDto.setCustomer((String) recordMap.get("OC_CUSTOMER_CODE"));
        customerAccountDto.setCode((String) recordMap.get("OC_CUSTOMERACCOUNT_CODE"));
        customerAccountDto.setCurrency((String) recordMap.get("OC_CUSTOMERACCOUNT_CURRENCY"));
        customerAccountDto.setDueDateDelayEL((String) recordMap.get("OC_CUSTOMERACCOUNT_PAYTERM"));
        customerAccountDto.setCreditCategory((String) recordMap.get("OC_CUSTOMERACCOUNT_CREDCAT"));
        customerAccountDto.setLanguage((String) recordMap.get("OC_CUSTOMERACCOUNT_LANG"));
    }
}

				]]>
			</column>
			<where>code='org.meveo.service.script.CustomerAccountImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-56-SUB_20220926-scripts" author="Ilham-Chafik">
		<!-- Update notification scripts -->
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.joda.time.DateTime;
import org.meveo.admin.exception.BusinessException;
import org.meveo.api.UserApi;
import org.meveo.api.dto.CustomFieldDto;
import org.meveo.api.dto.CustomFieldsDto;
import org.meveo.api.dto.job.JobInstanceInfoDto;
import org.meveo.api.job.JobApi;
import org.meveo.model.communication.email.EmailTemplate;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.service.communication.impl.EmailSender;
import org.meveo.service.communication.impl.EmailTemplateService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.meveo.service.base.ValueExpressionWrapper.evaluateExpression;

public class CustomerJobNotification extends Script {
    private static final String USER_CODE = "user";
    private static final String FROM_EMAIL = "noreply@itnewvision.oc-sb.eu";

    private static final String MASS_IMPORT_SUCCESS_EMAIL = "MASS_IMPORT_SUCCESS_EMAIL";
    private static final String MASS_IMPORT_FAILURE_EMAIL = "MASS_IMPORT_FAILURE_EMAIL";
    private static final String MASS_IMPORT_ISSUES_EMAIL = "MASS_IMPORT_ISSUES_EMAIL";

    private static final String CUSTOMER_JOB_CODE = "massImportCustomerJob";
    private static final String CUSTOMER_ACCOUNT_JOB_CODE = "massImportCustomerAccountJob";
    private static final String PAYMENT_METHOD_JOB_CODE = "massImportPaymentMethodJob";
    private static final String BILLING_ACCOUNT_JOB_CODE = "massImportBillingAccountJob";
    private static final String USER_ACCOUNT_JOB_CODE = "massImportUserAccountJob";

    private final transient JobApi jobApi = (JobApi) getServiceInterface(JobApi.class.getSimpleName());
    private final transient UserApi userApi = (UserApi) getServiceInterface(UserApi.class.getSimpleName());

    private final transient EmailSender emailSender = (EmailSender) getServiceInterface(EmailSender.class.getSimpleName());
    private final transient EmailTemplateService emailTemplateService = (EmailTemplateService) getServiceInterface(EmailTemplateService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            String category = (String) methodContext.get("category");
            JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) methodContext.get("entityOrEvent");
            JobResultStatusEnum jobStatus = getJobResultStatus(jobExecutionResult);
            String userName = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE);

            if (category == null || !category.equals("customer") || userName == null) return;
            executeNextJob(jobExecutionResult);

            // if there are no rows to process, we don't send a notification
            if(jobExecutionResult.getNbItemsToProcess() == 0) return;

            String subject;
            String contentHtml;
            Map<Object, Object> params = new HashMap<>();
            EmailTemplate emailTemplate;


            String jobCode = jobExecutionResult.getJobInstance().getCode();
            params.put("entityName", EntityNameEnum.valueOf(jobCode).entity);
            switch (jobStatus) {
                case SUCCESS:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_SUCCESS_EMAIL);
                    DateTime startDateTime = new DateTime(jobExecutionResult.getStartDate());
                    params.put("date", startDateTime.toLocalDate());
                    params.put("time", startDateTime.toLocalTime());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                case FAILURE:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_FAILURE_EMAIL);
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                default:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_ISSUES_EMAIL);
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
            }

            List<String> toEmails = List.of(userApi.find(userName).getEmail());
            emailSender.send(FROM_EMAIL, null, toEmails, subject, null, contentHtml);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void executeNextJob(JobExecutionResultImpl jobExecutionResult) {
        String nextJobCode;
        switch (jobExecutionResult.getJobInstance().getCode()) {
            case CUSTOMER_JOB_CODE:
                nextJobCode = CUSTOMER_ACCOUNT_JOB_CODE;
                break;
            case CUSTOMER_ACCOUNT_JOB_CODE:
                nextJobCode = PAYMENT_METHOD_JOB_CODE;
                break;
            case PAYMENT_METHOD_JOB_CODE:
                nextJobCode = BILLING_ACCOUNT_JOB_CODE;
                break;
            case BILLING_ACCOUNT_JOB_CODE:
                nextJobCode = USER_ACCOUNT_JOB_CODE;
                break;
            default:
                return;
        }
        JobInstanceInfoDto jobInstanceInfoDto = new JobInstanceInfoDto();
        jobInstanceInfoDto.setCode(nextJobCode);
        CustomFieldsDto customFields = new CustomFieldsDto();
        CustomFieldDto customFieldDto = new CustomFieldDto();
        customFieldDto.setCode(USER_CODE);
        customFieldDto.setStringValue((String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE));
        customFields.setCustomField(List.of(customFieldDto));
        jobInstanceInfoDto.setCustomFields(customFields);

        jobApi.executeJob(jobInstanceInfoDto);
    }

    private JobResultStatusEnum getJobResultStatus(JobExecutionResultImpl jobExecutionResult) {
        if(jobExecutionResult.getNbItemsToProcess() == 0)
            return JobResultStatusEnum.NULL;
        else if (jobExecutionResult.getNbItemsProcessedWithError() + 1 == jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.FAILURE;
        else if(jobExecutionResult.getNbItemsCorrectlyProcessed() < jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.PARTIAL_SUCCESS;
        else return JobResultStatusEnum.SUCCESS;
    }

    private enum JobResultStatusEnum {
        SUCCESS,
        FAILURE,
        PARTIAL_SUCCESS,
        NULL
    }

    private enum EntityNameEnum {
        massImportCustomerJob("Customer"),
        massImportCustomerAccountJob("CustomerAccount"),
        massImportPaymentMethodJob("PaymentMethod"),
        massImportBillingAccountJob("BillingAccount"),
        massImportUserAccountJob("UserAccount");

        String entity;

        EntityNameEnum(String entity) {
            this.entity = entity;
        }

    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.CustomerJobNotification'</where>
		</update>
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.joda.time.DateTime;
import org.meveo.admin.exception.BusinessException;
import org.meveo.api.UserApi;
import org.meveo.api.dto.CustomFieldDto;
import org.meveo.api.dto.CustomFieldsDto;
import org.meveo.api.dto.job.JobInstanceInfoDto;
import org.meveo.api.job.JobApi;
import org.meveo.model.communication.email.EmailTemplate;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.service.communication.impl.EmailSender;
import org.meveo.service.communication.impl.EmailTemplateService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.meveo.service.base.ValueExpressionWrapper.evaluateExpression;

public class SubscriptionJobNotification extends Script {
    private static final String USER_CODE = "user";
    private static final String FROM_EMAIL = "noreply@itnewvision.oc-sb.eu";

    private static final String MASS_IMPORT_SUCCESS_EMAIL = "MASS_IMPORT_SUCCESS_EMAIL";
    private static final String MASS_IMPORT_FAILURE_EMAIL = "MASS_IMPORT_FAILURE_EMAIL";
    private static final String MASS_IMPORT_ISSUES_EMAIL = "MASS_IMPORT_ISSUES_EMAIL";

    private static final String SUBSCRIPTION_JOB_CODE = "massImportSubscriptionJob";
    private static final String SERVICE_INSTANCE_JOB_CODE = "massImportServiceInstanceJob";
    private static final String ATTRIBUTE_INTSNACE_JOB_CODE = "massImportAttributeInstance";
    private static final String ACCESS_POINT_JOB_CODE = "massImportAccessPoint";

    private final transient JobApi jobApi = (JobApi) getServiceInterface(JobApi.class.getSimpleName());
    private final transient UserApi userApi = (UserApi) getServiceInterface(UserApi.class.getSimpleName());

    private final transient EmailSender emailSender = (EmailSender) getServiceInterface(EmailSender.class.getSimpleName());
    private final transient EmailTemplateService emailTemplateService = (EmailTemplateService) getServiceInterface(EmailTemplateService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        try {
            String category = (String) methodContext.get("category");
            JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) methodContext.get("entityOrEvent");
            JobResultStatusEnum jobStatus = getJobResultStatus(jobExecutionResult);
            String userName = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE);

            if (category == null || !category.equals("customer") || userName == null) return;
            executeNextJob(jobExecutionResult);

            // if there are no rows to process, we don't send a notification
            if(jobExecutionResult.getNbItemsToProcess() == 0) return;

            String subject;
            String contentHtml;
            Map<Object, Object> params = new HashMap<>();
            EmailTemplate emailTemplate;

            String jobCode = jobExecutionResult.getJobInstance().getCode();
            params.put("entityName", EntityNameEnum.valueOf(jobCode).entity);
            switch (jobStatus) {
                case SUCCESS:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_SUCCESS_EMAIL);
                    DateTime startDateTime = new DateTime(jobExecutionResult.getStartDate());
                    params.put("date", startDateTime.toLocalDate());
                    params.put("time", startDateTime.toLocalTime());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                case FAILURE:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_FAILURE_EMAIL);
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                default:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_ISSUES_EMAIL);
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
            }

            List<String> toEmails = List.of(userApi.find(userName).getEmail());
            emailSender.send(FROM_EMAIL, null, toEmails, subject, null, contentHtml);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void executeNextJob(JobExecutionResultImpl jobExecutionResult) {
        String nextJobCode;
        switch (jobExecutionResult.getJobInstance().getCode()) {
            case SUBSCRIPTION_JOB_CODE:
                nextJobCode = SERVICE_INSTANCE_JOB_CODE;
                break;
            case SERVICE_INSTANCE_JOB_CODE:
                nextJobCode = ATTRIBUTE_INTSNACE_JOB_CODE;
                break;
            case ATTRIBUTE_INTSNACE_JOB_CODE:
                nextJobCode = ACCESS_POINT_JOB_CODE;
                break;
            default:
                return;
        }
        JobInstanceInfoDto jobInstanceInfoDto = new JobInstanceInfoDto();
        jobInstanceInfoDto.setCode(nextJobCode);
        CustomFieldsDto customFields = new CustomFieldsDto();
        CustomFieldDto customFieldDto = new CustomFieldDto();
        customFieldDto.setCode(USER_CODE);
        customFieldDto.setStringValue((String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE));
        customFields.setCustomField(List.of(customFieldDto));
        jobInstanceInfoDto.setCustomFields(customFields);

        jobApi.executeJob(jobInstanceInfoDto);
    }

    private JobResultStatusEnum getJobResultStatus(JobExecutionResultImpl jobExecutionResult) {
        if(jobExecutionResult.getNbItemsToProcess() == 0)
            return JobResultStatusEnum.NULL;
        else if (jobExecutionResult.getNbItemsProcessedWithError() + 1 == jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.FAILURE;
        else if(jobExecutionResult.getNbItemsCorrectlyProcessed() < jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.PARTIAL_SUCCESS;
        else return JobResultStatusEnum.SUCCESS;
    }

    private enum JobResultStatusEnum {
        SUCCESS,
        FAILURE,
        PARTIAL_SUCCESS,
        NULL
    }

    private enum EntityNameEnum {
        massImportSubscriptionJob("Subscription"),
        massImportServiceInstanceJob("ServiceInstance"),
        massImportAttributeInstance("AttributeInstance"),
        massImportAccessPoint("AccessPoint");

        String entity;

        EntityNameEnum(String entity) {
            this.entity = entity;
        }

    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.SubscriptionJobNotification'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-56-SUB_20220926" author="Ilham-Chafik">
		<!-- Update email templates -->
		<update tableName="com_message_template">
			<column name="subject" value="Your import had a few issues 🧐" />
			<column name="htmlcontent">
				<![CDATA[
					<font face="Arial, Verdana">Your import of&nbsp;<b>#{entityName}</b>&nbsp;was not a 100% success and some records were not created. Please review the rejection file.
					]]>
			</column>
			<where>code='MASS_IMPORT_ISSUES_EMAIL'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Your import has failed 😟" />
			<column name="htmlcontent">
				<![CDATA[
					<font face="Arial, Verdana">Import process of&nbsp;<b>#{entityName}</b>&nbsp;has failed. Please check the rejection file for more details. If this persists, please contact&nbsp;</font>your integrator or our support team.
					]]>
			</column>
			<where>code='MASS_IMPORT_FAILURE_EMAIL'</where>
		</update>
		<update tableName="com_message_template">
			<column name="subject" value="Your import was a success 🥳" />
			<column name="htmlcontent">
				<![CDATA[
					<font face="Arial, Verdana">Your import of&nbsp;<b>#{entityName}</b>&nbsp;that started&nbsp;<b>#{date}</b>&nbsp;at&nbsp;<b>#{time}&nbsp;</b>has been&nbsp;</font>processed successfully.
					]]>
			</column>
			<where>code='MASS_IMPORT_SUCCESS_EMAIL'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-53_20220930" author="Ilham-Chafik">
		<!-- Delete existing job notifications -->
		<delete tableName="adm_notif_job">
			<where>id IN (SELECT id from adm_notification where code = 'OC_CUSTOMER_SUBSCRIPTION_NOTIFICATION')</where>
		</delete>
		<delete tableName="adm_notification_params">
			<where>notification_id IN (SELECT id from adm_notification where code = 'OC_CUSTOMER_SUBSCRIPTION_NOTIFICATION')</where>
		</delete>
		<delete tableName="adm_notification">
			<where>code='OC_CUSTOMER_SUBSCRIPTION_NOTIFICATION'</where>
		</delete>
		<delete tableName="adm_notif_job">
			<where>id IN (SELECT id from adm_notification where code = 'OC_CUSTOMER_JOB_NOTIFICATION')</where>
		</delete>
		<delete tableName="adm_notification_params">
			<where>notification_id IN (SELECT id from adm_notification where code = 'OC_CUSTOMER_JOB_NOTIFICATION')</where>
		</delete>
		<delete tableName="adm_notification">
			<where>code='OC_CUSTOMER_JOB_NOTIFICATION'</where>
		</delete>
		<!-- Delete separate scripts for job notifications (Customers & Subscriptions) -->
		<delete tableName="meveo_script_instance">
			<where>code='org.meveo.service.script.CustomerJobNotification'</where>
		</delete>
		<delete tableName="meveo_script_instance">
			<where>code='org.meveo.service.script.SubscriptionJobNotification'</where>
		</delete>

		<!-- Job notification script -->
		<insert tableName="meveo_script_instance">
			<column name="id" valueSequenceNext="meveo_script_instance_seq" />
			<column name="code" value="org.meveo.service.script.ImportJobNotification" />
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.joda.time.DateTime;
import org.meveo.admin.exception.BusinessException;
import org.meveo.api.UserApi;
import org.meveo.api.dto.CustomFieldDto;
import org.meveo.api.dto.CustomFieldsDto;
import org.meveo.api.dto.job.JobInstanceInfoDto;
import org.meveo.api.job.JobApi;
import org.meveo.model.communication.email.EmailTemplate;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.service.communication.impl.EmailSender;
import org.meveo.service.communication.impl.EmailTemplateService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.meveo.service.base.ValueExpressionWrapper.evaluateExpression;

public class ImportJobNotification extends Script {
    private static final String USER_CODE = "user";
    private static final String FROM_EMAIL = "noreply@itnewvision.oc-sb.eu";

    private static final String MASS_IMPORT_SUCCESS_EMAIL = "MASS_IMPORT_SUCCESS_EMAIL";
    private static final String MASS_IMPORT_FAILURE_EMAIL = "MASS_IMPORT_FAILURE_EMAIL";
    private static final String MASS_IMPORT_ISSUES_EMAIL = "MASS_IMPORT_ISSUES_EMAIL";

    private static final String CUSTOMER_JOB_CODE = "massImportCustomerJob";
    private static final String CUSTOMER_ACCOUNT_JOB_CODE = "massImportCustomerAccountJob";
    private static final String PAYMENT_METHOD_JOB_CODE = "massImportPaymentMethodJob";
    private static final String BILLING_ACCOUNT_JOB_CODE = "massImportBillingAccountJob";
    private static final String USER_ACCOUNT_JOB_CODE = "massImportUserAccountJob";

    private static final String SUBSCRIPTION_JOB_CODE = "massImportSubscriptionJob";
    private static final String SERVICE_INSTANCE_JOB_CODE = "massImportServiceInstanceJob";
    private static final String ATTRIBUTE_INTSNACE_JOB_CODE = "massImportAttributeInstance";
    private static final String ACCESS_POINT_JOB_CODE = "massImportAccessPoint";

    private final transient JobApi jobApi = (JobApi) getServiceInterface(JobApi.class.getSimpleName());
    private final transient UserApi userApi = (UserApi) getServiceInterface(UserApi.class.getSimpleName());

    private final transient EmailSender emailSender = (EmailSender) getServiceInterface(EmailSender.class.getSimpleName());
    private final transient EmailTemplateService emailTemplateService = (EmailTemplateService) getServiceInterface(EmailTemplateService.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> methodContext) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            String category = (String) methodContext.get("category");
            JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) methodContext.get("entityOrEvent");
            JobResultStatusEnum jobStatus = getJobResultStatus(jobExecutionResult);
            String userName = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE);

            if (category == null || !category.equals("customer") || userName == null) return;
            executeNextJob(jobExecutionResult);

            // if there are no rows to process, we don't send a notification
            if(jobExecutionResult.getNbItemsToProcess() == 0) return;

            String subject;
            String contentHtml;
            Map<Object, Object> params = new HashMap<>();
            EmailTemplate emailTemplate;


            String jobCode = jobExecutionResult.getJobInstance().getCode();
            params.put("entityName", EntityNameEnum.valueOf(jobCode).entity);
            switch (jobStatus) {
                case SUCCESS:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_SUCCESS_EMAIL);
                    DateTime startDateTime = new DateTime(jobExecutionResult.getStartDate());
                    params.put("date", startDateTime.toLocalDate());
                    params.put("time", startDateTime.toLocalTime());
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                case FAILURE:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_FAILURE_EMAIL);
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
                default:
                    emailTemplate = emailTemplateService.findByCode(MASS_IMPORT_ISSUES_EMAIL);
                    contentHtml = evaluateExpression(emailTemplate.getHtmlContent(), params, String.class);
                    subject = evaluateExpression(emailTemplate.getSubject(), params, String.class);
                    break;
            }

            List<String> toEmails = List.of(userApi.find(userName).getEmail());
            emailSender.send(FROM_EMAIL, null, toEmails, subject, null, contentHtml);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void executeNextJob(JobExecutionResultImpl jobExecutionResult) {
        String nextJobCode;
        switch (jobExecutionResult.getJobInstance().getCode()) {
            case CUSTOMER_JOB_CODE:
                nextJobCode = CUSTOMER_ACCOUNT_JOB_CODE;
                break;
            case CUSTOMER_ACCOUNT_JOB_CODE:
                nextJobCode = PAYMENT_METHOD_JOB_CODE;
                break;
            case PAYMENT_METHOD_JOB_CODE:
                nextJobCode = BILLING_ACCOUNT_JOB_CODE;
                break;
            case BILLING_ACCOUNT_JOB_CODE:
                nextJobCode = USER_ACCOUNT_JOB_CODE;
                break;
            case SUBSCRIPTION_JOB_CODE:
                nextJobCode = SERVICE_INSTANCE_JOB_CODE;
                break;
            case SERVICE_INSTANCE_JOB_CODE:
                nextJobCode = ATTRIBUTE_INTSNACE_JOB_CODE;
                break;
            case ATTRIBUTE_INTSNACE_JOB_CODE:
                nextJobCode = ACCESS_POINT_JOB_CODE;
                break;
            default:
                return;
        }
        JobInstanceInfoDto jobInstanceInfoDto = new JobInstanceInfoDto();
        jobInstanceInfoDto.setCode(nextJobCode);
        CustomFieldsDto customFields = new CustomFieldsDto();
        CustomFieldDto customFieldDto = new CustomFieldDto();
        customFieldDto.setCode(USER_CODE);
        customFieldDto.setStringValue((String) jobExecutionResult.getJobInstance().getCfValues().getValues().get(USER_CODE));
        customFields.setCustomField(List.of(customFieldDto));
        jobInstanceInfoDto.setCustomFields(customFields);

        jobApi.executeJob(jobInstanceInfoDto);
    }

    private JobResultStatusEnum getJobResultStatus(JobExecutionResultImpl jobExecutionResult) {
        if(jobExecutionResult.getNbItemsToProcess() == 0)
            return JobResultStatusEnum.NULL;
        else if (jobExecutionResult.getNbItemsProcessedWithError() + 1 == jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.FAILURE;
        else if(jobExecutionResult.getNbItemsCorrectlyProcessed() < jobExecutionResult.getNbItemsToProcess())
            return JobResultStatusEnum.PARTIAL_SUCCESS;
        else return JobResultStatusEnum.SUCCESS;
    }

    private enum JobResultStatusEnum {
        SUCCESS,
        FAILURE,
        PARTIAL_SUCCESS,
        NULL
    }

    private enum EntityNameEnum {
        massImportCustomerJob("Customer"),
        massImportCustomerAccountJob("CustomerAccount"),
        massImportPaymentMethodJob("PaymentMethod"),
        massImportBillingAccountJob("BillingAccount"),
        massImportUserAccountJob("UserAccount"),
        massImportSubscriptionJob("Subscription"),
        massImportServiceInstanceJob("ServiceInstance"),
        massImportAttributeInstance("AttributeInstance"),
        massImportAccessPoint("AccessPoint");

        String entity;

        EntityNameEnum(String entity) {
            this.entity = entity;
        }

    }
}
				]]>
			</column>
			<column name="created" valueDate="${db.current.time}" />
			<column name="creator" value="opencell.admin" />
			<column name="version" valueNumeric="0" />
			<column name="src_type" value="JAVA" />
		</insert>

		<insert tableName="adm_notification">
			<column name="id" valueSequenceNext="adm_notification_seq" />
			<column name="created" valueDate="${db.current.time}" />
			<column name="code" value="OC_MASS_IMPORT_NOTIFICATION" />
			<column name="class_name_filter" value="org.meveo.model.jobs.JobExecutionResultImpl" />
			<column name="event_type_filter" value="PROCESSED" />
			<column name="version" value="0" />
			<column name="creator" value="opencell.admin" />
			<column name="script_instance_id"
					valueComputed="(SELECT id from meveo_script_instance where code = 'org.meveo.service.script.ImportJobNotification')"/>
		</insert>
		<insert tableName="adm_notif_job">
			<column name="id"
					valueComputed="(SELECT id from adm_notification where code = 'OC_MASS_IMPORT_NOTIFICATION')" />
			<column name="job_instance_id"
					valueComputed="(SELECT id from meveo_job_instance where code = 'massImportCustomerJob')"/>
		</insert>
		<insert tableName="adm_notification_params">
			<column name="notification_id"
					valueComputed="(SELECT id from adm_notification where code = 'OC_MASS_IMPORT_NOTIFICATION')" />
			<column name="params" value="customer"/>
			<column name="params_key" value="category"/>
		</insert>
	</changeSet>

	<changeSet id="#OUTRD-66_20221003" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.dto.account.BankCoordinatesDto;
import org.meveo.api.dto.payment.PaymentMethodDto;
import org.meveo.api.payment.PaymentMethodApi;
import org.meveo.model.payments.CreditCardTypeEnum;
import org.meveo.model.payments.PaymentMethod;
import org.meveo.model.payments.PaymentMethodEnum;
import org.meveo.service.payments.impl.PaymentMethodService;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class PaymentMethodImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "PAYMENT_METHOD";
    private static final String ENTITY_NAME = "PaymentMethod";

    public enum PaymentMethodActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface("PaymentMethodService");
    private final PaymentMethodApi paymentMethodApi = (PaymentMethodApi) getServiceInterface(PaymentMethodApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(PaymentMethodActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                PaymentMethodActionEnum action = PaymentMethodActionEnum.valueOf(ocAction);

                PaymentMethodDto paymentMethodDto = validateAndGetPaymentMethod(recordMap);


                if (action == PaymentMethodActionEnum.CREATE) {
                    setPaymentMethodValues(recordMap, paymentMethodDto);
                    Long paymentMethodId = paymentMethodApi.create(paymentMethodDto);
                    PaymentMethod paymentMethod = paymentMethodService.findById(paymentMethodId);
                    this.setCFValues(recordMap, paymentMethod, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private PaymentMethodDto validateAndGetPaymentMethod(Map<String, Object> recordMap) {
        PaymentMethodDto paymentMethodDto = new PaymentMethodDto();

        String customerAccountCode = (String) recordMap.get("OC_PMT_CA");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        return paymentMethodDto;
    }

    private void setPaymentMethodValues(Map<String, Object> recordMap, PaymentMethodDto paymentMethodDto) throws ParseException {
        PaymentMethodEnum ocPaymentMethodType = PaymentMethodEnum.valueOf((String) recordMap.get("OC_PMT_TYPE"));
        paymentMethodDto.setPaymentMethodType(ocPaymentMethodType);
        paymentMethodDto.setPreferred(Objects.equals(recordMap.get("OC_PMT_PREFERRED"), "X"));
        paymentMethodDto.setAlias((String) recordMap.get("OC_PMT_ALIAS"));
        paymentMethodDto.setCustomerAccountCode((String) recordMap.get("OC_PMT_CA"));
        if (!((String) recordMap.get("OC_PMT_cardType")).isEmpty()) {
            paymentMethodDto.setCardType(CreditCardTypeEnum.valueOf((String) recordMap.get("OC_PMT_cardType")));
        }
        if (!((String) recordMap.get("OC_PMT_monthExpiration")).isEmpty()) {
            paymentMethodDto.setMonthExpiration(Integer.parseInt((String) recordMap.get("OC_PMT_monthExpiration")));
        }
        if (!((String) recordMap.get("OC_PMT_yearExpiration")).isEmpty()) {
            paymentMethodDto.setYearExpiration(Integer.parseInt((String) recordMap.get("OC_PMT_yearExpiration")));
        }
        paymentMethodDto.setTokenId((String) recordMap.get("OC_PMT_tokenId"));
        paymentMethodDto.setCardNumber((String) recordMap.get("OC_PMT_cardNumber"));
        paymentMethodDto.setIssueNumber((String) recordMap.get("OC_PMT_issueNumber"));
        paymentMethodDto.setUserId((String) recordMap.get("OC_PMT_userId"));
        paymentMethodDto.setEmail((String) recordMap.get("OC_PMT_email"));
        paymentMethodDto.setOwner((String) recordMap.get("OC_PMT_accountOwner"));
        if (!((String) recordMap.get("OC_PMT_referenceDocumentCode")).isEmpty()) {
            paymentMethodDto.setReferenceDocumentCode((String) recordMap.get("OC_PMT_referenceDocumentCode"));
        }

        if (ocPaymentMethodType == PaymentMethodEnum.DIRECTDEBIT) {
            BankCoordinatesDto bankCoordinatesDto = new BankCoordinatesDto();
            bankCoordinatesDto.setBankCode((String) recordMap.get("OC_PMT_bankCode"));
            bankCoordinatesDto.setBranchCode((String) recordMap.get("OC_PMT_branchCode"));
            bankCoordinatesDto.setAccountNumber((String) recordMap.get("OC_PMT_accountNumber"));
            bankCoordinatesDto.setKey((String) recordMap.get("OC_PMT_key"));
            bankCoordinatesDto.setIban((String) recordMap.get("OC_PMT_iban"));
            bankCoordinatesDto.setBic((String) recordMap.get("OC_PMT_bic"));
            bankCoordinatesDto.setAccountOwner((String) recordMap.get("OC_PMT_accountOwner"));
            bankCoordinatesDto.setBankName((String) recordMap.get("OC_PMT_bankName"));
            bankCoordinatesDto.setBankId((String) recordMap.get("OC_PMT_bankId"));
            bankCoordinatesDto.setIssuerNumber((String) recordMap.get("OC_PMT_issuerNumber"));
            bankCoordinatesDto.setIssuerName((String) recordMap.get("OC_PMT_issuerName"));
            bankCoordinatesDto.setIcs((String) recordMap.get("OC_PMT_ics"));
            paymentMethodDto.setBankCoordinates(bankCoordinatesDto);
        }

        paymentMethodDto.setMandateIdentification((String) recordMap.get("OC_PMT_mandateIdentification"));

        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        String ocPaymentMethodMandateDate = (String) recordMap.get("OC_PMT_mandateDate");
        Date mandateDate = StringUtils.isEmpty(ocPaymentMethodMandateDate) ? null : dateFormat.parse(ocPaymentMethodMandateDate);
        paymentMethodDto.setMandateDate(mandateDate);
    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.PaymentMethodImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-69_20221003-scripts" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.BillingAccountApi;
import org.meveo.api.dto.account.AddressDto;
import org.meveo.api.dto.account.BillingAccountDto;
import org.meveo.api.dto.account.NameDto;
import org.meveo.model.billing.BillingAccount;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class BillingAccountImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "BILLING_ACCOUNT";
    private static final String ENTITY_NAME = "BillingAccount";

    public enum BillingAccountActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final BillingAccountApi billingAccountApi = (BillingAccountApi) getServiceInterface(BillingAccountApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(BillingAccountActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                BillingAccountActionEnum action = BillingAccountActionEnum.valueOf(ocAction);

                BillingAccountDto billingAccountDto = validateAndGetBillingAccount(recordMap);

                if (BillingAccountActionEnum.CREATE.equals(action)) {
                    setBillingAccountValues(recordMap, billingAccountDto);
                    BillingAccount billingAccount = billingAccountApi.create(billingAccountDto);
                    this.setCFValues(recordMap, billingAccount, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private BillingAccountDto validateAndGetBillingAccount(Map<String, Object> recordMap) {
        BillingAccountDto billingAccountDto;

        String customerAccountCode = (String) recordMap.get("OC_CUSTOMERACCOUNT_CODE");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        String billingAccountCode = (String) recordMap.get("OC_BILLINGACCOUNT_CODE");
        if (billingAccountCode.isEmpty()) {
            throw new ValidationException("billing_account_code is required");
        }

        billingAccountDto = new BillingAccountDto();

        return billingAccountDto;
    }

    private void setBillingAccountValues(Map<String, Object> recordMap, BillingAccountDto billingAccountDto) throws ParseException {
        billingAccountDto.setCustomerAccount((String) recordMap.get("OC_CUSTOMERACCOUNT_CODE"));
        billingAccountDto.setCode((String) recordMap.get("OC_BILLINGACCOUNT_CODE"));
        billingAccountDto.setDescription((String) recordMap.get("OC_BILLINGACCOUNT_DESCRIPTION"));
        billingAccountDto.setBillingCycle((String) recordMap.get("OC_BILLINGACCOUNT_BC"));
        billingAccountDto.setCountry((String) recordMap.get("OC_BILLINGACCOUNT_COUNTRY"));
        billingAccountDto.setLanguage((String) recordMap.get("OC_BILLINGACCOUNT_LANGUAGE"));
        billingAccountDto.setTradingCurrency((String) recordMap.get("OC_BILLINGACCOUNT_CURRENCY"));
        billingAccountDto.setTaxCategoryCode((String) recordMap.get("OC_BILLINGACCOUNT_TAXCAT"));
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        String subscriptionDate = (String) recordMap.get("OC_BA_DATE");
        billingAccountDto.setSubscriptionDate(StringUtils.isEmpty(subscriptionDate) ? null : dateFormat.parse(subscriptionDate));
        billingAccountDto.setRegistrationNo((String) recordMap.get("OC_BA_REGISTRATION"));
        billingAccountDto.setVatNo((String) recordMap.get("OC_BA_TVANUMBER"));

        NameDto name = new NameDto();
        name.setTitle((String) recordMap.get("OC_BA_TITLE"));
        name.setFirstName((String) recordMap.get("OC_BA_FNAME"));
        name.setLastName((String) recordMap.get("OC_BA_LNAME"));
        billingAccountDto.setName(name);

        billingAccountDto.setIsCompany(Objects.equals(recordMap.get("OC_BA_ORGANIZATION"), "X"));
        billingAccountDto.setElectronicBilling(Objects.equals(recordMap.get("OC_BA_EBILL"), "X"));
        billingAccountDto.setEmail((String) recordMap.get("OC_BA_EBILLEMAIL"));
        billingAccountDto.setCcedEmails((String) recordMap.get("OC_BA_EBILLEMAILS"));

        AddressDto addressDto = new AddressDto();
        addressDto.setAddress1((String) recordMap.get("OC_BA_ADDRESS"));
        addressDto.setZipCode((String) recordMap.get("OC_BA_ZIPCODE"));
        addressDto.setCity((String) recordMap.get("OC_BA_CITY"));
        addressDto.setState((String) recordMap.get("OC_BA_STATE"));
        addressDto.setCountry((String) recordMap.get("OC_BA_COUNTRY"));
        billingAccountDto.setAddress(addressDto);
    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.BillingAccountImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-68_20221004" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.BillingAccountApi;
import org.meveo.api.dto.account.AddressDto;
import org.meveo.api.dto.account.BillingAccountDto;
import org.meveo.api.dto.account.NameDto;
import org.meveo.api.dto.response.TitleDto;
import org.meveo.model.billing.BillingAccount;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class BillingAccountImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "BILLING_ACCOUNT";
    private static final String ENTITY_NAME = "BillingAccount";

    public enum BillingAccountActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final BillingAccountApi billingAccountApi = (BillingAccountApi) getServiceInterface(BillingAccountApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(BillingAccountActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                BillingAccountActionEnum action = BillingAccountActionEnum.valueOf(ocAction);

                BillingAccountDto billingAccountDto = validateAndGetBillingAccount(recordMap);

                if (BillingAccountActionEnum.CREATE.equals(action)) {
                    setBillingAccountValues(recordMap, billingAccountDto);
                    BillingAccount billingAccount = billingAccountApi.create(billingAccountDto);
                    this.setCFValues(recordMap, billingAccount, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private BillingAccountDto validateAndGetBillingAccount(Map<String, Object> recordMap) {
        BillingAccountDto billingAccountDto;

        String customerAccountCode = (String) recordMap.get("OC_CUSTOMERACCOUNT_CODE");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        String billingAccountCode = (String) recordMap.get("OC_BILLINGACCOUNT_CODE");
        if (billingAccountCode.isEmpty()) {
            throw new ValidationException("billing_account_code is required");
        }

        billingAccountDto = new BillingAccountDto();

        return billingAccountDto;
    }

    private void setBillingAccountValues(Map<String, Object> recordMap, BillingAccountDto billingAccountDto) throws ParseException {
        billingAccountDto.setCustomerAccount((String) recordMap.get("OC_CUSTOMERACCOUNT_CODE"));
        billingAccountDto.setCode((String) recordMap.get("OC_BILLINGACCOUNT_CODE"));
        billingAccountDto.setDescription((String) recordMap.get("OC_BILLINGACCOUNT_DESCRIPTION"));
        billingAccountDto.setBillingCycle((String) recordMap.get("OC_BILLINGACCOUNT_BC"));
        billingAccountDto.setCountry((String) recordMap.get("OC_BILLINGACCOUNT_COUNTRY"));
        billingAccountDto.setLanguage((String) recordMap.get("OC_BILLINGACCOUNT_LANGUAGE"));
        billingAccountDto.setTradingCurrency((String) recordMap.get("OC_BILLINGACCOUNT_CURRENCY"));
        billingAccountDto.setTaxCategoryCode((String) recordMap.get("OC_BILLINGACCOUNT_TAXCAT"));
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        String subscriptionDate = (String) recordMap.get("OC_BA_DATE");
        billingAccountDto.setSubscriptionDate(StringUtils.isEmpty(subscriptionDate) ? null : dateFormat.parse(subscriptionDate));
        billingAccountDto.setRegistrationNo((String) recordMap.get("OC_BA_REGISTRATION"));
        billingAccountDto.setVatNo((String) recordMap.get("OC_BA_TVANUMBER"));

        NameDto name = new NameDto();
        name.setTitle((String) recordMap.get("OC_BA_TITLE"));
        name.setFirstName((String) recordMap.get("OC_BA_FNAME"));
        name.setLastName((String) recordMap.get("OC_BA_LNAME"));
        billingAccountDto.setName(name);

        TitleDto titleDto = new TitleDto();
        if(Objects.equals(recordMap.get("OC_BA_ORGANIZATION"), "X")) {
            titleDto.setIsCompany(true);
            titleDto.setCode((String) recordMap.get("OC_BA_TITLE"));
            billingAccountDto.setLegalEntityType(titleDto);
        }

        billingAccountDto.setIsCompany(Objects.equals(recordMap.get("OC_BA_ORGANIZATION"), "X"));
        billingAccountDto.setElectronicBilling(Objects.equals(recordMap.get("OC_BA_EBILL"), "X"));
        billingAccountDto.setEmail((String) recordMap.get("OC_BA_EBILLEMAIL"));
        billingAccountDto.setCcedEmails((String) recordMap.get("OC_BA_EBILLEMAILS"));

        AddressDto addressDto = new AddressDto();
        addressDto.setAddress1((String) recordMap.get("OC_BA_ADDRESS"));
        addressDto.setZipCode((String) recordMap.get("OC_BA_ZIPCODE"));
        addressDto.setCity((String) recordMap.get("OC_BA_CITY"));
        addressDto.setState((String) recordMap.get("OC_BA_STATE"));
        addressDto.setCountry((String) recordMap.get("OC_BA_COUNTRY"));
        billingAccountDto.setAddress(addressDto);
    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.BillingAccountImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-69_20221005" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.BillingAccountApi;
import org.meveo.api.dto.account.AddressDto;
import org.meveo.api.dto.account.BillingAccountDto;
import org.meveo.api.dto.account.NameDto;
import org.meveo.api.dto.response.TitleDto;
import org.meveo.model.billing.BillingAccount;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class BillingAccountImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "BILLING_ACCOUNT";
    private static final String ENTITY_NAME = "BillingAccount";

    public enum BillingAccountActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final BillingAccountApi billingAccountApi = (BillingAccountApi) getServiceInterface(BillingAccountApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(BillingAccountActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                BillingAccountActionEnum action = BillingAccountActionEnum.valueOf(ocAction);

                BillingAccountDto billingAccountDto = validateAndGetBillingAccount(recordMap);

                if (BillingAccountActionEnum.CREATE.equals(action)) {
                    setBillingAccountValues(recordMap, billingAccountDto);
                    BillingAccount billingAccount = billingAccountApi.create(billingAccountDto);
                    this.setCFValues(recordMap, billingAccount, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private BillingAccountDto validateAndGetBillingAccount(Map<String, Object> recordMap) {
        BillingAccountDto billingAccountDto;

        String customerAccountCode = (String) recordMap.get("OC_CUSTOMERACCOUNT_CODE");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        String billingAccountCode = (String) recordMap.get("OC_BILLINGACCOUNT_CODE");
        if (billingAccountCode.isEmpty()) {
            throw new ValidationException("billing_account_code is required");
        }

        billingAccountDto = new BillingAccountDto();

        return billingAccountDto;
    }

    private void setBillingAccountValues(Map<String, Object> recordMap, BillingAccountDto billingAccountDto) throws ParseException {
        billingAccountDto.setCustomerAccount((String) recordMap.get("OC_CUSTOMERACCOUNT_CODE"));
        billingAccountDto.setCode((String) recordMap.get("OC_BILLINGACCOUNT_CODE"));
        billingAccountDto.setDescription((String) recordMap.get("OC_BILLINGACCOUNT_DESCRIPTION"));
        billingAccountDto.setBillingCycle((String) recordMap.get("OC_BILLINGACCOUNT_BC"));
        billingAccountDto.setCountry((String) recordMap.get("OC_BILLINGACCOUNT_COUNTRY"));
        billingAccountDto.setLanguage((String) recordMap.get("OC_BILLINGACCOUNT_LANGUAGE"));
        billingAccountDto.setTradingCurrency((String) recordMap.get("OC_BILLINGACCOUNT_CURRENCY"));
        billingAccountDto.setTaxCategoryCode((String) recordMap.get("OC_BILLINGACCOUNT_TAXCAT"));
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);
        String subscriptionDate = (String) recordMap.get("OC_BA_DATE");
        try {
            billingAccountDto.setSubscriptionDate(StringUtils.isEmpty(subscriptionDate) ? null : dateFormat.parse(subscriptionDate));
        } catch(ParseException e) {
            throw new ValidationException("Incorrect date format for subscription date");
        }
        billingAccountDto.setRegistrationNo((String) recordMap.get("OC_BA_REGISTRATION"));
        billingAccountDto.setVatNo((String) recordMap.get("OC_BA_TVANUMBER"));

        NameDto name = new NameDto();
        name.setTitle((String) recordMap.get("OC_BA_TITLE"));
        name.setFirstName((String) recordMap.get("OC_BA_FNAME"));
        name.setLastName((String) recordMap.get("OC_BA_LNAME"));
        billingAccountDto.setName(name);

        TitleDto titleDto = new TitleDto();
        if(Objects.equals(recordMap.get("OC_BA_ORGANIZATION"), "X")) {
            titleDto.setIsCompany(true);
            titleDto.setCode((String) recordMap.get("OC_BA_TITLE"));
            billingAccountDto.setLegalEntityType(titleDto);
        }

        billingAccountDto.setIsCompany(Objects.equals(recordMap.get("OC_BA_ORGANIZATION"), "X"));
        billingAccountDto.setElectronicBilling(Objects.equals(recordMap.get("OC_BA_EBILL"), "X"));
        billingAccountDto.setEmail((String) recordMap.get("OC_BA_EBILLEMAIL"));
        billingAccountDto.setCcedEmails((String) recordMap.get("OC_BA_EBILLEMAILS"));

        AddressDto addressDto = new AddressDto();
        addressDto.setAddress1((String) recordMap.get("OC_BA_ADDRESS"));
        addressDto.setZipCode((String) recordMap.get("OC_BA_ZIPCODE"));
        addressDto.setCity((String) recordMap.get("OC_BA_CITY"));
        addressDto.setState((String) recordMap.get("OC_BA_STATE"));
        addressDto.setCountry((String) recordMap.get("OC_BA_COUNTRY"));
        billingAccountDto.setAddress(addressDto);
    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.BillingAccountImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-73_20221006" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.BillingAccountApi;
import org.meveo.api.dto.account.AddressDto;
import org.meveo.api.dto.account.BillingAccountDto;
import org.meveo.api.dto.account.NameDto;
import org.meveo.api.dto.response.TitleDto;
import org.meveo.model.billing.BillingAccount;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class BillingAccountImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "BILLING_ACCOUNT";
    private static final String ENTITY_NAME = "BillingAccount";

    public enum BillingAccountActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final BillingAccountApi billingAccountApi = (BillingAccountApi) getServiceInterface(BillingAccountApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(BillingAccountActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                BillingAccountActionEnum action = BillingAccountActionEnum.valueOf(ocAction);

                BillingAccountDto billingAccountDto = validateAndGetBillingAccount(recordMap);

                if (BillingAccountActionEnum.CREATE.equals(action)) {
                    setBillingAccountValues(recordMap, billingAccountDto);
                    BillingAccount billingAccount = billingAccountApi.create(billingAccountDto);
                    this.setCFValues(recordMap, billingAccount, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private BillingAccountDto validateAndGetBillingAccount(Map<String, Object> recordMap) {
        BillingAccountDto billingAccountDto;

        String customerAccountCode = (String) recordMap.get("OC_CUSTOMERACCOUNT_CODE");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        String billingAccountCode = (String) recordMap.get("OC_BILLINGACCOUNT_CODE");
        if (billingAccountCode.isEmpty()) {
            throw new ValidationException("billing_account_code is required");
        }

        billingAccountDto = new BillingAccountDto();

        return billingAccountDto;
    }

    private void setBillingAccountValues(Map<String, Object> recordMap, BillingAccountDto billingAccountDto) throws ParseException {
        billingAccountDto.setCustomerAccount((String) recordMap.get("OC_CUSTOMERACCOUNT_CODE"));
        billingAccountDto.setCode((String) recordMap.get("OC_BILLINGACCOUNT_CODE"));
        billingAccountDto.setDescription((String) recordMap.get("OC_BILLINGACCOUNT_DESCRIPTION"));
        billingAccountDto.setBillingCycle((String) recordMap.get("OC_BILLINGACCOUNT_BC"));
        billingAccountDto.setCountry((String) recordMap.get("OC_BILLINGACCOUNT_COUNTRY"));
        billingAccountDto.setLanguage((String) recordMap.get("OC_BILLINGACCOUNT_LANGUAGE"));
        billingAccountDto.setTradingCurrency((String) recordMap.get("OC_BILLINGACCOUNT_CURRENCY"));
        billingAccountDto.setTaxCategoryCode((String) recordMap.get("OC_BILLINGACCOUNT_TAXCAT"));
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);
        String subscriptionDate = (String) recordMap.get("OC_BA_DATE");
        try {
            billingAccountDto.setSubscriptionDate(StringUtils.isEmpty(subscriptionDate) ? null : dateFormat.parse(subscriptionDate));
        } catch(ParseException e) {
            throw new ValidationException("Incorrect date format for initial agreement date. Please use 'dd/MM/yyyy'");
        }
        billingAccountDto.setRegistrationNo((String) recordMap.get("OC_BA_REGISTRATION"));
        billingAccountDto.setVatNo((String) recordMap.get("OC_BA_TVANUMBER"));

        NameDto name = new NameDto();
        name.setTitle((String) recordMap.get("OC_BA_TITLE"));
        name.setFirstName((String) recordMap.get("OC_BA_FNAME"));
        name.setLastName((String) recordMap.get("OC_BA_LNAME"));
        billingAccountDto.setName(name);

        TitleDto titleDto = new TitleDto();
        if(Objects.equals(recordMap.get("OC_BA_ORGANIZATION"), "X")) {
            titleDto.setIsCompany(true);
            titleDto.setCode((String) recordMap.get("OC_BA_TITLE"));
            billingAccountDto.setLegalEntityType(titleDto);
        }

        billingAccountDto.setIsCompany(Objects.equals(recordMap.get("OC_BA_ORGANIZATION"), "X"));
        billingAccountDto.setElectronicBilling(Objects.equals(recordMap.get("OC_BA_EBILL"), "X"));
        billingAccountDto.setEmail((String) recordMap.get("OC_BA_EBILLEMAIL"));
        billingAccountDto.setCcedEmails((String) recordMap.get("OC_BA_EBILLEMAILS"));

        AddressDto addressDto = new AddressDto();
        addressDto.setAddress1((String) recordMap.get("OC_BA_ADDRESS"));
        addressDto.setZipCode((String) recordMap.get("OC_BA_ZIPCODE"));
        addressDto.setCity((String) recordMap.get("OC_BA_CITY"));
        addressDto.setState((String) recordMap.get("OC_BA_STATE"));
        addressDto.setCountry((String) recordMap.get("OC_BA_COUNTRY"));
        billingAccountDto.setAddress(addressDto);
    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.BillingAccountImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-78_20221010" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.EnumUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.billing.SubscriptionDto;
import org.meveo.api.dto.billing.SubscriptionRenewalDto;
import org.meveo.model.billing.*;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.stream.Stream;


public class SubscriptionMassImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "SUBSCRIPTION";
    private static final String ENTITY_NAME = "Subscription";

    public enum SubscriptionActionEnum {
        CREATE, UPDATE, SUSPEND, RESUME, ACTIVATE, TERMINATE
    }

    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(SubscriptionActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                SubscriptionActionEnum action = SubscriptionActionEnum.valueOf(OC_ACTION);

                SubscriptionDto subscriptionDto = validateAndGetSubscription(action, recordMap);

                if (SubscriptionActionEnum.CREATE.equals(action)) {
                    setSubscriptionValues(recordMap, subscriptionDto);
                    Subscription subscription = subscriptionApi.create(subscriptionDto);
                    this.setCFValues(recordMap, subscription, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private SubscriptionDto validateAndGetSubscription(SubscriptionActionEnum action, Map<String, Object> recordMap) {
        SubscriptionDto subscriptionDto = null;

        String subscriptionCode = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (subscriptionCode.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String useraccountCode = (String) recordMap.get("OC_USERACCOUNT_CODE");
        if (useraccountCode.isEmpty()) {
            throw new ValidationException("useraccount_code is required");
        }

        subscriptionDto = new SubscriptionDto();

        return subscriptionDto;
    }

    private void setSubscriptionValues(Map<String, Object> recordMap, SubscriptionDto subscriptionDto) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);

        String OC_subscription_date = (String) recordMap.get("OC_SUBSCRIPTION_DATE");
        String OC_endagreement_date = (String) recordMap.get("OC_ENDAGREEMENTDATE");
        String OC_termination_date = (String) recordMap.get("OC_TERMINATIONDATE");

        String OC_sub_inittermtype = (String) recordMap.get("OC_SUB_INITTERMTYPE");
        String OC_sub_durationtype = (String) recordMap.get("OC_SUB_DURATIONTYPE");
        Integer OC_sub_inittermlength = ((String) recordMap.get("OC_SUB_INITTERMLENGTH")).isEmpty() ? null
                : Integer.parseInt( (String) recordMap.get("OC_SUB_INITTERMLENGTH"));

        String OC_sub_inittermunit = (String) recordMap.get("OC_SUB_INITTERMUNIT");
        String OC_sub_endtermaction = (String) recordMap.get("OC_SUB_ENDTERMACTION");

        try {
            Date subscriptionDate = StringUtils.isEmpty(OC_subscription_date) ? null : dateFormat.parse(OC_subscription_date);
            subscriptionDto.setSubscriptionDate(subscriptionDate);
        } catch(ParseException e) {
            throw new ValidationException("Incorrect date format for subscription date. Please use 'dd/MM/yyyy'");
        }
        try {
            Date endagreementDate = StringUtils.isEmpty(OC_endagreement_date) ? null : dateFormat.parse(OC_endagreement_date);
            subscriptionDto.setEndAgreementDate(endagreementDate);
        } catch(ParseException e) {
            throw new ValidationException("Incorrect date format for end agreement date. Please use 'dd/MM/yyyy'");
        }
        try {
            Date terminationDate = StringUtils.isEmpty(OC_termination_date) ? null : dateFormat.parse(OC_termination_date);
            subscriptionDto.setTerminationDate(terminationDate);
        } catch(ParseException e) {
            throw new ValidationException("Incorrect date format for termination date. Please use 'dd/MM/yyyy'");
        }

        SubscriptionRenewal.InitialTermTypeEnum initialTermTypeEnum = (!EnumUtils.isValidEnum(SubscriptionRenewal.InitialTermTypeEnum.class, OC_sub_inittermtype)) ? null
                : SubscriptionRenewal.InitialTermTypeEnum.valueOf(OC_sub_inittermtype);
        SubscriptionRenewal.RenewalPeriodUnitEnum renewalPeriodUnit = (!EnumUtils.isValidEnum(SubscriptionRenewal.RenewalPeriodUnitEnum.class, OC_sub_durationtype)) ? null
                : SubscriptionRenewal.RenewalPeriodUnitEnum.valueOf(OC_sub_durationtype);

        SubscriptionRenewal.RenewalPeriodUnitEnum initialyActiveForUnit = (!EnumUtils.isValidEnum(SubscriptionRenewal.RenewalPeriodUnitEnum.class, OC_sub_inittermunit)) ? null
                : SubscriptionRenewal.RenewalPeriodUnitEnum.valueOf(OC_sub_inittermunit);
        SubscriptionRenewal.EndOfTermActionEnum endOfTermAction = (!EnumUtils.isValidEnum(SubscriptionRenewal.EndOfTermActionEnum.class, OC_sub_endtermaction)) ? null
                : SubscriptionRenewal.EndOfTermActionEnum.valueOf(OC_sub_endtermaction);
        String terminationReason = StringUtils.isEmpty((String) recordMap.get("OC_SUB_TERMINATIONREASON")) ? null : ((String) recordMap.get("OC_SUB_TERMINATIONREASON"));

        SubscriptionRenewalDto subscriptionRenewalDto = new SubscriptionRenewalDto();
        subscriptionRenewalDto.setInitialTermType(initialTermTypeEnum);
        subscriptionRenewalDto.setRenewForUnit(renewalPeriodUnit);
        subscriptionRenewalDto.setInitialyActiveFor(OC_sub_inittermlength);
        subscriptionRenewalDto.setInitialyActiveForUnit(initialyActiveForUnit);
        subscriptionRenewalDto.setEndOfTermAction(endOfTermAction);
        subscriptionRenewalDto.setTerminationReasonCode(terminationReason);

        subscriptionDto.setUserAccount((String) recordMap.get("OC_USERACCOUNT_CODE"));
        subscriptionDto.setCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        subscriptionDto.setStatus(SubscriptionStatusEnum.valueOf((String) recordMap.get("OC_STATUS")));
        subscriptionDto.setDescription((String) recordMap.get("OC_SUBSCRIPTION_DESCRIPTION"));
        subscriptionDto.setOfferTemplate((String) recordMap.get("OC_OFFER_CODE"));
        subscriptionDto.setSeller((String) recordMap.get("OC_SELLER_CODE"));
        subscriptionDto.setTerminationReason(terminationReason);
        subscriptionDto.setBillingCycle((String) recordMap.get("OC_SUB_BC"));

        subscriptionDto.setRenewalRule(subscriptionRenewalDto);
        subscriptionDto.setElectronicBilling(recordMap.get("OC_SUB_EBILL").toString().equals("X"));
        subscriptionDto.setEmail((String) recordMap.get("OC_SUB_EBILLEMAIL"));
        subscriptionDto.setCcedEmails((String) recordMap.get("OC_SUB_EBILLEMAILS"));

    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.SubscriptionMassImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-72_20221011" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.cpq.ProductToInstantiateDto;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.script.GenericMassImportScript;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

public class ServiceInstanceImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "SERVICE_INSTANCE";
    private static final String ENTITY_NAME = "ServiceInstance";

    public enum ServiceInstanceActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface("ServiceInstanceService");
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(ServiceInstanceActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                ServiceInstanceActionEnum action = ServiceInstanceActionEnum.valueOf(OC_ACTION);

                ServiceInstance serviceInstance = validateAndGetServiceInstance(action, recordMap);

                if (ServiceInstanceActionEnum.CREATE.equals(action)) {
                    setServiceInstanceValues(recordMap, serviceInstance);
                    this.setCFValues(recordMap, serviceInstance, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private ServiceInstance validateAndGetServiceInstance(ServiceInstanceActionEnum action, Map<String, Object> recordMap) {
        ServiceInstance serviceInstance = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String OC_si_code = (String) recordMap.get("OC_SI_CODE");
        if (OC_si_code.isEmpty()) {
            throw new ValidationException("serviceinstance_code is required");
        }

        serviceInstance = new ServiceInstance();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        return serviceInstance;
    }

    private void setServiceInstanceValues(Map<String, Object> recordMap, ServiceInstance serviceInstance) throws ParseException {
        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);

        serviceInstance.setCode((String) recordMap.get("OC_SI_CODE"));
        serviceInstance.setSubscription(subscription);
        serviceInstance.setDescription((String) recordMap.get("OC_SI_DESC"));

        // Instantiate products
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);

        String OC_product_deliv_dt = (String) recordMap.get("OC_PRODUCT_DELIV_DT");
        ProductToInstantiateDto productToInstantiateDto = new ProductToInstantiateDto();
        productToInstantiateDto.setProductCode((String) recordMap.get("OC_PRODUCT_CODE"));
        productToInstantiateDto.setQuantity(new BigDecimal((String) recordMap.get("OC_PRODUCT_QTY")));
        try {
            Date deliveryDate = StringUtils.isEmpty(OC_product_deliv_dt) ? null : dateFormat.parse(OC_product_deliv_dt);
            productToInstantiateDto.setDeliveryDate(deliveryDate);
        } catch(ParseException e) {
            throw new ValidationException("Incorrect date format for delivery date. Please use 'dd/MM/yyyy'");
        }

        List<ProductToInstantiateDto> products = new ArrayList<>();
        products.add(productToInstantiateDto);

        subscriptionApi.instanciateProduct(OC_subscription_code, products);

    }

}
				]]>
			</column>
			<where>code='org.meveo.service.script.ServiceInstanceImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-79_20221011" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.billing.AttributeInstanceDto;
import org.meveo.api.dto.billing.ServiceToUpdateDto;
import org.meveo.api.dto.billing.UpdateServicesRequestDto;
import org.meveo.model.billing.AttributeInstance;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.model.cpq.Attribute;
import org.meveo.model.cpq.enums.AttributeTypeEnum;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.cpq.AttributeService;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class AttributeInstanceImportScript extends GenericMassImportScript {
    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "ATTRIBUTE_INSTANCE";
    private static final String ENTITY_NAME = "AttributeInstance";

    public enum AttributeInstanceActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final AttributeService attributeService = (AttributeService) getServiceInterface("AttributeService");
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface("ServiceInstanceService");

    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());


    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(AttributeInstanceActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                AttributeInstanceActionEnum action = AttributeInstanceActionEnum.valueOf(OC_ACTION);

                AttributeInstanceDto attributeInstanceDto = validateAndGetAttributeInstance(action, recordMap);

                AttributeInstance attributeInstance = new AttributeInstance();

                if (AttributeInstanceActionEnum.CREATE.equals(action)) {
                    setAttributeInstanceValues(recordMap, attributeInstance);
                    this.setCFValues(recordMap, attributeInstance, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }


    private AttributeInstanceDto validateAndGetAttributeInstance(AttributeInstanceActionEnum action, Map<String, Object> recordMap) {
        AttributeInstanceDto attributeInstanceDto = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String OC_si_code = (String) recordMap.get("OC_SERVICE_INSTANCE_CODE");
        if (OC_si_code.isEmpty()) {
            throw new ValidationException("serviceinstance_code is required");
        }

        attributeInstanceDto = new AttributeInstanceDto();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        ServiceInstance serviceInstance = serviceInstanceService.findByCode(OC_si_code);
        if (serviceInstance == null) {
            throw new ValidationException("no service instance found for code: '" + OC_si_code + "'");
        }

        return attributeInstanceDto;
    }


    private void setAttributeInstanceValues(Map<String, Object> recordMap, AttributeInstance attributeInstance) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);

        Attribute attribute = attributeService.findByCode((String) recordMap.get("OC_SI_ATTRIB_CODE"));
        AttributeTypeEnum type = attribute.getAttributeType();

        attributeInstance.setAttribute(attribute);

        ServiceInstance serviceInstance = serviceInstanceService.findByCode((String) recordMap.get("OC_SERVICE_INSTANCE_CODE"));
        List<AttributeInstanceDto> attributeInstances = new ArrayList<>();
        for(AttributeInstance ai : serviceInstance.getAttributeInstances()) {
            attributeInstances.add( new AttributeInstanceDto(ai, null));
        }

        switch (type) {
            case LIST_TEXT:
            case TEXT:
            case EMAIL:
            case INFO:
            case PHONE:
                attributeInstances.stream().filter(ai -> Objects.equals(ai.getAttributeCode(), attribute.getCode()))
                        .findFirst()
                        .get().setStringValue((String) recordMap.get("OC_SI_ATTRIB_VALUE"));
                attributeInstance.setStringValue((String) recordMap.get("OC_SI_ATTRIB_VALUE"));
                break;
            case TOTAL :
            case COUNT :
            case NUMERIC :
            case INTEGER:
            case LIST_NUMERIC:
                attributeInstances.stream().filter(ai -> Objects.equals(ai.getAttributeCode(), attribute.getCode()))
                        .findFirst()
                        .get().setDoubleValue(Double.valueOf((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                attributeInstance.setDoubleValue(Double.valueOf((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                break;
            case DATE:
                try {
                    attributeInstances.stream().filter(ai -> Objects.equals(ai.getAttributeCode(), attribute.getCode()))
                            .findFirst()
                            .get().setDateValue(StringUtils.isEmpty((String) recordMap.get("OC_SI_ATTRIB_VALUE")) ? null
                                    : dateFormat.parse((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                    attributeInstance.setDateValue(StringUtils.isEmpty((String) recordMap.get("OC_SI_ATTRIB_VALUE")) ? null
                            : dateFormat.parse((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                }catch (ParseException e) {
                    throw new ValidationException("Incorrect date format for "+attribute.getCode()+". Please use dd/MM/yyyy");
                }

                break;
            case BOOLEAN:
                attributeInstances.stream().filter(ai -> Objects.equals(ai.getAttributeCode(), attribute.getCode()))
                        .findFirst()
                        .get().setStringValue(Objects.equals(recordMap.get("OC_SI_ATTRIB_VALUE"), "X") ? "true" : "false");
                attributeInstance.setStringValue(Objects.equals(recordMap.get("OC_SI_ATTRIB_VALUE"), "X") ? "true" : "false");
                break;
        }

        // ATTRIBUTE INSTANTIIATION
        UpdateServicesRequestDto requestDto = new UpdateServicesRequestDto();

        requestDto.setSubscriptionCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        ServiceToUpdateDto serviceDto = new ServiceToUpdateDto();
        serviceDto.setId(serviceInstance.getId());
        serviceDto.setCode(serviceInstance.getCode());

        requestDto.addService(serviceDto);

        requestDto.setAttributeInstances(attributeInstances);

        subscriptionApi.updateServiceInstance(requestDto);

    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.AttributeInstanceImportScript'</where>
		</update>
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.dto.account.BankCoordinatesDto;
import org.meveo.api.dto.payment.PaymentMethodDto;
import org.meveo.api.payment.PaymentMethodApi;
import org.meveo.model.payments.CreditCardTypeEnum;
import org.meveo.model.payments.PaymentMethod;
import org.meveo.model.payments.PaymentMethodEnum;
import org.meveo.service.payments.impl.PaymentMethodService;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class PaymentMethodImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "PAYMENT_METHOD";
    private static final String ENTITY_NAME = "PaymentMethod";

    public enum PaymentMethodActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface("PaymentMethodService");
    private final PaymentMethodApi paymentMethodApi = (PaymentMethodApi) getServiceInterface(PaymentMethodApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {

        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String ocEntity = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(ocEntity)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + ocEntity);
                }
                // VALIDATE ACTION
                String ocAction = (String) recordMap.get("OC_ACTION");
                if (Stream.of(PaymentMethodActionEnum.values()).noneMatch(e -> e.toString().equals(ocAction))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + ocAction);
                }

                PaymentMethodActionEnum action = PaymentMethodActionEnum.valueOf(ocAction);

                PaymentMethodDto paymentMethodDto = validateAndGetPaymentMethod(recordMap);


                if (action == PaymentMethodActionEnum.CREATE) {
                    setPaymentMethodValues(recordMap, paymentMethodDto);
                    Long paymentMethodId = paymentMethodApi.create(paymentMethodDto);
                    PaymentMethod paymentMethod = paymentMethodService.findById(paymentMethodId);
                    this.setCFValues(recordMap, paymentMethod, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private PaymentMethodDto validateAndGetPaymentMethod(Map<String, Object> recordMap) {
        PaymentMethodDto paymentMethodDto = new PaymentMethodDto();

        String customerAccountCode = (String) recordMap.get("OC_PMT_CA");
        if (customerAccountCode.isEmpty()) {
            throw new ValidationException("customer_account_code is required");
        }

        return paymentMethodDto;
    }

    private void setPaymentMethodValues(Map<String, Object> recordMap, PaymentMethodDto paymentMethodDto) throws ParseException {
        PaymentMethodEnum ocPaymentMethodType = PaymentMethodEnum.valueOf((String) recordMap.get("OC_PMT_TYPE"));
        paymentMethodDto.setPaymentMethodType(ocPaymentMethodType);
        paymentMethodDto.setPreferred(Objects.equals(recordMap.get("OC_PMT_PREFERRED"), "X"));
        paymentMethodDto.setAlias((String) recordMap.get("OC_PMT_ALIAS"));
        paymentMethodDto.setCustomerAccountCode((String) recordMap.get("OC_PMT_CA"));
        if (!((String) recordMap.get("OC_PMT_cardType")).isEmpty()) {
            paymentMethodDto.setCardType(CreditCardTypeEnum.valueOf((String) recordMap.get("OC_PMT_cardType")));
        }
        if (!((String) recordMap.get("OC_PMT_monthExpiration")).isEmpty()) {
            paymentMethodDto.setMonthExpiration(Integer.parseInt((String) recordMap.get("OC_PMT_monthExpiration")));
        }
        if (!((String) recordMap.get("OC_PMT_yearExpiration")).isEmpty()) {
            paymentMethodDto.setYearExpiration(Integer.parseInt((String) recordMap.get("OC_PMT_yearExpiration")));
        }
        paymentMethodDto.setTokenId((String) recordMap.get("OC_PMT_tokenId"));
        paymentMethodDto.setCardNumber((String) recordMap.get("OC_PMT_cardNumber"));
        paymentMethodDto.setIssueNumber((String) recordMap.get("OC_PMT_issueNumber"));
        paymentMethodDto.setUserId((String) recordMap.get("OC_PMT_userId"));
        paymentMethodDto.setEmail((String) recordMap.get("OC_PMT_email"));
        paymentMethodDto.setOwner((String) recordMap.get("OC_PMT_accountOwner"));
        if (!((String) recordMap.get("OC_PMT_referenceDocumentCode")).isEmpty()) {
            paymentMethodDto.setReferenceDocumentCode((String) recordMap.get("OC_PMT_referenceDocumentCode"));
        }

        if (ocPaymentMethodType == PaymentMethodEnum.DIRECTDEBIT) {
            BankCoordinatesDto bankCoordinatesDto = new BankCoordinatesDto();
            bankCoordinatesDto.setBankCode((String) recordMap.get("OC_PMT_bankCode"));
            bankCoordinatesDto.setBranchCode((String) recordMap.get("OC_PMT_branchCode"));
            bankCoordinatesDto.setAccountNumber((String) recordMap.get("OC_PMT_accountNumber"));
            bankCoordinatesDto.setKey((String) recordMap.get("OC_PMT_key"));
            bankCoordinatesDto.setIban((String) recordMap.get("OC_PMT_iban"));
            bankCoordinatesDto.setBic((String) recordMap.get("OC_PMT_bic"));
            bankCoordinatesDto.setAccountOwner((String) recordMap.get("OC_PMT_accountOwner"));
            bankCoordinatesDto.setBankName((String) recordMap.get("OC_PMT_bankName"));
            bankCoordinatesDto.setBankId((String) recordMap.get("OC_PMT_bankId"));
            bankCoordinatesDto.setIssuerNumber((String) recordMap.get("OC_PMT_issuerNumber"));
            bankCoordinatesDto.setIssuerName((String) recordMap.get("OC_PMT_issuerName"));
            bankCoordinatesDto.setIcs((String) recordMap.get("OC_PMT_ics"));
            paymentMethodDto.setBankCoordinates(bankCoordinatesDto);
        }

        paymentMethodDto.setMandateIdentification((String) recordMap.get("OC_PMT_mandateIdentification"));

        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);
        String ocPaymentMethodMandateDate = (String) recordMap.get("OC_PMT_mandateDate");
        try {
            Date mandateDate = StringUtils.isEmpty(ocPaymentMethodMandateDate) ? null : dateFormat.parse(ocPaymentMethodMandateDate);
            paymentMethodDto.setMandateDate(mandateDate);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect date format for mandate date. Please use dd/MM/yyyy");
        }

    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.PaymentMethodImportScript'</where>
		</update>
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.account.AccessApi;
import org.meveo.api.dto.account.AccessDto;
import org.meveo.model.billing.Subscription;
import org.meveo.model.mediation.Access;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.stream.Stream;

public class AccessPointImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "ACCESS_POINT";
    private static final String ENTITY_NAME = "Access";

    public enum AccessPointActionEnum {
        CREATE, UPDATE, DELETE
    }


    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final AccessApi accessApi = (AccessApi) getServiceInterface(AccessApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(AccessPointActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                AccessPointActionEnum action = AccessPointActionEnum.valueOf(OC_ACTION);

                AccessDto accessDto = validateAndGetAccessPoint(action, recordMap);

                if (AccessPointActionEnum.CREATE.equals(action)) {
                    setAccessValues(recordMap, accessDto);
                    Access access = accessApi.create(accessDto);
                    this.setCFValues(recordMap, access, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }


    private AccessDto validateAndGetAccessPoint(AccessPointActionEnum action, Map<String, Object> recordMap) {
        AccessDto accessDto = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        accessDto = new AccessDto();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        return accessDto;
    }


    private void setAccessValues(Map<String, Object> recordMap, AccessDto accessDto) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);
        String OC_accessPoint_startDate = (String) recordMap.get("OC_ACCESSPOINT_STARTDATE");
        String OC_accessPoint_endDate = (String) recordMap.get("OC_ACCESSPOINT_ENDDATE");
        try {
            Date startDate = StringUtils.isEmpty(OC_accessPoint_startDate) ? null : dateFormat.parse(OC_accessPoint_startDate);
            accessDto.setStartDate(startDate);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect date format for start date. Please use dd/MM/yyyy");
        }

        try {
            Date endDate = StringUtils.isEmpty(OC_accessPoint_endDate) ? null : dateFormat.parse(OC_accessPoint_endDate);
            accessDto.setEndDate(endDate);
        } catch (ParseException e) {
            throw new ValidationException("Incorrect date format for end date. Please use dd/MM/yyyy");
        }

        accessDto.setSubscription((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        accessDto.setCode((String) recordMap.get("OC_ACCESSPOINT_CODE"));
    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.AccessPointImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-79_20221013" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.billing.ServiceToUpdateDto;
import org.meveo.api.dto.billing.UpdateServicesRequestDto;
import org.meveo.api.dto.cpq.ProductToInstantiateDto;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.script.GenericMassImportScript;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

public class ServiceInstanceImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "SERVICE_INSTANCE";
    private static final String ENTITY_NAME = "ServiceInstance";

    public enum ServiceInstanceActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface("ServiceInstanceService");
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(ServiceInstanceActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                ServiceInstanceActionEnum action = ServiceInstanceActionEnum.valueOf(OC_ACTION);

                ProductToInstantiateDto productToInstantiateDto = validateAndGetServiceInstance(action, recordMap);

                if (ServiceInstanceActionEnum.CREATE.equals(action)) {
                    setServiceInstanceValues(recordMap, productToInstantiateDto);

                    Subscription subscription = subscriptionService.findByCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
                    ServiceInstance si = serviceInstanceService.findByCodeAndCodeSubscriptionId((String) recordMap.get("OC_PRODUCT_CODE"), subscription);
                    this.setCFValues(recordMap, si, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private ProductToInstantiateDto validateAndGetServiceInstance(ServiceInstanceActionEnum action, Map<String, Object> recordMap) {
        ProductToInstantiateDto productToInstantiateDto = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String OC_si_code = (String) recordMap.get("OC_SI_CODE");
        if (OC_si_code.isEmpty()) {
            throw new ValidationException("serviceinstance_code is required");
        }

        productToInstantiateDto = new ProductToInstantiateDto();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        return productToInstantiateDto;
    }

    private void setServiceInstanceValues(Map<String, Object> recordMap, ProductToInstantiateDto productToInstantiateDto) throws ParseException {
        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);

        // Instantiate products
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);

        String OC_product_deliv_dt = (String) recordMap.get("OC_PRODUCT_DELIV_DT");
        productToInstantiateDto.setProductCode((String) recordMap.get("OC_PRODUCT_CODE"));
        productToInstantiateDto.setQuantity(new BigDecimal((String) recordMap.get("OC_PRODUCT_QTY")));
        try {
            Date deliveryDate = StringUtils.isEmpty(OC_product_deliv_dt) ? null : dateFormat.parse(OC_product_deliv_dt);
            productToInstantiateDto.setDeliveryDate(deliveryDate);
        } catch(ParseException e) {
            throw new ValidationException("Incorrect date format for delivery date. Please use 'dd/MM/yyyy'");
        }

        List<ProductToInstantiateDto> products = new ArrayList<>();
        products.add(productToInstantiateDto);

        subscriptionApi.instanciateProduct(OC_subscription_code, products);

        // Save SI description
        UpdateServicesRequestDto requestDto = new UpdateServicesRequestDto();

        ServiceInstance serviceInstance = serviceInstanceService.findByCodeAndCodeSubscriptionId((String) recordMap.get("OC_PRODUCT_CODE"), subscription);
        requestDto.setSubscriptionCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        ServiceToUpdateDto serviceDto = new ServiceToUpdateDto();
        serviceDto.setId(serviceInstance.getId());
        serviceDto.setCode(serviceInstance.getCode());
        serviceDto.setDescription((String) recordMap.get("OC_SI_DESC"));

        requestDto.addService(serviceDto);

        subscriptionApi.updateServiceInstance(requestDto);

    }

}
				]]>
			</column>
			<where>code='org.meveo.service.script.ServiceInstanceImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-79_20221014" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.billing.AttributeInstanceDto;
import org.meveo.api.dto.billing.ServiceToUpdateDto;
import org.meveo.api.dto.billing.UpdateServicesRequestDto;
import org.meveo.api.dto.cpq.ProductToInstantiateDto;
import org.meveo.model.billing.AttributeInstance;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.script.GenericMassImportScript;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ServiceInstanceImportScript extends GenericMassImportScript {

    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "SERVICE_INSTANCE";
    private static final String ENTITY_NAME = "ServiceInstance";

    public enum ServiceInstanceActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface("ServiceInstanceService");
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());

    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(ServiceInstanceActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                ServiceInstanceActionEnum action = ServiceInstanceActionEnum.valueOf(OC_ACTION);

                ProductToInstantiateDto productToInstantiateDto = validateAndGetServiceInstance(action, recordMap);

                if (ServiceInstanceActionEnum.CREATE.equals(action)) {
                    setServiceInstanceValues(recordMap, productToInstantiateDto);

                    Subscription subscription = subscriptionService.findByCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
                    ServiceInstance si = serviceInstanceService.findByCodeAndCodeSubscriptionId((String) recordMap.get("OC_PRODUCT_CODE"), subscription);
                    this.setCFValues(recordMap, si, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }

    private ProductToInstantiateDto validateAndGetServiceInstance(ServiceInstanceActionEnum action, Map<String, Object> recordMap) {
        ProductToInstantiateDto productToInstantiateDto = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String OC_si_code = (String) recordMap.get("OC_SI_CODE");
        if (OC_si_code.isEmpty()) {
            throw new ValidationException("serviceinstance_code is required");
        }

        productToInstantiateDto = new ProductToInstantiateDto();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        return productToInstantiateDto;
    }

    private void setServiceInstanceValues(Map<String, Object> recordMap, ProductToInstantiateDto productToInstantiateDto) throws ParseException {
        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);

        // Instantiate products
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);

        String OC_product_deliv_dt = (String) recordMap.get("OC_PRODUCT_DELIV_DT");
        productToInstantiateDto.setProductCode((String) recordMap.get("OC_PRODUCT_CODE"));
        productToInstantiateDto.setQuantity(new BigDecimal((String) recordMap.get("OC_PRODUCT_QTY")));
        try {
            Date deliveryDate = StringUtils.isEmpty(OC_product_deliv_dt) ? null : dateFormat.parse(OC_product_deliv_dt);
            productToInstantiateDto.setDeliveryDate(deliveryDate);
        } catch(ParseException e) {
            throw new ValidationException("Incorrect date format for delivery date. Please use 'dd/MM/yyyy'");
        }

        List<ProductToInstantiateDto> products = new ArrayList<>();
        products.add(productToInstantiateDto);

        subscriptionApi.instanciateProduct(OC_subscription_code, products);

        // Save SI description
        UpdateServicesRequestDto requestDto = new UpdateServicesRequestDto();
        ServiceInstance serviceInstance = serviceInstanceService.findByCodeAndCodeSubscriptionId((String) recordMap.get("OC_PRODUCT_CODE"), subscription);

        List<AttributeInstance> attributeInstances = serviceInstance.getAttributeInstances();
        List<AttributeInstanceDto> aiDto = attributeInstances.stream().map(attribute ->
                new AttributeInstanceDto(attribute, null)).collect(Collectors.toList());

        requestDto.setSubscriptionCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        ServiceToUpdateDto serviceDto = new ServiceToUpdateDto();
        serviceDto.setId(serviceInstance.getId());
        serviceDto.setCode(serviceInstance.getCode());
        serviceDto.setDescription((String) recordMap.get("OC_SI_DESC"));

        requestDto.addService(serviceDto);
        requestDto.setAttributeInstances(aiDto);

        subscriptionApi.updateServiceInstance(requestDto);
    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.ServiceInstanceImportScript'</where>
		</update>
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;


import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.exception.ValidationException;
import org.meveo.api.billing.SubscriptionApi;
import org.meveo.api.dto.billing.AttributeInstanceDto;
import org.meveo.api.dto.billing.ServiceToUpdateDto;
import org.meveo.api.dto.billing.UpdateServicesRequestDto;
import org.meveo.model.billing.AttributeInstance;
import org.meveo.model.billing.ServiceInstance;
import org.meveo.model.billing.Subscription;
import org.meveo.model.cpq.Attribute;
import org.meveo.model.cpq.enums.AttributeTypeEnum;
import org.meveo.service.billing.impl.ServiceInstanceService;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.cpq.AttributeService;
import org.meveo.service.script.GenericMassImportScript;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Stream;


public class AttributeInstanceImportScript extends GenericMassImportScript {
    private static final String DATE_FORMAT_PATTERN = "dd/MM/yyyy";
    private static final String RECORD_VARIABLE_NAME = "record";
    private static final String ENTITY = "ATTRIBUTE_INSTANCE";
    private static final String ENTITY_NAME = "AttributeInstance";

    public enum AttributeInstanceActionEnum {
        CREATE, UPDATE, DELETE
    }

    private final AttributeService attributeService = (AttributeService) getServiceInterface("AttributeService");
    private final SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");
    private final ServiceInstanceService serviceInstanceService = (ServiceInstanceService) getServiceInterface("ServiceInstanceService");

    private final SubscriptionApi subscriptionApi = (SubscriptionApi) getServiceInterface(SubscriptionApi.class.getSimpleName());


    @Override
    public void execute(Map<String, Object> context) throws BusinessException {
        try {
            @SuppressWarnings("unchecked")
            Map<String, Object> recordMap = (Map<String, Object>) context.get(RECORD_VARIABLE_NAME);
            if (recordMap != null && !recordMap.isEmpty()) {
                // VALIDATE ENTITY
                String OC_ENTITY = (String) recordMap.get("OC_ENTITY");
                if (!ENTITY.equals(OC_ENTITY)) {
                    throw new ValidationException("value of OC_ENTITY is not correct: " + OC_ENTITY);
                }
                // VALIDATE ACTION
                String OC_ACTION = (String) recordMap.get("OC_ACTION");
                if (Stream.of(AttributeInstanceActionEnum.values()).noneMatch(e -> e.toString().equals(OC_ACTION))) {
                    throw new ValidationException("value of OC_ACTION is not correct: " + OC_ACTION);
                }

                AttributeInstanceActionEnum action = AttributeInstanceActionEnum.valueOf(OC_ACTION);

                AttributeInstanceDto attributeInstanceDto = validateAndGetAttributeInstance(action, recordMap);

                AttributeInstance attributeInstance = new AttributeInstance();

                if (AttributeInstanceActionEnum.CREATE.equals(action)) {
                    setAttributeInstanceValues(recordMap, attributeInstance);
                    this.setCFValues(recordMap, attributeInstance, ENTITY_NAME);
                }
            }
        } catch (Exception exception) {
            throw new BusinessException(exception);
        }
    }


    private AttributeInstanceDto validateAndGetAttributeInstance(AttributeInstanceActionEnum action, Map<String, Object> recordMap) {
        AttributeInstanceDto attributeInstanceDto = null;

        String OC_subscription_code = (String) recordMap.get("OC_SUBSCRIPTION_CODE");
        if (OC_subscription_code.isEmpty()) {
            throw new ValidationException("subscription_code is required");
        }

        String OC_si_code = (String) recordMap.get("OC_SERVICE_INSTANCE_CODE");
        if (OC_si_code.isEmpty()) {
            throw new ValidationException("serviceinstance_code is required");
        }

        attributeInstanceDto = new AttributeInstanceDto();
        Subscription subscription = subscriptionService.findByCode(OC_subscription_code);
        if (subscription == null) {
            throw new ValidationException("no subscription found for code: '" + OC_subscription_code + "'");
        }

        ServiceInstance serviceInstance = serviceInstanceService.findByCode(OC_si_code);
        if (serviceInstance == null) {
            throw new ValidationException("no service instance found for code: '" + OC_si_code + "'");
        }

        return attributeInstanceDto;
    }


    private void setAttributeInstanceValues(Map<String, Object> recordMap, AttributeInstance attributeInstance) throws ParseException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        dateFormat.setLenient(false);

        Attribute attribute = attributeService.findByCode((String) recordMap.get("OC_SI_ATTRIB_CODE"));
        AttributeTypeEnum type = attribute.getAttributeType();

        attributeInstance.setAttribute(attribute);


        Subscription subscription = subscriptionService.findByCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        ServiceInstance serviceInstance = serviceInstanceService.findByCodeAndCodeSubscriptionId((String) recordMap.get("OC_SERVICE_INSTANCE_CODE"), subscription);

        List<AttributeInstanceDto> attributeInstances = new ArrayList<>();
        for(AttributeInstance ai : serviceInstance.getAttributeInstances()) {
            attributeInstances.add( new AttributeInstanceDto(ai, null));
        }

        switch (type) {
            case LIST_TEXT:
            case TEXT:
            case EMAIL:
            case INFO:
            case PHONE:
                attributeInstances.stream().filter(ai -> Objects.equals(ai.getAttributeCode(), attribute.getCode()))
                        .findFirst()
                        .get().setStringValue((String) recordMap.get("OC_SI_ATTRIB_VALUE"));
                attributeInstance.setStringValue((String) recordMap.get("OC_SI_ATTRIB_VALUE"));
                break;
            case TOTAL :
            case COUNT :
            case NUMERIC :
            case INTEGER:
            case LIST_NUMERIC:
                attributeInstances.stream().filter(ai -> Objects.equals(ai.getAttributeCode(), attribute.getCode()))
                        .findFirst()
                        .get().setDoubleValue(Double.valueOf((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                attributeInstance.setDoubleValue(Double.valueOf((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                break;
            case DATE:
                try {
                    attributeInstances.stream().filter(ai -> Objects.equals(ai.getAttributeCode(), attribute.getCode()))
                            .findFirst()
                            .get().setDateValue(StringUtils.isEmpty((String) recordMap.get("OC_SI_ATTRIB_VALUE")) ? null
                                    : dateFormat.parse((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                    attributeInstance.setDateValue(StringUtils.isEmpty((String) recordMap.get("OC_SI_ATTRIB_VALUE")) ? null
                            : dateFormat.parse((String) recordMap.get("OC_SI_ATTRIB_VALUE")));
                }catch (ParseException e) {
                    throw new ValidationException("Incorrect date format for "+attribute.getCode()+". Please use dd/MM/yyyy");
                }

                break;
            case BOOLEAN:
                attributeInstances.stream().filter(ai -> Objects.equals(ai.getAttributeCode(), attribute.getCode()))
                        .findFirst()
                        .get().setStringValue(Objects.equals(recordMap.get("OC_SI_ATTRIB_VALUE"), "X") ? "true" : "false");
                attributeInstance.setStringValue(Objects.equals(recordMap.get("OC_SI_ATTRIB_VALUE"), "X") ? "true" : "false");
                break;
        }

        // ATTRIBUTE INSTANTIIATION
        UpdateServicesRequestDto requestDto = new UpdateServicesRequestDto();

        requestDto.setSubscriptionCode((String) recordMap.get("OC_SUBSCRIPTION_CODE"));
        ServiceToUpdateDto serviceDto = new ServiceToUpdateDto();
        serviceDto.setId(serviceInstance.getId());
        serviceDto.setCode(serviceInstance.getCode());

        requestDto.addService(serviceDto);
        requestDto.setAttributeInstances(attributeInstances);

        subscriptionApi.updateServiceInstance(requestDto);
    }
}
				]]>
			</column>
			<where>code='org.meveo.service.script.AttributeInstanceImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#OUTRD-95_20221027" author="HamzaBiadi">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.commons.utils.ParamBeanFactory;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.model.rating.CDR;
import org.meveo.service.medina.impl.CDRService;

import java.io.*;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

public class CdrFlatFileImportScript extends Script {

    private static final String DATE_FORMAT_PATTERN = "yyyy-MM-dd'T'HH:mm:ssXXX";
    private final transient ParamBeanFactory paramBeanFactory = (ParamBeanFactory) getServiceInterface(ParamBeanFactory.class.getSimpleName());
    private final transient CDRService cdrService = (CDRService) getServiceInterface(CDRService.class.getSimpleName());

    public static boolean elementExisted(Map<String, String> context, String[] header, String[] body, String element) {
        return ArrayUtils.indexOf(header, context.get(element)) >= 0
                && ArrayUtils.indexOf(header, context.get(element)) < body.length;
    }

    @Override
    public void execute(Map<String, Object> contextMethod) throws BusinessException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) contextMethod.get("JobExecutionResult");
        Map<String, String> context = (Map<String, String>) jobExecutionResult.getJobInstance().getCfValues().getValues().get("mapping");
        String pathFile = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get("pathFile");

        CDR cdr;
        String rootPathFile = getProviderRootDir() + File.separator + pathFile;
        File dir = new File(rootPathFile);

        File[] fileList = dir.listFiles();
        try {
            for(File fileInput : fileList) {
                File file = new File(fileInput.getAbsolutePath().replace("input", "reject") + ".rejected");
                if (!file.getParentFile().exists()) {
                    file.getParentFile().mkdirs();
                }
                if (!file.exists()) {
                    file.createNewFile();
                }
                FileWriter rejectFile = new FileWriter(fileInput.getAbsolutePath().replace("input", "reject") + ".rejected");
                FileReader fread = new FileReader(fileInput.getAbsolutePath());
                BufferedReader br = new BufferedReader(fread);
                String line = "";
                String splitBy = ";";
                String[] header = br.readLine().split(splitBy);
                while ((line = br.readLine()) != null) {
                    try {
                        cdr = new CDR();
                        String[] body = line.split(splitBy);
                        Date dateEvent = null;
                        Date dateParam1 = null;
                        Date dateParam2 = null;
                        Date dateParam3 = null;
                        Date dateParam4 = null;
                        Date dateParam5 = null;
                        boolean reject = false;
                        try {
                            dateEvent = elementExisted(context, header, body, "eventDate") && !body[ArrayUtils.indexOf(header, context.get("eventDate"))].isEmpty() ?
                                    StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("eventDate"))]) ?
                                            null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("eventDate"))])
                                    : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("eventDate") + " \n");
                            reject = true;
                        }
                        String ac = elementExisted(context, header, body, "accessCode") && !body[ArrayUtils.indexOf(header, context.get("accessCode"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("accessCode"))] : null;
                        BigDecimal quantity = elementExisted(context, header, body, "quantity") && !body[ArrayUtils.indexOf(header, context.get("quantity"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("quantity"))]) : null;
                        String parameter1 = elementExisted(context, header, body, "parameter1") && !body[ArrayUtils.indexOf(header, context.get("parameter1"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter1"))] : null;
                        String parameter2 = elementExisted(context, header, body, "parameter2") && !body[ArrayUtils.indexOf(header, context.get("parameter2"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter2"))] : null;
                        String parameter3 = elementExisted(context, header, body, "parameter3") && !body[ArrayUtils.indexOf(header, context.get("parameter3"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter3"))] : null;
                        String parameter4 = elementExisted(context, header, body, "parameter4") && !body[ArrayUtils.indexOf(header, context.get("parameter4"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter4"))] : null;
                        String parameter5 = elementExisted(context, header, body, "parameter5") && !body[ArrayUtils.indexOf(header, context.get("parameter5"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter5"))] : null;
                        String parameter6 = elementExisted(context, header, body, "parameter6") && !body[ArrayUtils.indexOf(header, context.get("parameter6"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter6"))] : null;
                        String parameter7 = elementExisted(context, header, body, "parameter7") && !body[ArrayUtils.indexOf(header, context.get("parameter7"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter7"))] : null;
                        String parameter8 = elementExisted(context, header, body, "parameter8") && !body[ArrayUtils.indexOf(header, context.get("parameter8"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter8"))] : null;
                        String parameter9 = elementExisted(context, header, body, "parameter9") && !body[ArrayUtils.indexOf(header, context.get("parameter9"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter9"))] : null;
                        String extraParameter = elementExisted(context, header, body, "extraParam") && !body[ArrayUtils.indexOf(header, context.get("extraParam"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("extraParam"))] : null;
                        try {
                            dateParam1 = elementExisted(context, header, body, "dateParam1") && !body[ArrayUtils.indexOf(header, context.get("dateParam1"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam1"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam1"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam1") + " \n");
                            reject = true;
                        }
                        try {
                            dateParam2 = elementExisted(context, header, body, "dateParam2") && !body[ArrayUtils.indexOf(header, context.get("dateParam2"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam2"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam2"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam2") + " \n");
                            reject = true;
                        }
                        try {
                            dateParam3 = elementExisted(context, header, body, "dateParam3") && !body[ArrayUtils.indexOf(header, context.get("dateParam3"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam3"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam3"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam3") + " \n");
                            reject = true;
                        }
                        try {
                            dateParam4 = elementExisted(context, header, body, "dateParam4") && !body[ArrayUtils.indexOf(header, context.get("dateParam4"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam4"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam4"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam4") + " \n");
                            reject = true;
                        }
                        try {
                            dateParam5 = elementExisted(context, header, body, "dateParam5") && !body[ArrayUtils.indexOf(header, context.get("dateParam5"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam5"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam5"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam5") + " \n");
                            reject = true;
                        }

                        BigDecimal decimalParam1 = elementExisted(context, header, body, "decimalParam1") && !body[ArrayUtils.indexOf(header, context.get("decimalParam1"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam1"))]) : null;
                        BigDecimal decimalParam2 = elementExisted(context, header, body, "decimalParam2") && !body[ArrayUtils.indexOf(header, context.get("decimalParam2"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam2"))]) : null;
                        BigDecimal decimalParam3 = elementExisted(context, header, body, "decimalParam3") && !body[ArrayUtils.indexOf(header, context.get("decimalParam3"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam3"))]) : null;
                        BigDecimal decimalParam4 = elementExisted(context, header, body, "decimalParam4") && !body[ArrayUtils.indexOf(header, context.get("decimalParam4"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam4"))]) : null;
                        BigDecimal decimalParam5 = elementExisted(context, header, body, "decimalParam5") && !body[ArrayUtils.indexOf(header, context.get("decimalParam5"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam5"))]) : null;

                        cdr.setEventDate(dateEvent);
                        cdr.setAccessCode(ac);
                        cdr.setQuantity(quantity);
                        cdr.setParameter1(parameter1);
                        cdr.setParameter2(parameter2);
                        cdr.setParameter3(parameter3);
                        cdr.setParameter4(parameter4);
                        cdr.setParameter5(parameter5);
                        cdr.setParameter6(parameter6);
                        cdr.setParameter7(parameter7);
                        cdr.setParameter8(parameter8);
                        cdr.setParameter9(parameter9);
                        cdr.setDateParam1(dateParam1);
                        cdr.setDateParam2(dateParam2);
                        cdr.setDateParam3(dateParam3);
                        cdr.setDateParam4(dateParam4);
                        cdr.setDateParam5(dateParam5);
                        cdr.setDecimalParam1(decimalParam1);
                        cdr.setDecimalParam2(decimalParam2);
                        cdr.setDecimalParam3(decimalParam3);
                        cdr.setDecimalParam4(decimalParam4);
                        cdr.setDecimalParam5(decimalParam5);
                        cdr.setExtraParameter(extraParameter);
                        if (!reject && cdr.getEventDate() != null && cdr.getQuantity() != null && cdr.getAccessCode() != null && cdr.getParameter1() != null)
                            cdrService.create(cdr);
                        else if (!reject) {
                            validateCdr(line, cdr, context, rejectFile);
                        }
                    } catch (Exception e) {
                        rejectFile.write(line + " => " + e.getMessage() + " \n");
                    }
                }
                rejectFile.close();
                br.close();
                fread.close();
                String toPath = getProviderRootDir() + File.separator
                        + "imports/cdr/flatFile/archive" + File.separator + fileInput.getName();
                Files.createDirectories(Paths.get(toPath));
                Files.move(Paths.get(fileInput.getPath()), Paths.get(toPath), StandardCopyOption.REPLACE_EXISTING);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void validateCdr(String line, CDR cdr, Map<String, String> context, FileWriter file) throws IOException {
        if (cdr.getEventDate() == null) file.write(line + " => " + context.get("eventDate") + " is required\n");
        else if (cdr.getQuantity() == null) file.write(line + " => " + context.get("quantity") + " is required\n");
        else if (cdr.getAccessCode() == null) file.write(line + " => " + context.get("accessCode") + " is required\n");
        else if (cdr.getParameter1() == null) file.write(line + " => " + context.get("parameter1") + " is required\n");

    }


    public String getProviderRootDir() {
        return paramBeanFactory.getDefaultChrootDir();
    }

}

				]]>
			</column>
			<where>code='org.meveo.service.script.CdrFlatFileImportScript'</where>
		</update>
	</changeSet>


	<changeSet id="#OUTRD-99_20221205" author="Ilham-Chafik">
		<update tableName="meveo_script_instance">
			<column name="script">
				<![CDATA[
package org.meveo.service.script;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.meveo.admin.exception.BusinessException;
import org.meveo.commons.utils.ParamBeanFactory;
import org.meveo.model.jobs.JobExecutionResultImpl;
import org.meveo.model.rating.CDR;
import org.meveo.service.medina.impl.CDRService;
import org.meveo.service.script.Script;

import java.io.*;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

public class CdrFlatFileImportScript extends Script {

    private static final String DATE_FORMAT_PATTERN = "yyyy-MM-dd'T'HH:mm:ssXXX";
    private final transient ParamBeanFactory paramBeanFactory = (ParamBeanFactory) getServiceInterface(ParamBeanFactory.class.getSimpleName());
    private final transient CDRService cdrService = (CDRService) getServiceInterface(CDRService.class.getSimpleName());

    public static boolean elementExisted(Map<String, String> context, String[] header, String[] body, String element) {
        return ArrayUtils.indexOf(header, context.get(element)) >= 0
                && ArrayUtils.indexOf(header, context.get(element)) < body.length;
    }

    @Override
    public void execute(Map<String, Object> contextMethod) throws BusinessException {
        DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
        JobExecutionResultImpl jobExecutionResult = (JobExecutionResultImpl) contextMethod.get("JobExecutionResult");
        Map<String, String> context = (Map<String, String>) jobExecutionResult.getJobInstance().getCfValues().getValues().get("mapping");
        String pathFile = (String) jobExecutionResult.getJobInstance().getCfValues().getValues().get("pathFile");

        CDR cdr;
        String rootPathFile = getProviderRootDir() + File.separator + pathFile;
        File dir = new File(rootPathFile);

        File[] fileList = dir.listFiles();
        try {
            for(File fileInput : fileList) {
                if (!FilenameUtils.getExtension(fileInput.getName()).equals("csv")) {
                    continue;
                }
                File file = new File(fileInput.getAbsolutePath().replace("input", "reject") + ".rejected");
                if (!file.getParentFile().exists()) {
                    file.getParentFile().mkdirs();
                }
                if (!file.exists()) {
                    file.createNewFile();
                }
                FileWriter rejectFile = new FileWriter(fileInput.getAbsolutePath().replace("input", "reject") + ".rejected");
                FileReader fread = new FileReader(fileInput.getAbsolutePath());
                BufferedReader br = new BufferedReader(fread);
                String line = "";
                String splitBy = ";";
                String[] header = br.readLine().split(splitBy);
                while ((line = br.readLine()) != null) {
                    try {
                        cdr = new CDR();
                        String[] body = line.split(splitBy);
                        Date dateEvent = null;
                        Date dateParam1 = null;
                        Date dateParam2 = null;
                        Date dateParam3 = null;
                        Date dateParam4 = null;
                        Date dateParam5 = null;
                        boolean reject = false;
                        try {
                            dateEvent = elementExisted(context, header, body, "eventDate") && !body[ArrayUtils.indexOf(header, context.get("eventDate"))].isEmpty() ?
                                    StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("eventDate"))]) ?
                                            null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("eventDate"))])
                                    : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("eventDate") + " \n");
                            reject = true;
                        }
                        String ac = elementExisted(context, header, body, "accessCode") && !body[ArrayUtils.indexOf(header, context.get("accessCode"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("accessCode"))] : null;
                        BigDecimal quantity = elementExisted(context, header, body, "quantity") && !body[ArrayUtils.indexOf(header, context.get("quantity"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("quantity"))]) : null;
                        String parameter1 = elementExisted(context, header, body, "parameter1") && !body[ArrayUtils.indexOf(header, context.get("parameter1"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter1"))] : null;
                        String parameter2 = elementExisted(context, header, body, "parameter2") && !body[ArrayUtils.indexOf(header, context.get("parameter2"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter2"))] : null;
                        String parameter3 = elementExisted(context, header, body, "parameter3") && !body[ArrayUtils.indexOf(header, context.get("parameter3"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter3"))] : null;
                        String parameter4 = elementExisted(context, header, body, "parameter4") && !body[ArrayUtils.indexOf(header, context.get("parameter4"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter4"))] : null;
                        String parameter5 = elementExisted(context, header, body, "parameter5") && !body[ArrayUtils.indexOf(header, context.get("parameter5"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter5"))] : null;
                        String parameter6 = elementExisted(context, header, body, "parameter6") && !body[ArrayUtils.indexOf(header, context.get("parameter6"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter6"))] : null;
                        String parameter7 = elementExisted(context, header, body, "parameter7") && !body[ArrayUtils.indexOf(header, context.get("parameter7"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter7"))] : null;
                        String parameter8 = elementExisted(context, header, body, "parameter8") && !body[ArrayUtils.indexOf(header, context.get("parameter8"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter8"))] : null;
                        String parameter9 = elementExisted(context, header, body, "parameter9") && !body[ArrayUtils.indexOf(header, context.get("parameter9"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("parameter9"))] : null;
                        String extraParameter = elementExisted(context, header, body, "extraParam") && !body[ArrayUtils.indexOf(header, context.get("extraParam"))].isEmpty() ? body[ArrayUtils.indexOf(header, context.get("extraParam"))] : null;
                        try {
                            dateParam1 = elementExisted(context, header, body, "dateParam1") && !body[ArrayUtils.indexOf(header, context.get("dateParam1"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam1"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam1"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam1") + " \n");
                            reject = true;
                        }
                        try {
                            dateParam2 = elementExisted(context, header, body, "dateParam2") && !body[ArrayUtils.indexOf(header, context.get("dateParam2"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam2"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam2"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam2") + " \n");
                            reject = true;
                        }
                        try {
                            dateParam3 = elementExisted(context, header, body, "dateParam3") && !body[ArrayUtils.indexOf(header, context.get("dateParam3"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam3"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam3"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam3") + " \n");
                            reject = true;
                        }
                        try {
                            dateParam4 = elementExisted(context, header, body, "dateParam4") && !body[ArrayUtils.indexOf(header, context.get("dateParam4"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam4"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam4"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam4") + " \n");
                            reject = true;
                        }
                        try {
                            dateParam5 = elementExisted(context, header, body, "dateParam5") && !body[ArrayUtils.indexOf(header, context.get("dateParam5"))].isEmpty() ? StringUtils.isEmpty(body[ArrayUtils.indexOf(header, context.get("dateParam5"))]) ? null : dateFormat.parse(body[ArrayUtils.indexOf(header, context.get("dateParam5"))]) : null;
                        } catch (ParseException e) {
                            if (!reject)
                                rejectFile.write(line + " => Incorrect format date for cdr " + context.get("dateParam5") + " \n");
                            reject = true;
                        }

                        BigDecimal decimalParam1 = elementExisted(context, header, body, "decimalParam1") && !body[ArrayUtils.indexOf(header, context.get("decimalParam1"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam1"))]) : null;
                        BigDecimal decimalParam2 = elementExisted(context, header, body, "decimalParam2") && !body[ArrayUtils.indexOf(header, context.get("decimalParam2"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam2"))]) : null;
                        BigDecimal decimalParam3 = elementExisted(context, header, body, "decimalParam3") && !body[ArrayUtils.indexOf(header, context.get("decimalParam3"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam3"))]) : null;
                        BigDecimal decimalParam4 = elementExisted(context, header, body, "decimalParam4") && !body[ArrayUtils.indexOf(header, context.get("decimalParam4"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam4"))]) : null;
                        BigDecimal decimalParam5 = elementExisted(context, header, body, "decimalParam5") && !body[ArrayUtils.indexOf(header, context.get("decimalParam5"))].isEmpty() ? new BigDecimal(body[ArrayUtils.indexOf(header, context.get("decimalParam5"))]) : null;

                        cdr.setEventDate(dateEvent);
                        cdr.setAccessCode(ac);
                        cdr.setQuantity(quantity);
                        cdr.setParameter1(parameter1);
                        cdr.setParameter2(parameter2);
                        cdr.setParameter3(parameter3);
                        cdr.setParameter4(parameter4);
                        cdr.setParameter5(parameter5);
                        cdr.setParameter6(parameter6);
                        cdr.setParameter7(parameter7);
                        cdr.setParameter8(parameter8);
                        cdr.setParameter9(parameter9);
                        cdr.setDateParam1(dateParam1);
                        cdr.setDateParam2(dateParam2);
                        cdr.setDateParam3(dateParam3);
                        cdr.setDateParam4(dateParam4);
                        cdr.setDateParam5(dateParam5);
                        cdr.setDecimalParam1(decimalParam1);
                        cdr.setDecimalParam2(decimalParam2);
                        cdr.setDecimalParam3(decimalParam3);
                        cdr.setDecimalParam4(decimalParam4);
                        cdr.setDecimalParam5(decimalParam5);
                        cdr.setExtraParameter(extraParameter);
                        if (!reject && cdr.getEventDate() != null && cdr.getQuantity() != null && cdr.getAccessCode() != null && cdr.getParameter1() != null)
                            cdrService.create(cdr);
                        else if (!reject) {
                            validateCdr(line, cdr, context, rejectFile);
                        }
                    } catch (Exception e) {
                        rejectFile.write(line + " => " + e.getMessage() + " \n");
                    }
                }
                rejectFile.close();
                br.close();
                fread.close();
                String toPath = getProviderRootDir() + File.separator
                        + "imports/cdr/flatFile/archive" + File.separator + fileInput.getName();
                Files.createDirectories(Paths.get(toPath));
                Files.move(Paths.get(fileInput.getPath()), Paths.get(toPath), StandardCopyOption.REPLACE_EXISTING);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void validateCdr(String line, CDR cdr, Map<String, String> context, FileWriter file) throws IOException {
        if (cdr.getEventDate() == null) file.write(line + " => " + context.get("eventDate") + " is required\n");
        else if (cdr.getQuantity() == null) file.write(line + " => " + context.get("quantity") + " is required\n");
        else if (cdr.getAccessCode() == null) file.write(line + " => " + context.get("accessCode") + " is required\n");
        else if (cdr.getParameter1() == null) file.write(line + " => " + context.get("parameter1") + " is required\n");

    }


    public String getProviderRootDir() {
        return paramBeanFactory.getDefaultChrootDir();
    }

}
				]]>
			</column>
			<where>code='org.meveo.service.script.CdrFlatFileImportScript'</where>
		</update>
	</changeSet>

	<changeSet id="#INTRD-12677_20221230" author="aeljaouhari">
		<insert tableName="crm_provider_order_line_type">
			<column name="provider_id" valueNumeric="1" />
			<column name="order_line_type" value="CREATE" />
		</insert>
		<insert tableName="crm_provider_order_line_type">
			<column name="provider_id" valueNumeric="1" />
			<column name="order_line_type" value="AMEND" />
		</insert>
		<insert tableName="crm_provider_order_line_type">
			<column name="provider_id" valueNumeric="1" />
			<column name="order_line_type" value="TERMINATE" />
		</insert>
		<insert tableName="crm_provider_order_line_type">
			<column name="provider_id" valueNumeric="1" />
			<column name="order_line_type" value="APPLY_ONE_SHOT" />
		</insert>
	</changeSet>
	
	<changeSet id="#12132_20221219" author="HatimOUDAD">
		<sql>
		<![CDATA[
			INSERT INTO public.iso_icd VALUES (1, 0, now(), NULL, 'opencell.admin', NULL, '0002', 'System Information et Repertoire des Entreprise et des Etablissements: SIRENE ');
			INSERT INTO public.iso_icd VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, '0003', 'Codification Numerique des Etablissments Financiers En Belgique ');
			INSERT INTO public.iso_icd VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, '0004', 'NBS/OSI NETWORK ');
			INSERT INTO public.iso_icd VALUES (4, 0, now(), NULL, 'opencell.admin', NULL, '0005', 'USA FED GOV OSI NETWORK ');
			INSERT INTO public.iso_icd VALUES (5, 0, now(), NULL, 'opencell.admin', NULL, '0006', 'USA DOD OSI NETWORK ');
			INSERT INTO public.iso_icd VALUES (6, 0, now(), NULL, 'opencell.admin', NULL, '0007', 'Organisationsnummer ');
			INSERT INTO public.iso_icd VALUES (7, 0, now(), NULL, 'opencell.admin', NULL, '0008', 'LE NUMERO NATIONAL ');
			INSERT INTO public.iso_icd VALUES (8, 0, now(), NULL, 'opencell.admin', NULL, '0009', 'SIRET-CODE ');
			INSERT INTO public.iso_icd VALUES (9, 0, now(), NULL, 'opencell.admin', NULL, '0010', 'Organizational Identifiers for Structured Names under ISO 9541 Part 2 ');
			INSERT INTO public.iso_icd VALUES (10, 0, now(), NULL, 'opencell.admin', NULL, '0011', 'International Code Designator for the Identification of OSI-based, Amateur Radio Organizations, Network Objects and Application Services. ');
			INSERT INTO public.iso_icd VALUES (11, 0, now(), NULL, 'opencell.admin', NULL, '0012', 'European Computer Manufacturers Association: ECMA ');
			INSERT INTO public.iso_icd VALUES (12, 0, now(), NULL, 'opencell.admin', NULL, '0013', 'VSA FTP CODE (FTP = File Transfer Protocol) ');
			INSERT INTO public.iso_icd VALUES (13, 0, now(), NULL, 'opencell.admin', NULL, '0014', 'NIST/OSI Implememts'' Workshop ');
			INSERT INTO public.iso_icd VALUES (14, 0, now(), NULL, 'opencell.admin', NULL, '0015', 'Electronic Data Interchange: EDI ');
			INSERT INTO public.iso_icd VALUES (15, 0, now(), NULL, 'opencell.admin', NULL, '0016', 'EWOS Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (16, 0, now(), NULL, 'opencell.admin', NULL, '0017', 'COMMON LANGUAGE ');
			INSERT INTO public.iso_icd VALUES (17, 0, now(), NULL, 'opencell.admin', NULL, '0018', 'SNA/OSI Network ');
			INSERT INTO public.iso_icd VALUES (18, 0, now(), NULL, 'opencell.admin', NULL, '0019', 'Air Transport Industry Services Communications Network ');
			INSERT INTO public.iso_icd VALUES (19, 0, now(), NULL, 'opencell.admin', NULL, '0020', 'European Laboratory for Particle Physics: CERN ');
			INSERT INTO public.iso_icd VALUES (20, 0, now(), NULL, 'opencell.admin', NULL, '0021', 'SOCIETY FOR WORLDWIDE INTERBANK FINANCIAL, TELECOMMUNICATION S.W.I.F.T. ');
			INSERT INTO public.iso_icd VALUES (21, 0, now(), NULL, 'opencell.admin', NULL, '0022', 'OSF Distributed Computing Object Identification ');
			INSERT INTO public.iso_icd VALUES (22, 0, now(), NULL, 'opencell.admin', NULL, '0023', 'Nordic University and Research Network: NORDUnet ');
			INSERT INTO public.iso_icd VALUES (23, 0, now(), NULL, 'opencell.admin', NULL, '0024', 'Digital Equipment Corporation: DEC ');
			INSERT INTO public.iso_icd VALUES (24, 0, now(), NULL, 'opencell.admin', NULL, '0025', 'OSI ASIA-OCEANIA WORKSHOP ');
			INSERT INTO public.iso_icd VALUES (25, 0, now(), NULL, 'opencell.admin', NULL, '0026', 'NATO ISO 6523 ICDE coding scheme ');
			INSERT INTO public.iso_icd VALUES (26, 0, now(), NULL, 'opencell.admin', NULL, '0027', 'Aeronautical Telecommunications Network (ATN) ');
			INSERT INTO public.iso_icd VALUES (27, 0, now(), NULL, 'opencell.admin', NULL, '0028', 'International Standard ISO 6523 ');
			INSERT INTO public.iso_icd VALUES (28, 0, now(), NULL, 'opencell.admin', NULL, '0029', 'The All-Union Classifier of Enterprises and Organisations ');
			INSERT INTO public.iso_icd VALUES (29, 0, now(), NULL, 'opencell.admin', NULL, '0030', 'AT&T/OSI Network ');
			INSERT INTO public.iso_icd VALUES (30, 0, now(), NULL, 'opencell.admin', NULL, '0031', 'EDI Partner Identification Code ');
			INSERT INTO public.iso_icd VALUES (31, 0, now(), NULL, 'opencell.admin', NULL, '0032', 'Telecom Australia ');
			INSERT INTO public.iso_icd VALUES (32, 0, now(), NULL, 'opencell.admin', NULL, '0033', 'S G W OSI Internetwork ');
			INSERT INTO public.iso_icd VALUES (33, 0, now(), NULL, 'opencell.admin', NULL, '0034', 'Reuter Open Address Standard ');
			INSERT INTO public.iso_icd VALUES (34, 0, now(), NULL, 'opencell.admin', NULL, '0035', 'ISO 6523 - ICD ');
			INSERT INTO public.iso_icd VALUES (35, 0, now(), NULL, 'opencell.admin', NULL, '0036', 'TeleTrust Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (36, 0, now(), NULL, 'opencell.admin', NULL, '0037', 'LY-tunnus ');
			INSERT INTO public.iso_icd VALUES (37, 0, now(), NULL, 'opencell.admin', NULL, '0038', 'The Australian GOSIP Network ');
			INSERT INTO public.iso_icd VALUES (38, 0, now(), NULL, 'opencell.admin', NULL, '0039', 'The OZ DOD OSI Network ');
			INSERT INTO public.iso_icd VALUES (39, 0, now(), NULL, 'opencell.admin', NULL, '0040', 'Unilever Group Companies ');
			INSERT INTO public.iso_icd VALUES (40, 0, now(), NULL, 'opencell.admin', NULL, '0041', 'Citicorp Global Information Network ');
			INSERT INTO public.iso_icd VALUES (41, 0, now(), NULL, 'opencell.admin', NULL, '0042', 'DBP Telekom Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (42, 0, now(), NULL, 'opencell.admin', NULL, '0043', 'HydroNETT ');
			INSERT INTO public.iso_icd VALUES (43, 0, now(), NULL, 'opencell.admin', NULL, '0044', 'Thai Industrial Standards Institute (TISI) ');
			INSERT INTO public.iso_icd VALUES (44, 0, now(), NULL, 'opencell.admin', NULL, '0045', 'ICI Company Identification System ');
			INSERT INTO public.iso_icd VALUES (45, 0, now(), NULL, 'opencell.admin', NULL, '0046', 'FUNLOC ');
			INSERT INTO public.iso_icd VALUES (46, 0, now(), NULL, 'opencell.admin', NULL, '0047', 'BULL ODI/DSA/UNIX Network ');
			INSERT INTO public.iso_icd VALUES (47, 0, now(), NULL, 'opencell.admin', NULL, '0048', 'OSINZ ');
			INSERT INTO public.iso_icd VALUES (48, 0, now(), NULL, 'opencell.admin', NULL, '0049', 'Auckland Area Health ');
			INSERT INTO public.iso_icd VALUES (49, 0, now(), NULL, 'opencell.admin', NULL, '0050', 'Firmenich ');
			INSERT INTO public.iso_icd VALUES (50, 0, now(), NULL, 'opencell.admin', NULL, '0051', 'AGFA-DIS ');
			INSERT INTO public.iso_icd VALUES (51, 0, now(), NULL, 'opencell.admin', NULL, '0052', 'Society of Motion Picture and Television Engineers (SMPTE) ');
			INSERT INTO public.iso_icd VALUES (52, 0, now(), NULL, 'opencell.admin', NULL, '0053', 'Migros_Network M_NETOPZ ');
			INSERT INTO public.iso_icd VALUES (53, 0, now(), NULL, 'opencell.admin', NULL, '0054', 'ISO6523 - ICDPCR ');
			INSERT INTO public.iso_icd VALUES (54, 0, now(), NULL, 'opencell.admin', NULL, '0055', 'Energy Net ');
			INSERT INTO public.iso_icd VALUES (55, 0, now(), NULL, 'opencell.admin', NULL, '0056', 'Nokia Object Identifiers (NOI) ');
			INSERT INTO public.iso_icd VALUES (56, 0, now(), NULL, 'opencell.admin', NULL, '0057', 'Saint Gobain ');
			INSERT INTO public.iso_icd VALUES (57, 0, now(), NULL, 'opencell.admin', NULL, '0058', 'Siemens Corporate Network ');
			INSERT INTO public.iso_icd VALUES (58, 0, now(), NULL, 'opencell.admin', NULL, '0059', 'DANZNET ');
			INSERT INTO public.iso_icd VALUES (59, 0, now(), NULL, 'opencell.admin', NULL, '0060', 'Data Universal Numbering System (D-U-N-S Number) ');
			INSERT INTO public.iso_icd VALUES (60, 0, now(), NULL, 'opencell.admin', NULL, '0061', 'SOFFEX OSI ');
			INSERT INTO public.iso_icd VALUES (61, 0, now(), NULL, 'opencell.admin', NULL, '0062', 'KPN OVN ');
			INSERT INTO public.iso_icd VALUES (62, 0, now(), NULL, 'opencell.admin', NULL, '0063', 'ascomOSINet ');
			INSERT INTO public.iso_icd VALUES (63, 0, now(), NULL, 'opencell.admin', NULL, '0064', 'UTC: Uniforme Transport Code ');
			INSERT INTO public.iso_icd VALUES (64, 0, now(), NULL, 'opencell.admin', NULL, '0065', 'SOLVAY OSI CODING ');
			INSERT INTO public.iso_icd VALUES (65, 0, now(), NULL, 'opencell.admin', NULL, '0066', 'Roche Corporate Network ');
			INSERT INTO public.iso_icd VALUES (66, 0, now(), NULL, 'opencell.admin', NULL, '0067', 'ZellwegerOSINet ');
			INSERT INTO public.iso_icd VALUES (67, 0, now(), NULL, 'opencell.admin', NULL, '0068', 'Intel Corporation OSI ');
			INSERT INTO public.iso_icd VALUES (68, 0, now(), NULL, 'opencell.admin', NULL, '0069', 'SITA Object Identifier Tree ');
			INSERT INTO public.iso_icd VALUES (69, 0, now(), NULL, 'opencell.admin', NULL, '0070', 'DaimlerChrysler Corporate Network ');
			INSERT INTO public.iso_icd VALUES (70, 0, now(), NULL, 'opencell.admin', NULL, '0071', 'LEGO /OSI NETWORK ');
			INSERT INTO public.iso_icd VALUES (71, 0, now(), NULL, 'opencell.admin', NULL, '0072', 'NAVISTAR/OSI Network ');
			INSERT INTO public.iso_icd VALUES (72, 0, now(), NULL, 'opencell.admin', NULL, '0073', 'ICD Formatted ATM address ');
			INSERT INTO public.iso_icd VALUES (73, 0, now(), NULL, 'opencell.admin', NULL, '0074', 'ARINC ');
			INSERT INTO public.iso_icd VALUES (74, 0, now(), NULL, 'opencell.admin', NULL, '0075', 'Alcanet/Alcatel-Alsthom Corporate Network ');
			INSERT INTO public.iso_icd VALUES (75, 0, now(), NULL, 'opencell.admin', NULL, '0076', 'Sistema Italiano di Identificazione di ogetti gestito da UNINFO ');
			INSERT INTO public.iso_icd VALUES (76, 0, now(), NULL, 'opencell.admin', NULL, '0077', 'Sistema Italiano di Indirizzamento di Reti OSI Gestito da UNINFO ');
			INSERT INTO public.iso_icd VALUES (77, 0, now(), NULL, 'opencell.admin', NULL, '0078', 'Mitel terminal or switching equipment ');
			INSERT INTO public.iso_icd VALUES (78, 0, now(), NULL, 'opencell.admin', NULL, '0079', 'ATM Forum ');
			INSERT INTO public.iso_icd VALUES (79, 0, now(), NULL, 'opencell.admin', NULL, '0080', 'UK National Health Service Scheme, (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (80, 0, now(), NULL, 'opencell.admin', NULL, '0081', 'International NSAP ');
			INSERT INTO public.iso_icd VALUES (81, 0, now(), NULL, 'opencell.admin', NULL, '0082', 'Norwegian Telecommunications Authority''s, NTA''S, EDI, identifier scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (82, 0, now(), NULL, 'opencell.admin', NULL, '0083', 'Advanced Telecommunications Modules Limited, Corporate Network ');
			INSERT INTO public.iso_icd VALUES (83, 0, now(), NULL, 'opencell.admin', NULL, '0084', 'Athens Chamber of Commerce & Industry Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (84, 0, now(), NULL, 'opencell.admin', NULL, '0085', 'Swiss Chambers of Commerce Scheme (EDIRA) compliant ');
			INSERT INTO public.iso_icd VALUES (85, 0, now(), NULL, 'opencell.admin', NULL, '0086', 'United States Council for International Business (USCIB) Scheme, (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (86, 0, now(), NULL, 'opencell.admin', NULL, '0087', 'National Federation of Chambers of Commerce & Industry of Belgium, Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (87, 0, now(), NULL, 'opencell.admin', NULL, '0088', 'EAN Location Code ');
			INSERT INTO public.iso_icd VALUES (88, 0, now(), NULL, 'opencell.admin', NULL, '0089', 'The Association of British Chambers of Commerce Ltd. Scheme, (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (89, 0, now(), NULL, 'opencell.admin', NULL, '0090', 'Internet IP addressing - ISO 6523 ICD encoding ');
			INSERT INTO public.iso_icd VALUES (90, 0, now(), NULL, 'opencell.admin', NULL, '0091', 'Cisco Sysytems / OSI Network ');
			INSERT INTO public.iso_icd VALUES (91, 0, now(), NULL, 'opencell.admin', NULL, '0093', 'Revenue Canada Business Number Registration (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (92, 0, now(), NULL, 'opencell.admin', NULL, '0094', 'DEUTSCHER INDUSTRIE- UND HANDELSTAG (DIHT) Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (93, 0, now(), NULL, 'opencell.admin', NULL, '0095', 'Hewlett - Packard Company Internal AM Network ');
			INSERT INTO public.iso_icd VALUES (94, 0, now(), NULL, 'opencell.admin', NULL, '0096', 'DANISH CHAMBER OF COMMERCE Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (95, 0, now(), NULL, 'opencell.admin', NULL, '0097', 'FTI - Ediforum Italia, (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (96, 0, now(), NULL, 'opencell.admin', NULL, '0098', 'CHAMBER OF COMMERCE TEL AVIV-JAFFA Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (97, 0, now(), NULL, 'opencell.admin', NULL, '0099', 'Siemens Supervisory Systems Network ');
			INSERT INTO public.iso_icd VALUES (98, 0, now(), NULL, 'opencell.admin', NULL, '0100', 'PNG_ICD Scheme ');
			INSERT INTO public.iso_icd VALUES (99, 0, now(), NULL, 'opencell.admin', NULL, '0101', 'South African Code Allocation ');
			INSERT INTO public.iso_icd VALUES (100, 0, now(), NULL, 'opencell.admin', NULL, '0102', 'HEAG ');
			INSERT INTO public.iso_icd VALUES (101, 0, now(), NULL, 'opencell.admin', NULL, '0104', 'BT - ICD Coding System ');
			INSERT INTO public.iso_icd VALUES (102, 0, now(), NULL, 'opencell.admin', NULL, '0105', 'Portuguese Chamber of Commerce and Industry Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (103, 0, now(), NULL, 'opencell.admin', NULL, '0106', 'Vereniging van Kamers van Koophandel en Fabrieken in Nederland (Association of Chambers of Commerce and Industry in the Netherlands), Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (104, 0, now(), NULL, 'opencell.admin', NULL, '0107', 'Association of Swedish Chambers of Commerce and Industry Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (105, 0, now(), NULL, 'opencell.admin', NULL, '0108', 'Australian Chambers of Commerce and Industry Scheme (EDIRA compliant) ');
			INSERT INTO public.iso_icd VALUES (106, 0, now(), NULL, 'opencell.admin', NULL, '0109', 'BellSouth ICD AESA (ATM End System Address) ');
			INSERT INTO public.iso_icd VALUES (107, 0, now(), NULL, 'opencell.admin', NULL, '0110', 'Bell Atlantic ');
			INSERT INTO public.iso_icd VALUES (108, 0, now(), NULL, 'opencell.admin', NULL, '0111', 'Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (109, 0, now(), NULL, 'opencell.admin', NULL, '0112', 'ISO register for Standards producing Organizations ');
			INSERT INTO public.iso_icd VALUES (110, 0, now(), NULL, 'opencell.admin', NULL, '0113', 'OriginNet ');
			INSERT INTO public.iso_icd VALUES (111, 0, now(), NULL, 'opencell.admin', NULL, '0114', 'Check Point Software Technologies ');
			INSERT INTO public.iso_icd VALUES (112, 0, now(), NULL, 'opencell.admin', NULL, '0115', 'Pacific Bell Data Communications Network ');
			INSERT INTO public.iso_icd VALUES (113, 0, now(), NULL, 'opencell.admin', NULL, '0116', 'PSS Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (114, 0, now(), NULL, 'opencell.admin', NULL, '0117', 'STENTOR-ICD CODING SYSTEM ');
			INSERT INTO public.iso_icd VALUES (115, 0, now(), NULL, 'opencell.admin', NULL, '0118', 'ATM-Network ZN''96 ');
			INSERT INTO public.iso_icd VALUES (116, 0, now(), NULL, 'opencell.admin', NULL, '0119', 'MCI / OSI Network ');
			INSERT INTO public.iso_icd VALUES (117, 0, now(), NULL, 'opencell.admin', NULL, '0120', 'Advantis ');
			INSERT INTO public.iso_icd VALUES (118, 0, now(), NULL, 'opencell.admin', NULL, '0121', 'Affable Software Data Interchange Codes ');
			INSERT INTO public.iso_icd VALUES (119, 0, now(), NULL, 'opencell.admin', NULL, '0122', 'BB-DATA GmbH ');
			INSERT INTO public.iso_icd VALUES (120, 0, now(), NULL, 'opencell.admin', NULL, '0123', 'BASF Company ATM-Network ');
			INSERT INTO public.iso_icd VALUES (121, 0, now(), NULL, 'opencell.admin', NULL, '0124', 'IOTA Identifiers for Organizations for Telecommunications Addressing using the ICD system format defined in ISO/IEC 8348 ');
			INSERT INTO public.iso_icd VALUES (122, 0, now(), NULL, 'opencell.admin', NULL, '0125', 'Henkel Corporate Network (H-Net) ');
			INSERT INTO public.iso_icd VALUES (123, 0, now(), NULL, 'opencell.admin', NULL, '0126', 'GTE/OSI Network ');
			INSERT INTO public.iso_icd VALUES (124, 0, now(), NULL, 'opencell.admin', NULL, '0127', 'Dresdner Bank Corporate Network ');
			INSERT INTO public.iso_icd VALUES (125, 0, now(), NULL, 'opencell.admin', NULL, '0128', 'BCNR (Swiss Clearing Bank Number) ');
			INSERT INTO public.iso_icd VALUES (126, 0, now(), NULL, 'opencell.admin', NULL, '0129', 'BPI (Swiss Business Partner Identification) code ');
			INSERT INTO public.iso_icd VALUES (127, 0, now(), NULL, 'opencell.admin', NULL, '0130', 'Directorates of the European Commission ');
			INSERT INTO public.iso_icd VALUES (128, 0, now(), NULL, 'opencell.admin', NULL, '0131', 'Code for the Identification of National Organizations ');
			INSERT INTO public.iso_icd VALUES (129, 0, now(), NULL, 'opencell.admin', NULL, '0132', 'Certicom Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (130, 0, now(), NULL, 'opencell.admin', NULL, '0133', 'TC68 OID ');
			INSERT INTO public.iso_icd VALUES (131, 0, now(), NULL, 'opencell.admin', NULL, '0134', 'Infonet Services Corporation ');
			INSERT INTO public.iso_icd VALUES (132, 0, now(), NULL, 'opencell.admin', NULL, '0135', 'SIA Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (133, 0, now(), NULL, 'opencell.admin', NULL, '0136', 'Cable & Wireless Global ATM End-System Address Plan ');
			INSERT INTO public.iso_icd VALUES (134, 0, now(), NULL, 'opencell.admin', NULL, '0137', 'Global AESA scheme ');
			INSERT INTO public.iso_icd VALUES (135, 0, now(), NULL, 'opencell.admin', NULL, '0138', 'France Telecom ATM End System Address Plan ');
			INSERT INTO public.iso_icd VALUES (136, 0, now(), NULL, 'opencell.admin', NULL, '0139', 'Savvis Communications AESA:. ');
			INSERT INTO public.iso_icd VALUES (137, 0, now(), NULL, 'opencell.admin', NULL, '0140', 'Toshiba Organizations, Partners, And Suppliers'' (TOPAS) Code ');
			INSERT INTO public.iso_icd VALUES (138, 0, now(), NULL, 'opencell.admin', NULL, '0141', 'NATO Commercial and Government Entity system ');
			INSERT INTO public.iso_icd VALUES (139, 0, now(), NULL, 'opencell.admin', NULL, '0142', 'SECETI Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (140, 0, now(), NULL, 'opencell.admin', NULL, '0143', 'EINESTEINet AG ');
			INSERT INTO public.iso_icd VALUES (141, 0, now(), NULL, 'opencell.admin', NULL, '0144', 'DoDAAC (Department of Defense Activity Address Code) ');
			INSERT INTO public.iso_icd VALUES (142, 0, now(), NULL, 'opencell.admin', NULL, '0145', 'DGCP (Direction Générale de la Comptabilité Publique)administrative accounting identification scheme ');
			INSERT INTO public.iso_icd VALUES (143, 0, now(), NULL, 'opencell.admin', NULL, '0146', 'DGI (Direction Générale des Impots) code ');
			INSERT INTO public.iso_icd VALUES (144, 0, now(), NULL, 'opencell.admin', NULL, '0147', 'Standard Company Code ');
			INSERT INTO public.iso_icd VALUES (145, 0, now(), NULL, 'opencell.admin', NULL, '0148', 'ITU (International Telecommunications Union)Data Network Identification Codes (DNIC) ');
			INSERT INTO public.iso_icd VALUES (146, 0, now(), NULL, 'opencell.admin', NULL, '0149', 'Global Business Identifier ');
			INSERT INTO public.iso_icd VALUES (147, 0, now(), NULL, 'opencell.admin', NULL, '0150', 'Madge Networks Ltd- ICD ATM Addressing Scheme ');
			INSERT INTO public.iso_icd VALUES (148, 0, now(), NULL, 'opencell.admin', NULL, '0151', 'Australian Business Number (ABN) Scheme ');
			INSERT INTO public.iso_icd VALUES (149, 0, now(), NULL, 'opencell.admin', NULL, '0152', 'Edira Scheme Identifier Code ');
			INSERT INTO public.iso_icd VALUES (150, 0, now(), NULL, 'opencell.admin', NULL, '0153', 'Concert Global Network Services ICD AESA ');
			INSERT INTO public.iso_icd VALUES (151, 0, now(), NULL, 'opencell.admin', NULL, '0154', 'Identification number of economic subjects: (ICO) ');
			INSERT INTO public.iso_icd VALUES (152, 0, now(), NULL, 'opencell.admin', NULL, '0155', 'Global Crossing AESA (ATM End System Address) ');
			INSERT INTO public.iso_icd VALUES (153, 0, now(), NULL, 'opencell.admin', NULL, '0156', 'AUNA ');
			INSERT INTO public.iso_icd VALUES (154, 0, now(), NULL, 'opencell.admin', NULL, '0157', 'ATM interconnection with the Dutch KPN Telecom ');
			INSERT INTO public.iso_icd VALUES (155, 0, now(), NULL, 'opencell.admin', NULL, '0158', 'Identification number of economic subject (ICO) Act on State Statistics of 29 November 2''001, § 27 ');
			INSERT INTO public.iso_icd VALUES (156, 0, now(), NULL, 'opencell.admin', NULL, '0159', 'ACTALIS Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (157, 0, now(), NULL, 'opencell.admin', NULL, '0160', 'GTIN - Global Trade Item Number ');
			INSERT INTO public.iso_icd VALUES (158, 0, now(), NULL, 'opencell.admin', NULL, '0161', 'ECCMA Open Technical Directory ');
			INSERT INTO public.iso_icd VALUES (159, 0, now(), NULL, 'opencell.admin', NULL, '0162', 'CEN/ISSS Object Identifier Scheme ');
			INSERT INTO public.iso_icd VALUES (160, 0, now(), NULL, 'opencell.admin', NULL, '0163', 'US-EPA Facility Identifier ');
			INSERT INTO public.iso_icd VALUES (161, 0, now(), NULL, 'opencell.admin', NULL, '0164', 'TELUS Corporation ');
			INSERT INTO public.iso_icd VALUES (162, 0, now(), NULL, 'opencell.admin', NULL, '0165', 'FIEIE Object identifiers ');
			INSERT INTO public.iso_icd VALUES (163, 0, now(), NULL, 'opencell.admin', NULL, '0166', 'Swissguide Identifier Scheme ');
			INSERT INTO public.iso_icd VALUES (164, 0, now(), NULL, 'opencell.admin', NULL, '0167', 'Priority Telecom ATM End System Address Plan ');
			INSERT INTO public.iso_icd VALUES (165, 0, now(), NULL, 'opencell.admin', NULL, '0168', 'Vodafone Ireland OSI Addressing ');
			INSERT INTO public.iso_icd VALUES (166, 0, now(), NULL, 'opencell.admin', NULL, '0169', 'Swiss Federal Business Identification Number. Central Business names Index (zefix) Identification Number ');
			INSERT INTO public.iso_icd VALUES (167, 0, now(), NULL, 'opencell.admin', NULL, '0170', 'Teikoku Company Code ');
			INSERT INTO public.iso_icd VALUES (168, 0, now(), NULL, 'opencell.admin', NULL, '0171', 'Luxembourg CP & CPS (Certification Policy and Certification Practice Statement) Index ');
			INSERT INTO public.iso_icd VALUES (169, 0, now(), NULL, 'opencell.admin', NULL, '0172', 'Project Group “Lists of Properties” (PROLIST®) ');
			INSERT INTO public.iso_icd VALUES (170, 0, now(), NULL, 'opencell.admin', NULL, '0173', 'eCI@ss ');
			INSERT INTO public.iso_icd VALUES (171, 0, now(), NULL, 'opencell.admin', NULL, '0174', 'StepNexus ');
			INSERT INTO public.iso_icd VALUES (172, 0, now(), NULL, 'opencell.admin', NULL, '0175', 'Siemens AG ');
			INSERT INTO public.iso_icd VALUES (173, 0, now(), NULL, 'opencell.admin', NULL, '0176', 'Paradine GmbH ');
			INSERT INTO public.iso_icd VALUES (174, 0, now(), NULL, 'opencell.admin', NULL, '0177', 'Odette International Limited ');
			INSERT INTO public.iso_icd VALUES (175, 0, now(), NULL, 'opencell.admin', NULL, '0178', 'Route1 MobiNET ');
			INSERT INTO public.iso_icd VALUES (176, 0, now(), NULL, 'opencell.admin', NULL, '0179', 'Penango Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (177, 0, now(), NULL, 'opencell.admin', NULL, '0180', 'Lithuanian military PKI ');
			INSERT INTO public.iso_icd VALUES (178, 0, now(), NULL, 'opencell.admin', NULL, '0183', 'Numéro d''identification suisse des enterprises (IDE), Swiss Unique Business Identification Number (UIDB) ');
			INSERT INTO public.iso_icd VALUES (179, 0, now(), NULL, 'opencell.admin', NULL, '0184', 'DIGSTORG ');
			INSERT INTO public.iso_icd VALUES (180, 0, now(), NULL, 'opencell.admin', NULL, '0185', 'Perceval Object Code ');
			INSERT INTO public.iso_icd VALUES (181, 0, now(), NULL, 'opencell.admin', NULL, '0186', 'TrustPoint Object Identifiers ');
			INSERT INTO public.iso_icd VALUES (182, 0, now(), NULL, 'opencell.admin', NULL, '0187', 'Amazon Unique Identification Scheme ');
			INSERT INTO public.iso_icd VALUES (183, 0, now(), NULL, 'opencell.admin', NULL, '0188', 'Corporate Number of The Social Security and Tax Number System ');
			INSERT INTO public.iso_icd VALUES (184, 0, now(), NULL, 'opencell.admin', NULL, '0189', 'European Business Identifier (EBID) ');
			INSERT INTO public.iso_icd VALUES (185, 0, now(), NULL, 'opencell.admin', NULL, '0190', 'Organisatie Indentificatie Nummer (OIN) ');
			INSERT INTO public.iso_icd VALUES (186, 0, now(), NULL, 'opencell.admin', NULL, '0191', 'Company Code (Estonia) ');
			INSERT INTO public.iso_icd VALUES (187, 0, now(), NULL, 'opencell.admin', NULL, '0192', 'Organisasjonsnummer ');
			INSERT INTO public.iso_icd VALUES (188, 0, now(), NULL, 'opencell.admin', NULL, '0193', 'UBL.BE Party Identifier ');
			INSERT INTO public.iso_icd VALUES (189, 0, now(), NULL, 'opencell.admin', NULL, '0194', 'KOIOS Open Technical Dictionary');
			INSERT INTO public.iso_icd VALUES (190, 0, now(), NULL, 'opencell.admin', NULL, '0195', 'Singapore Nationwide E-lnvoice Framework ');
			INSERT INTO public.iso_icd VALUES (191, 0, now(), NULL, 'opencell.admin', NULL, '0196', 'Icelandic identifier - Íslensk kennitala ');
			INSERT INTO public.iso_icd VALUES (192, 0, now(), NULL, 'opencell.admin', NULL, '0197', 'APPLiA Pl Standard');
			INSERT INTO public.iso_icd VALUES (193, 0, now(), NULL, 'opencell.admin', NULL, '0198', 'ERSTORG');
			INSERT INTO public.iso_icd VALUES (194, 0, now(), NULL, 'opencell.admin', NULL, '0199', 'Legal Entity Identifier (LEI)');
			INSERT INTO public.iso_icd VALUES (195, 0, now(), NULL, 'opencell.admin', NULL, '0200', 'Legal entity code (Lithuania)');
			INSERT INTO public.iso_icd VALUES (196, 0, now(), NULL, 'opencell.admin', NULL, '0201', 'Codice Univoco Unità Organizzativa iPA');
			INSERT INTO public.iso_icd VALUES (197, 0, now(), NULL, 'opencell.admin', NULL, '0202', 'Indirizzo di Posta Elettronica Certificata');
			INSERT INTO public.iso_icd VALUES (198, 0, now(), NULL, 'opencell.admin', NULL, '0203', 'eDelivery Network Participant identifier');
			INSERT INTO public.iso_icd VALUES (199, 0, now(), NULL, 'opencell.admin', NULL, '0204', 'Leitweg-ID');
			INSERT INTO public.iso_icd VALUES (200, 0, now(), NULL, 'opencell.admin', NULL, '0205', 'CODDEST');
			INSERT INTO public.iso_icd VALUES (201, 0, now(), NULL, 'opencell.admin', NULL, '0206', 'Registre du Commerce et de l’Industrie : RCI');
			INSERT INTO public.iso_icd VALUES (202, 0, now(), NULL, 'opencell.admin', NULL, '0207', 'PiLog Ontology Codification Identifier (POCI)');
			INSERT INTO public.iso_icd VALUES (203, 0, now(), NULL, 'opencell.admin', NULL, '0208', 'Numero d''entreprise / ondernemingsnummer / Unternehmensnummer');
			INSERT INTO public.iso_icd VALUES (204, 0, now(), NULL, 'opencell.admin', NULL, '0209', 'GS1 identification keys');
			INSERT INTO public.iso_icd VALUES (205, 0, now(), NULL, 'opencell.admin', NULL, '0210', 'CODICE FISCALE');
			INSERT INTO public.iso_icd VALUES (206, 0, now(), NULL, 'opencell.admin', NULL, '0211', 'PARTITA IVA');
			INSERT INTO public.iso_icd VALUES (207, 0, now(), NULL, 'opencell.admin', NULL, '0212', 'Finnish Organization Identifier');
			INSERT INTO public.iso_icd VALUES (208, 0, now(), NULL, 'opencell.admin', NULL, '0213', 'Finnish Organization Value Add Tax Identifier');
			
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (1, 0, now(), NULL, 'opencell.admin', NULL, '80', 'Invoice', 'Debit note related to goods or services');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, '81', 'Credit Note', 'Credit note related to goods or services');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, '82', 'Invoice', 'Metered services invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (4, 0, now(), NULL, 'opencell.admin', NULL, '83', 'Credit Note', 'Credit note related to financial adjustments');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (5, 0, now(), NULL, 'opencell.admin', NULL, '84', 'Invoice', 'Debit note related to financial adjustments');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (6, 0, now(), NULL, 'opencell.admin', NULL, '130', 'Invoice', 'Invoicing data sheet');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (7, 0, now(), NULL, 'opencell.admin', NULL, '202', 'Invoice', 'Direct payment valuation');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (8, 0, now(), NULL, 'opencell.admin', NULL, '203', 'Invoice', 'Provisional payment valuation');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (9, 0, now(), NULL, 'opencell.admin', NULL, '204', 'Invoice', 'Payment valuation');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (10, 0, now(), NULL, 'opencell.admin', NULL, '211', 'Invoice', 'Interim application for payment');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (11, 0, now(), NULL, 'opencell.admin', NULL, '261', 'Credit Note', 'Self billed credit note');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (12, 0, now(), NULL, 'opencell.admin', NULL, '262', 'Credit Note', 'Consolidated credit note - goods and services');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (13, 0, now(), NULL, 'opencell.admin', NULL, '295', 'Invoice', 'Price variation invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (14, 0, now(), NULL, 'opencell.admin', NULL, '296', 'Credit Note', 'Credit note for price variation');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (15, 0, now(), NULL, 'opencell.admin', NULL, '308', 'Credit Note', 'Delcredere credit note');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (16, 0, now(), NULL, 'opencell.admin', NULL, '325', 'Invoice', 'Proforma invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (17, 0, now(), NULL, 'opencell.admin', NULL, '326', 'Invoice', 'Partial invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (18, 0, now(), NULL, 'opencell.admin', NULL, '380', 'Invoice', 'Commercial invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (19, 0, now(), NULL, 'opencell.admin', NULL, '381', 'Credit Note', 'Credit note');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (20, 0, now(), NULL, 'opencell.admin', NULL, '383', 'Invoice', 'Debit note');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (21, 0, now(), NULL, 'opencell.admin', NULL, '384', 'Invoice', 'Corrected invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (22, 0, now(), NULL, 'opencell.admin', NULL, '385', 'Invoice', 'Consolidated invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (23, 0, now(), NULL, 'opencell.admin', NULL, '386', 'Invoice', 'Prepayment invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (24, 0, now(), NULL, 'opencell.admin', NULL, '387', 'Invoice', 'Hire invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (25, 0, now(), NULL, 'opencell.admin', NULL, '388', 'Invoice', 'Tax invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (26, 0, now(), NULL, 'opencell.admin', NULL, '389', 'Invoice', 'Self-billed invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (27, 0, now(), NULL, 'opencell.admin', NULL, '390', 'Invoice', 'Delcredere invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (28, 0, now(), NULL, 'opencell.admin', NULL, '393', 'Invoice', 'Factored invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (29, 0, now(), NULL, 'opencell.admin', NULL, '394', 'Invoice', 'Lease invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (30, 0, now(), NULL, 'opencell.admin', NULL, '395', 'Invoice', 'Consignment invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (31, 0, now(), NULL, 'opencell.admin', NULL, '396', 'Credit Note', 'Factored credit note');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (32, 0, now(), NULL, 'opencell.admin', NULL, '420', 'Credit Note', 'Optical Character Reading (OCR) payment credit note');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (33, 0, now(), NULL, 'opencell.admin', NULL, '456', 'Invoice', 'Debit advice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (34, 0, now(), NULL, 'opencell.admin', NULL, '457', 'Invoice', 'Reversal of debit');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (35, 0, now(), NULL, 'opencell.admin', NULL, '458', 'Credit Note', 'Reversal of credit');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (36, 0, now(), NULL, 'opencell.admin', NULL, '527', 'Invoice', 'Self billed debit note');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (37, 0, now(), NULL, 'opencell.admin', NULL, '532', 'Credit Note', 'Forwarder''s credit note');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (38, 0, now(), NULL, 'opencell.admin', NULL, '575', 'Invoice', 'Insurer''s invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (39, 0, now(), NULL, 'opencell.admin', NULL, '623', 'Invoice', 'Forwarder''s invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (40, 0, now(), NULL, 'opencell.admin', NULL, '633', 'Invoice', 'Port charges documents');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (41, 0, now(), NULL, 'opencell.admin', NULL, '751', 'Invoice', 'Invoice information for accounting purposes');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (42, 0, now(), NULL, 'opencell.admin', NULL, '780', 'Invoice', 'Freight invoice');
			INSERT INTO public.untdid_1001_invoice_code_type VALUES (43, 0, now(), NULL, 'opencell.admin', NULL, '935', 'Invoice', 'Customs invoice');
			
			INSERT INTO public.untdid_2475_vat_payment_option VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, '35', 'Delivery date/time, actual', '29', 'Date of delivery of goods to establishments/domicile/site');
			INSERT INTO public.untdid_2475_vat_payment_option VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, '432', 'Paid to date', '72', 'Payment date');
			
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (1, 0, now(), NULL, 'opencell.admin', NULL, 'AAA', 'Goods item description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, 'AAB', 'Payment term');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, 'AAC', 'Dangerous goods additional information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (4, 0, now(), NULL, 'opencell.admin', NULL, 'AAD', 'Dangerous goods technical name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (5, 0, now(), NULL, 'opencell.admin', NULL, 'AAE', 'Acknowledgement description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (6, 0, now(), NULL, 'opencell.admin', NULL, 'AAF', 'Rate additional information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (7, 0, now(), NULL, 'opencell.admin', NULL, 'AAG', 'Party instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (8, 0, now(), NULL, 'opencell.admin', NULL, 'AAI', 'General information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (9, 0, now(), NULL, 'opencell.admin', NULL, 'AAJ', 'Additional conditions of sale/purchase');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (10, 0, now(), NULL, 'opencell.admin', NULL, 'AAK', 'Price conditions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (11, 0, now(), NULL, 'opencell.admin', NULL, 'AAL', 'Goods dimensions in characters');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (12, 0, now(), NULL, 'opencell.admin', NULL, 'AAM', 'Equipment re-usage restrictions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (13, 0, now(), NULL, 'opencell.admin', NULL, 'AAN', 'Handling restriction');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (14, 0, now(), NULL, 'opencell.admin', NULL, 'AAO', 'Error description (free text)');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (15, 0, now(), NULL, 'opencell.admin', NULL, 'AAP', 'Response (free text)');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (16, 0, now(), NULL, 'opencell.admin', NULL, 'AAQ', 'Package content''s description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (17, 0, now(), NULL, 'opencell.admin', NULL, 'AAR', 'Terms of delivery');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (18, 0, now(), NULL, 'opencell.admin', NULL, 'AAS', 'Bill of lading remarks');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (19, 0, now(), NULL, 'opencell.admin', NULL, 'AAT', 'Mode of settlement information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (20, 0, now(), NULL, 'opencell.admin', NULL, 'AAU', 'Consignment invoice information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (21, 0, now(), NULL, 'opencell.admin', NULL, 'AAV', 'Clearance invoice information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (22, 0, now(), NULL, 'opencell.admin', NULL, 'AAW', 'Letter of credit information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (23, 0, now(), NULL, 'opencell.admin', NULL, 'AAX', 'License information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (24, 0, now(), NULL, 'opencell.admin', NULL, 'AAY', 'Certification statements');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (25, 0, now(), NULL, 'opencell.admin', NULL, 'AAZ', 'Additional export information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (26, 0, now(), NULL, 'opencell.admin', NULL, 'ABA', 'Tariff statements');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (27, 0, now(), NULL, 'opencell.admin', NULL, 'ABB', 'Medical history');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (28, 0, now(), NULL, 'opencell.admin', NULL, 'ABC', 'Conditions of sale or purchase');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (29, 0, now(), NULL, 'opencell.admin', NULL, 'ABD', 'Contract document type');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (30, 0, now(), NULL, 'opencell.admin', NULL, 'ABE', 'Additional terms and/or conditions (documentary credit)');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (31, 0, now(), NULL, 'opencell.admin', NULL, 'ABF', 'Instructions or information about standby documentary');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (32, 0, now(), NULL, 'opencell.admin', NULL, 'ABG', 'Instructions or information about partial shipment(s)');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (33, 0, now(), NULL, 'opencell.admin', NULL, 'ABH', 'Instructions or information about transhipment(s)');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (34, 0, now(), NULL, 'opencell.admin', NULL, 'ABI', 'Additional handling instructions documentary credit');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (35, 0, now(), NULL, 'opencell.admin', NULL, 'ABJ', 'Domestic routing information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (36, 0, now(), NULL, 'opencell.admin', NULL, 'ABK', 'Chargeable category of equipment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (37, 0, now(), NULL, 'opencell.admin', NULL, 'ABL', 'Government information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (38, 0, now(), NULL, 'opencell.admin', NULL, 'ABM', 'Onward routing information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (39, 0, now(), NULL, 'opencell.admin', NULL, 'ABN', 'Accounting information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (40, 0, now(), NULL, 'opencell.admin', NULL, 'ABO', 'Discrepancy information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (41, 0, now(), NULL, 'opencell.admin', NULL, 'ABP', 'Confirmation instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (42, 0, now(), NULL, 'opencell.admin', NULL, 'ABQ', 'Method of issuance');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (43, 0, now(), NULL, 'opencell.admin', NULL, 'ABR', 'Documents delivery instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (44, 0, now(), NULL, 'opencell.admin', NULL, 'ABS', 'Additional conditions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (45, 0, now(), NULL, 'opencell.admin', NULL, 'ABT', 'Information/instructions about additional amounts covered');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (46, 0, now(), NULL, 'opencell.admin', NULL, 'ABU', 'Deferred payment termed additional');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (47, 0, now(), NULL, 'opencell.admin', NULL, 'ABV', 'Acceptance terms additional');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (48, 0, now(), NULL, 'opencell.admin', NULL, 'ABW', 'Negotiation terms additional');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (49, 0, now(), NULL, 'opencell.admin', NULL, 'ABX', 'Document name and documentary requirements');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (50, 0, now(), NULL, 'opencell.admin', NULL, 'ABZ', 'Instructions/information about revolving documentary credit');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (51, 0, now(), NULL, 'opencell.admin', NULL, 'ACA', 'Documentary requirements');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (52, 0, now(), NULL, 'opencell.admin', NULL, 'ACB', 'Additional information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (53, 0, now(), NULL, 'opencell.admin', NULL, 'ACC', 'Factor assignment clause');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (54, 0, now(), NULL, 'opencell.admin', NULL, 'ACD', 'Reason');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (55, 0, now(), NULL, 'opencell.admin', NULL, 'ACE', 'Dispute');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (56, 0, now(), NULL, 'opencell.admin', NULL, 'ACF', 'Additional attribute information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (57, 0, now(), NULL, 'opencell.admin', NULL, 'ACG', 'Absence declaration');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (58, 0, now(), NULL, 'opencell.admin', NULL, 'ACH', 'Aggregation statement');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (59, 0, now(), NULL, 'opencell.admin', NULL, 'ACI', 'Compilation statement');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (60, 0, now(), NULL, 'opencell.admin', NULL, 'ACJ', 'Definitional exception');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (61, 0, now(), NULL, 'opencell.admin', NULL, 'ACK', 'Privacy statement');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (62, 0, now(), NULL, 'opencell.admin', NULL, 'ACL', 'Quality statement');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (63, 0, now(), NULL, 'opencell.admin', NULL, 'ACM', 'Statistical description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (64, 0, now(), NULL, 'opencell.admin', NULL, 'ACN', 'Statistical definition');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (65, 0, now(), NULL, 'opencell.admin', NULL, 'ACO', 'Statistical name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (66, 0, now(), NULL, 'opencell.admin', NULL, 'ACP', 'Statistical title');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (67, 0, now(), NULL, 'opencell.admin', NULL, 'ACQ', 'Off-dimension information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (68, 0, now(), NULL, 'opencell.admin', NULL, 'ACR', 'Unexpected stops information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (69, 0, now(), NULL, 'opencell.admin', NULL, 'ACS', 'Principles');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (70, 0, now(), NULL, 'opencell.admin', NULL, 'ACT', 'Terms and definition');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (71, 0, now(), NULL, 'opencell.admin', NULL, 'ACU', 'Segment name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (72, 0, now(), NULL, 'opencell.admin', NULL, 'ACV', 'Simple data element name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (73, 0, now(), NULL, 'opencell.admin', NULL, 'ACW', 'Scope');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (74, 0, now(), NULL, 'opencell.admin', NULL, 'ACX', 'Message type name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (75, 0, now(), NULL, 'opencell.admin', NULL, 'ACY', 'Introduction');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (76, 0, now(), NULL, 'opencell.admin', NULL, 'ACZ', 'Glossary');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (77, 0, now(), NULL, 'opencell.admin', NULL, 'ADA', 'Functional definition');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (78, 0, now(), NULL, 'opencell.admin', NULL, 'ADB', 'Examples');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (79, 0, now(), NULL, 'opencell.admin', NULL, 'ADC', 'Cover page');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (80, 0, now(), NULL, 'opencell.admin', NULL, 'ADD', 'Dependency (syntax) notes');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (81, 0, now(), NULL, 'opencell.admin', NULL, 'ADE', 'Code value name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (82, 0, now(), NULL, 'opencell.admin', NULL, 'ADF', 'Code list name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (83, 0, now(), NULL, 'opencell.admin', NULL, 'ADG', 'Clarification of usage');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (84, 0, now(), NULL, 'opencell.admin', NULL, 'ADH', 'Composite data element name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (85, 0, now(), NULL, 'opencell.admin', NULL, 'ADI', 'Field of application');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (86, 0, now(), NULL, 'opencell.admin', NULL, 'ADJ', 'Type of assets and liabilities');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (87, 0, now(), NULL, 'opencell.admin', NULL, 'ADK', 'Promotion information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (88, 0, now(), NULL, 'opencell.admin', NULL, 'ADL', 'Meter condition');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (89, 0, now(), NULL, 'opencell.admin', NULL, 'ADM', 'Meter reading information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (90, 0, now(), NULL, 'opencell.admin', NULL, 'ADN', 'Type of transaction reason');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (91, 0, now(), NULL, 'opencell.admin', NULL, 'ADO', 'Type of survey question');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (92, 0, now(), NULL, 'opencell.admin', NULL, 'ADP', 'Carrier''s agent counter information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (93, 0, now(), NULL, 'opencell.admin', NULL, 'ADQ', 'Description of work item on equipment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (94, 0, now(), NULL, 'opencell.admin', NULL, 'ADR', 'Message definition');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (95, 0, now(), NULL, 'opencell.admin', NULL, 'ADS', 'Booked item information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (96, 0, now(), NULL, 'opencell.admin', NULL, 'ADT', 'Source of document');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (97, 0, now(), NULL, 'opencell.admin', NULL, 'ADU', 'Note');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (98, 0, now(), NULL, 'opencell.admin', NULL, 'ADV', 'Fixed part of segment clarification text');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (99, 0, now(), NULL, 'opencell.admin', NULL, 'ADW', 'Characteristics of goods');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (100, 0, now(), NULL, 'opencell.admin', NULL, 'ADX', 'Additional discharge instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (101, 0, now(), NULL, 'opencell.admin', NULL, 'ADY', 'Container stripping instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (102, 0, now(), NULL, 'opencell.admin', NULL, 'ADZ', 'CSC (Container Safety Convention) plate information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (103, 0, now(), NULL, 'opencell.admin', NULL, 'AEA', 'Cargo remarks');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (104, 0, now(), NULL, 'opencell.admin', NULL, 'AEB', 'Temperature control instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (105, 0, now(), NULL, 'opencell.admin', NULL, 'AEC', 'Text refers to expected data');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (106, 0, now(), NULL, 'opencell.admin', NULL, 'AED', 'Text refers to received data');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (107, 0, now(), NULL, 'opencell.admin', NULL, 'AEE', 'Section clarification text');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (108, 0, now(), NULL, 'opencell.admin', NULL, 'AEF', 'Information to the beneficiary');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (109, 0, now(), NULL, 'opencell.admin', NULL, 'AEG', 'Information to the applicant');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (110, 0, now(), NULL, 'opencell.admin', NULL, 'AEH', 'Instructions to the beneficiary');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (111, 0, now(), NULL, 'opencell.admin', NULL, 'AEI', 'Instructions to the applicant');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (112, 0, now(), NULL, 'opencell.admin', NULL, 'AEJ', 'Controlled atmosphere');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (113, 0, now(), NULL, 'opencell.admin', NULL, 'AEK', 'Take off annotation');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (114, 0, now(), NULL, 'opencell.admin', NULL, 'AEL', 'Price variation narrative');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (115, 0, now(), NULL, 'opencell.admin', NULL, 'AEM', 'Documentary credit amendment instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (116, 0, now(), NULL, 'opencell.admin', NULL, 'AEN', 'Standard method narrative');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (117, 0, now(), NULL, 'opencell.admin', NULL, 'AEO', 'Project narrative');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (118, 0, now(), NULL, 'opencell.admin', NULL, 'AEP', 'Radioactive goods, additional information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (119, 0, now(), NULL, 'opencell.admin', NULL, 'AEQ', 'Bank-to-bank information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (120, 0, now(), NULL, 'opencell.admin', NULL, 'AER', 'Reimbursement instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (121, 0, now(), NULL, 'opencell.admin', NULL, 'AES', 'Reason for amending a message');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (122, 0, now(), NULL, 'opencell.admin', NULL, 'AET', 'Instructions to the paying and/or accepting and/or');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (123, 0, now(), NULL, 'opencell.admin', NULL, 'AEU', 'Interest instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (124, 0, now(), NULL, 'opencell.admin', NULL, 'AEV', 'Agent commission');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (125, 0, now(), NULL, 'opencell.admin', NULL, 'AEW', 'Remitting bank instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (126, 0, now(), NULL, 'opencell.admin', NULL, 'AEX', 'Instructions to the collecting bank');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (127, 0, now(), NULL, 'opencell.admin', NULL, 'AEY', 'Collection amount instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (128, 0, now(), NULL, 'opencell.admin', NULL, 'AEZ', 'Internal auditing information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (129, 0, now(), NULL, 'opencell.admin', NULL, 'AFA', 'Constraint');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (130, 0, now(), NULL, 'opencell.admin', NULL, 'AFB', 'Comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (131, 0, now(), NULL, 'opencell.admin', NULL, 'AFC', 'Semantic note');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (132, 0, now(), NULL, 'opencell.admin', NULL, 'AFD', 'Help text');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (133, 0, now(), NULL, 'opencell.admin', NULL, 'AFE', 'Legend');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (134, 0, now(), NULL, 'opencell.admin', NULL, 'AFF', 'Batch code structure');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (135, 0, now(), NULL, 'opencell.admin', NULL, 'AFG', 'Product application');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (136, 0, now(), NULL, 'opencell.admin', NULL, 'AFH', 'Customer complaint');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (137, 0, now(), NULL, 'opencell.admin', NULL, 'AFI', 'Probable cause of fault');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (138, 0, now(), NULL, 'opencell.admin', NULL, 'AFJ', 'Defect description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (139, 0, now(), NULL, 'opencell.admin', NULL, 'AFK', 'Repair description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (140, 0, now(), NULL, 'opencell.admin', NULL, 'AFL', 'Review comments');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (141, 0, now(), NULL, 'opencell.admin', NULL, 'AFM', 'Title');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (142, 0, now(), NULL, 'opencell.admin', NULL, 'AFN', 'Description of amount');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (143, 0, now(), NULL, 'opencell.admin', NULL, 'AFO', 'Responsibilities');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (144, 0, now(), NULL, 'opencell.admin', NULL, 'AFP', 'Supplier');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (145, 0, now(), NULL, 'opencell.admin', NULL, 'AFQ', 'Purchase region');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (146, 0, now(), NULL, 'opencell.admin', NULL, 'AFR', 'Affiliation');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (147, 0, now(), NULL, 'opencell.admin', NULL, 'AFS', 'Borrower');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (148, 0, now(), NULL, 'opencell.admin', NULL, 'AFT', 'Line of business');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (149, 0, now(), NULL, 'opencell.admin', NULL, 'AFU', 'Financial institution');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (150, 0, now(), NULL, 'opencell.admin', NULL, 'AFV', 'Business founder');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (151, 0, now(), NULL, 'opencell.admin', NULL, 'AFW', 'Business history');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (152, 0, now(), NULL, 'opencell.admin', NULL, 'AFX', 'Banking arrangements');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (153, 0, now(), NULL, 'opencell.admin', NULL, 'AFY', 'Business origin');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (154, 0, now(), NULL, 'opencell.admin', NULL, 'AFZ', 'Brand names'' description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (155, 0, now(), NULL, 'opencell.admin', NULL, 'AGA', 'Business financing details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (156, 0, now(), NULL, 'opencell.admin', NULL, 'AGB', 'Competition');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (157, 0, now(), NULL, 'opencell.admin', NULL, 'AGC', 'Construction process details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (158, 0, now(), NULL, 'opencell.admin', NULL, 'AGD', 'Construction specialty');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (159, 0, now(), NULL, 'opencell.admin', NULL, 'AGE', 'Contract information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (160, 0, now(), NULL, 'opencell.admin', NULL, 'AGF', 'Corporate filing');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (161, 0, now(), NULL, 'opencell.admin', NULL, 'AGG', 'Customer information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (162, 0, now(), NULL, 'opencell.admin', NULL, 'AGH', 'Copyright notice');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (163, 0, now(), NULL, 'opencell.admin', NULL, 'AGI', 'Contingent debt');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (164, 0, now(), NULL, 'opencell.admin', NULL, 'AGJ', 'Conviction details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (165, 0, now(), NULL, 'opencell.admin', NULL, 'AGK', 'Equipment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (166, 0, now(), NULL, 'opencell.admin', NULL, 'AGL', 'Workforce description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (167, 0, now(), NULL, 'opencell.admin', NULL, 'AGM', 'Exemption');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (168, 0, now(), NULL, 'opencell.admin', NULL, 'AGN', 'Future plans');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (169, 0, now(), NULL, 'opencell.admin', NULL, 'AGO', 'Interviewee conversation information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (170, 0, now(), NULL, 'opencell.admin', NULL, 'AGP', 'Intangible asset');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (171, 0, now(), NULL, 'opencell.admin', NULL, 'AGQ', 'Inventory');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (172, 0, now(), NULL, 'opencell.admin', NULL, 'AGR', 'Investment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (173, 0, now(), NULL, 'opencell.admin', NULL, 'AGS', 'Intercompany relations information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (174, 0, now(), NULL, 'opencell.admin', NULL, 'AGT', 'Joint venture');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (175, 0, now(), NULL, 'opencell.admin', NULL, 'AGU', 'Loan');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (176, 0, now(), NULL, 'opencell.admin', NULL, 'AGV', 'Long term debt');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (177, 0, now(), NULL, 'opencell.admin', NULL, 'AGW', 'Location');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (178, 0, now(), NULL, 'opencell.admin', NULL, 'AGX', 'Current legal structure');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (179, 0, now(), NULL, 'opencell.admin', NULL, 'AGY', 'Marital contract');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (180, 0, now(), NULL, 'opencell.admin', NULL, 'AGZ', 'Marketing activities');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (181, 0, now(), NULL, 'opencell.admin', NULL, 'AHA', 'Merger');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (182, 0, now(), NULL, 'opencell.admin', NULL, 'AHB', 'Marketable securities');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (183, 0, now(), NULL, 'opencell.admin', NULL, 'AHC', 'Business debt');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (184, 0, now(), NULL, 'opencell.admin', NULL, 'AHD', 'Original legal structure');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (185, 0, now(), NULL, 'opencell.admin', NULL, 'AHE', 'Employee sharing arrangements');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (186, 0, now(), NULL, 'opencell.admin', NULL, 'AHF', 'Organization details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (187, 0, now(), NULL, 'opencell.admin', NULL, 'AHG', 'Public record details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (188, 0, now(), NULL, 'opencell.admin', NULL, 'AHH', 'Price range');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (189, 0, now(), NULL, 'opencell.admin', NULL, 'AHI', 'Qualifications');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (190, 0, now(), NULL, 'opencell.admin', NULL, 'AHJ', 'Registered activity');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (191, 0, now(), NULL, 'opencell.admin', NULL, 'AHK', 'Criminal sentence');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (192, 0, now(), NULL, 'opencell.admin', NULL, 'AHL', 'Sales method');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (193, 0, now(), NULL, 'opencell.admin', NULL, 'AHM', 'Educational institution information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (194, 0, now(), NULL, 'opencell.admin', NULL, 'AHN', 'Status details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (195, 0, now(), NULL, 'opencell.admin', NULL, 'AHO', 'Sales');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (196, 0, now(), NULL, 'opencell.admin', NULL, 'AHP', 'Spouse information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (197, 0, now(), NULL, 'opencell.admin', NULL, 'AHQ', 'Educational degree information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (198, 0, now(), NULL, 'opencell.admin', NULL, 'AHR', 'Shareholding information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (199, 0, now(), NULL, 'opencell.admin', NULL, 'AHS', 'Sales territory');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (200, 0, now(), NULL, 'opencell.admin', NULL, 'AHT', 'Accountant''s comments');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (201, 0, now(), NULL, 'opencell.admin', NULL, 'AHU', 'Exemption law location');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (202, 0, now(), NULL, 'opencell.admin', NULL, 'AHV', 'Share classifications');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (203, 0, now(), NULL, 'opencell.admin', NULL, 'AHW', 'Forecast');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (204, 0, now(), NULL, 'opencell.admin', NULL, 'AHX', 'Event location');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (205, 0, now(), NULL, 'opencell.admin', NULL, 'AHY', 'Facility occupancy');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (206, 0, now(), NULL, 'opencell.admin', NULL, 'AHZ', 'Import and export details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (207, 0, now(), NULL, 'opencell.admin', NULL, 'AIA', 'Additional facility information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (208, 0, now(), NULL, 'opencell.admin', NULL, 'AIB', 'Inventory value');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (209, 0, now(), NULL, 'opencell.admin', NULL, 'AIC', 'Education');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (210, 0, now(), NULL, 'opencell.admin', NULL, 'AID', 'Event');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (211, 0, now(), NULL, 'opencell.admin', NULL, 'AIE', 'Agent');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (212, 0, now(), NULL, 'opencell.admin', NULL, 'AIF', 'Domestically agreed financial statement details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (213, 0, now(), NULL, 'opencell.admin', NULL, 'AIG', 'Other current asset description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (214, 0, now(), NULL, 'opencell.admin', NULL, 'AIH', 'Other current liability description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (215, 0, now(), NULL, 'opencell.admin', NULL, 'AII', 'Former business activity');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (216, 0, now(), NULL, 'opencell.admin', NULL, 'AIJ', 'Trade name use');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (217, 0, now(), NULL, 'opencell.admin', NULL, 'AIK', 'Signing authority');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (218, 0, now(), NULL, 'opencell.admin', NULL, 'AIL', 'Guarantee');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (219, 0, now(), NULL, 'opencell.admin', NULL, 'AIM', 'Holding company operation');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (220, 0, now(), NULL, 'opencell.admin', NULL, 'AIN', 'Consignment routing');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (221, 0, now(), NULL, 'opencell.admin', NULL, 'AIO', 'Letter of protest');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (222, 0, now(), NULL, 'opencell.admin', NULL, 'AIP', 'Question');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (223, 0, now(), NULL, 'opencell.admin', NULL, 'AIQ', 'Party information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (224, 0, now(), NULL, 'opencell.admin', NULL, 'AIR', 'Area boundaries description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (225, 0, now(), NULL, 'opencell.admin', NULL, 'AIS', 'Advertisement information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (226, 0, now(), NULL, 'opencell.admin', NULL, 'AIT', 'Financial statement details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (227, 0, now(), NULL, 'opencell.admin', NULL, 'AIU', 'Access instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (228, 0, now(), NULL, 'opencell.admin', NULL, 'AIV', 'Liquidity');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (229, 0, now(), NULL, 'opencell.admin', NULL, 'AIW', 'Credit line');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (230, 0, now(), NULL, 'opencell.admin', NULL, 'AIX', 'Warranty terms');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (231, 0, now(), NULL, 'opencell.admin', NULL, 'AIY', 'Division description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (232, 0, now(), NULL, 'opencell.admin', NULL, 'AIZ', 'Reporting instruction');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (233, 0, now(), NULL, 'opencell.admin', NULL, 'AJA', 'Examination result');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (234, 0, now(), NULL, 'opencell.admin', NULL, 'AJB', 'Laboratory result');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (235, 0, now(), NULL, 'opencell.admin', NULL, 'ALC', 'Allowance/charge information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (236, 0, now(), NULL, 'opencell.admin', NULL, 'ALD', 'X-ray result');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (237, 0, now(), NULL, 'opencell.admin', NULL, 'ALE', 'Pathology result');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (238, 0, now(), NULL, 'opencell.admin', NULL, 'ALF', 'Intervention description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (239, 0, now(), NULL, 'opencell.admin', NULL, 'ALG', 'Summary of admittance');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (240, 0, now(), NULL, 'opencell.admin', NULL, 'ALH', 'Medical treatment course detail');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (241, 0, now(), NULL, 'opencell.admin', NULL, 'ALI', 'Prognosis');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (242, 0, now(), NULL, 'opencell.admin', NULL, 'ALJ', 'Instruction to patient');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (243, 0, now(), NULL, 'opencell.admin', NULL, 'ALK', 'Instruction to physician');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (244, 0, now(), NULL, 'opencell.admin', NULL, 'ALL', 'All documents');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (245, 0, now(), NULL, 'opencell.admin', NULL, 'ALM', 'Medicine treatment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (246, 0, now(), NULL, 'opencell.admin', NULL, 'ALN', 'Medicine dosage and administration');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (247, 0, now(), NULL, 'opencell.admin', NULL, 'ALO', 'Availability of patient');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (248, 0, now(), NULL, 'opencell.admin', NULL, 'ALP', 'Reason for service request');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (249, 0, now(), NULL, 'opencell.admin', NULL, 'ALQ', 'Purpose of service');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (250, 0, now(), NULL, 'opencell.admin', NULL, 'ARR', 'Arrival conditions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (251, 0, now(), NULL, 'opencell.admin', NULL, 'ARS', 'Service requester''s comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (252, 0, now(), NULL, 'opencell.admin', NULL, 'AUT', 'Authentication');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (253, 0, now(), NULL, 'opencell.admin', NULL, 'AUU', 'Requested location description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (254, 0, now(), NULL, 'opencell.admin', NULL, 'AUV', 'Medicine administration condition');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (255, 0, now(), NULL, 'opencell.admin', NULL, 'AUW', 'Patient information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (256, 0, now(), NULL, 'opencell.admin', NULL, 'AUX', 'Precautionary measure');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (257, 0, now(), NULL, 'opencell.admin', NULL, 'AUY', 'Service characteristic');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (258, 0, now(), NULL, 'opencell.admin', NULL, 'AUZ', 'Planned event comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (259, 0, now(), NULL, 'opencell.admin', NULL, 'AVA', 'Expected delay comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (260, 0, now(), NULL, 'opencell.admin', NULL, 'AVB', 'Transport requirements comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (261, 0, now(), NULL, 'opencell.admin', NULL, 'AVC', 'Temporary approval condition');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (262, 0, now(), NULL, 'opencell.admin', NULL, 'AVD', 'Customs Valuation Information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (263, 0, now(), NULL, 'opencell.admin', NULL, 'AVE', 'Value Added Tax (VAT) margin scheme');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (264, 0, now(), NULL, 'opencell.admin', NULL, 'AVF', 'Maritime Declaration of Health');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (265, 0, now(), NULL, 'opencell.admin', NULL, 'BAG', 'Passenger baggage information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (266, 0, now(), NULL, 'opencell.admin', NULL, 'BAH', 'Maritime Declaration of Health');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (267, 0, now(), NULL, 'opencell.admin', NULL, 'BAI', 'Additional product information address');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (268, 0, now(), NULL, 'opencell.admin', NULL, 'BAJ', 'Information to be printed on despatch advice');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (269, 0, now(), NULL, 'opencell.admin', NULL, 'BAK', 'Missing goods remarks');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (270, 0, now(), NULL, 'opencell.admin', NULL, 'BAL', 'Non-acceptance information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (271, 0, now(), NULL, 'opencell.admin', NULL, 'BAM', 'Returns information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (272, 0, now(), NULL, 'opencell.admin', NULL, 'BAN', 'Sub-line item information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (273, 0, now(), NULL, 'opencell.admin', NULL, 'BAO', 'Test information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (274, 0, now(), NULL, 'opencell.admin', NULL, 'BAP', 'External link');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (275, 0, now(), NULL, 'opencell.admin', NULL, 'BAQ', 'VAT exemption reason');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (276, 0, now(), NULL, 'opencell.admin', NULL, 'BAR', 'Processing Instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (277, 0, now(), NULL, 'opencell.admin', NULL, 'BAS', 'Relay Instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (278, 0, now(), NULL, 'opencell.admin', NULL, 'BLC', 'Transport contract document clause');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (279, 0, now(), NULL, 'opencell.admin', NULL, 'BLD', 'Instruction to prepare the patient');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (280, 0, now(), NULL, 'opencell.admin', NULL, 'BLE', 'Medicine treatment comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (281, 0, now(), NULL, 'opencell.admin', NULL, 'BLF', 'Examination result comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (282, 0, now(), NULL, 'opencell.admin', NULL, 'BLG', 'Service request comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (283, 0, now(), NULL, 'opencell.admin', NULL, 'BLH', 'Prescription reason');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (284, 0, now(), NULL, 'opencell.admin', NULL, 'BLI', 'Prescription comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (285, 0, now(), NULL, 'opencell.admin', NULL, 'BLJ', 'Clinical investigation comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (286, 0, now(), NULL, 'opencell.admin', NULL, 'BLK', 'Medicinal specification comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (287, 0, now(), NULL, 'opencell.admin', NULL, 'BLL', 'Economic contribution comment');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (288, 0, now(), NULL, 'opencell.admin', NULL, 'BLM', 'Status of a plan');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (289, 0, now(), NULL, 'opencell.admin', NULL, 'BLN', 'Random sample test information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (290, 0, now(), NULL, 'opencell.admin', NULL, 'BLO', 'Period of time');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (291, 0, now(), NULL, 'opencell.admin', NULL, 'BLP', 'Legislation');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (292, 0, now(), NULL, 'opencell.admin', NULL, 'BLQ', 'Security measures requested');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (293, 0, now(), NULL, 'opencell.admin', NULL, 'BLR', 'Transport contract document remark');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (294, 0, now(), NULL, 'opencell.admin', NULL, 'BLS', 'Previous port of call security information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (295, 0, now(), NULL, 'opencell.admin', NULL, 'BLT', 'Security information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (296, 0, now(), NULL, 'opencell.admin', NULL, 'BLU', 'Waste information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (297, 0, now(), NULL, 'opencell.admin', NULL, 'BLV', 'B2C marketing information, short description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (298, 0, now(), NULL, 'opencell.admin', NULL, 'BLW', 'B2B marketing information, long description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (299, 0, now(), NULL, 'opencell.admin', NULL, 'BLX', 'B2C marketing information, long description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (300, 0, now(), NULL, 'opencell.admin', NULL, 'BLY', 'Product ingredients');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (301, 0, now(), NULL, 'opencell.admin', NULL, 'BLZ', 'Location short name');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (302, 0, now(), NULL, 'opencell.admin', NULL, 'BMA', 'Packaging material information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (303, 0, now(), NULL, 'opencell.admin', NULL, 'BMB', 'Filler material information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (304, 0, now(), NULL, 'opencell.admin', NULL, 'BMC', 'Ship-to-ship activity information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (305, 0, now(), NULL, 'opencell.admin', NULL, 'BMD', 'Package material description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (306, 0, now(), NULL, 'opencell.admin', NULL, 'BME', 'Consumer level package marking');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (307, 0, now(), NULL, 'opencell.admin', NULL, 'CCI', 'Customs clearance instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (308, 0, now(), NULL, 'opencell.admin', NULL, 'CEX', 'Customs clearance instructions export');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (309, 0, now(), NULL, 'opencell.admin', NULL, 'CHG', 'Change information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (310, 0, now(), NULL, 'opencell.admin', NULL, 'CIP', 'Customs clearance instruction import');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (311, 0, now(), NULL, 'opencell.admin', NULL, 'CLP', 'Clearance place requested');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (312, 0, now(), NULL, 'opencell.admin', NULL, 'CLR', 'Loading remarks');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (313, 0, now(), NULL, 'opencell.admin', NULL, 'COI', 'Order information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (314, 0, now(), NULL, 'opencell.admin', NULL, 'CUR', 'Customer remarks');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (315, 0, now(), NULL, 'opencell.admin', NULL, 'CUS', 'Customs declaration information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (316, 0, now(), NULL, 'opencell.admin', NULL, 'DAR', 'Damage remarks');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (317, 0, now(), NULL, 'opencell.admin', NULL, 'DCL', 'Document issuer declaration');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (318, 0, now(), NULL, 'opencell.admin', NULL, 'DEL', 'Delivery information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (319, 0, now(), NULL, 'opencell.admin', NULL, 'DIN', 'Delivery instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (320, 0, now(), NULL, 'opencell.admin', NULL, 'DOC', 'Documentation instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (321, 0, now(), NULL, 'opencell.admin', NULL, 'DUT', 'Duty declaration');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (322, 0, now(), NULL, 'opencell.admin', NULL, 'EUR', 'Effective used routing');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (323, 0, now(), NULL, 'opencell.admin', NULL, 'FBC', 'First block to be printed on the transport contract');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (324, 0, now(), NULL, 'opencell.admin', NULL, 'GBL', 'Government bill of lading information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (325, 0, now(), NULL, 'opencell.admin', NULL, 'GEN', 'Entire transaction set');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (326, 0, now(), NULL, 'opencell.admin', NULL, 'GS7', 'Further information concerning GGVS par. 7');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (327, 0, now(), NULL, 'opencell.admin', NULL, 'HAN', 'Consignment handling instruction');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (328, 0, now(), NULL, 'opencell.admin', NULL, 'HAZ', 'Hazard information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (329, 0, now(), NULL, 'opencell.admin', NULL, 'ICN', 'Consignment information for consignee');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (330, 0, now(), NULL, 'opencell.admin', NULL, 'IIN', 'Insurance instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (331, 0, now(), NULL, 'opencell.admin', NULL, 'IMI', 'Invoice mailing instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (332, 0, now(), NULL, 'opencell.admin', NULL, 'IND', 'Commercial invoice item description');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (333, 0, now(), NULL, 'opencell.admin', NULL, 'INS', 'Insurance information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (334, 0, now(), NULL, 'opencell.admin', NULL, 'INV', 'Invoice instruction');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (335, 0, now(), NULL, 'opencell.admin', NULL, 'IRP', 'Information for railway purpose');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (336, 0, now(), NULL, 'opencell.admin', NULL, 'ITR', 'Inland transport details');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (337, 0, now(), NULL, 'opencell.admin', NULL, 'ITS', 'Testing instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (338, 0, now(), NULL, 'opencell.admin', NULL, 'LAN', 'Location Alias');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (339, 0, now(), NULL, 'opencell.admin', NULL, 'LIN', 'Line item');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (340, 0, now(), NULL, 'opencell.admin', NULL, 'LOI', 'Loading instruction');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (341, 0, now(), NULL, 'opencell.admin', NULL, 'MCO', 'Miscellaneous charge order');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (342, 0, now(), NULL, 'opencell.admin', NULL, 'MDH', 'Maritime Declaration of Health');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (343, 0, now(), NULL, 'opencell.admin', NULL, 'MKS', 'Additional marks/numbers information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (344, 0, now(), NULL, 'opencell.admin', NULL, 'ORI', 'Order instruction');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (345, 0, now(), NULL, 'opencell.admin', NULL, 'OSI', 'Other service information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (346, 0, now(), NULL, 'opencell.admin', NULL, 'PAC', 'Packing/marking information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (347, 0, now(), NULL, 'opencell.admin', NULL, 'PAI', 'Payment instructions information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (348, 0, now(), NULL, 'opencell.admin', NULL, 'PAY', 'Payables information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (349, 0, now(), NULL, 'opencell.admin', NULL, 'PKG', 'Packaging information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (350, 0, now(), NULL, 'opencell.admin', NULL, 'PKT', 'Packaging terms information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (351, 0, now(), NULL, 'opencell.admin', NULL, 'PMD', 'Payment detail/remittance information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (352, 0, now(), NULL, 'opencell.admin', NULL, 'PMT', 'Payment information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (353, 0, now(), NULL, 'opencell.admin', NULL, 'PRD', 'Product information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (354, 0, now(), NULL, 'opencell.admin', NULL, 'PRF', 'Price calculation formula');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (355, 0, now(), NULL, 'opencell.admin', NULL, 'PRI', 'Priority information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (356, 0, now(), NULL, 'opencell.admin', NULL, 'PUR', 'Purchasing information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (357, 0, now(), NULL, 'opencell.admin', NULL, 'QIN', 'Quarantine instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (358, 0, now(), NULL, 'opencell.admin', NULL, 'QQD', 'Quality demands/requirements');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (359, 0, now(), NULL, 'opencell.admin', NULL, 'QUT', 'Quotation instruction/information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (360, 0, now(), NULL, 'opencell.admin', NULL, 'RAH', 'Risk and handling information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (361, 0, now(), NULL, 'opencell.admin', NULL, 'REG', 'Regulatory information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (362, 0, now(), NULL, 'opencell.admin', NULL, 'RET', 'Return to origin information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (363, 0, now(), NULL, 'opencell.admin', NULL, 'REV', 'Receivables');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (364, 0, now(), NULL, 'opencell.admin', NULL, 'RQR', 'Consignment route');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (365, 0, now(), NULL, 'opencell.admin', NULL, 'SAF', 'Safety information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (366, 0, now(), NULL, 'opencell.admin', NULL, 'SIC', 'Consignment documentary instruction');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (367, 0, now(), NULL, 'opencell.admin', NULL, 'SIN', 'Special instructions');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (368, 0, now(), NULL, 'opencell.admin', NULL, 'SLR', 'Ship line requested');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (369, 0, now(), NULL, 'opencell.admin', NULL, 'SPA', 'Special permission for transport, generally');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (370, 0, now(), NULL, 'opencell.admin', NULL, 'SPG', 'Special permission concerning the goods to be transported');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (371, 0, now(), NULL, 'opencell.admin', NULL, 'SPH', 'Special handling');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (372, 0, now(), NULL, 'opencell.admin', NULL, 'SPP', 'Special permission concerning package');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (373, 0, now(), NULL, 'opencell.admin', NULL, 'SPT', 'Special permission concerning transport means');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (374, 0, now(), NULL, 'opencell.admin', NULL, 'SRN', 'Subsidiary risk number (IATA/DGR)');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (375, 0, now(), NULL, 'opencell.admin', NULL, 'SSR', 'Special service request');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (376, 0, now(), NULL, 'opencell.admin', NULL, 'SUR', 'Supplier remarks');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (377, 0, now(), NULL, 'opencell.admin', NULL, 'TCA', 'Consignment tariff');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (378, 0, now(), NULL, 'opencell.admin', NULL, 'TDT', 'Consignment transport');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (379, 0, now(), NULL, 'opencell.admin', NULL, 'TRA', 'Transportation information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (380, 0, now(), NULL, 'opencell.admin', NULL, 'TRR', 'Requested tariff');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (381, 0, now(), NULL, 'opencell.admin', NULL, 'TXD', 'Tax declaration');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (382, 0, now(), NULL, 'opencell.admin', NULL, 'WHI', 'Warehouse instruction/information');
			INSERT INTO public.untdid_4451_invoice_subject_code VALUES (383, 0, now(), NULL, 'opencell.admin', NULL, 'ZZZ', 'Mutually defined');
			
			INSERT INTO public.untdid_5305_taxation_category VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, 'Z', 'Zero rated goods', 'Zero rated goods');
			INSERT INTO public.untdid_5305_taxation_category VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, 'E', 'Exempt from tax', 'Exempt from tax');
			INSERT INTO public.untdid_5305_taxation_category VALUES (4, 0, now(), NULL, 'opencell.admin', NULL, 'AE', 'VAT reverse charge', 'VAT Reverse charge');
			INSERT INTO public.untdid_5305_taxation_category VALUES (5, 0, now(), NULL, 'opencell.admin', NULL, 'K', 'VAT exempt for intra community supply of goods', 'VAT exempt for EEA intra-community supply of goods and services');
			INSERT INTO public.untdid_5305_taxation_category VALUES (6, 0, now(), NULL, 'opencell.admin', NULL, 'G', 'Free export item, tax not charged', 'Free export item, tax not charged');
			INSERT INTO public.untdid_5305_taxation_category VALUES (7, 0, now(), NULL, 'opencell.admin', NULL, 'O', 'Services outside scope of tax', 'Service outside scope of tax');
			INSERT INTO public.untdid_5305_taxation_category VALUES (8, 0, now(), NULL, 'opencell.admin', NULL, 'L', 'Canary Islands General Indirect Tax', 'Canary Islands general indirect tax');
			INSERT INTO public.untdid_5305_taxation_category VALUES (9, 0, now(), NULL, 'opencell.admin', NULL, 'M', 'Liable for IPSI', 'Tax for production, services and importation in Ceuta and Melilla');
			
			INSERT INTO public.untdid_vatex VALUES (1, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-79-C', 'Repayment of expenditure is not an exemption in the sense of the VAT Directive but may be handled as such in the context of the EN16931.', 'Exempt based on article 79, point c of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132', NULL, 'Exempt based on article 132 of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1A', NULL, 'Exempt based on article 132, section 1 (a) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (4, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1B', NULL, 'Exempt based on article 132, section 1 (b) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (5, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1C', NULL, 'Exempt based on article 132, section 1 (c) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (6, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1D', NULL, 'Exempt based on article 132, section 1 (d) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (7, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1E', NULL, 'Exempt based on article 132, section 1 (e) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (8, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1F', NULL, 'Exempt based on article 132, section 1 (f) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (9, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1G', NULL, 'Exempt based on article 132, section 1 (g) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (10, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1H', NULL, 'Exempt based on article 132, section 1 (h) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (11, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1I', NULL, 'Exempt based on article 132, section 1 (i) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (12, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1J', NULL, 'Exempt based on article 132, section 1 (j) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (13, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1K', NULL, 'Exempt based on article 132, section 1 (k) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (14, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1L', NULL, 'Exempt based on article 132, section 1 (l) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (15, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1M', NULL, 'Exempt based on article 132, section 1 (m) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (16, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1N', NULL, 'Exempt based on article 132, section 1 (n) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (17, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1O', NULL, 'Exempt based on article 132, section 1 (o) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (18, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1P', NULL, 'Exempt based on article 132, section 1 (p) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (19, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-132-1Q', NULL, 'Exempt based on article 132, section 1 (q) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (20, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143', NULL, 'Exempt based on article 143 of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (21, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1A', NULL, 'Exempt based on article 143, section 1 (a) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (22, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1B', NULL, 'Exempt based on article 143, section 1 (b) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (23, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1C', NULL, 'Exempt based on article 143, section 1 (c) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (24, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1D', NULL, 'Exempt based on article 143, section 1 (d) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (25, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1E', NULL, 'Exempt based on article 143, section 1 (e) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (26, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1F', NULL, 'Exempt based on article 143, section 1 (f) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (27, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1FA', NULL, 'Exempt based on article 143, section 1 (fa) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (28, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1G', NULL, 'Exempt based on article 143, section 1 (g) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (29, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1H', NULL, 'Exempt based on article 143, section 1 (h) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (30, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1I', NULL, 'Exempt based on article 143, section 1 (i) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (31, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1J', NULL, 'Exempt based on article 143, section 1 (j) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (32, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1K', NULL, 'Exempt based on article 143, section 1 (k) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (33, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-143-1L', NULL, 'Exempt based on article 143, section 1 (l) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (34, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-148', NULL, 'Exempt based on article 148 of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (35, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-148-A', NULL, 'Exempt based on article 148, section (a) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (36, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-148-B', NULL, 'Exempt based on article 148, section (b) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (37, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-148-C', NULL, 'Exempt based on article 148, section (c) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (38, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-148-D', NULL, 'Exempt based on article 148, section (d) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (39, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-148-E', NULL, 'Exempt based on article 148, section (e) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (40, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-148-F', NULL, 'Exempt based on article 148, section (f) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (41, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-148-G', NULL, 'Exempt based on article 148, section (g) of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (42, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-151', NULL, 'Exempt based on article 151 of Council Directive 2006/112/EC');
			INSERT INTO public.untdid_vatex VALUES (43, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-151-1A', NULL, 'Exempt based on article 151, section 1 (a) of Council Directive 2006/112/EC ');
			INSERT INTO public.untdid_vatex VALUES (44, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-151-1AA', NULL, 'Exempt based on article 151, section 1 (aa) of Council Directive 2006/112/EC ');
			INSERT INTO public.untdid_vatex VALUES (45, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-151-1B', NULL, 'Exempt based on article 151, section 1 (b) of Council Directive 2006/112/EC ');
			INSERT INTO public.untdid_vatex VALUES (46, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-151-1C', NULL, 'Exempt based on article 151, section 1 (c) of Council Directive 2006/112/EC ');
			INSERT INTO public.untdid_vatex VALUES (47, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-151-1D', NULL, 'Exempt based on article 151, section 1 (d) of Council Directive 2006/112/EC ');
			INSERT INTO public.untdid_vatex VALUES (48, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-151-1E', NULL, 'Exempt based on article 151, section 1 (e) of Council Directive 2006/112/EC ');
			INSERT INTO public.untdid_vatex VALUES (49, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-309', NULL, 'Exempt based on article 309 of Council Directive 2006/112/EC ');
			INSERT INTO public.untdid_vatex VALUES (50, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-AE', 'Only use with VAT category code AE', 'Reverse charge');
			INSERT INTO public.untdid_vatex VALUES (51, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-D', 'Only use with VAT category code E', 'Travel agents VAT scheme.');
			INSERT INTO public.untdid_vatex VALUES (52, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-F', 'Only use with VAT category code E', 'Second hand goods VAT scheme.');
			INSERT INTO public.untdid_vatex VALUES (53, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-G', 'Only use with VAT category code G', 'Export outside the EU');
			INSERT INTO public.untdid_vatex VALUES (54, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-I', 'Only use with VAT category code E', 'Works of art VAT scheme.');
			INSERT INTO public.untdid_vatex VALUES (55, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-IC', 'Only use with VAT category code K', 'Intra-community supply');
			INSERT INTO public.untdid_vatex VALUES (56, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-J', 'Only use with VAT category code E', 'Collectors items and antiques VAT scheme.');
			INSERT INTO public.untdid_vatex VALUES (57, 0, now(), NULL, 'opencell.admin', NULL, 'VATEX-EU-O', 'Only use with VAT category code O', 'Not subject to VAT');
			
			INSERT INTO public.untdid_4461_payment_means VALUES (1, 0, now(), NULL, 'opencell.admin', NULL, '1', NULL, 'Instrument not defined');
			INSERT INTO public.untdid_4461_payment_means VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, '2', NULL, 'Automated clearing house credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, '3', NULL, 'Automated clearing house debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (4, 0, now(), NULL, 'opencell.admin', NULL, '4', NULL, 'ACH demand debit reversal');
			INSERT INTO public.untdid_4461_payment_means VALUES (5, 0, now(), NULL, 'opencell.admin', NULL, '5', NULL, 'ACH demand credit reversal');
			INSERT INTO public.untdid_4461_payment_means VALUES (6, 0, now(), NULL, 'opencell.admin', NULL, '6', NULL, 'ACH demand credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (7, 0, now(), NULL, 'opencell.admin', NULL, '7', NULL, 'ACH demand debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (8, 0, now(), NULL, 'opencell.admin', NULL, '8', NULL, 'Hold');
			INSERT INTO public.untdid_4461_payment_means VALUES (9, 0, now(), NULL, 'opencell.admin', NULL, '9', NULL, 'National or regional clearing');
			INSERT INTO public.untdid_4461_payment_means VALUES (10, 0, now(), NULL, 'opencell.admin', NULL, '10', NULL, 'In cash');
			INSERT INTO public.untdid_4461_payment_means VALUES (11, 0, now(), NULL, 'opencell.admin', NULL, '11', NULL, 'ACH savings credit reversal');
			INSERT INTO public.untdid_4461_payment_means VALUES (12, 0, now(), NULL, 'opencell.admin', NULL, '12', NULL, 'ACH savings debit reversal');
			INSERT INTO public.untdid_4461_payment_means VALUES (13, 0, now(), NULL, 'opencell.admin', NULL, '13', NULL, 'ACH savings credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (14, 0, now(), NULL, 'opencell.admin', NULL, '14', NULL, 'ACH savings debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (15, 0, now(), NULL, 'opencell.admin', NULL, '15', NULL, 'Bookentry credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (16, 0, now(), NULL, 'opencell.admin', NULL, '16', NULL, 'Bookentry debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (17, 0, now(), NULL, 'opencell.admin', NULL, '17', NULL, 'ACH demand cash concentration/disbursement (CCD) credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (18, 0, now(), NULL, 'opencell.admin', NULL, '18', NULL, 'ACH demand cash concentration/disbursement (CCD) debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (19, 0, now(), NULL, 'opencell.admin', NULL, '19', NULL, 'ACH demand corporate trade payment (CTP) credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (20, 0, now(), NULL, 'opencell.admin', NULL, '20', NULL, 'Cheque');
			INSERT INTO public.untdid_4461_payment_means VALUES (21, 0, now(), NULL, 'opencell.admin', NULL, '21', NULL, 'Banker''s draft');
			INSERT INTO public.untdid_4461_payment_means VALUES (22, 0, now(), NULL, 'opencell.admin', NULL, '22', NULL, 'Certified banker''s draft');
			INSERT INTO public.untdid_4461_payment_means VALUES (23, 0, now(), NULL, 'opencell.admin', NULL, '23', NULL, 'Bank cheque (issued by a banking or similar establishment)');
			INSERT INTO public.untdid_4461_payment_means VALUES (24, 0, now(), NULL, 'opencell.admin', NULL, '24', NULL, 'Bill of exchange awaiting acceptance');
			INSERT INTO public.untdid_4461_payment_means VALUES (25, 0, now(), NULL, 'opencell.admin', NULL, '25', NULL, 'Certified cheque');
			INSERT INTO public.untdid_4461_payment_means VALUES (26, 0, now(), NULL, 'opencell.admin', NULL, '26', NULL, 'Local cheque');
			INSERT INTO public.untdid_4461_payment_means VALUES (27, 0, now(), NULL, 'opencell.admin', NULL, '27', NULL, 'ACH demand corporate trade payment (CTP) debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (28, 0, now(), NULL, 'opencell.admin', NULL, '28', NULL, 'ACH demand corporate trade exchange (CTX) credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (29, 0, now(), NULL, 'opencell.admin', NULL, '29', NULL, 'ACH demand corporate trade exchange (CTX) debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (30, 0, now(), NULL, 'opencell.admin', NULL, '30', 'non-SEPA', 'Credit transfer');
			INSERT INTO public.untdid_4461_payment_means VALUES (31, 0, now(), NULL, 'opencell.admin', NULL, '31', 'non-SEPA', 'Debit transfer');
			INSERT INTO public.untdid_4461_payment_means VALUES (32, 0, now(), NULL, 'opencell.admin', NULL, '32', NULL, 'ACH demand cash concentration/disbursement plus (CCD+)');
			INSERT INTO public.untdid_4461_payment_means VALUES (33, 0, now(), NULL, 'opencell.admin', NULL, '33', NULL, 'ACH demand cash concentration/disbursement plus (CCD+)');
			INSERT INTO public.untdid_4461_payment_means VALUES (34, 0, now(), NULL, 'opencell.admin', NULL, '34', NULL, 'ACH prearranged payment and deposit (PPD)');
			INSERT INTO public.untdid_4461_payment_means VALUES (35, 0, now(), NULL, 'opencell.admin', NULL, '35', NULL, 'ACH savings cash concentration/disbursement (CCD) credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (36, 0, now(), NULL, 'opencell.admin', NULL, '36', NULL, 'ACH savings cash concentration/disbursement (CCD) debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (37, 0, now(), NULL, 'opencell.admin', NULL, '37', NULL, 'ACH savings corporate trade payment (CTP) credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (38, 0, now(), NULL, 'opencell.admin', NULL, '38', NULL, 'ACH savings corporate trade payment (CTP) debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (39, 0, now(), NULL, 'opencell.admin', NULL, '39', NULL, 'ACH savings corporate trade exchange (CTX) credit');
			INSERT INTO public.untdid_4461_payment_means VALUES (40, 0, now(), NULL, 'opencell.admin', NULL, '40', NULL, 'ACH savings corporate trade exchange (CTX) debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (41, 0, now(), NULL, 'opencell.admin', NULL, '41', NULL, 'ACH savings cash concentration/disbursement plus (CCD+)');
			INSERT INTO public.untdid_4461_payment_means VALUES (42, 0, now(), NULL, 'opencell.admin', NULL, '42', NULL, 'Payment to bank account');
			INSERT INTO public.untdid_4461_payment_means VALUES (43, 0, now(), NULL, 'opencell.admin', NULL, '43', NULL, 'ACH savings cash concentration/disbursement plus (CCD+)');
			INSERT INTO public.untdid_4461_payment_means VALUES (44, 0, now(), NULL, 'opencell.admin', NULL, '44', NULL, 'Accepted bill of exchange');
			INSERT INTO public.untdid_4461_payment_means VALUES (45, 0, now(), NULL, 'opencell.admin', NULL, '45', NULL, 'Referenced home-banking credit transfer');
			INSERT INTO public.untdid_4461_payment_means VALUES (46, 0, now(), NULL, 'opencell.admin', NULL, '46', NULL, 'Interbank debit transfer');
			INSERT INTO public.untdid_4461_payment_means VALUES (47, 0, now(), NULL, 'opencell.admin', NULL, '47', NULL, 'Home-banking debit transfer');
			INSERT INTO public.untdid_4461_payment_means VALUES (48, 0, now(), NULL, 'opencell.admin', NULL, '48', 'Use for all payment cards', 'Bank card');
			INSERT INTO public.untdid_4461_payment_means VALUES (49, 0, now(), NULL, 'opencell.admin', NULL, '49', NULL, 'Direct debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (50, 0, now(), NULL, 'opencell.admin', NULL, '50', NULL, 'Payment by postgiro');
			INSERT INTO public.untdid_4461_payment_means VALUES (51, 0, now(), NULL, 'opencell.admin', NULL, '51', NULL, 'FR, norme 6 97-Telereglement CFONB (French Organisation for');
			INSERT INTO public.untdid_4461_payment_means VALUES (52, 0, now(), NULL, 'opencell.admin', NULL, '52', NULL, 'Urgent commercial payment');
			INSERT INTO public.untdid_4461_payment_means VALUES (53, 0, now(), NULL, 'opencell.admin', NULL, '53', NULL, 'Urgent Treasury Payment');
			INSERT INTO public.untdid_4461_payment_means VALUES (54, 0, now(), NULL, 'opencell.admin', NULL, '54', NULL, 'Credit card');
			INSERT INTO public.untdid_4461_payment_means VALUES (55, 0, now(), NULL, 'opencell.admin', NULL, '55', NULL, 'Debit card');
			INSERT INTO public.untdid_4461_payment_means VALUES (56, 0, now(), NULL, 'opencell.admin', NULL, '56', NULL, 'Bankgiro');
			INSERT INTO public.untdid_4461_payment_means VALUES (57, 0, now(), NULL, 'opencell.admin', NULL, '57', 'Contractual payment means', 'Standing agreement');
			INSERT INTO public.untdid_4461_payment_means VALUES (58, 0, now(), NULL, 'opencell.admin', NULL, '58', 'SEPA', 'SEPA credit transfer');
			INSERT INTO public.untdid_4461_payment_means VALUES (59, 0, now(), NULL, 'opencell.admin', NULL, '59', 'SEPA', 'SEPA direct debit');
			INSERT INTO public.untdid_4461_payment_means VALUES (60, 0, now(), NULL, 'opencell.admin', NULL, '60', NULL, 'Promissory note');
			INSERT INTO public.untdid_4461_payment_means VALUES (61, 0, now(), NULL, 'opencell.admin', NULL, '61', NULL, 'Promissory note signed by the debtor');
			INSERT INTO public.untdid_4461_payment_means VALUES (62, 0, now(), NULL, 'opencell.admin', NULL, '62', NULL, 'Promissory note signed by the debtor and endorsed by a bank');
			INSERT INTO public.untdid_4461_payment_means VALUES (63, 0, now(), NULL, 'opencell.admin', NULL, '63', NULL, 'Promissory note signed by the debtor and endorsed by a');
			INSERT INTO public.untdid_4461_payment_means VALUES (64, 0, now(), NULL, 'opencell.admin', NULL, '64', NULL, 'Promissory note signed by a bank');
			INSERT INTO public.untdid_4461_payment_means VALUES (65, 0, now(), NULL, 'opencell.admin', NULL, '65', NULL, 'Promissory note signed by a bank and endorsed by another');
			INSERT INTO public.untdid_4461_payment_means VALUES (66, 0, now(), NULL, 'opencell.admin', NULL, '66', NULL, 'Promissory note signed by a third party');
			INSERT INTO public.untdid_4461_payment_means VALUES (67, 0, now(), NULL, 'opencell.admin', NULL, '67', NULL, 'Promissory note signed by a third party and endorsed by a');
			INSERT INTO public.untdid_4461_payment_means VALUES (68, 0, now(), NULL, 'opencell.admin', NULL, '68', NULL, 'Online payment service');
			INSERT INTO public.untdid_4461_payment_means VALUES (69, 0, now(), NULL, 'opencell.admin', NULL, '69', NULL, 'Transfer Advice');
			INSERT INTO public.untdid_4461_payment_means VALUES (70, 0, now(), NULL, 'opencell.admin', NULL, '70', NULL, 'Bill drawn by the creditor on the debtor');
			INSERT INTO public.untdid_4461_payment_means VALUES (71, 0, now(), NULL, 'opencell.admin', NULL, '74', NULL, 'Bill drawn by the creditor on a bank');
			INSERT INTO public.untdid_4461_payment_means VALUES (72, 0, now(), NULL, 'opencell.admin', NULL, '75', NULL, 'Bill drawn by the creditor, endorsed by another bank');
			INSERT INTO public.untdid_4461_payment_means VALUES (73, 0, now(), NULL, 'opencell.admin', NULL, '76', NULL, 'Bill drawn by the creditor on a bank and endorsed by a');
			INSERT INTO public.untdid_4461_payment_means VALUES (74, 0, now(), NULL, 'opencell.admin', NULL, '77', NULL, 'Bill drawn by the creditor on a third party');
			INSERT INTO public.untdid_4461_payment_means VALUES (75, 0, now(), NULL, 'opencell.admin', NULL, '78', NULL, 'Bill drawn by creditor on third party, accepted and');
			INSERT INTO public.untdid_4461_payment_means VALUES (76, 0, now(), NULL, 'opencell.admin', NULL, '91', NULL, 'Not transferable banker''s draft');
			INSERT INTO public.untdid_4461_payment_means VALUES (77, 0, now(), NULL, 'opencell.admin', NULL, '92', NULL, 'Not transferable local cheque');
			INSERT INTO public.untdid_4461_payment_means VALUES (78, 0, now(), NULL, 'opencell.admin', NULL, '93', NULL, 'Reference giro');
			INSERT INTO public.untdid_4461_payment_means VALUES (79, 0, now(), NULL, 'opencell.admin', NULL, '94', NULL, 'Urgent giro');
			INSERT INTO public.untdid_4461_payment_means VALUES (80, 0, now(), NULL, 'opencell.admin', NULL, '95', NULL, 'Free format giro');
			INSERT INTO public.untdid_4461_payment_means VALUES (81, 0, now(), NULL, 'opencell.admin', NULL, '96', NULL, 'Requested method for payment was not used');
			INSERT INTO public.untdid_4461_payment_means VALUES (82, 0, now(), NULL, 'opencell.admin', NULL, '97', NULL, 'Clearing between partners');
			INSERT INTO public.untdid_4461_payment_means VALUES (83, 0, now(), NULL, 'opencell.admin', NULL, 'ZZZ', NULL, 'Mutually defined');	
			
			INSERT INTO public.untdid_5189_allowance_code VALUES (1, 0, now(), NULL, 'opencell.admin', NULL, '41', 'Bonus for works ahead of schedule');
			INSERT INTO public.untdid_5189_allowance_code VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, '42', 'Other bonus');
			INSERT INTO public.untdid_5189_allowance_code VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, '60', 'Manufacturer’s consumer discount');
			INSERT INTO public.untdid_5189_allowance_code VALUES (4, 0, now(), NULL, 'opencell.admin', NULL, '62', 'Due to military status');
			INSERT INTO public.untdid_5189_allowance_code VALUES (5, 0, now(), NULL, 'opencell.admin', NULL, '63', 'Due to work accident');
			INSERT INTO public.untdid_5189_allowance_code VALUES (6, 0, now(), NULL, 'opencell.admin', NULL, '64', 'Special agreement');
			INSERT INTO public.untdid_5189_allowance_code VALUES (7, 0, now(), NULL, 'opencell.admin', NULL, '65', 'Production error discount');
			INSERT INTO public.untdid_5189_allowance_code VALUES (8, 0, now(), NULL, 'opencell.admin', NULL, '66', 'New outlet discount');
			INSERT INTO public.untdid_5189_allowance_code VALUES (9, 0, now(), NULL, 'opencell.admin', NULL, '67', 'Sample discount');
			INSERT INTO public.untdid_5189_allowance_code VALUES (10, 0, now(), NULL, 'opencell.admin', NULL, '68', 'End-of-range discount');
			INSERT INTO public.untdid_5189_allowance_code VALUES (11, 0, now(), NULL, 'opencell.admin', NULL, '70', 'Incoterm discount');
			INSERT INTO public.untdid_5189_allowance_code VALUES (12, 0, now(), NULL, 'opencell.admin', NULL, '71', 'Point of sales threshold allowance');
			INSERT INTO public.untdid_5189_allowance_code VALUES (13, 0, now(), NULL, 'opencell.admin', NULL, '88', 'Material surcharge/deduction');
			INSERT INTO public.untdid_5189_allowance_code VALUES (14, 0, now(), NULL, 'opencell.admin', NULL, '95', 'Discount');
			INSERT INTO public.untdid_5189_allowance_code VALUES (15, 0, now(), NULL, 'opencell.admin', NULL, '100', 'Special rebate');
			INSERT INTO public.untdid_5189_allowance_code VALUES (16, 0, now(), NULL, 'opencell.admin', NULL, '102', 'Fixed long term');
			INSERT INTO public.untdid_5189_allowance_code VALUES (17, 0, now(), NULL, 'opencell.admin', NULL, '103', 'Temporary');
			INSERT INTO public.untdid_5189_allowance_code VALUES (18, 0, now(), NULL, 'opencell.admin', NULL, '104', 'Standard');
			INSERT INTO public.untdid_5189_allowance_code VALUES (19, 0, now(), NULL, 'opencell.admin', NULL, '105', 'Yearly turnover');	
			
			
	
			INSERT INTO public.untdid_unit VALUES (1, 0, now(), NULL, 'opencell.admin', NULL, '10', 'rec20', 'group');
			INSERT INTO public.untdid_unit VALUES (2, 0, now(), NULL, 'opencell.admin', NULL, '11', 'rec20', 'outfit');
			INSERT INTO public.untdid_unit VALUES (3, 0, now(), NULL, 'opencell.admin', NULL, '13', 'rec20', 'ration');
			INSERT INTO public.untdid_unit VALUES (4, 0, now(), NULL, 'opencell.admin', NULL, '14', 'rec20', 'shot');
			INSERT INTO public.untdid_unit VALUES (5, 0, now(), NULL, 'opencell.admin', NULL, '15', 'rec20', 'stick, military');
			INSERT INTO public.untdid_unit VALUES (6, 0, now(), NULL, 'opencell.admin', NULL, '20', 'rec20', 'twenty foot container');
			INSERT INTO public.untdid_unit VALUES (7, 0, now(), NULL, 'opencell.admin', NULL, '21', 'rec20', 'forty foot container');
			INSERT INTO public.untdid_unit VALUES (8, 0, now(), NULL, 'opencell.admin', NULL, '22', 'rec20', 'decilitre per gram');
			INSERT INTO public.untdid_unit VALUES (9, 0, now(), NULL, 'opencell.admin', NULL, '23', 'rec20', 'gram per cubic centimetre');
			INSERT INTO public.untdid_unit VALUES (10, 0, now(), NULL, 'opencell.admin', NULL, '24', 'rec20', 'theoretical pound');
			INSERT INTO public.untdid_unit VALUES (11, 0, now(), NULL, 'opencell.admin', NULL, '25', 'rec20', 'gram per square centimetre');
			INSERT INTO public.untdid_unit VALUES (12, 0, now(), NULL, 'opencell.admin', NULL, '27', 'rec20', 'theoretical ton');
			INSERT INTO public.untdid_unit VALUES (13, 0, now(), NULL, 'opencell.admin', NULL, '28', 'rec20', 'kilogram per square metre');
			INSERT INTO public.untdid_unit VALUES (14, 0, now(), NULL, 'opencell.admin', NULL, '33', 'rec20', 'kilopascal square metre per gram');
			INSERT INTO public.untdid_unit VALUES (15, 0, now(), NULL, 'opencell.admin', NULL, '34', 'rec20', 'kilopascal per millimetre');
			INSERT INTO public.untdid_unit VALUES (16, 0, now(), NULL, 'opencell.admin', NULL, '35', 'rec20', 'millilitre per square centimetre second');
			INSERT INTO public.untdid_unit VALUES (17, 0, now(), NULL, 'opencell.admin', NULL, '37', 'rec20', 'ounce per square foot');
			INSERT INTO public.untdid_unit VALUES (18, 0, now(), NULL, 'opencell.admin', NULL, '38', 'rec20', 'ounce per square foot per 0,01inch');
			INSERT INTO public.untdid_unit VALUES (19, 0, now(), NULL, 'opencell.admin', NULL, '40', 'rec20', 'millilitre per second');
			INSERT INTO public.untdid_unit VALUES (20, 0, now(), NULL, 'opencell.admin', NULL, '41', 'rec20', 'millilitre per minute');
			INSERT INTO public.untdid_unit VALUES (21, 0, now(), NULL, 'opencell.admin', NULL, '56', 'rec20', 'sitas');
			INSERT INTO public.untdid_unit VALUES (22, 0, now(), NULL, 'opencell.admin', NULL, '57', 'rec20', 'mesh');
			INSERT INTO public.untdid_unit VALUES (23, 0, now(), NULL, 'opencell.admin', NULL, '58', 'rec20', 'net kilogram');
			INSERT INTO public.untdid_unit VALUES (24, 0, now(), NULL, 'opencell.admin', NULL, '59', 'rec20', 'part per million');
			INSERT INTO public.untdid_unit VALUES (25, 0, now(), NULL, 'opencell.admin', NULL, '60', 'rec20', 'percent weight');
			INSERT INTO public.untdid_unit VALUES (26, 0, now(), NULL, 'opencell.admin', NULL, '61', 'rec20', 'part per billion (US)');
			INSERT INTO public.untdid_unit VALUES (27, 0, now(), NULL, 'opencell.admin', NULL, '74', 'rec20', 'millipascal');
			INSERT INTO public.untdid_unit VALUES (28, 0, now(), NULL, 'opencell.admin', NULL, '77', 'rec20', 'milli-inch');
			INSERT INTO public.untdid_unit VALUES (29, 0, now(), NULL, 'opencell.admin', NULL, '80', 'rec20', 'pound per square inch absolute');
			INSERT INTO public.untdid_unit VALUES (30, 0, now(), NULL, 'opencell.admin', NULL, '81', 'rec20', 'henry');
			INSERT INTO public.untdid_unit VALUES (31, 0, now(), NULL, 'opencell.admin', NULL, '85', 'rec20', 'foot pound-force');
			INSERT INTO public.untdid_unit VALUES (32, 0, now(), NULL, 'opencell.admin', NULL, '87', 'rec20', 'pound per cubic foot');
			INSERT INTO public.untdid_unit VALUES (33, 0, now(), NULL, 'opencell.admin', NULL, '89', 'rec20', 'poise');
			INSERT INTO public.untdid_unit VALUES (34, 0, now(), NULL, 'opencell.admin', NULL, '91', 'rec20', 'stokes');
			INSERT INTO public.untdid_unit VALUES (35, 0, now(), NULL, 'opencell.admin', NULL, '1I', 'rec20', 'fixed rate');
			INSERT INTO public.untdid_unit VALUES (36, 0, now(), NULL, 'opencell.admin', NULL, '2A', 'rec20', 'radian per second');
			INSERT INTO public.untdid_unit VALUES (37, 0, now(), NULL, 'opencell.admin', NULL, '2B', 'rec20', 'radian per second squared');
			INSERT INTO public.untdid_unit VALUES (38, 0, now(), NULL, 'opencell.admin', NULL, '2C', 'rec20', 'roentgen');
			INSERT INTO public.untdid_unit VALUES (39, 0, now(), NULL, 'opencell.admin', NULL, '2G', 'rec20', 'volt AC');
			INSERT INTO public.untdid_unit VALUES (40, 0, now(), NULL, 'opencell.admin', NULL, '2H', 'rec20', 'volt DC');
			INSERT INTO public.untdid_unit VALUES (41, 0, now(), NULL, 'opencell.admin', NULL, '2I', 'rec20', 'British thermal unit (international table) per hour');
			INSERT INTO public.untdid_unit VALUES (42, 0, now(), NULL, 'opencell.admin', NULL, '2J', 'rec20', 'cubic centimetre per second');
			INSERT INTO public.untdid_unit VALUES (43, 0, now(), NULL, 'opencell.admin', NULL, '2K', 'rec20', 'cubic foot per hour');
			INSERT INTO public.untdid_unit VALUES (44, 0, now(), NULL, 'opencell.admin', NULL, '2L', 'rec20', 'cubic foot per minute');
			INSERT INTO public.untdid_unit VALUES (45, 0, now(), NULL, 'opencell.admin', NULL, '2M', 'rec20', 'centimetre per second');
			INSERT INTO public.untdid_unit VALUES (46, 0, now(), NULL, 'opencell.admin', NULL, '2N', 'rec20', 'decibel');
			INSERT INTO public.untdid_unit VALUES (47, 0, now(), NULL, 'opencell.admin', NULL, '2P', 'rec20', 'kilobyte');
			INSERT INTO public.untdid_unit VALUES (48, 0, now(), NULL, 'opencell.admin', NULL, '2Q', 'rec20', 'kilobecquerel');
			INSERT INTO public.untdid_unit VALUES (49, 0, now(), NULL, 'opencell.admin', NULL, '2R', 'rec20', 'kilocurie');
			INSERT INTO public.untdid_unit VALUES (50, 0, now(), NULL, 'opencell.admin', NULL, '2U', 'rec20', 'megagram');
			INSERT INTO public.untdid_unit VALUES (51, 0, now(), NULL, 'opencell.admin', NULL, '2X', 'rec20', 'metre per minute');
			INSERT INTO public.untdid_unit VALUES (52, 0, now(), NULL, 'opencell.admin', NULL, '2Y', 'rec20', 'milliroentgen');
			INSERT INTO public.untdid_unit VALUES (53, 0, now(), NULL, 'opencell.admin', NULL, '2Z', 'rec20', 'millivolt');
			INSERT INTO public.untdid_unit VALUES (54, 0, now(), NULL, 'opencell.admin', NULL, '3B', 'rec20', 'megajoule');
			INSERT INTO public.untdid_unit VALUES (55, 0, now(), NULL, 'opencell.admin', NULL, '3C', 'rec20', 'manmonth');
			INSERT INTO public.untdid_unit VALUES (56, 0, now(), NULL, 'opencell.admin', NULL, '4C', 'rec20', 'centistokes');
			INSERT INTO public.untdid_unit VALUES (57, 0, now(), NULL, 'opencell.admin', NULL, '4G', 'rec20', 'microlitre');
			INSERT INTO public.untdid_unit VALUES (58, 0, now(), NULL, 'opencell.admin', NULL, '4H', 'rec20', 'micrometre (micron)');
			INSERT INTO public.untdid_unit VALUES (59, 0, now(), NULL, 'opencell.admin', NULL, '4K', 'rec20', 'milliampere');
			INSERT INTO public.untdid_unit VALUES (60, 0, now(), NULL, 'opencell.admin', NULL, '4L', 'rec20', 'megabyte');
			INSERT INTO public.untdid_unit VALUES (61, 0, now(), NULL, 'opencell.admin', NULL, '4M', 'rec20', 'milligram per hour');
			INSERT INTO public.untdid_unit VALUES (62, 0, now(), NULL, 'opencell.admin', NULL, '4N', 'rec20', 'megabecquerel');
			INSERT INTO public.untdid_unit VALUES (63, 0, now(), NULL, 'opencell.admin', NULL, '4O', 'rec20', 'microfarad');
			INSERT INTO public.untdid_unit VALUES (64, 0, now(), NULL, 'opencell.admin', NULL, '4P', 'rec20', 'newton per metre');
			INSERT INTO public.untdid_unit VALUES (65, 0, now(), NULL, 'opencell.admin', NULL, '4Q', 'rec20', 'ounce inch');
			INSERT INTO public.untdid_unit VALUES (66, 0, now(), NULL, 'opencell.admin', NULL, '4R', 'rec20', 'ounce foot');
			INSERT INTO public.untdid_unit VALUES (67, 0, now(), NULL, 'opencell.admin', NULL, '4T', 'rec20', 'picofarad');
			INSERT INTO public.untdid_unit VALUES (68, 0, now(), NULL, 'opencell.admin', NULL, '4U', 'rec20', 'pound per hour');
			INSERT INTO public.untdid_unit VALUES (69, 0, now(), NULL, 'opencell.admin', NULL, '4W', 'rec20', 'ton (US) per hour');
			INSERT INTO public.untdid_unit VALUES (70, 0, now(), NULL, 'opencell.admin', NULL, '4X', 'rec20', 'kilolitre per hour');
			INSERT INTO public.untdid_unit VALUES (71, 0, now(), NULL, 'opencell.admin', NULL, '5A', 'rec20', 'barrel (US) per minute');
			INSERT INTO public.untdid_unit VALUES (72, 0, now(), NULL, 'opencell.admin', NULL, '5B', 'rec20', 'batch');
			INSERT INTO public.untdid_unit VALUES (73, 0, now(), NULL, 'opencell.admin', NULL, '5E', 'rec20', 'MMSCF/day');
			INSERT INTO public.untdid_unit VALUES (74, 0, now(), NULL, 'opencell.admin', NULL, '5J', 'rec20', 'hydraulic horse power');
			INSERT INTO public.untdid_unit VALUES (75, 0, now(), NULL, 'opencell.admin', NULL, 'A10', 'rec20', 'ampere square metre per joule second');
			INSERT INTO public.untdid_unit VALUES (76, 0, now(), NULL, 'opencell.admin', NULL, 'A11', 'rec20', 'angstrom');
			INSERT INTO public.untdid_unit VALUES (77, 0, now(), NULL, 'opencell.admin', NULL, 'A12', 'rec20', 'astronomical unit');
			INSERT INTO public.untdid_unit VALUES (78, 0, now(), NULL, 'opencell.admin', NULL, 'A13', 'rec20', 'attojoule');
			INSERT INTO public.untdid_unit VALUES (79, 0, now(), NULL, 'opencell.admin', NULL, 'A14', 'rec20', 'barn');
			INSERT INTO public.untdid_unit VALUES (80, 0, now(), NULL, 'opencell.admin', NULL, 'A15', 'rec20', 'barn per electronvolt');
			INSERT INTO public.untdid_unit VALUES (81, 0, now(), NULL, 'opencell.admin', NULL, 'A16', 'rec20', 'barn per steradian electronvolt');
			INSERT INTO public.untdid_unit VALUES (82, 0, now(), NULL, 'opencell.admin', NULL, 'A17', 'rec20', 'barn per steradian');
			INSERT INTO public.untdid_unit VALUES (83, 0, now(), NULL, 'opencell.admin', NULL, 'A18', 'rec20', 'becquerel per kilogram');
			INSERT INTO public.untdid_unit VALUES (84, 0, now(), NULL, 'opencell.admin', NULL, 'A19', 'rec20', 'becquerel per cubic metre');
			INSERT INTO public.untdid_unit VALUES (85, 0, now(), NULL, 'opencell.admin', NULL, 'A2', 'rec20', 'ampere per centimetre');
			INSERT INTO public.untdid_unit VALUES (86, 0, now(), NULL, 'opencell.admin', NULL, 'A20', 'rec20', 'British thermal unit (international table) per second square foot degree Rankine');
			INSERT INTO public.untdid_unit VALUES (87, 0, now(), NULL, 'opencell.admin', NULL, 'A21', 'rec20', 'British thermal unit (international table) per pound degree Rankine');
			INSERT INTO public.untdid_unit VALUES (88, 0, now(), NULL, 'opencell.admin', NULL, 'A22', 'rec20', 'British thermal unit (international table) per second foot degree Rankine');
			INSERT INTO public.untdid_unit VALUES (89, 0, now(), NULL, 'opencell.admin', NULL, 'A23', 'rec20', 'British thermal unit (international table) per hour square foot degree Rankine');
			INSERT INTO public.untdid_unit VALUES (90, 0, now(), NULL, 'opencell.admin', NULL, 'A24', 'rec20', 'candela per square metre');
			INSERT INTO public.untdid_unit VALUES (91, 0, now(), NULL, 'opencell.admin', NULL, 'A26', 'rec20', 'coulomb metre');
			INSERT INTO public.untdid_unit VALUES (92, 0, now(), NULL, 'opencell.admin', NULL, 'A27', 'rec20', 'coulomb metre squared per volt');
			INSERT INTO public.untdid_unit VALUES (93, 0, now(), NULL, 'opencell.admin', NULL, 'A28', 'rec20', 'coulomb per cubic centimetre');
			INSERT INTO public.untdid_unit VALUES (94, 0, now(), NULL, 'opencell.admin', NULL, 'A29', 'rec20', 'coulomb per cubic metre');
			INSERT INTO public.untdid_unit VALUES (95, 0, now(), NULL, 'opencell.admin', NULL, 'A3', 'rec20', 'ampere per millimetre');
			INSERT INTO public.untdid_unit VALUES (96, 0, now(), NULL, 'opencell.admin', NULL, 'A30', 'rec20', 'coulomb per cubic millimetre');
			INSERT INTO public.untdid_unit VALUES (97, 0, now(), NULL, 'opencell.admin', NULL, 'A31', 'rec20', 'coulomb per kilogram second');
			INSERT INTO public.untdid_unit VALUES (98, 0, now(), NULL, 'opencell.admin', NULL, 'A32', 'rec20', 'coulomb per mole');
			INSERT INTO public.untdid_unit VALUES (99, 0, now(), NULL, 'opencell.admin', NULL, 'A33', 'rec20', 'coulomb per square centimetre');
			INSERT INTO public.untdid_unit VALUES (100, 0, now(), NULL, 'opencell.admin', NULL, 'A34', 'rec20', 'coulomb per square metre');
			INSERT INTO public.untdid_unit VALUES (101, 0, now(), NULL, 'opencell.admin', NULL, 'A35', 'rec20', 'coulomb per square millimetre');
			INSERT INTO public.untdid_unit VALUES (102, 0, now(), NULL, 'opencell.admin', NULL, 'A36', 'rec20', 'cubic centimetre per mole');
			INSERT INTO public.untdid_unit VALUES (103, 0, now(), NULL, 'opencell.admin', NULL, 'A37', 'rec20', 'cubic decimetre per mole');
			INSERT INTO public.untdid_unit VALUES (104, 0, now(), NULL, 'opencell.admin', NULL, 'A38', 'rec20', 'cubic metre per coulomb');
			INSERT INTO public.untdid_unit VALUES (105, 0, now(), NULL, 'opencell.admin', NULL, 'A39', 'rec20', 'cubic metre per kilogram');
			INSERT INTO public.untdid_unit VALUES (106, 0, now(), NULL, 'opencell.admin', NULL, 'A4', 'rec20', 'ampere per square centimetre');
			INSERT INTO public.untdid_unit VALUES (107, 0, now(), NULL, 'opencell.admin', NULL, 'A40', 'rec20', 'cubic metre per mole');
			INSERT INTO public.untdid_unit VALUES (108, 0, now(), NULL, 'opencell.admin', NULL, 'A41', 'rec20', 'ampere per square metre');
			INSERT INTO public.untdid_unit VALUES (109, 0, now(), NULL, 'opencell.admin', NULL, 'A42', 'rec20', 'curie per kilogram');
			INSERT INTO public.untdid_unit VALUES (110, 0, now(), NULL, 'opencell.admin', NULL, 'A43', 'rec20', 'deadweight tonnage');
			INSERT INTO public.untdid_unit VALUES (111, 0, now(), NULL, 'opencell.admin', NULL, 'A44', 'rec20', 'decalitre');
			INSERT INTO public.untdid_unit VALUES (112, 0, now(), NULL, 'opencell.admin', NULL, 'A45', 'rec20', 'decametre');
			INSERT INTO public.untdid_unit VALUES (113, 0, now(), NULL, 'opencell.admin', NULL, 'A47', 'rec20', 'decitex');
			INSERT INTO public.untdid_unit VALUES (114, 0, now(), NULL, 'opencell.admin', NULL, 'A48', 'rec20', 'degree Rankine');
			INSERT INTO public.untdid_unit VALUES (115, 0, now(), NULL, 'opencell.admin', NULL, 'A49', 'rec20', 'denier');
			INSERT INTO public.untdid_unit VALUES (116, 0, now(), NULL, 'opencell.admin', NULL, 'A5', 'rec20', 'ampere square metre');
			INSERT INTO public.untdid_unit VALUES (117, 0, now(), NULL, 'opencell.admin', NULL, 'A53', 'rec20', 'electronvolt');
			INSERT INTO public.untdid_unit VALUES (118, 0, now(), NULL, 'opencell.admin', NULL, 'A54', 'rec20', 'electronvolt per metre');
			INSERT INTO public.untdid_unit VALUES (119, 0, now(), NULL, 'opencell.admin', NULL, 'A55', 'rec20', 'electronvolt square metre');
			INSERT INTO public.untdid_unit VALUES (120, 0, now(), NULL, 'opencell.admin', NULL, 'A56', 'rec20', 'electronvolt square metre per kilogram');
			INSERT INTO public.untdid_unit VALUES (121, 0, now(), NULL, 'opencell.admin', NULL, 'A59', 'rec20', '8-part cloud cover');
			INSERT INTO public.untdid_unit VALUES (122, 0, now(), NULL, 'opencell.admin', NULL, 'A6', 'rec20', 'ampere per square metre kelvin squared');
			INSERT INTO public.untdid_unit VALUES (123, 0, now(), NULL, 'opencell.admin', NULL, 'A68', 'rec20', 'exajoule');
			INSERT INTO public.untdid_unit VALUES (124, 0, now(), NULL, 'opencell.admin', NULL, 'A69', 'rec20', 'farad per metre');
			INSERT INTO public.untdid_unit VALUES (125, 0, now(), NULL, 'opencell.admin', NULL, 'A7', 'rec20', 'ampere per square millimetre');
			INSERT INTO public.untdid_unit VALUES (126, 0, now(), NULL, 'opencell.admin', NULL, 'A70', 'rec20', 'femtojoule');
			INSERT INTO public.untdid_unit VALUES (127, 0, now(), NULL, 'opencell.admin', NULL, 'A71', 'rec20', 'femtometre');
			INSERT INTO public.untdid_unit VALUES (128, 0, now(), NULL, 'opencell.admin', NULL, 'A73', 'rec20', 'foot per second squared');
			INSERT INTO public.untdid_unit VALUES (129, 0, now(), NULL, 'opencell.admin', NULL, 'A74', 'rec20', 'foot pound-force per second');
			INSERT INTO public.untdid_unit VALUES (130, 0, now(), NULL, 'opencell.admin', NULL, 'A75', 'rec20', 'freight ton');
			INSERT INTO public.untdid_unit VALUES (131, 0, now(), NULL, 'opencell.admin', NULL, 'A76', 'rec20', 'gal');
			INSERT INTO public.untdid_unit VALUES (132, 0, now(), NULL, 'opencell.admin', NULL, 'A8', 'rec20', 'ampere second');
			INSERT INTO public.untdid_unit VALUES (133, 0, now(), NULL, 'opencell.admin', NULL, 'A84', 'rec20', 'gigacoulomb per cubic metre');
			INSERT INTO public.untdid_unit VALUES (134, 0, now(), NULL, 'opencell.admin', NULL, 'A85', 'rec20', 'gigaelectronvolt');
			INSERT INTO public.untdid_unit VALUES (135, 0, now(), NULL, 'opencell.admin', NULL, 'A86', 'rec20', 'gigahertz');
			INSERT INTO public.untdid_unit VALUES (136, 0, now(), NULL, 'opencell.admin', NULL, 'A87', 'rec20', 'gigaohm');
			INSERT INTO public.untdid_unit VALUES (137, 0, now(), NULL, 'opencell.admin', NULL, 'A88', 'rec20', 'gigaohm metre');
			INSERT INTO public.untdid_unit VALUES (138, 0, now(), NULL, 'opencell.admin', NULL, 'A89', 'rec20', 'gigapascal');
			INSERT INTO public.untdid_unit VALUES (139, 0, now(), NULL, 'opencell.admin', NULL, 'A9', 'rec20', 'rate');
			INSERT INTO public.untdid_unit VALUES (140, 0, now(), NULL, 'opencell.admin', NULL, 'A90', 'rec20', 'gigawatt');
			INSERT INTO public.untdid_unit VALUES (141, 0, now(), NULL, 'opencell.admin', NULL, 'A91', 'rec20', 'gon');
			INSERT INTO public.untdid_unit VALUES (142, 0, now(), NULL, 'opencell.admin', NULL, 'A93', 'rec20', 'gram per cubic metre');
			INSERT INTO public.untdid_unit VALUES (143, 0, now(), NULL, 'opencell.admin', NULL, 'A94', 'rec20', 'gram per mole');
			INSERT INTO public.untdid_unit VALUES (144, 0, now(), NULL, 'opencell.admin', NULL, 'A95', 'rec20', 'gray');
			INSERT INTO public.untdid_unit VALUES (145, 0, now(), NULL, 'opencell.admin', NULL, 'A96', 'rec20', 'gray per second');
			INSERT INTO public.untdid_unit VALUES (146, 0, now(), NULL, 'opencell.admin', NULL, 'A97', 'rec20', 'hectopascal');
			INSERT INTO public.untdid_unit VALUES (147, 0, now(), NULL, 'opencell.admin', NULL, 'A98', 'rec20', 'henry per metre');
			INSERT INTO public.untdid_unit VALUES (148, 0, now(), NULL, 'opencell.admin', NULL, 'A99', 'rec20', 'bit');
			INSERT INTO public.untdid_unit VALUES (149, 0, now(), NULL, 'opencell.admin', NULL, 'AA', 'rec20', 'ball');
			INSERT INTO public.untdid_unit VALUES (150, 0, now(), NULL, 'opencell.admin', NULL, 'AB', 'rec20', 'bulk pack');
			INSERT INTO public.untdid_unit VALUES (151, 0, now(), NULL, 'opencell.admin', NULL, 'ACR', 'rec20', 'acre');
			INSERT INTO public.untdid_unit VALUES (152, 0, now(), NULL, 'opencell.admin', NULL, 'ACT', 'rec20', 'activity');
			INSERT INTO public.untdid_unit VALUES (153, 0, now(), NULL, 'opencell.admin', NULL, 'AD', 'rec20', 'byte');
			INSERT INTO public.untdid_unit VALUES (154, 0, now(), NULL, 'opencell.admin', NULL, 'AE', 'rec20', 'ampere per metre');
			INSERT INTO public.untdid_unit VALUES (155, 0, now(), NULL, 'opencell.admin', NULL, 'AH', 'rec20', 'additional minute');
			INSERT INTO public.untdid_unit VALUES (156, 0, now(), NULL, 'opencell.admin', NULL, 'AI', 'rec20', 'average minute per call');
			INSERT INTO public.untdid_unit VALUES (157, 0, now(), NULL, 'opencell.admin', NULL, 'AK', 'rec20', 'fathom');
			INSERT INTO public.untdid_unit VALUES (158, 0, now(), NULL, 'opencell.admin', NULL, 'AL', 'rec20', 'access line');
			INSERT INTO public.untdid_unit VALUES (159, 0, now(), NULL, 'opencell.admin', NULL, 'AMH', 'rec20', 'ampere hour');
			INSERT INTO public.untdid_unit VALUES (160, 0, now(), NULL, 'opencell.admin', NULL, 'AMP', 'rec20', 'ampere');
			INSERT INTO public.untdid_unit VALUES (161, 0, now(), NULL, 'opencell.admin', NULL, 'ANN', 'rec20', 'year');
			INSERT INTO public.untdid_unit VALUES (162, 0, now(), NULL, 'opencell.admin', NULL, 'APZ', 'rec20', 'troy ounce or apothecary ounce');
			INSERT INTO public.untdid_unit VALUES (163, 0, now(), NULL, 'opencell.admin', NULL, 'AQ', 'rec20', 'anti-hemophilic factor (AHF) unit');
			INSERT INTO public.untdid_unit VALUES (164, 0, now(), NULL, 'opencell.admin', NULL, 'AS', 'rec20', 'assortment');
			INSERT INTO public.untdid_unit VALUES (165, 0, now(), NULL, 'opencell.admin', NULL, 'ASM', 'rec20', 'alcoholic strength by mass');
			INSERT INTO public.untdid_unit VALUES (166, 0, now(), NULL, 'opencell.admin', NULL, 'ASU', 'rec20', 'alcoholic strength by volume');
			INSERT INTO public.untdid_unit VALUES (167, 0, now(), NULL, 'opencell.admin', NULL, 'ATM', 'rec20', 'standard atmosphere');
			INSERT INTO public.untdid_unit VALUES (168, 0, now(), NULL, 'opencell.admin', NULL, 'AWG', 'rec20', 'american wire gauge');
			INSERT INTO public.untdid_unit VALUES (169, 0, now(), NULL, 'opencell.admin', NULL, 'AY', 'rec20', 'assembly');
			INSERT INTO public.untdid_unit VALUES (170, 0, now(), NULL, 'opencell.admin', NULL, 'AZ', 'rec20', 'British thermal unit (international table) per pound');
			INSERT INTO public.untdid_unit VALUES (171, 0, now(), NULL, 'opencell.admin', NULL, 'B1', 'rec20', 'barrel (US) per day');
			INSERT INTO public.untdid_unit VALUES (172, 0, now(), NULL, 'opencell.admin', NULL, 'B10', 'rec20', 'bit per second');
			INSERT INTO public.untdid_unit VALUES (173, 0, now(), NULL, 'opencell.admin', NULL, 'B11', 'rec20', 'joule per kilogram kelvin');
			INSERT INTO public.untdid_unit VALUES (174, 0, now(), NULL, 'opencell.admin', NULL, 'B12', 'rec20', 'joule per metre');
			INSERT INTO public.untdid_unit VALUES (175, 0, now(), NULL, 'opencell.admin', NULL, 'B13', 'rec20', 'joule per square metre');
			INSERT INTO public.untdid_unit VALUES (176, 0, now(), NULL, 'opencell.admin', NULL, 'B14', 'rec20', 'joule per metre to the fourth power');
			INSERT INTO public.untdid_unit VALUES (177, 0, now(), NULL, 'opencell.admin', NULL, 'B15', 'rec20', 'joule per mole');
			INSERT INTO public.untdid_unit VALUES (178, 0, now(), NULL, 'opencell.admin', NULL, 'B16', 'rec20', 'joule per mole kelvin');
			INSERT INTO public.untdid_unit VALUES (179, 0, now(), NULL, 'opencell.admin', NULL, 'B17', 'rec20', 'credit');
			INSERT INTO public.untdid_unit VALUES (180, 0, now(), NULL, 'opencell.admin', NULL, 'B18', 'rec20', 'joule second');
			INSERT INTO public.untdid_unit VALUES (181, 0, now(), NULL, 'opencell.admin', NULL, 'B19', 'rec20', 'digit');
			INSERT INTO public.untdid_unit VALUES (182, 0, now(), NULL, 'opencell.admin', NULL, 'B20', 'rec20', 'joule square metre per kilogram');
			INSERT INTO public.untdid_unit VALUES (183, 0, now(), NULL, 'opencell.admin', NULL, 'B21', 'rec20', 'kelvin per watt');
			INSERT INTO public.untdid_unit VALUES (184, 0, now(), NULL, 'opencell.admin', NULL, 'B22', 'rec20', 'kiloampere');
			INSERT INTO public.untdid_unit VALUES (185, 0, now(), NULL, 'opencell.admin', NULL, 'B23', 'rec20', 'kiloampere per square metre');
			INSERT INTO public.untdid_unit VALUES (186, 0, now(), NULL, 'opencell.admin', NULL, 'B24', 'rec20', 'kiloampere per metre');
			INSERT INTO public.untdid_unit VALUES (187, 0, now(), NULL, 'opencell.admin', NULL, 'B25', 'rec20', 'kilobecquerel per kilogram');
			INSERT INTO public.untdid_unit VALUES (188, 0, now(), NULL, 'opencell.admin', NULL, 'B26', 'rec20', 'kilocoulomb');
			INSERT INTO public.untdid_unit VALUES (189, 0, now(), NULL, 'opencell.admin', NULL, 'B27', 'rec20', 'kilocoulomb per cubic metre');
			INSERT INTO public.untdid_unit VALUES (190, 0, now(), NULL, 'opencell.admin', NULL, 'B28', 'rec20', 'kilocoulomb per square metre');
			INSERT INTO public.untdid_unit VALUES (191, 0, now(), NULL, 'opencell.admin', NULL, 'B29', 'rec20', 'kiloelectronvolt');
			INSERT INTO public.untdid_unit VALUES (192, 0, now(), NULL, 'opencell.admin', NULL, 'B3', 'rec20', 'batting pound');
			INSERT INTO public.untdid_unit VALUES (193, 0, now(), NULL, 'opencell.admin', NULL, 'B30', 'rec20', 'gibibit');
			INSERT INTO public.untdid_unit VALUES (194, 0, now(), NULL, 'opencell.admin', NULL, 'B31', 'rec20', 'kilogram metre per second');
			INSERT INTO public.untdid_unit VALUES (195, 0, now(), NULL, 'opencell.admin', NULL, 'B32', 'rec20', 'kilogram metre squared');
			INSERT INTO public.untdid_unit VALUES (196, 0, now(), NULL, 'opencell.admin', NULL, 'B33', 'rec20', 'kilogram metre squared per second');
			INSERT INTO public.untdid_unit VALUES (197, 0, now(), NULL, 'opencell.admin', NULL, 'B34', 'rec20', 'kilogram per cubic decimetre');
			INSERT INTO public.untdid_unit VALUES (198, 0, now(), NULL, 'opencell.admin', NULL, 'B35', 'rec20', 'kilogram per litre');
			INSERT INTO public.untdid_unit VALUES (199, 0, now(), NULL, 'opencell.admin', NULL, 'B4', 'rec20', 'barrel, imperial');
			INSERT INTO public.untdid_unit VALUES (200, 0, now(), NULL, 'opencell.admin', NULL, 'B41', 'rec20', 'kilojoule per kelvin');
			INSERT INTO public.untdid_unit VALUES (201, 0, now(), NULL, 'opencell.admin', NULL, 'B42', 'rec20', 'kilojoule per kilogram');
			INSERT INTO public.untdid_unit VALUES (202, 0, now(), NULL, 'opencell.admin', NULL, 'B43', 'rec20', 'kilojoule per kilogram kelvin');
			INSERT INTO public.untdid_unit VALUES (203, 0, now(), NULL, 'opencell.admin', NULL, 'B44', 'rec20', 'kilojoule per mole');
			INSERT INTO public.untdid_unit VALUES (204, 0, now(), NULL, 'opencell.admin', NULL, 'B45', 'rec20', 'kilomole');
			INSERT INTO public.untdid_unit VALUES (205, 0, now(), NULL, 'opencell.admin', NULL, 'B46', 'rec20', 'kilomole per cubic metre');
			INSERT INTO public.untdid_unit VALUES (206, 0, now(), NULL, 'opencell.admin', NULL, 'B47', 'rec20', 'kilonewton');
			INSERT INTO public.untdid_unit VALUES (207, 0, now(), NULL, 'opencell.admin', NULL, 'B48', 'rec20', 'kilonewton metre');
			INSERT INTO public.untdid_unit VALUES (208, 0, now(), NULL, 'opencell.admin', NULL, 'B49', 'rec20', 'kiloohm');
			INSERT INTO public.untdid_unit VALUES (209, 0, now(), NULL, 'opencell.admin', NULL, 'B50', 'rec20', 'kiloohm metre');
			INSERT INTO public.untdid_unit VALUES (210, 0, now(), NULL, 'opencell.admin', NULL, 'B52', 'rec20', 'kilosecond');
			INSERT INTO public.untdid_unit VALUES (211, 0, now(), NULL, 'opencell.admin', NULL, 'B53', 'rec20', 'kilosiemens');
			INSERT INTO public.untdid_unit VALUES (212, 0, now(), NULL, 'opencell.admin', NULL, 'B54', 'rec20', 'kilosiemens per metre');
			INSERT INTO public.untdid_unit VALUES (213, 0, now(), NULL, 'opencell.admin', NULL, 'B55', 'rec20', 'kilovolt per metre');
			INSERT INTO public.untdid_unit VALUES (214, 0, now(), NULL, 'opencell.admin', NULL, 'B56', 'rec20', 'kiloweber per metre');
			INSERT INTO public.untdid_unit VALUES (215, 0, now(), NULL, 'opencell.admin', NULL, 'B57', 'rec20', 'light year');
			INSERT INTO public.untdid_unit VALUES (216, 0, now(), NULL, 'opencell.admin', NULL, 'B58', 'rec20', 'litre per mole');
			INSERT INTO public.untdid_unit VALUES (217, 0, now(), NULL, 'opencell.admin', NULL, 'B59', 'rec20', 'lumen hour');
			INSERT INTO public.untdid_unit VALUES (218, 0, now(), NULL, 'opencell.admin', NULL, 'B60', 'rec20', 'lumen per square metre');
			INSERT INTO public.untdid_unit VALUES (219, 0, now(), NULL, 'opencell.admin', NULL, 'B61', 'rec20', 'lumen per watt');
			INSERT INTO public.untdid_unit VALUES (220, 0, now(), NULL, 'opencell.admin', NULL, 'B62', 'rec20', 'lumen second');
			INSERT INTO public.untdid_unit VALUES (221, 0, now(), NULL, 'opencell.admin', NULL, 'B63', 'rec20', 'lux hour');
			INSERT INTO public.untdid_unit VALUES (222, 0, now(), NULL, 'opencell.admin', NULL, 'B64', 'rec20', 'lux second');
			INSERT INTO public.untdid_unit VALUES (223, 0, now(), NULL, 'opencell.admin', NULL, 'B66', 'rec20', 'megaampere per square metre');
			INSERT INTO public.untdid_unit VALUES (224, 0, now(), NULL, 'opencell.admin', NULL, 'B67', 'rec20', 'megabecquerel per kilogram');
			INSERT INTO public.untdid_unit VALUES (225, 0, now(), NULL, 'opencell.admin', NULL, 'B68', 'rec20', 'gigabit');
			INSERT INTO public.untdid_unit VALUES (226, 0, now(), NULL, 'opencell.admin', NULL, 'B69', 'rec20', 'megacoulomb per cubic metre');
			INSERT INTO public.untdid_unit VALUES (227, 0, now(), NULL, 'opencell.admin', NULL, 'B7', 'rec20', 'cycle');
			INSERT INTO public.untdid_unit VALUES (228, 0, now(), NULL, 'opencell.admin', NULL, 'B70', 'rec20', 'megacoulomb per square metre');
			INSERT INTO public.untdid_unit VALUES (229, 0, now(), NULL, 'opencell.admin', NULL, 'B71', 'rec20', 'megaelectronvolt');
			INSERT INTO public.untdid_unit VALUES (230, 0, now(), NULL, 'opencell.admin', NULL, 'B72', 'rec20', 'megagram per cubic metre');
			INSERT INTO public.untdid_unit VALUES (231, 0, now(), NULL, 'opencell.admin', NULL, 'B73', 'rec20', 'meganewton');
			INSERT INTO public.untdid_unit VALUES (232, 0, now(), NULL, 'opencell.admin', NULL, 'B74', 'rec20', 'meganewton metre');
			INSERT INTO public.untdid_unit VALUES (233, 0, now(), NULL, 'opencell.admin', NULL, 'B75', 'rec20', 'megaohm');
			INSERT INTO public.untdid_unit VALUES (234, 0, now(), NULL, 'opencell.admin', NULL, 'B76', 'rec20', 'megaohm metre');
			INSERT INTO public.untdid_unit VALUES (235, 0, now(), NULL, 'opencell.admin', NULL, 'B77', 'rec20', 'megasiemens per metre');
			INSERT INTO public.untdid_unit VALUES (236, 0, now(), NULL, 'opencell.admin', NULL, 'B78', 'rec20', 'megavolt');
			INSERT INTO public.untdid_unit VALUES (237, 0, now(), NULL, 'opencell.admin', NULL, 'B79', 'rec20', 'megavolt per metre');
			INSERT INTO public.untdid_unit VALUES (238, 0, now(), NULL, 'opencell.admin', NULL, 'B8', 'rec20', 'joule per cubic metre');
			INSERT INTO public.untdid_unit VALUES (239, 0, now(), NULL, 'opencell.admin', NULL, 'B80', 'rec20', 'gigabit per second');
			INSERT INTO public.untdid_unit VALUES (240, 0, now(), NULL, 'opencell.admin', NULL, 'B81', 'rec20', 'reciprocal metre squared reciprocal second');
			INSERT INTO public.untdid_unit VALUES (241, 0, now(), NULL, 'opencell.admin', NULL, 'B82', 'rec20', 'inch per linear foot');
			INSERT INTO public.untdid_unit VALUES (242, 0, now(), NULL, 'opencell.admin', NULL, 'B83', 'rec20', 'metre to the fourth power');
			INSERT INTO public.untdid_unit VALUES (243, 0, now(), NULL, 'opencell.admin', NULL, 'B84', 'rec20', 'microampere');
			INSERT INTO public.untdid_unit VALUES (244, 0, now(), NULL, 'opencell.admin', NULL, 'B85', 'rec20', 'microbar');
			INSERT INTO public.untdid_unit VALUES (245, 0, now(), NULL, 'opencell.admin', NULL, 'B86', 'rec20', 'microcoulomb');
			INSERT INTO public.untdid_unit VALUES (246, 0, now(), NULL, 'opencell.admin', NULL, 'B87', 'rec20', 'microcoulomb per cubic metre');
			INSERT INTO public.untdid_unit VALUES (247, 0, now(), NULL, 'opencell.admin', NULL, 'B88', 'rec20', 'microcoulomb per square metre');
			INSERT INTO public.untdid_unit VALUES (248, 0, now(), NULL, 'opencell.admin', NULL, 'B89', 'rec20', 'microfarad per metre');
			INSERT INTO public.untdid_unit VALUES (249, 0, now(), NULL, 'opencell.admin', NULL, 'B90', 'rec20', 'microhenry');
			INSERT INTO public.untdid_unit VALUES (250, 0, now(), NULL, 'opencell.admin', NULL, 'B91', 'rec20', 'microhenry per metre');
			INSERT INTO public.untdid_unit VALUES (251, 0, now(), NULL, 'opencell.admin', NULL, 'B92', 'rec20', 'micronewton');
			INSERT INTO public.untdid_unit VALUES (252, 0, now(), NULL, 'opencell.admin', NULL, 'B93', 'rec20', 'micronewton metre');
			INSERT INTO public.untdid_unit VALUES (253, 0, now(), NULL, 'opencell.admin', NULL, 'B94', 'rec20', 'microohm');
			INSERT INTO public.untdid_unit VALUES (254, 0, now(), NULL, 'opencell.admin', NULL, 'B95', 'rec20', 'microohm metre');
			INSERT INTO public.untdid_unit VALUES (255, 0, now(), NULL, 'opencell.admin', NULL, 'B96', 'rec20', 'micropascal');
			INSERT INTO public.untdid_unit VALUES (256, 0, now(), NULL, 'opencell.admin', NULL, 'B97', 'rec20', 'microradian');
			INSERT INTO public.untdid_unit VALUES (257, 0, now(), NULL, 'opencell.admin', NULL, 'B98', 'rec20', 'microsecond');
			INSERT INTO public.untdid_unit VALUES (258, 0, now(), NULL, 'opencell.admin', NULL, 'B99', 'rec20', 'microsiemens');
			INSERT INTO public.untdid_unit VALUES (259, 0, now(), NULL, 'opencell.admin', NULL, 'BAR', 'rec20', 'bar [unit of pressure]');
			INSERT INTO public.untdid_unit VALUES (260, 0, now(), NULL, 'opencell.admin', NULL, 'BB', 'rec20', 'base box');
			INSERT INTO public.untdid_unit VALUES (261, 0, now(), NULL, 'opencell.admin', NULL, 'BFT', 'rec20', 'board foot');
			INSERT INTO public.untdid_unit VALUES (262, 0, now(), NULL, 'opencell.admin', NULL, 'BHP', 'rec20', 'brake horse power');
			INSERT INTO public.untdid_unit VALUES (263, 0, now(), NULL, 'opencell.admin', NULL, 'BIL', 'rec20', 'billion (EUR)');
			INSERT INTO public.untdid_unit VALUES (264, 0, now(), NULL, 'opencell.admin', NULL, 'BLD', 'rec20', 'dry barrel (US)');
			INSERT INTO public.untdid_unit VALUES (265, 0, now(), NULL, 'opencell.admin', NULL, 'BLL', 'rec20', 'barrel (US)');
			INSERT INTO public.untdid_unit VALUES (266, 0, now(), NULL, 'opencell.admin', NULL, 'BP', 'rec20', 'hundred board foot');
			INSERT INTO public.untdid_unit VALUES (267, 0, now(), NULL, 'opencell.admin', NULL, 'BPM', 'rec20', 'beats per minute');
			INSERT INTO public.untdid_unit VALUES (268, 0, now(), NULL, 'opencell.admin', NULL, 'BQL', 'rec20', 'becquerel');
			INSERT INTO public.untdid_unit VALUES (269, 0, now(), NULL, 'opencell.admin', NULL, 'BTU', 'rec20', 'British thermal unit (international table)');
			INSERT INTO public.untdid_unit VALUES (270, 0, now(), NULL, 'opencell.admin', NULL, 'BUA', 'rec20', 'bushel (US)');
			INSERT INTO public.untdid_unit VALUES (271, 0, now(), NULL, 'opencell.admin', NULL, 'BUI', 'rec20', 'bushel (UK)');
			INSERT INTO public.untdid_unit VALUES (272, 0, now(), NULL, 'opencell.admin', NULL, 'C0', 'rec20', 'call');
			INSERT INTO public.untdid_unit VALUES (273, 0, now(), NULL, 'opencell.admin', NULL, 'C10', 'rec20', 'millifarad');
			INSERT INTO public.untdid_unit VALUES (274, 0, now(), NULL, 'opencell.admin', NULL, 'C11', 'rec20', 'milligal');
			INSERT INTO public.untdid_unit VALUES (275, 0, now(), NULL, 'opencell.admin', NULL, 'C12', 'rec20', 'milligram per metre');
			INSERT INTO public.untdid_unit VALUES (276, 0, now(), NULL, 'opencell.admin', NULL, 'C13', 'rec20', 'milligray');
			INSERT INTO public.untdid_unit VALUES (277, 0, now(), NULL, 'opencell.admin', NULL, 'C14', 'rec20', 'millihenry');
			INSERT INTO public.untdid_unit VALUES (278, 0, now(), NULL, 'opencell.admin', NULL, 'C15', 'rec20', 'millijoule');
			INSERT INTO public.untdid_unit VALUES (279, 0, now(), NULL, 'opencell.admin', NULL, 'C16', 'rec20', 'millimetre per second');
			INSERT INTO public.untdid_unit VALUES (280, 0, now(), NULL, 'opencell.admin', NULL, 'C17', 'rec20', 'millimetre squared per second');
			INSERT INTO public.untdid_unit VALUES (281, 0, now(), NULL, 'opencell.admin', NULL, 'C18', 'rec20', 'millimole');
			INSERT INTO public.untdid_unit VALUES (282, 0, now(), NULL, 'opencell.admin', NULL, 'C19', 'rec20', 'mole per kilogram');
			INSERT INTO public.untdid_unit VALUES (283, 0, now(), NULL, 'opencell.admin', NULL, 'C20', 'rec20', 'millinewton');
			INSERT INTO public.untdid_unit VALUES (284, 0, now(), NULL, 'opencell.admin', NULL, 'C21', 'rec20', 'kibibit');
			INSERT INTO public.untdid_unit VALUES (285, 0, now(), NULL, 'opencell.admin', NULL, 'C22', 'rec20', 'millinewton per metre');
			INSERT INTO public.untdid_unit VALUES (286, 0, now(), NULL, 'opencell.admin', NULL, 'C23', 'rec20', 'milliohm metre');
			INSERT INTO public.untdid_unit VALUES (287, 0, now(), NULL, 'opencell.admin', NULL, 'C24', 'rec20', 'millipascal second');
			INSERT INTO public.untdid_unit VALUES (288, 0, now(), NULL, 'opencell.admin', NULL, 'C25', 'rec20', 'milliradian');
			INSERT INTO public.untdid_unit VALUES (289, 0, now(), NULL, 'opencell.admin', NULL, 'C26', 'rec20', 'millisecond');
			INSERT INTO public.untdid_unit VALUES (290, 0, now(), NULL, 'opencell.admin', NULL, 'C27', 'rec20', 'millisiemens');
			INSERT INTO public.untdid_unit VALUES (291, 0, now(), NULL, 'opencell.admin', NULL, 'C28', 'rec20', 'millisievert');
			INSERT INTO public.untdid_unit VALUES (292, 0, now(), NULL, 'opencell.admin', NULL, 'C29', 'rec20', 'millitesla');
			INSERT INTO public.untdid_unit VALUES (293, 0, now(), NULL, 'opencell.admin', NULL, 'C3', 'rec20', 'microvolt per metre');
			INSERT INTO public.untdid_unit VALUES (294, 0, now(), NULL, 'opencell.admin', NULL, 'C30', 'rec20', 'millivolt per metre');
			INSERT INTO public.untdid_unit VALUES (295, 0, now(), NULL, 'opencell.admin', NULL, 'C31', 'rec20', 'milliwatt');
			INSERT INTO public.untdid_unit VALUES (296, 0, now(), NULL, 'opencell.admin', NULL, 'C32', 'rec20', 'milliwatt per square metre');
			INSERT INTO public.untdid_unit VALUES (297, 0, now(), NULL, 'opencell.admin', NULL, 'C33', 'rec20', 'milliweber');
			INSERT INTO public.untdid_unit VALUES (298, 0, now(), NULL, 'opencell.admin', NULL, 'C34', 'rec20', 'mole');
			INSERT INTO public.untdid_unit VALUES (299, 0, now(), NULL, 'opencell.admin', NULL, 'C35', 'rec20', 'mole per cubic decimetre');
			INSERT INTO public.untdid_unit VALUES (300, 0, now(), NULL, 'opencell.admin', NULL, 'C36', 'rec20', 'mole per cubic metre');
			INSERT INTO public.untdid_unit VALUES (301, 0, now(), NULL, 'opencell.admin', NULL, 'C37', 'rec20', 'kilobit');
			INSERT INTO public.untdid_unit VALUES (302, 0, now(), NULL, 'opencell.admin', NULL, 'C38', 'rec20', 'mole per litre');
			INSERT INTO public.untdid_unit VALUES (303, 0, now(), NULL, 'opencell.admin', NULL, 'C39', 'rec20', 'nanoampere');
			INSERT INTO public.untdid_unit VALUES (304, 0, now(), NULL, 'opencell.admin', NULL, 'C40', 'rec20', 'nanocoulomb');
			INSERT INTO public.untdid_unit VALUES (305, 0, now(), NULL, 'opencell.admin', NULL, 'C41', 'rec20', 'nanofarad');
			INSERT INTO public.untdid_unit VALUES (306, 0, now(), NULL, 'opencell.admin', NULL, 'C42', 'rec20', 'nanofarad per metre');
			INSERT INTO public.untdid_unit VALUES (307, 0, now(), NULL, 'opencell.admin', NULL, 'C43', 'rec20', 'nanohenry');
			INSERT INTO public.untdid_unit VALUES (308, 0, now(), NULL, 'opencell.admin', NULL, 'C44', 'rec20', 'nanohenry per metre');
			INSERT INTO public.untdid_unit VALUES (309, 0, now(), NULL, 'opencell.admin', NULL, 'C45', 'rec20', 'nanometre');
			INSERT INTO public.untdid_unit VALUES (310, 0, now(), NULL, 'opencell.admin', NULL, 'C46', 'rec20', 'nanoohm metre');
			INSERT INTO public.untdid_unit VALUES (311, 0, now(), NULL, 'opencell.admin', NULL, 'C47', 'rec20', 'nanosecond');
			INSERT INTO public.untdid_unit VALUES (312, 0, now(), NULL, 'opencell.admin', NULL, 'C48', 'rec20', 'nanotesla');
			INSERT INTO public.untdid_unit VALUES (313, 0, now(), NULL, 'opencell.admin', NULL, 'C49', 'rec20', 'nanowatt');
			INSERT INTO public.untdid_unit VALUES (314, 0, now(), NULL, 'opencell.admin', NULL, 'C50', 'rec20', 'neper');
			INSERT INTO public.untdid_unit VALUES (315, 0, now(), NULL, 'opencell.admin', NULL, 'C51', 'rec20', 'neper per second');
			INSERT INTO public.untdid_unit VALUES (316, 0, now(), NULL, 'opencell.admin', NULL, 'C52', 'rec20', 'picometre');
			INSERT INTO public.untdid_unit VALUES (317, 0, now(), NULL, 'opencell.admin', NULL, 'C53', 'rec20', 'newton metre second');
			INSERT INTO public.untdid_unit VALUES (318, 0, now(), NULL, 'opencell.admin', NULL, 'C54', 'rec20', 'newton metre squared per kilogram squared');
			INSERT INTO public.untdid_unit VALUES (319, 0, now(), NULL, 'opencell.admin', NULL, 'C55', 'rec20', 'newton per square metre');
			INSERT INTO public.untdid_unit VALUES (320, 0, now(), NULL, 'opencell.admin', NULL, 'C56', 'rec20', 'newton per square millimetre');
			INSERT INTO public.untdid_unit VALUES (321, 0, now(), NULL, 'opencell.admin', NULL, 'C57', 'rec20', 'newton second');
			INSERT INTO public.untdid_unit VALUES (322, 0, now(), NULL, 'opencell.admin', NULL, 'C58', 'rec20', 'newton second per metre');
			INSERT INTO public.untdid_unit VALUES (323, 0, now(), NULL, 'opencell.admin', NULL, 'C59', 'rec20', 'octave');
			INSERT INTO public.untdid_unit VALUES (324, 0, now(), NULL, 'opencell.admin', NULL, 'C60', 'rec20', 'ohm centimetre');
			INSERT INTO public.untdid_unit VALUES (325, 0, now(), NULL, 'opencell.admin', NULL, 'C61', 'rec20', 'ohm metre');
			INSERT INTO public.untdid_unit VALUES (326, 0, now(), NULL, 'opencell.admin', NULL, 'C62', 'rec20', 'one');
			INSERT INTO public.untdid_unit VALUES (327, 0, now(), NULL, 'opencell.admin', NULL, 'C63', 'rec20', 'parsec');
			INSERT INTO public.untdid_unit VALUES (328, 0, now(), NULL, 'opencell.admin', NULL, 'C64', 'rec20', 'pascal per kelvin');
			INSERT INTO public.untdid_unit VALUES (329, 0, now(), NULL, 'opencell.admin', NULL, 'C65', 'rec20', 'pascal second');
			INSERT INTO public.untdid_unit VALUES (330, 0, now(), NULL, 'opencell.admin', NULL, 'C66', 'rec20', 'pascal second per cubic metre');
			INSERT INTO public.untdid_unit VALUES (331, 0, now(), NULL, 'opencell.admin', NULL, 'C67', 'rec20', 'pascal second per metre');
			INSERT INTO public.untdid_unit VALUES (332, 0, now(), NULL, 'opencell.admin', NULL, 'C68', 'rec20', 'petajoule');
			INSERT INTO public.untdid_unit VALUES (333, 0, now(), NULL, 'opencell.admin', NULL, 'C69', 'rec20', 'phon');
			INSERT INTO public.untdid_unit VALUES (334, 0, now(), NULL, 'opencell.admin', NULL, 'C7', 'rec20', 'centipoise');
			INSERT INTO public.untdid_unit VALUES (335, 0, now(), NULL, 'opencell.admin', NULL, 'C70', 'rec20', 'picoampere');
			INSERT INTO public.untdid_unit VALUES (336, 0, now(), NULL, 'opencell.admin', NULL, 'C71', 'rec20', 'picocoulomb');
			INSERT INTO public.untdid_unit VALUES (337, 0, now(), NULL, 'opencell.admin', NULL, 'C72', 'rec20', 'picofarad per metre');
			INSERT INTO public.untdid_unit VALUES (338, 0, now(), NULL, 'opencell.admin', NULL, 'C73', 'rec20', 'picohenry');
			INSERT INTO public.untdid_unit VALUES (339, 0, now(), NULL, 'opencell.admin', NULL, 'C74', 'rec20', 'kilobit per second');
			INSERT INTO public.untdid_unit VALUES (340, 0, now(), NULL, 'opencell.admin', NULL, 'C75', 'rec20', 'picowatt');
			INSERT INTO public.untdid_unit VALUES (341, 0, now(), NULL, 'opencell.admin', NULL, 'C76', 'rec20', 'picowatt per square metre');
			INSERT INTO public.untdid_unit VALUES (342, 0, now(), NULL, 'opencell.admin', NULL, 'C78', 'rec20', 'pound-force');
			INSERT INTO public.untdid_unit VALUES (343, 0, now(), NULL, 'opencell.admin', NULL, 'C79', 'rec20', 'kilovolt ampere hour');
			INSERT INTO public.untdid_unit VALUES (344, 0, now(), NULL, 'opencell.admin', NULL, 'C8', 'rec20', 'millicoulomb per kilogram');
			INSERT INTO public.untdid_unit VALUES (345, 0, now(), NULL, 'opencell.admin', NULL, 'C80', 'rec20', 'rad');
			INSERT INTO public.untdid_unit VALUES (346, 0, now(), NULL, 'opencell.admin', NULL, 'C81', 'rec20', 'radian');
			INSERT INTO public.untdid_unit VALUES (347, 0, now(), NULL, 'opencell.admin', NULL, 'C82', 'rec20', 'radian square metre per mole');
			INSERT INTO public.untdid_unit VALUES (348, 0, now(), NULL, 'opencell.admin', NULL, 'C83', 'rec20', 'radian square metre per kilogram');
			INSERT INTO public.untdid_unit VALUES (349, 0, now(), NULL, 'opencell.admin', NULL, 'C84', 'rec20', 'radian per metre');
			INSERT INTO public.untdid_unit VALUES (350, 0, now(), NULL, 'opencell.admin', NULL, 'C85', 'rec20', 'reciprocal angstrom');
			INSERT INTO public.untdid_unit VALUES (351, 0, now(), NULL, 'opencell.admin', NULL, 'C86', 'rec20', 'reciprocal cubic metre');
			INSERT INTO public.untdid_unit VALUES (352, 0, now(), NULL, 'opencell.admin', NULL, 'C87', 'rec20', 'reciprocal cubic metre per second');
			INSERT INTO public.untdid_unit VALUES (353, 0, now(), NULL, 'opencell.admin', NULL, 'C88', 'rec20', 'reciprocal electron volt per cubic metre');
			INSERT INTO public.untdid_unit VALUES (354, 0, now(), NULL, 'opencell.admin', NULL, 'C89', 'rec20', 'reciprocal henry');
			INSERT INTO public.untdid_unit VALUES (355, 0, now(), NULL, 'opencell.admin', NULL, 'C9', 'rec20', 'coil group');
			INSERT INTO public.untdid_unit VALUES (356, 0, now(), NULL, 'opencell.admin', NULL, 'C90', 'rec20', 'reciprocal joule per cubic metre');
			INSERT INTO public.untdid_unit VALUES (357, 0, now(), NULL, 'opencell.admin', NULL, 'C91', 'rec20', 'reciprocal kelvin or kelvin to the power minus one');
			INSERT INTO public.untdid_unit VALUES (358, 0, now(), NULL, 'opencell.admin', NULL, 'C92', 'rec20', 'reciprocal metre');
			INSERT INTO public.untdid_unit VALUES (359, 0, now(), NULL, 'opencell.admin', NULL, 'C93', 'rec20', 'reciprocal square metre');
			INSERT INTO public.untdid_unit VALUES (360, 0, now(), NULL, 'opencell.admin', NULL, 'C94', 'rec20', 'reciprocal minute');
			INSERT INTO public.untdid_unit VALUES (361, 0, now(), NULL, 'opencell.admin', NULL, 'C95', 'rec20', 'reciprocal mole');
			INSERT INTO public.untdid_unit VALUES (362, 0, now(), NULL, 'opencell.admin', NULL, 'C96', 'rec20', 'reciprocal pascal or pascal to the power minus one');
			INSERT INTO public.untdid_unit VALUES (363, 0, now(), NULL, 'opencell.admin', NULL, 'C97', 'rec20', 'reciprocal second');
			INSERT INTO public.untdid_unit VALUES (364, 0, now(), NULL, 'opencell.admin', NULL, 'C99', 'rec20', 'reciprocal second per metre squared');
			INSERT INTO public.untdid_unit VALUES (365, 0, now(), NULL, 'opencell.admin', NULL, 'CCT', 'rec20', 'carrying capacity in metric ton');
			INSERT INTO public.untdid_unit VALUES (366, 0, now(), NULL, 'opencell.admin', NULL, 'CDL', 'rec20', 'candela');
			INSERT INTO public.untdid_unit VALUES (367, 0, now(), NULL, 'opencell.admin', NULL, 'CEL', 'rec20', 'degree Celsius');
			INSERT INTO public.untdid_unit VALUES (368, 0, now(), NULL, 'opencell.admin', NULL, 'CEN', 'rec20', 'hundred');
			INSERT INTO public.untdid_unit VALUES (369, 0, now(), NULL, 'opencell.admin', NULL, 'CG', 'rec20', 'card');
			INSERT INTO public.untdid_unit VALUES (370, 0, now(), NULL, 'opencell.admin', NULL, 'CGM', 'rec20', 'centigram');
			INSERT INTO public.untdid_unit VALUES (371, 0, now(), NULL, 'opencell.admin', NULL, 'CKG', 'rec20', 'coulomb per kilogram');
			INSERT INTO public.untdid_unit VALUES (372, 0, now(), NULL, 'opencell.admin', NULL, 'CLF', 'rec20', 'hundred leave');
			INSERT INTO public.untdid_unit VALUES (373, 0, now(), NULL, 'opencell.admin', NULL, 'CLT', 'rec20', 'centilitre');
			INSERT INTO public.untdid_unit VALUES (374, 0, now(), NULL, 'opencell.admin', NULL, 'CMK', 'rec20', 'square centimetre');
			INSERT INTO public.untdid_unit VALUES (375, 0, now(), NULL, 'opencell.admin', NULL, 'CMQ', 'rec20', 'cubic centimetre');
			INSERT INTO public.untdid_unit VALUES (376, 0, now(), NULL, 'opencell.admin', NULL, 'CMT', 'rec20', 'centimetre');
			INSERT INTO public.untdid_unit VALUES (377, 0, now(), NULL, 'opencell.admin', NULL, 'CNP', 'rec20', 'hundred pack');
			INSERT INTO public.untdid_unit VALUES (378, 0, now(), NULL, 'opencell.admin', NULL, 'CNT', 'rec20', 'cental (UK)');
			INSERT INTO public.untdid_unit VALUES (379, 0, now(), NULL, 'opencell.admin', NULL, 'COU', 'rec20', 'coulomb');
			INSERT INTO public.untdid_unit VALUES (380, 0, now(), NULL, 'opencell.admin', NULL, 'CTG', 'rec20', 'content gram');
			INSERT INTO public.untdid_unit VALUES (381, 0, now(), NULL, 'opencell.admin', NULL, 'CTM', 'rec20', 'metric carat');
			INSERT INTO public.untdid_unit VALUES (382, 0, now(), NULL, 'opencell.admin', NULL, 'CTN', 'rec20', 'content ton (metric)');
			INSERT INTO public.untdid_unit VALUES (383, 0, now(), NULL, 'opencell.admin', NULL, 'CUR', 'rec20', 'curie');
			INSERT INTO public.untdid_unit VALUES (384, 0, now(), NULL, 'opencell.admin', NULL, 'CWA', 'rec20', 'hundred pound (cwt) / hundred weight (US)');
			INSERT INTO public.untdid_unit VALUES (385, 0, now(), NULL, 'opencell.admin', NULL, 'CWI', 'rec20', 'hundred weight (UK)');
			INSERT INTO public.untdid_unit VALUES (386, 0, now(), NULL, 'opencell.admin', NULL, 'D03', 'rec20', 'kilowatt hour per hour');
			INSERT INTO public.untdid_unit VALUES (387, 0, now(), NULL, 'opencell.admin', NULL, 'D04', 'rec20', 'lot  [unit of weight]');
			INSERT INTO public.untdid_unit VALUES (388, 0, now(), NULL, 'opencell.admin', NULL, 'D1', 'rec20', 'reciprocal second per steradian');
			INSERT INTO public.untdid_unit VALUES (389, 0, now(), NULL, 'opencell.admin', NULL, 'D10', 'rec20', 'siemens per metre');
			INSERT INTO public.untdid_unit VALUES (390, 0, now(), NULL, 'opencell.admin', NULL, 'D11', 'rec20', 'mebibit');
			INSERT INTO public.untdid_unit VALUES (391, 0, now(), NULL, 'opencell.admin', NULL, 'D12', 'rec20', 'siemens square metre per mole');
			INSERT INTO public.untdid_unit VALUES (392, 0, now(), NULL, 'opencell.admin', NULL, 'D13', 'rec20', 'sievert');
			INSERT INTO public.untdid_unit VALUES (393, 0, now(), NULL, 'opencell.admin', NULL, 'D15', 'rec20', 'sone');
			INSERT INTO public.untdid_unit VALUES (394, 0, now(), NULL, 'opencell.admin', NULL, 'D16', 'rec20', 'square centimetre per erg');
			INSERT INTO public.untdid_unit VALUES (395, 0, now(), NULL, 'opencell.admin', NULL, 'D17', 'rec20', 'square centimetre per steradian erg');
			INSERT INTO public.untdid_unit VALUES (396, 0, now(), NULL, 'opencell.admin', NULL, 'D18', 'rec20', 'metre kelvin');
			INSERT INTO public.untdid_unit VALUES (397, 0, now(), NULL, 'opencell.admin', NULL, 'D19', 'rec20', 'square metre kelvin per watt');
			INSERT INTO public.untdid_unit VALUES (398, 0, now(), NULL, 'opencell.admin', NULL, 'D2', 'rec20', 'reciprocal second per steradian metre squared');
			INSERT INTO public.untdid_unit VALUES (399, 0, now(), NULL, 'opencell.admin', NULL, 'D20', 'rec20', 'square metre per joule');
			INSERT INTO public.untdid_unit VALUES (400, 0, now(), NULL, 'opencell.admin', NULL, 'D21', 'rec20', 'square metre per kilogram');
			INSERT INTO public.untdid_unit VALUES (401, 0, now(), NULL, 'opencell.admin', NULL, 'D22', 'rec20', 'square metre per mole');
			INSERT INTO public.untdid_unit VALUES (402, 0, now(), NULL, 'opencell.admin', NULL, 'D23', 'rec20', 'pen gram (protein)');
			INSERT INTO public.untdid_unit VALUES (403, 0, now(), NULL, 'opencell.admin', NULL, 'D24', 'rec20', 'square metre per steradian');
			INSERT INTO public.untdid_unit VALUES (404, 0, now(), NULL, 'opencell.admin', NULL, 'D25', 'rec20', 'square metre per steradian joule');
			INSERT INTO public.untdid_unit VALUES (405, 0, now(), NULL, 'opencell.admin', NULL, 'D26', 'rec20', 'square metre per volt second');
			INSERT INTO public.untdid_unit VALUES (406, 0, now(), NULL, 'opencell.admin', NULL, 'D27', 'rec20', 'steradian');
			INSERT INTO public.untdid_unit VALUES (407, 0, now(), NULL, 'opencell.admin', NULL, 'D29', 'rec20', 'terahertz');
			INSERT INTO public.untdid_unit VALUES (408, 0, now(), NULL, 'opencell.admin', NULL, 'D30', 'rec20', 'terajoule');
			INSERT INTO public.untdid_unit VALUES (409, 0, now(), NULL, 'opencell.admin', NULL, 'D31', 'rec20', 'terawatt');
			INSERT INTO public.untdid_unit VALUES (410, 0, now(), NULL, 'opencell.admin', NULL, 'D32', 'rec20', 'terawatt hour');
			INSERT INTO public.untdid_unit VALUES (411, 0, now(), NULL, 'opencell.admin', NULL, 'D33', 'rec20', 'tesla');
			INSERT INTO public.untdid_unit VALUES (412, 0, now(), NULL, 'opencell.admin', NULL, 'D34', 'rec20', 'tex');
			INSERT INTO public.untdid_unit VALUES (413, 0, now(), NULL, 'opencell.admin', NULL, 'D36', 'rec20', 'megabit');
			INSERT INTO public.untdid_unit VALUES (414, 0, now(), NULL, 'opencell.admin', NULL, 'D41', 'rec20', 'tonne per cubic metre');
			INSERT INTO public.untdid_unit VALUES (415, 0, now(), NULL, 'opencell.admin', NULL, 'D42', 'rec20', 'tropical year');
			INSERT INTO public.untdid_unit VALUES (416, 0, now(), NULL, 'opencell.admin', NULL, 'D43', 'rec20', 'unified atomic mass unit');
			INSERT INTO public.untdid_unit VALUES (417, 0, now(), NULL, 'opencell.admin', NULL, 'D44', 'rec20', 'var');
			INSERT INTO public.untdid_unit VALUES (418, 0, now(), NULL, 'opencell.admin', NULL, 'D45', 'rec20', 'volt squared per kelvin squared');
			INSERT INTO public.untdid_unit VALUES (419, 0, now(), NULL, 'opencell.admin', NULL, 'D46', 'rec20', 'volt - ampere');
			INSERT INTO public.untdid_unit VALUES (420, 0, now(), NULL, 'opencell.admin', NULL, 'D47', 'rec20', 'volt per centimetre');
			INSERT INTO public.untdid_unit VALUES (421, 0, now(), NULL, 'opencell.admin', NULL, 'D48', 'rec20', 'volt per kelvin');
			INSERT INTO public.untdid_unit VALUES (422, 0, now(), NULL, 'opencell.admin', NULL, 'D49', 'rec20', 'millivolt per kelvin');
			INSERT INTO public.untdid_unit VALUES (423, 0, now(), NULL, 'opencell.admin', NULL, 'D5', 'rec20', 'kilogram per square centimetre');
			INSERT INTO public.untdid_unit VALUES (424, 0, now(), NULL, 'opencell.admin', NULL, 'D50', 'rec20', 'volt per metre');
			INSERT INTO public.untdid_unit VALUES (425, 0, now(), NULL, 'opencell.admin', NULL, 'D51', 'rec20', 'volt per millimetre');
			INSERT INTO public.untdid_unit VALUES (426, 0, now(), NULL, 'opencell.admin', NULL, 'D52', 'rec20', 'watt per kelvin');
			INSERT INTO public.untdid_unit VALUES (427, 0, now(), NULL, 'opencell.admin', NULL, 'D53', 'rec20', 'watt per metre kelvin');
			INSERT INTO public.untdid_unit VALUES (428, 0, now(), NULL, 'opencell.admin', NULL, 'D54', 'rec20', 'watt per square metre');
			INSERT INTO public.untdid_unit VALUES (429, 0, now(), NULL, 'opencell.admin', NULL, 'D55', 'rec20', 'watt per square metre kelvin');
			INSERT INTO public.untdid_unit VALUES (430, 0, now(), NULL, 'opencell.admin', NULL, 'D56', 'rec20', 'watt per square metre kelvin to the fourth power');
			INSERT INTO public.untdid_unit VALUES (431, 0, now(), NULL, 'opencell.admin', NULL, 'D57', 'rec20', 'watt per steradian');
			INSERT INTO public.untdid_unit VALUES (432, 0, now(), NULL, 'opencell.admin', NULL, 'D58', 'rec20', 'watt per steradian square metre');
			INSERT INTO public.untdid_unit VALUES (433, 0, now(), NULL, 'opencell.admin', NULL, 'D59', 'rec20', 'weber per metre');
			INSERT INTO public.untdid_unit VALUES (434, 0, now(), NULL, 'opencell.admin', NULL, 'D6', 'rec20', 'roentgen per second');
			INSERT INTO public.untdid_unit VALUES (435, 0, now(), NULL, 'opencell.admin', NULL, 'D60', 'rec20', 'weber per millimetre');
			INSERT INTO public.untdid_unit VALUES (436, 0, now(), NULL, 'opencell.admin', NULL, 'D61', 'rec20', 'minute [unit of angle]');
			INSERT INTO public.untdid_unit VALUES (437, 0, now(), NULL, 'opencell.admin', NULL, 'D62', 'rec20', 'second [unit of angle]');
			INSERT INTO public.untdid_unit VALUES (438, 0, now(), NULL, 'opencell.admin', NULL, 'D63', 'rec20', 'book');
			INSERT INTO public.untdid_unit VALUES (439, 0, now(), NULL, 'opencell.admin', NULL, 'D65', 'rec20', 'round');
			INSERT INTO public.untdid_unit VALUES (440, 0, now(), NULL, 'opencell.admin', NULL, 'D68', 'rec20', 'number of words');
			INSERT INTO public.untdid_unit VALUES (441, 0, now(), NULL, 'opencell.admin', NULL, 'D69', 'rec20', 'inch to the fourth power');
			INSERT INTO public.untdid_unit VALUES (442, 0, now(), NULL, 'opencell.admin', NULL, 'D73', 'rec20', 'joule square metre');
			INSERT INTO public.untdid_unit VALUES (443, 0, now(), NULL, 'opencell.admin', NULL, 'D74', 'rec20', 'kilogram per mole');
			INSERT INTO public.untdid_unit VALUES (444, 0, now(), NULL, 'opencell.admin', NULL, 'D77', 'rec20', 'megacoulomb');
			INSERT INTO public.untdid_unit VALUES (445, 0, now(), NULL, 'opencell.admin', NULL, 'D78', 'rec20', 'megajoule per second');
			INSERT INTO public.untdid_unit VALUES (446, 0, now(), NULL, 'opencell.admin', NULL, 'D80', 'rec20', 'microwatt');
			INSERT INTO public.untdid_unit VALUES (447, 0, now(), NULL, 'opencell.admin', NULL, 'D81', 'rec20', 'microtesla');
			INSERT INTO public.untdid_unit VALUES (448, 0, now(), NULL, 'opencell.admin', NULL, 'D82', 'rec20', 'microvolt');
			INSERT INTO public.untdid_unit VALUES (449, 0, now(), NULL, 'opencell.admin', NULL, 'D83', 'rec20', 'millinewton metre');
			INSERT INTO public.untdid_unit VALUES (450, 0, now(), NULL, 'opencell.admin', NULL, 'D85', 'rec20', 'microwatt per square metre');
			INSERT INTO public.untdid_unit VALUES (451, 0, now(), NULL, 'opencell.admin', NULL, 'D86', 'rec20', 'millicoulomb');
			INSERT INTO public.untdid_unit VALUES (452, 0, now(), NULL, 'opencell.admin', NULL, 'D87', 'rec20', 'millimole per kilogram');
			INSERT INTO public.untdid_unit VALUES (453, 0, now(), NULL, 'opencell.admin', NULL, 'D88', 'rec20', 'millicoulomb per cubic metre');
			INSERT INTO public.untdid_unit VALUES (454, 0, now(), NULL, 'opencell.admin', NULL, 'D89', 'rec20', 'millicoulomb per square metre');
			INSERT INTO public.untdid_unit VALUES (455, 0, now(), NULL, 'opencell.admin', NULL, 'D91', 'rec20', 'rem');
			INSERT INTO public.untdid_unit VALUES (456, 0, now(), NULL, 'opencell.admin', NULL, 'D93', 'rec20', 'second per cubic metre');
			INSERT INTO public.untdid_unit VALUES (457, 0, now(), NULL, 'opencell.admin', NULL, 'D94', 'rec20', 'second per cubic metre radian');
			INSERT INTO public.untdid_unit VALUES (458, 0, now(), NULL, 'opencell.admin', NULL, 'D95', 'rec20', 'joule per gram');
			INSERT INTO public.untdid_unit VALUES (459, 0, now(), NULL, 'opencell.admin', NULL, 'DAA', 'rec20', 'decare');
			INSERT INTO public.untdid_unit VALUES (460, 0, now(), NULL, 'opencell.admin', NULL, 'DAD', 'rec20', 'ten day');
			INSERT INTO public.untdid_unit VALUES (461, 0, now(), NULL, 'opencell.admin', NULL, 'DAY', 'rec20', 'day');
			INSERT INTO public.untdid_unit VALUES (462, 0, now(), NULL, 'opencell.admin', NULL, 'DB', 'rec20', 'dry pound');
			INSERT INTO public.untdid_unit VALUES (463, 0, now(), NULL, 'opencell.admin', NULL, 'DBM', 'Rec20', 'Decibel-milliwatts');
			INSERT INTO public.untdid_unit VALUES (464, 0, now(), NULL, 'opencell.admin', NULL, 'DBW', 'Rec20', 'Decibel watt');
			INSERT INTO public.untdid_unit VALUES (465, 0, now(), NULL, 'opencell.admin', NULL, 'DD', 'rec20', 'degree [unit of angle]');
			INSERT INTO public.untdid_unit VALUES (466, 0, now(), NULL, 'opencell.admin', NULL, 'DEC', 'rec20', 'decade');
			INSERT INTO public.untdid_unit VALUES (467, 0, now(), NULL, 'opencell.admin', NULL, 'DG', 'rec20', 'decigram');
			INSERT INTO public.untdid_unit VALUES (468, 0, now(), NULL, 'opencell.admin', NULL, 'DJ', 'rec20', 'decagram');
			INSERT INTO public.untdid_unit VALUES (469, 0, now(), NULL, 'opencell.admin', NULL, 'DLT', 'rec20', 'decilitre');
			INSERT INTO public.untdid_unit VALUES (470, 0, now(), NULL, 'opencell.admin', NULL, 'DMA', 'rec20', 'cubic decametre');
			INSERT INTO public.untdid_unit VALUES (471, 0, now(), NULL, 'opencell.admin', NULL, 'DMK', 'rec20', 'square decimetre');
			INSERT INTO public.untdid_unit VALUES (472, 0, now(), NULL, 'opencell.admin', NULL, 'DMO', 'rec20', 'standard kilolitre');
			INSERT INTO public.untdid_unit VALUES (473, 0, now(), NULL, 'opencell.admin', NULL, 'DMQ', 'rec20', 'cubic decimetre');
			INSERT INTO public.untdid_unit VALUES (474, 0, now(), NULL, 'opencell.admin', NULL, 'DMT', 'rec20', 'decimetre');
			INSERT INTO public.untdid_unit VALUES (475, 0, now(), NULL, 'opencell.admin', NULL, 'DN', 'rec20', 'decinewton metre');
			INSERT INTO public.untdid_unit VALUES (476, 0, now(), NULL, 'opencell.admin', NULL, 'DPC', 'rec20', 'dozen piece');
			INSERT INTO public.untdid_unit VALUES (477, 0, now(), NULL, 'opencell.admin', NULL, 'DPR', 'rec20', 'dozen pair');
			INSERT INTO public.untdid_unit VALUES (478, 0, now(), NULL, 'opencell.admin', NULL, 'DPT', 'rec20', 'displacement tonnage');
			INSERT INTO public.untdid_unit VALUES (479, 0, now(), NULL, 'opencell.admin', NULL, 'DRA', 'rec20', 'dram (US)');
			INSERT INTO public.untdid_unit VALUES (480, 0, now(), NULL, 'opencell.admin', NULL, 'DRI', 'rec20', 'dram (UK)');
			INSERT INTO public.untdid_unit VALUES (481, 0, now(), NULL, 'opencell.admin', NULL, 'DRL', 'rec20', 'dozen roll');
			INSERT INTO public.untdid_unit VALUES (482, 0, now(), NULL, 'opencell.admin', NULL, 'DT', 'rec20', 'dry ton');
			INSERT INTO public.untdid_unit VALUES (483, 0, now(), NULL, 'opencell.admin', NULL, 'DTN', 'rec20', 'decitonne');
			INSERT INTO public.untdid_unit VALUES (484, 0, now(), NULL, 'opencell.admin', NULL, 'DWT', 'rec20', 'pennyweight');
			INSERT INTO public.untdid_unit VALUES (485, 0, now(), NULL, 'opencell.admin', NULL, 'DZN', 'rec20', 'dozen');
			INSERT INTO public.untdid_unit VALUES (486, 0, now(), NULL, 'opencell.admin', NULL, 'DZP', 'rec20', 'dozen pack');
			INSERT INTO public.untdid_unit VALUES (487, 0, now(), NULL, 'opencell.admin', NULL, 'E01', 'rec20', 'newton per square centimetre');
			INSERT INTO public.untdid_unit VALUES (488, 0, now(), NULL, 'opencell.admin', NULL, 'E07', 'rec20', 'megawatt hour per hour');
			INSERT INTO public.untdid_unit VALUES (489, 0, now(), NULL, 'opencell.admin', NULL, 'E08', 'rec20', 'megawatt per hertz');
			INSERT INTO public.untdid_unit VALUES (490, 0, now(), NULL, 'opencell.admin', NULL, 'E09', 'rec20', 'milliampere hour');
			INSERT INTO public.untdid_unit VALUES (491, 0, now(), NULL, 'opencell.admin', NULL, 'E10', 'rec20', 'degree day');
			INSERT INTO public.untdid_unit VALUES (492, 0, now(), NULL, 'opencell.admin', NULL, 'E12', 'rec20', 'mille');
			INSERT INTO public.untdid_unit VALUES (493, 0, now(), NULL, 'opencell.admin', NULL, 'E14', 'rec20', 'kilocalorie (international table)');
			INSERT INTO public.untdid_unit VALUES (494, 0, now(), NULL, 'opencell.admin', NULL, 'E15', 'rec20', 'kilocalorie (thermochemical) per hour');
			INSERT INTO public.untdid_unit VALUES (495, 0, now(), NULL, 'opencell.admin', NULL, 'E16', 'rec20', 'million Btu(IT) per hour');
			INSERT INTO public.untdid_unit VALUES (496, 0, now(), NULL, 'opencell.admin', NULL, 'E17', 'rec20', 'cubic foot per second');
			INSERT INTO public.untdid_unit VALUES (497, 0, now(), NULL, 'opencell.admin', NULL, 'E18', 'rec20', 'tonne per hour');
			INSERT INTO public.untdid_unit VALUES (498, 0, now(), NULL, 'opencell.admin', NULL, 'E19', 'rec20', 'ping');
			INSERT INTO public.untdid_unit VALUES (499, 0, now(), NULL, 'opencell.admin', NULL, 'E20', 'rec20', 'megabit per second');
			INSERT INTO public.untdid_unit VALUES (500, 0, now(), NULL, 'opencell.admin', NULL, 'E21', 'rec20', 'shares');
			INSERT INTO public.untdid_unit VALUES (501, 0, now(), NULL, 'opencell.admin', NULL, 'E22', 'rec20', 'TEU');
			INSERT INTO public.untdid_unit VALUES (502, 0, now(), NULL, 'opencell.admin', NULL, 'E23', 'rec20', 'tyre');
			INSERT INTO public.untdid_unit VALUES (503, 0, now(), NULL, 'opencell.admin', NULL, 'E25', 'rec20', 'active unit');
			INSERT INTO public.untdid_unit VALUES (504, 0, now(), NULL, 'opencell.admin', NULL, 'E27', 'rec20', 'dose');
			INSERT INTO public.untdid_unit VALUES (505, 0, now(), NULL, 'opencell.admin', NULL, 'E28', 'rec20', 'air dry ton');
			INSERT INTO public.untdid_unit VALUES (506, 0, now(), NULL, 'opencell.admin', NULL, 'E30', 'rec20', 'strand');
			INSERT INTO public.untdid_unit VALUES (507, 0, now(), NULL, 'opencell.admin', NULL, 'E31', 'rec20', 'square metre per litre');
			INSERT INTO public.untdid_unit VALUES (508, 0, now(), NULL, 'opencell.admin', NULL, 'E32', 'rec20', 'litre per hour');
			INSERT INTO public.untdid_unit VALUES (509, 0, now(), NULL, 'opencell.admin', NULL, 'E33', 'rec20', 'foot per thousand');
			INSERT INTO public.untdid_unit VALUES (510, 0, now(), NULL, 'opencell.admin', NULL, 'E34', 'rec20', 'gigabyte');
			INSERT INTO public.untdid_unit VALUES (511, 0, now(), NULL, 'opencell.admin', NULL, 'E35', 'rec20', 'terabyte');
			INSERT INTO public.untdid_unit VALUES (512, 0, now(), NULL, 'opencell.admin', NULL, 'E36', 'rec20', 'petabyte');
			INSERT INTO public.untdid_unit VALUES (513, 0, now(), NULL, 'opencell.admin', NULL, 'E37', 'rec20', 'pixel');
			INSERT INTO public.untdid_unit VALUES (514, 0, now(), NULL, 'opencell.admin', NULL, 'E38', 'rec20', 'megapixel');
			INSERT INTO public.untdid_unit VALUES (515, 0, now(), NULL, 'opencell.admin', NULL, 'E39', 'rec20', 'dots per inch');
			INSERT INTO public.untdid_unit VALUES (516, 0, now(), NULL, 'opencell.admin', NULL, 'E4', 'rec20', 'gross kilogram');
			INSERT INTO public.untdid_unit VALUES (517, 0, now(), NULL, 'opencell.admin', NULL, 'E40', 'rec20', 'part per hundred thousand');
			INSERT INTO public.untdid_unit VALUES (518, 0, now(), NULL, 'opencell.admin', NULL, 'E41', 'rec20', 'kilogram-force per square millimetre');
			INSERT INTO public.untdid_unit VALUES (519, 0, now(), NULL, 'opencell.admin', NULL, 'E42', 'rec20', 'kilogram-force per square centimetre');
			INSERT INTO public.untdid_unit VALUES (520, 0, now(), NULL, 'opencell.admin', NULL, 'E43', 'rec20', 'joule per square centimetre');
			INSERT INTO public.untdid_unit VALUES (521, 0, now(), NULL, 'opencell.admin', NULL, 'E44', 'rec20', 'kilogram-force metre per square centimetre');
			INSERT INTO public.untdid_unit VALUES (522, 0, now(), NULL, 'opencell.admin', NULL, 'E45', 'rec20', 'milliohm');
			INSERT INTO public.untdid_unit VALUES (523, 0, now(), NULL, 'opencell.admin', NULL, 'E46', 'rec20', 'kilowatt hour per cubic metre');
			INSERT INTO public.untdid_unit VALUES (524, 0, now(), NULL, 'opencell.admin', NULL, 'E47', 'rec20', 'kilowatt hour per kelvin');
			INSERT INTO public.untdid_unit VALUES (525, 0, now(), NULL, 'opencell.admin', NULL, 'E48', 'rec20', 'service unit');
			INSERT INTO public.untdid_unit VALUES (526, 0, now(), NULL, 'opencell.admin', NULL, 'E49', 'rec20', 'working day');
			INSERT INTO public.untdid_unit VALUES (527, 0, now(), NULL, 'opencell.admin', NULL, 'E50', 'rec20', 'accounting unit');
			INSERT INTO public.untdid_unit VALUES (528, 0, now(), NULL, 'opencell.admin', NULL, 'E51', 'rec20', 'job');
			INSERT INTO public.untdid_unit VALUES (529, 0, now(), NULL, 'opencell.admin', NULL, 'E52', 'rec20', 'run foot');
			INSERT INTO public.untdid_unit VALUES (530, 0, now(), NULL, 'opencell.admin', NULL, 'E53', 'rec20', 'test');
			INSERT INTO public.untdid_unit VALUES (531, 0, now(), NULL, 'opencell.admin', NULL, 'E54', 'rec20', 'trip');
			INSERT INTO public.untdid_unit VALUES (532, 0, now(), NULL, 'opencell.admin', NULL, 'E55', 'rec20', 'use');
			INSERT INTO public.untdid_unit VALUES (533, 0, now(), NULL, 'opencell.admin', NULL, 'E56', 'rec20', 'well');
			INSERT INTO public.untdid_unit VALUES (534, 0, now(), NULL, 'opencell.admin', NULL, 'E57', 'rec20', 'zone');
			INSERT INTO public.untdid_unit VALUES (535, 0, now(), NULL, 'opencell.admin', NULL, 'E58', 'rec20', 'exabit per second');
			INSERT INTO public.untdid_unit VALUES (536, 0, now(), NULL, 'opencell.admin', NULL, 'E59', 'rec20', 'exbibyte');
			INSERT INTO public.untdid_unit VALUES (537, 0, now(), NULL, 'opencell.admin', NULL, 'E60', 'rec20', 'pebibyte');
			INSERT INTO public.untdid_unit VALUES (538, 0, now(), NULL, 'opencell.admin', NULL, 'E61', 'rec20', 'tebibyte');
			INSERT INTO public.untdid_unit VALUES (539, 0, now(), NULL, 'opencell.admin', NULL, 'E62', 'rec20', 'gibibyte');
			INSERT INTO public.untdid_unit VALUES (540, 0, now(), NULL, 'opencell.admin', NULL, 'E63', 'rec20', 'mebibyte');
			INSERT INTO public.untdid_unit VALUES (541, 0, now(), NULL, 'opencell.admin', NULL, 'E64', 'rec20', 'kibibyte');
			INSERT INTO public.untdid_unit VALUES (542, 0, now(), NULL, 'opencell.admin', NULL, 'E65', 'rec20', 'exbibit per metre');
			INSERT INTO public.untdid_unit VALUES (543, 0, now(), NULL, 'opencell.admin', NULL, 'E66', 'rec20', 'exbibit per square metre');
			INSERT INTO public.untdid_unit VALUES (544, 0, now(), NULL, 'opencell.admin', NULL, 'E67', 'rec20', 'exbibit per cubic metre');
			INSERT INTO public.untdid_unit VALUES (545, 0, now(), NULL, 'opencell.admin', NULL, 'E68', 'rec20', 'gigabyte per second');
			INSERT INTO public.untdid_unit VALUES (546, 0, now(), NULL, 'opencell.admin', NULL, 'E69', 'rec20', 'gibibit per metre');
			INSERT INTO public.untdid_unit VALUES (547, 0, now(), NULL, 'opencell.admin', NULL, 'E70', 'rec20', 'gibibit per square metre');
			INSERT INTO public.untdid_unit VALUES (548, 0, now(), NULL, 'opencell.admin', NULL, 'E71', 'rec20', 'gibibit per cubic metre');
			INSERT INTO public.untdid_unit VALUES (549, 0, now(), NULL, 'opencell.admin', NULL, 'E72', 'rec20', 'kibibit per metre');
			INSERT INTO public.untdid_unit VALUES (550, 0, now(), NULL, 'opencell.admin', NULL, 'E73', 'rec20', 'kibibit per square metre');
			INSERT INTO public.untdid_unit VALUES (551, 0, now(), NULL, 'opencell.admin', NULL, 'E74', 'rec20', 'kibibit per cubic metre');
			INSERT INTO public.untdid_unit VALUES (552, 0, now(), NULL, 'opencell.admin', NULL, 'E75', 'rec20', 'mebibit per metre');
			INSERT INTO public.untdid_unit VALUES (553, 0, now(), NULL, 'opencell.admin', NULL, 'E76', 'rec20', 'mebibit per square metre');
			INSERT INTO public.untdid_unit VALUES (554, 0, now(), NULL, 'opencell.admin', NULL, 'E77', 'rec20', 'mebibit per cubic metre');
			INSERT INTO public.untdid_unit VALUES (555, 0, now(), NULL, 'opencell.admin', NULL, 'E78', 'rec20', 'petabit');
			INSERT INTO public.untdid_unit VALUES (556, 0, now(), NULL, 'opencell.admin', NULL, 'E79', 'rec20', 'petabit per second');
			INSERT INTO public.untdid_unit VALUES (557, 0, now(), NULL, 'opencell.admin', NULL, 'E80', 'rec20', 'pebibit per metre');
			INSERT INTO public.untdid_unit VALUES (558, 0, now(), NULL, 'opencell.admin', NULL, 'E81', 'rec20', 'pebibit per square metre');
			INSERT INTO public.untdid_unit VALUES (559, 0, now(), NULL, 'opencell.admin', NULL, 'E82', 'rec20', 'pebibit per cubic metre');
			INSERT INTO public.untdid_unit VALUES (560, 0, now(), NULL, 'opencell.admin', NULL, 'E83', 'rec20', 'terabit');
			INSERT INTO public.untdid_unit VALUES (561, 0, now(), NULL, 'opencell.admin', NULL, 'E84', 'rec20', 'terabit per second');
			INSERT INTO public.untdid_unit VALUES (562, 0, now(), NULL, 'opencell.admin', NULL, 'E85', 'rec20', 'tebibit per metre');
			INSERT INTO public.untdid_unit VALUES (563, 0, now(), NULL, 'opencell.admin', NULL, 'E86', 'rec20', 'tebibit per cubic metre');
			INSERT INTO public.untdid_unit VALUES (564, 0, now(), NULL, 'opencell.admin', NULL, 'E87', 'rec20', 'tebibit per square metre');
			INSERT INTO public.untdid_unit VALUES (565, 0, now(), NULL, 'opencell.admin', NULL, 'E88', 'rec20', 'bit per metre');
			INSERT INTO public.untdid_unit VALUES (566, 0, now(), NULL, 'opencell.admin', NULL, 'E89', 'rec20', 'bit per square metre');
			INSERT INTO public.untdid_unit VALUES (567, 0, now(), NULL, 'opencell.admin', NULL, 'E90', 'rec20', 'reciprocal centimetre');
			INSERT INTO public.untdid_unit VALUES (568, 0, now(), NULL, 'opencell.admin', NULL, 'E91', 'rec20', 'reciprocal day');
			INSERT INTO public.untdid_unit VALUES (569, 0, now(), NULL, 'opencell.admin', NULL, 'E92', 'rec20', 'cubic decimetre per hour');
			INSERT INTO public.untdid_unit VALUES (570, 0, now(), NULL, 'opencell.admin', NULL, 'E93', 'rec20', 'kilogram per hour');
			INSERT INTO public.untdid_unit VALUES (571, 0, now(), NULL, 'opencell.admin', NULL, 'E94', 'rec20', 'kilomole per second');
			INSERT INTO public.untdid_unit VALUES (572, 0, now(), NULL, 'opencell.admin', NULL, 'E95', 'rec20', 'mole per second');
			INSERT INTO public.untdid_unit VALUES (573, 0, now(), NULL, 'opencell.admin', NULL, 'E96', 'rec20', 'degree per second');
			INSERT INTO public.untdid_unit VALUES (574, 0, now(), NULL, 'opencell.admin', NULL, 'E97', 'rec20', 'millimetre per degree Celcius metre');
			INSERT INTO public.untdid_unit VALUES (575, 0, now(), NULL, 'opencell.admin', NULL, 'E98', 'rec20', 'degree Celsius per kelvin');
			INSERT INTO public.untdid_unit VALUES (576, 0, now(), NULL, 'opencell.admin', NULL, 'E99', 'rec20', 'hectopascal per bar');
			INSERT INTO public.untdid_unit VALUES (577, 0, now(), NULL, 'opencell.admin', NULL, 'EA', 'rec20', 'each');
			INSERT INTO public.untdid_unit VALUES (578, 0, now(), NULL, 'opencell.admin', NULL, 'EB', 'rec20', 'electronic mail box');
			INSERT INTO public.untdid_unit VALUES (579, 0, now(), NULL, 'opencell.admin', NULL, 'EQ', 'rec20', 'equivalent gallon');
			INSERT INTO public.untdid_unit VALUES (580, 0, now(), NULL, 'opencell.admin', NULL, 'F01', 'rec20', 'bit per cubic metre');
			INSERT INTO public.untdid_unit VALUES (581, 0, now(), NULL, 'opencell.admin', NULL, 'F02', 'rec20', 'kelvin per kelvin');
			INSERT INTO public.untdid_unit VALUES (582, 0, now(), NULL, 'opencell.admin', NULL, 'F03', 'rec20', 'kilopascal per bar');
			INSERT INTO public.untdid_unit VALUES (583, 0, now(), NULL, 'opencell.admin', NULL, 'F04', 'rec20', 'millibar per bar');
			INSERT INTO public.untdid_unit VALUES (584, 0, now(), NULL, 'opencell.admin', NULL, 'F05', 'rec20', 'megapascal per bar');
			INSERT INTO public.untdid_unit VALUES (585, 0, now(), NULL, 'opencell.admin', NULL, 'F06', 'rec20', 'poise per bar');
			INSERT INTO public.untdid_unit VALUES (586, 0, now(), NULL, 'opencell.admin', NULL, 'F07', 'rec20', 'pascal per bar');
			INSERT INTO public.untdid_unit VALUES (587, 0, now(), NULL, 'opencell.admin', NULL, 'F08', 'rec20', 'milliampere per inch');
			INSERT INTO public.untdid_unit VALUES (588, 0, now(), NULL, 'opencell.admin', NULL, 'F10', 'rec20', 'kelvin per hour');
			INSERT INTO public.untdid_unit VALUES (589, 0, now(), NULL, 'opencell.admin', NULL, 'F11', 'rec20', 'kelvin per minute');
			INSERT INTO public.untdid_unit VALUES (590, 0, now(), NULL, 'opencell.admin', NULL, 'F12', 'rec20', 'kelvin per second');
			INSERT INTO public.untdid_unit VALUES (591, 0, now(), NULL, 'opencell.admin', NULL, 'F13', 'rec20', 'slug');
			INSERT INTO public.untdid_unit VALUES (592, 0, now(), NULL, 'opencell.admin', NULL, 'F14', 'rec20', 'gram per kelvin');
			INSERT INTO public.untdid_unit VALUES (593, 0, now(), NULL, 'opencell.admin', NULL, 'F15', 'rec20', 'kilogram per kelvin');
			INSERT INTO public.untdid_unit VALUES (594, 0, now(), NULL, 'opencell.admin', NULL, 'F16', 'rec20', 'milligram per kelvin');
			INSERT INTO public.untdid_unit VALUES (595, 0, now(), NULL, 'opencell.admin', NULL, 'F17', 'rec20', 'pound-force per foot');
			INSERT INTO public.untdid_unit VALUES (596, 0, now(), NULL, 'opencell.admin', NULL, 'F18', 'rec20', 'kilogram square centimetre');
			INSERT INTO public.untdid_unit VALUES (597, 0, now(), NULL, 'opencell.admin', NULL, 'F19', 'rec20', 'kilogram square millimetre');
			INSERT INTO public.untdid_unit VALUES (598, 0, now(), NULL, 'opencell.admin', NULL, 'F20', 'rec20', 'pound inch squared');
			INSERT INTO public.untdid_unit VALUES (599, 0, now(), NULL, 'opencell.admin', NULL, 'F21', 'rec20', 'pound-force inch');
			INSERT INTO public.untdid_unit VALUES (600, 0, now(), NULL, 'opencell.admin', NULL, 'F22', 'rec20', 'pound-force foot per ampere');
			INSERT INTO public.untdid_unit VALUES (601, 0, now(), NULL, 'opencell.admin', NULL, 'F23', 'rec20', 'gram per cubic decimetre');
			INSERT INTO public.untdid_unit VALUES (602, 0, now(), NULL, 'opencell.admin', NULL, 'F24', 'rec20', 'kilogram per kilomol');
			INSERT INTO public.untdid_unit VALUES (603, 0, now(), NULL, 'opencell.admin', NULL, 'F25', 'rec20', 'gram per hertz');
			INSERT INTO public.untdid_unit VALUES (604, 0, now(), NULL, 'opencell.admin', NULL, 'F26', 'rec20', 'gram per day');
			INSERT INTO public.untdid_unit VALUES (605, 0, now(), NULL, 'opencell.admin', NULL, 'F27', 'rec20', 'gram per hour');
			INSERT INTO public.untdid_unit VALUES (606, 0, now(), NULL, 'opencell.admin', NULL, 'F28', 'rec20', 'gram per minute');
			INSERT INTO public.untdid_unit VALUES (607, 0, now(), NULL, 'opencell.admin', NULL, 'F29', 'rec20', 'gram per second');
			INSERT INTO public.untdid_unit VALUES (608, 0, now(), NULL, 'opencell.admin', NULL, 'F30', 'rec20', 'kilogram per day');
			INSERT INTO public.untdid_unit VALUES (609, 0, now(), NULL, 'opencell.admin', NULL, 'F31', 'rec20', 'kilogram per minute');
			INSERT INTO public.untdid_unit VALUES (610, 0, now(), NULL, 'opencell.admin', NULL, 'F32', 'rec20', 'milligram per day');
			INSERT INTO public.untdid_unit VALUES (611, 0, now(), NULL, 'opencell.admin', NULL, 'F33', 'rec20', 'milligram per minute');
			INSERT INTO public.untdid_unit VALUES (612, 0, now(), NULL, 'opencell.admin', NULL, 'F34', 'rec20', 'milligram per second');
			INSERT INTO public.untdid_unit VALUES (613, 0, now(), NULL, 'opencell.admin', NULL, 'F35', 'rec20', 'gram per day kelvin');
			INSERT INTO public.untdid_unit VALUES (614, 0, now(), NULL, 'opencell.admin', NULL, 'F36', 'rec20', 'gram per hour kelvin');
			INSERT INTO public.untdid_unit VALUES (615, 0, now(), NULL, 'opencell.admin', NULL, 'F37', 'rec20', 'gram per minute kelvin');
			INSERT INTO public.untdid_unit VALUES (616, 0, now(), NULL, 'opencell.admin', NULL, 'F38', 'rec20', 'gram per second kelvin');
			INSERT INTO public.untdid_unit VALUES (617, 0, now(), NULL, 'opencell.admin', NULL, 'F39', 'rec20', 'kilogram per day kelvin');
			INSERT INTO public.untdid_unit VALUES (618, 0, now(), NULL, 'opencell.admin', NULL, 'F40', 'rec20', 'kilogram per hour kelvin');
			INSERT INTO public.untdid_unit VALUES (619, 0, now(), NULL, 'opencell.admin', NULL, 'F41', 'rec20', 'kilogram per minute kelvin');
			INSERT INTO public.untdid_unit VALUES (620, 0, now(), NULL, 'opencell.admin', NULL, 'F42', 'rec20', 'kilogram per second kelvin');
			INSERT INTO public.untdid_unit VALUES (621, 0, now(), NULL, 'opencell.admin', NULL, 'F43', 'rec20', 'milligram per day kelvin');
			INSERT INTO public.untdid_unit VALUES (622, 0, now(), NULL, 'opencell.admin', NULL, 'F44', 'rec20', 'milligram per hour kelvin');
			INSERT INTO public.untdid_unit VALUES (623, 0, now(), NULL, 'opencell.admin', NULL, 'F45', 'rec20', 'milligram per minute kelvin');
			INSERT INTO public.untdid_unit VALUES (624, 0, now(), NULL, 'opencell.admin', NULL, 'F46', 'rec20', 'milligram per second kelvin');
			INSERT INTO public.untdid_unit VALUES (625, 0, now(), NULL, 'opencell.admin', NULL, 'F47', 'rec20', 'newton per millimetre');
			INSERT INTO public.untdid_unit VALUES (626, 0, now(), NULL, 'opencell.admin', NULL, 'F48', 'rec20', 'pound-force per inch');
			INSERT INTO public.untdid_unit VALUES (627, 0, now(), NULL, 'opencell.admin', NULL, 'F49', 'rec20', 'rod [unit of distance]');
			INSERT INTO public.untdid_unit VALUES (628, 0, now(), NULL, 'opencell.admin', NULL, 'F50', 'rec20', 'micrometre per kelvin');
			INSERT INTO public.untdid_unit VALUES (629, 0, now(), NULL, 'opencell.admin', NULL, 'F51', 'rec20', 'centimetre per kelvin');
			INSERT INTO public.untdid_unit VALUES (630, 0, now(), NULL, 'opencell.admin', NULL, 'F52', 'rec20', 'metre per kelvin');
			INSERT INTO public.untdid_unit VALUES (631, 0, now(), NULL, 'opencell.admin', NULL, 'F53', 'rec20', 'millimetre per kelvin');
			INSERT INTO public.untdid_unit VALUES (632, 0, now(), NULL, 'opencell.admin', NULL, 'F54', 'rec20', 'milliohm per metre');
			INSERT INTO public.untdid_unit VALUES (633, 0, now(), NULL, 'opencell.admin', NULL, 'F55', 'rec20', 'ohm per mile (statute mile)');
			INSERT INTO public.untdid_unit VALUES (634, 0, now(), NULL, 'opencell.admin', NULL, 'F56', 'rec20', 'ohm per kilometre');
			INSERT INTO public.untdid_unit VALUES (635, 0, now(), NULL, 'opencell.admin', NULL, 'F57', 'rec20', 'milliampere per pound-force per square inch');
			INSERT INTO public.untdid_unit VALUES (636, 0, now(), NULL, 'opencell.admin', NULL, 'F58', 'rec20', 'reciprocal bar');
			INSERT INTO public.untdid_unit VALUES (637, 0, now(), NULL, 'opencell.admin', NULL, 'F59', 'rec20', 'milliampere per bar');
			INSERT INTO public.untdid_unit VALUES (638, 0, now(), NULL, 'opencell.admin', NULL, 'F60', 'rec20', 'degree Celsius per bar');
			INSERT INTO public.untdid_unit VALUES (639, 0, now(), NULL, 'opencell.admin', NULL, 'F61', 'rec20', 'kelvin per bar');
			INSERT INTO public.untdid_unit VALUES (640, 0, now(), NULL, 'opencell.admin', NULL, 'F62', 'rec20', 'gram per day bar');
			INSERT INTO public.untdid_unit VALUES (641, 0, now(), NULL, 'opencell.admin', NULL, 'F63', 'rec20', 'gram per hour bar');
			INSERT INTO public.untdid_unit VALUES (642, 0, now(), NULL, 'opencell.admin', NULL, 'F64', 'rec20', 'gram per minute bar');
			INSERT INTO public.untdid_unit VALUES (643, 0, now(), NULL, 'opencell.admin', NULL, 'F65', 'rec20', 'gram per second bar');
			INSERT INTO public.untdid_unit VALUES (644, 0, now(), NULL, 'opencell.admin', NULL, 'F66', 'rec20', 'kilogram per day bar');
			INSERT INTO public.untdid_unit VALUES (645, 0, now(), NULL, 'opencell.admin', NULL, 'F67', 'rec20', 'kilogram per hour bar');
			INSERT INTO public.untdid_unit VALUES (646, 0, now(), NULL, 'opencell.admin', NULL, 'F68', 'rec20', 'kilogram per minute bar');
			INSERT INTO public.untdid_unit VALUES (647, 0, now(), NULL, 'opencell.admin', NULL, 'F69', 'rec20', 'kilogram per second bar');
			INSERT INTO public.untdid_unit VALUES (648, 0, now(), NULL, 'opencell.admin', NULL, 'F70', 'rec20', 'milligram per day bar');
			INSERT INTO public.untdid_unit VALUES (649, 0, now(), NULL, 'opencell.admin', NULL, 'F71', 'rec20', 'milligram per hour bar');
			INSERT INTO public.untdid_unit VALUES (650, 0, now(), NULL, 'opencell.admin', NULL, 'F72', 'rec20', 'milligram per minute bar');
			INSERT INTO public.untdid_unit VALUES (651, 0, now(), NULL, 'opencell.admin', NULL, 'F73', 'rec20', 'milligram per second bar');
			INSERT INTO public.untdid_unit VALUES (652, 0, now(), NULL, 'opencell.admin', NULL, 'F74', 'rec20', 'gram per bar');
			INSERT INTO public.untdid_unit VALUES (653, 0, now(), NULL, 'opencell.admin', NULL, 'F75', 'rec20', 'milligram per bar');
			INSERT INTO public.untdid_unit VALUES (654, 0, now(), NULL, 'opencell.admin', NULL, 'F76', 'rec20', 'milliampere per millimetre');
			INSERT INTO public.untdid_unit VALUES (655, 0, now(), NULL, 'opencell.admin', NULL, 'F77', 'rec20', 'pascal second per kelvin');
			INSERT INTO public.untdid_unit VALUES (656, 0, now(), NULL, 'opencell.admin', NULL, 'F78', 'rec20', 'inch of water');
			INSERT INTO public.untdid_unit VALUES (657, 0, now(), NULL, 'opencell.admin', NULL, 'F79', 'rec20', 'inch of mercury');
			INSERT INTO public.untdid_unit VALUES (658, 0, now(), NULL, 'opencell.admin', NULL, 'F80', 'rec20', 'water horse power');
			INSERT INTO public.untdid_unit VALUES (659, 0, now(), NULL, 'opencell.admin', NULL, 'F81', 'rec20', 'bar per kelvin');
			INSERT INTO public.untdid_unit VALUES (660, 0, now(), NULL, 'opencell.admin', NULL, 'F82', 'rec20', 'hectopascal per kelvin');
			INSERT INTO public.untdid_unit VALUES (661, 0, now(), NULL, 'opencell.admin', NULL, 'F83', 'rec20', 'kilopascal per kelvin');
			INSERT INTO public.untdid_unit VALUES (662, 0, now(), NULL, 'opencell.admin', NULL, 'F84', 'rec20', 'millibar per kelvin');
			INSERT INTO public.untdid_unit VALUES (663, 0, now(), NULL, 'opencell.admin', NULL, 'F85', 'rec20', 'megapascal per kelvin');
			INSERT INTO public.untdid_unit VALUES (664, 0, now(), NULL, 'opencell.admin', NULL, 'F86', 'rec20', 'poise per kelvin');
			INSERT INTO public.untdid_unit VALUES (665, 0, now(), NULL, 'opencell.admin', NULL, 'F87', 'rec20', 'volt per litre minute');
			INSERT INTO public.untdid_unit VALUES (666, 0, now(), NULL, 'opencell.admin', NULL, 'F88', 'rec20', 'newton centimetre');
			INSERT INTO public.untdid_unit VALUES (667, 0, now(), NULL, 'opencell.admin', NULL, 'F89', 'rec20', 'newton metre per degree');
			INSERT INTO public.untdid_unit VALUES (668, 0, now(), NULL, 'opencell.admin', NULL, 'F90', 'rec20', 'newton metre per ampere');
			INSERT INTO public.untdid_unit VALUES (669, 0, now(), NULL, 'opencell.admin', NULL, 'F91', 'rec20', 'bar litre per second');
			INSERT INTO public.untdid_unit VALUES (670, 0, now(), NULL, 'opencell.admin', NULL, 'F92', 'rec20', 'bar cubic metre per second');
			INSERT INTO public.untdid_unit VALUES (671, 0, now(), NULL, 'opencell.admin', NULL, 'F93', 'rec20', 'hectopascal litre per second');
			INSERT INTO public.untdid_unit VALUES (672, 0, now(), NULL, 'opencell.admin', NULL, 'F94', 'rec20', 'hectopascal cubic metre per second');
			INSERT INTO public.untdid_unit VALUES (673, 0, now(), NULL, 'opencell.admin', NULL, 'F95', 'rec20', 'millibar litre per second');
			INSERT INTO public.untdid_unit VALUES (674, 0, now(), NULL, 'opencell.admin', NULL, 'F96', 'rec20', 'millibar cubic metre per second');
			INSERT INTO public.untdid_unit VALUES (675, 0, now(), NULL, 'opencell.admin', NULL, 'F97', 'rec20', 'megapascal litre per second');
			INSERT INTO public.untdid_unit VALUES (676, 0, now(), NULL, 'opencell.admin', NULL, 'F98', 'rec20', 'megapascal cubic metre per second');
			INSERT INTO public.untdid_unit VALUES (677, 0, now(), NULL, 'opencell.admin', NULL, 'F99', 'rec20', 'pascal litre per second');
			INSERT INTO public.untdid_unit VALUES (678, 0, now(), NULL, 'opencell.admin', NULL, 'FAH', 'rec20', 'degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (679, 0, now(), NULL, 'opencell.admin', NULL, 'FAR', 'rec20', 'farad');
			INSERT INTO public.untdid_unit VALUES (680, 0, now(), NULL, 'opencell.admin', NULL, 'FBM', 'rec20', 'fibre metre');
			INSERT INTO public.untdid_unit VALUES (681, 0, now(), NULL, 'opencell.admin', NULL, 'FC', 'rec20', 'thousand cubic foot');
			INSERT INTO public.untdid_unit VALUES (682, 0, now(), NULL, 'opencell.admin', NULL, 'FF', 'rec20', 'hundred cubic metre');
			INSERT INTO public.untdid_unit VALUES (683, 0, now(), NULL, 'opencell.admin', NULL, 'FH', 'rec20', 'micromole');
			INSERT INTO public.untdid_unit VALUES (684, 0, now(), NULL, 'opencell.admin', NULL, 'FIT', 'rec20', 'failures in time');
			INSERT INTO public.untdid_unit VALUES (685, 0, now(), NULL, 'opencell.admin', NULL, 'FL', 'rec20', 'flake ton');
			INSERT INTO public.untdid_unit VALUES (686, 0, now(), NULL, 'opencell.admin', NULL, 'FNU', 'Rec20', 'Formazin nephelometric unit');
			INSERT INTO public.untdid_unit VALUES (687, 0, now(), NULL, 'opencell.admin', NULL, 'FOT', 'rec20', 'foot');
			INSERT INTO public.untdid_unit VALUES (688, 0, now(), NULL, 'opencell.admin', NULL, 'FP', 'rec20', 'pound per square foot');
			INSERT INTO public.untdid_unit VALUES (689, 0, now(), NULL, 'opencell.admin', NULL, 'FR', 'rec20', 'foot per minute');
			INSERT INTO public.untdid_unit VALUES (690, 0, now(), NULL, 'opencell.admin', NULL, 'FS', 'rec20', 'foot per second');
			INSERT INTO public.untdid_unit VALUES (691, 0, now(), NULL, 'opencell.admin', NULL, 'FTK', 'rec20', 'square foot');
			INSERT INTO public.untdid_unit VALUES (692, 0, now(), NULL, 'opencell.admin', NULL, 'FTQ', 'rec20', 'cubic foot');
			INSERT INTO public.untdid_unit VALUES (693, 0, now(), NULL, 'opencell.admin', NULL, 'G01', 'rec20', 'pascal cubic metre per second');
			INSERT INTO public.untdid_unit VALUES (694, 0, now(), NULL, 'opencell.admin', NULL, 'G04', 'rec20', 'centimetre per bar');
			INSERT INTO public.untdid_unit VALUES (695, 0, now(), NULL, 'opencell.admin', NULL, 'G05', 'rec20', 'metre per bar');
			INSERT INTO public.untdid_unit VALUES (696, 0, now(), NULL, 'opencell.admin', NULL, 'G06', 'rec20', 'millimetre per bar');
			INSERT INTO public.untdid_unit VALUES (697, 0, now(), NULL, 'opencell.admin', NULL, 'G08', 'rec20', 'square inch per second');
			INSERT INTO public.untdid_unit VALUES (698, 0, now(), NULL, 'opencell.admin', NULL, 'G09', 'rec20', 'square metre per second kelvin');
			INSERT INTO public.untdid_unit VALUES (699, 0, now(), NULL, 'opencell.admin', NULL, 'G10', 'rec20', 'stokes per kelvin');
			INSERT INTO public.untdid_unit VALUES (700, 0, now(), NULL, 'opencell.admin', NULL, 'G11', 'rec20', 'gram per cubic centimetre bar');
			INSERT INTO public.untdid_unit VALUES (701, 0, now(), NULL, 'opencell.admin', NULL, 'G12', 'rec20', 'gram per cubic decimetre bar');
			INSERT INTO public.untdid_unit VALUES (702, 0, now(), NULL, 'opencell.admin', NULL, 'G13', 'rec20', 'gram per litre bar');
			INSERT INTO public.untdid_unit VALUES (703, 0, now(), NULL, 'opencell.admin', NULL, 'G14', 'rec20', 'gram per cubic metre bar');
			INSERT INTO public.untdid_unit VALUES (704, 0, now(), NULL, 'opencell.admin', NULL, 'G15', 'rec20', 'gram per millilitre bar');
			INSERT INTO public.untdid_unit VALUES (705, 0, now(), NULL, 'opencell.admin', NULL, 'G16', 'rec20', 'kilogram per cubic centimetre bar');
			INSERT INTO public.untdid_unit VALUES (706, 0, now(), NULL, 'opencell.admin', NULL, 'G17', 'rec20', 'kilogram per litre bar');
			INSERT INTO public.untdid_unit VALUES (707, 0, now(), NULL, 'opencell.admin', NULL, 'G18', 'rec20', 'kilogram per cubic metre bar');
			INSERT INTO public.untdid_unit VALUES (708, 0, now(), NULL, 'opencell.admin', NULL, 'G19', 'rec20', 'newton metre per kilogram');
			INSERT INTO public.untdid_unit VALUES (709, 0, now(), NULL, 'opencell.admin', NULL, 'G2', 'rec20', 'US gallon per minute');
			INSERT INTO public.untdid_unit VALUES (710, 0, now(), NULL, 'opencell.admin', NULL, 'G20', 'rec20', 'pound-force foot per pound');
			INSERT INTO public.untdid_unit VALUES (711, 0, now(), NULL, 'opencell.admin', NULL, 'G21', 'rec20', 'cup [unit of volume]');
			INSERT INTO public.untdid_unit VALUES (712, 0, now(), NULL, 'opencell.admin', NULL, 'G23', 'rec20', 'peck');
			INSERT INTO public.untdid_unit VALUES (713, 0, now(), NULL, 'opencell.admin', NULL, 'G24', 'rec20', 'tablespoon (US)');
			INSERT INTO public.untdid_unit VALUES (714, 0, now(), NULL, 'opencell.admin', NULL, 'G25', 'rec20', 'teaspoon (US)');
			INSERT INTO public.untdid_unit VALUES (715, 0, now(), NULL, 'opencell.admin', NULL, 'G26', 'rec20', 'stere');
			INSERT INTO public.untdid_unit VALUES (716, 0, now(), NULL, 'opencell.admin', NULL, 'G27', 'rec20', 'cubic centimetre per kelvin');
			INSERT INTO public.untdid_unit VALUES (717, 0, now(), NULL, 'opencell.admin', NULL, 'G28', 'rec20', 'litre per kelvin');
			INSERT INTO public.untdid_unit VALUES (718, 0, now(), NULL, 'opencell.admin', NULL, 'G29', 'rec20', 'cubic metre per kelvin');
			INSERT INTO public.untdid_unit VALUES (719, 0, now(), NULL, 'opencell.admin', NULL, 'G3', 'rec20', 'Imperial gallon per minute');
			INSERT INTO public.untdid_unit VALUES (720, 0, now(), NULL, 'opencell.admin', NULL, 'G30', 'rec20', 'millilitre per kelvin');
			INSERT INTO public.untdid_unit VALUES (721, 0, now(), NULL, 'opencell.admin', NULL, 'G31', 'rec20', 'kilogram per cubic centimetre');
			INSERT INTO public.untdid_unit VALUES (722, 0, now(), NULL, 'opencell.admin', NULL, 'G32', 'rec20', 'ounce (avoirdupois) per cubic yard');
			INSERT INTO public.untdid_unit VALUES (723, 0, now(), NULL, 'opencell.admin', NULL, 'G33', 'rec20', 'gram per cubic centimetre kelvin');
			INSERT INTO public.untdid_unit VALUES (724, 0, now(), NULL, 'opencell.admin', NULL, 'G34', 'rec20', 'gram per cubic decimetre kelvin');
			INSERT INTO public.untdid_unit VALUES (725, 0, now(), NULL, 'opencell.admin', NULL, 'G35', 'rec20', 'gram per litre kelvin');
			INSERT INTO public.untdid_unit VALUES (726, 0, now(), NULL, 'opencell.admin', NULL, 'G36', 'rec20', 'gram per cubic metre kelvin');
			INSERT INTO public.untdid_unit VALUES (727, 0, now(), NULL, 'opencell.admin', NULL, 'G37', 'rec20', 'gram per millilitre kelvin');
			INSERT INTO public.untdid_unit VALUES (728, 0, now(), NULL, 'opencell.admin', NULL, 'G38', 'rec20', 'kilogram per cubic centimetre kelvin');
			INSERT INTO public.untdid_unit VALUES (729, 0, now(), NULL, 'opencell.admin', NULL, 'G39', 'rec20', 'kilogram per litre kelvin');
			INSERT INTO public.untdid_unit VALUES (730, 0, now(), NULL, 'opencell.admin', NULL, 'G40', 'rec20', 'kilogram per cubic metre kelvin');
			INSERT INTO public.untdid_unit VALUES (731, 0, now(), NULL, 'opencell.admin', NULL, 'G41', 'rec20', 'square metre per second bar');
			INSERT INTO public.untdid_unit VALUES (732, 0, now(), NULL, 'opencell.admin', NULL, 'G42', 'rec20', 'microsiemens per centimetre');
			INSERT INTO public.untdid_unit VALUES (733, 0, now(), NULL, 'opencell.admin', NULL, 'G43', 'rec20', 'microsiemens per metre');
			INSERT INTO public.untdid_unit VALUES (734, 0, now(), NULL, 'opencell.admin', NULL, 'G44', 'rec20', 'nanosiemens per centimetre');
			INSERT INTO public.untdid_unit VALUES (735, 0, now(), NULL, 'opencell.admin', NULL, 'G45', 'rec20', 'nanosiemens per metre');
			INSERT INTO public.untdid_unit VALUES (736, 0, now(), NULL, 'opencell.admin', NULL, 'G46', 'rec20', 'stokes per bar');
			INSERT INTO public.untdid_unit VALUES (737, 0, now(), NULL, 'opencell.admin', NULL, 'G47', 'rec20', 'cubic centimetre per day');
			INSERT INTO public.untdid_unit VALUES (738, 0, now(), NULL, 'opencell.admin', NULL, 'G48', 'rec20', 'cubic centimetre per hour');
			INSERT INTO public.untdid_unit VALUES (739, 0, now(), NULL, 'opencell.admin', NULL, 'G49', 'rec20', 'cubic centimetre per minute');
			INSERT INTO public.untdid_unit VALUES (740, 0, now(), NULL, 'opencell.admin', NULL, 'G50', 'rec20', 'gallon (US) per hour');
			INSERT INTO public.untdid_unit VALUES (741, 0, now(), NULL, 'opencell.admin', NULL, 'G51', 'rec20', 'litre per second');
			INSERT INTO public.untdid_unit VALUES (742, 0, now(), NULL, 'opencell.admin', NULL, 'G52', 'rec20', 'cubic metre per day');
			INSERT INTO public.untdid_unit VALUES (743, 0, now(), NULL, 'opencell.admin', NULL, 'G53', 'rec20', 'cubic metre per minute');
			INSERT INTO public.untdid_unit VALUES (744, 0, now(), NULL, 'opencell.admin', NULL, 'G54', 'rec20', 'millilitre per day');
			INSERT INTO public.untdid_unit VALUES (745, 0, now(), NULL, 'opencell.admin', NULL, 'G55', 'rec20', 'millilitre per hour');
			INSERT INTO public.untdid_unit VALUES (746, 0, now(), NULL, 'opencell.admin', NULL, 'G56', 'rec20', 'cubic inch per hour');
			INSERT INTO public.untdid_unit VALUES (747, 0, now(), NULL, 'opencell.admin', NULL, 'G57', 'rec20', 'cubic inch per minute');
			INSERT INTO public.untdid_unit VALUES (748, 0, now(), NULL, 'opencell.admin', NULL, 'G58', 'rec20', 'cubic inch per second');
			INSERT INTO public.untdid_unit VALUES (749, 0, now(), NULL, 'opencell.admin', NULL, 'G59', 'rec20', 'milliampere per litre minute');
			INSERT INTO public.untdid_unit VALUES (750, 0, now(), NULL, 'opencell.admin', NULL, 'G60', 'rec20', 'volt per bar');
			INSERT INTO public.untdid_unit VALUES (751, 0, now(), NULL, 'opencell.admin', NULL, 'G61', 'rec20', 'cubic centimetre per day kelvin');
			INSERT INTO public.untdid_unit VALUES (752, 0, now(), NULL, 'opencell.admin', NULL, 'G62', 'rec20', 'cubic centimetre per hour kelvin');
			INSERT INTO public.untdid_unit VALUES (753, 0, now(), NULL, 'opencell.admin', NULL, 'G63', 'rec20', 'cubic centimetre per minute kelvin');
			INSERT INTO public.untdid_unit VALUES (754, 0, now(), NULL, 'opencell.admin', NULL, 'G64', 'rec20', 'cubic centimetre per second kelvin');
			INSERT INTO public.untdid_unit VALUES (755, 0, now(), NULL, 'opencell.admin', NULL, 'G65', 'rec20', 'litre per day kelvin');
			INSERT INTO public.untdid_unit VALUES (756, 0, now(), NULL, 'opencell.admin', NULL, 'G66', 'rec20', 'litre per hour kelvin');
			INSERT INTO public.untdid_unit VALUES (757, 0, now(), NULL, 'opencell.admin', NULL, 'G67', 'rec20', 'litre per minute kelvin');
			INSERT INTO public.untdid_unit VALUES (758, 0, now(), NULL, 'opencell.admin', NULL, 'G68', 'rec20', 'litre per second kelvin');
			INSERT INTO public.untdid_unit VALUES (759, 0, now(), NULL, 'opencell.admin', NULL, 'G69', 'rec20', 'cubic metre per day kelvin');
			INSERT INTO public.untdid_unit VALUES (760, 0, now(), NULL, 'opencell.admin', NULL, 'G70', 'rec20', 'cubic metre per hour kelvin');
			INSERT INTO public.untdid_unit VALUES (761, 0, now(), NULL, 'opencell.admin', NULL, 'G71', 'rec20', 'cubic metre per minute kelvin');
			INSERT INTO public.untdid_unit VALUES (762, 0, now(), NULL, 'opencell.admin', NULL, 'G72', 'rec20', 'cubic metre per second kelvin');
			INSERT INTO public.untdid_unit VALUES (763, 0, now(), NULL, 'opencell.admin', NULL, 'G73', 'rec20', 'millilitre per day kelvin');
			INSERT INTO public.untdid_unit VALUES (764, 0, now(), NULL, 'opencell.admin', NULL, 'G74', 'rec20', 'millilitre per hour kelvin');
			INSERT INTO public.untdid_unit VALUES (765, 0, now(), NULL, 'opencell.admin', NULL, 'G75', 'rec20', 'millilitre per minute kelvin');
			INSERT INTO public.untdid_unit VALUES (766, 0, now(), NULL, 'opencell.admin', NULL, 'G76', 'rec20', 'millilitre per second kelvin');
			INSERT INTO public.untdid_unit VALUES (767, 0, now(), NULL, 'opencell.admin', NULL, 'G77', 'rec20', 'millimetre to the fourth power');
			INSERT INTO public.untdid_unit VALUES (768, 0, now(), NULL, 'opencell.admin', NULL, 'G78', 'rec20', 'cubic centimetre per day bar');
			INSERT INTO public.untdid_unit VALUES (769, 0, now(), NULL, 'opencell.admin', NULL, 'G79', 'rec20', 'cubic centimetre per hour bar');
			INSERT INTO public.untdid_unit VALUES (770, 0, now(), NULL, 'opencell.admin', NULL, 'G80', 'rec20', 'cubic centimetre per minute bar');
			INSERT INTO public.untdid_unit VALUES (771, 0, now(), NULL, 'opencell.admin', NULL, 'G81', 'rec20', 'cubic centimetre per second bar');
			INSERT INTO public.untdid_unit VALUES (772, 0, now(), NULL, 'opencell.admin', NULL, 'G82', 'rec20', 'litre per day bar');
			INSERT INTO public.untdid_unit VALUES (773, 0, now(), NULL, 'opencell.admin', NULL, 'G83', 'rec20', 'litre per hour bar');
			INSERT INTO public.untdid_unit VALUES (774, 0, now(), NULL, 'opencell.admin', NULL, 'G84', 'rec20', 'litre per minute bar');
			INSERT INTO public.untdid_unit VALUES (775, 0, now(), NULL, 'opencell.admin', NULL, 'G85', 'rec20', 'litre per second bar');
			INSERT INTO public.untdid_unit VALUES (776, 0, now(), NULL, 'opencell.admin', NULL, 'G86', 'rec20', 'cubic metre per day bar');
			INSERT INTO public.untdid_unit VALUES (777, 0, now(), NULL, 'opencell.admin', NULL, 'G87', 'rec20', 'cubic metre per hour bar');
			INSERT INTO public.untdid_unit VALUES (778, 0, now(), NULL, 'opencell.admin', NULL, 'G88', 'rec20', 'cubic metre per minute bar');
			INSERT INTO public.untdid_unit VALUES (779, 0, now(), NULL, 'opencell.admin', NULL, 'G89', 'rec20', 'cubic metre per second bar');
			INSERT INTO public.untdid_unit VALUES (780, 0, now(), NULL, 'opencell.admin', NULL, 'G90', 'rec20', 'millilitre per day bar');
			INSERT INTO public.untdid_unit VALUES (781, 0, now(), NULL, 'opencell.admin', NULL, 'G91', 'rec20', 'millilitre per hour bar');
			INSERT INTO public.untdid_unit VALUES (782, 0, now(), NULL, 'opencell.admin', NULL, 'G92', 'rec20', 'millilitre per minute bar');
			INSERT INTO public.untdid_unit VALUES (783, 0, now(), NULL, 'opencell.admin', NULL, 'G93', 'rec20', 'millilitre per second bar');
			INSERT INTO public.untdid_unit VALUES (784, 0, now(), NULL, 'opencell.admin', NULL, 'G94', 'rec20', 'cubic centimetre per bar');
			INSERT INTO public.untdid_unit VALUES (785, 0, now(), NULL, 'opencell.admin', NULL, 'G95', 'rec20', 'litre per bar');
			INSERT INTO public.untdid_unit VALUES (786, 0, now(), NULL, 'opencell.admin', NULL, 'G96', 'rec20', 'cubic metre per bar');
			INSERT INTO public.untdid_unit VALUES (787, 0, now(), NULL, 'opencell.admin', NULL, 'G97', 'rec20', 'millilitre per bar');
			INSERT INTO public.untdid_unit VALUES (788, 0, now(), NULL, 'opencell.admin', NULL, 'G98', 'rec20', 'microhenry per kiloohm');
			INSERT INTO public.untdid_unit VALUES (789, 0, now(), NULL, 'opencell.admin', NULL, 'G99', 'rec20', 'microhenry per ohm');
			INSERT INTO public.untdid_unit VALUES (790, 0, now(), NULL, 'opencell.admin', NULL, 'GB', 'rec20', 'gallon (US) per day');
			INSERT INTO public.untdid_unit VALUES (791, 0, now(), NULL, 'opencell.admin', NULL, 'GBQ', 'rec20', 'gigabecquerel');
			INSERT INTO public.untdid_unit VALUES (792, 0, now(), NULL, 'opencell.admin', NULL, 'GDW', 'rec20', 'gram, dry weight');
			INSERT INTO public.untdid_unit VALUES (793, 0, now(), NULL, 'opencell.admin', NULL, 'GE', 'rec20', 'pound per gallon (US)');
			INSERT INTO public.untdid_unit VALUES (794, 0, now(), NULL, 'opencell.admin', NULL, 'GF', 'rec20', 'gram per metre (gram per 100 centimetres)');
			INSERT INTO public.untdid_unit VALUES (795, 0, now(), NULL, 'opencell.admin', NULL, 'GFI', 'rec20', 'gram of fissile isotope');
			INSERT INTO public.untdid_unit VALUES (796, 0, now(), NULL, 'opencell.admin', NULL, 'GGR', 'rec20', 'great gross');
			INSERT INTO public.untdid_unit VALUES (797, 0, now(), NULL, 'opencell.admin', NULL, 'GIA', 'rec20', 'gill (US)');
			INSERT INTO public.untdid_unit VALUES (798, 0, now(), NULL, 'opencell.admin', NULL, 'GIC', 'rec20', 'gram, including container');
			INSERT INTO public.untdid_unit VALUES (799, 0, now(), NULL, 'opencell.admin', NULL, 'GII', 'rec20', 'gill (UK)');
			INSERT INTO public.untdid_unit VALUES (800, 0, now(), NULL, 'opencell.admin', NULL, 'GIP', 'rec20', 'gram, including inner packaging');
			INSERT INTO public.untdid_unit VALUES (801, 0, now(), NULL, 'opencell.admin', NULL, 'GJ', 'rec20', 'gram per millilitre');
			INSERT INTO public.untdid_unit VALUES (802, 0, now(), NULL, 'opencell.admin', NULL, 'GL', 'rec20', 'gram per litre');
			INSERT INTO public.untdid_unit VALUES (803, 0, now(), NULL, 'opencell.admin', NULL, 'GLD', 'rec20', 'dry gallon (US)');
			INSERT INTO public.untdid_unit VALUES (804, 0, now(), NULL, 'opencell.admin', NULL, 'GLI', 'rec20', 'gallon (UK)');
			INSERT INTO public.untdid_unit VALUES (805, 0, now(), NULL, 'opencell.admin', NULL, 'GLL', 'rec20', 'gallon (US)');
			INSERT INTO public.untdid_unit VALUES (806, 0, now(), NULL, 'opencell.admin', NULL, 'GM', 'rec20', 'gram per square metre');
			INSERT INTO public.untdid_unit VALUES (807, 0, now(), NULL, 'opencell.admin', NULL, 'GO', 'rec20', 'milligram per square metre');
			INSERT INTO public.untdid_unit VALUES (808, 0, now(), NULL, 'opencell.admin', NULL, 'GP', 'rec20', 'milligram per cubic metre');
			INSERT INTO public.untdid_unit VALUES (809, 0, now(), NULL, 'opencell.admin', NULL, 'GQ', 'rec20', 'microgram per cubic metre');
			INSERT INTO public.untdid_unit VALUES (810, 0, now(), NULL, 'opencell.admin', NULL, 'GRM', 'rec20', 'gram');
			INSERT INTO public.untdid_unit VALUES (811, 0, now(), NULL, 'opencell.admin', NULL, 'GRN', 'rec20', 'grain');
			INSERT INTO public.untdid_unit VALUES (812, 0, now(), NULL, 'opencell.admin', NULL, 'GRO', 'rec20', 'gross');
			INSERT INTO public.untdid_unit VALUES (813, 0, now(), NULL, 'opencell.admin', NULL, 'GV', 'rec20', 'gigajoule');
			INSERT INTO public.untdid_unit VALUES (814, 0, now(), NULL, 'opencell.admin', NULL, 'GWH', 'rec20', 'gigawatt hour');
			INSERT INTO public.untdid_unit VALUES (815, 0, now(), NULL, 'opencell.admin', NULL, 'H03', 'rec20', 'henry per kiloohm');
			INSERT INTO public.untdid_unit VALUES (816, 0, now(), NULL, 'opencell.admin', NULL, 'H04', 'rec20', 'henry per ohm');
			INSERT INTO public.untdid_unit VALUES (817, 0, now(), NULL, 'opencell.admin', NULL, 'H05', 'rec20', 'millihenry per kiloohm');
			INSERT INTO public.untdid_unit VALUES (818, 0, now(), NULL, 'opencell.admin', NULL, 'H06', 'rec20', 'millihenry per ohm');
			INSERT INTO public.untdid_unit VALUES (819, 0, now(), NULL, 'opencell.admin', NULL, 'H07', 'rec20', 'pascal second per bar');
			INSERT INTO public.untdid_unit VALUES (820, 0, now(), NULL, 'opencell.admin', NULL, 'H08', 'rec20', 'microbecquerel');
			INSERT INTO public.untdid_unit VALUES (821, 0, now(), NULL, 'opencell.admin', NULL, 'H09', 'rec20', 'reciprocal year');
			INSERT INTO public.untdid_unit VALUES (822, 0, now(), NULL, 'opencell.admin', NULL, 'H10', 'rec20', 'reciprocal hour');
			INSERT INTO public.untdid_unit VALUES (823, 0, now(), NULL, 'opencell.admin', NULL, 'H11', 'rec20', 'reciprocal month');
			INSERT INTO public.untdid_unit VALUES (824, 0, now(), NULL, 'opencell.admin', NULL, 'H12', 'rec20', 'degree Celsius per hour');
			INSERT INTO public.untdid_unit VALUES (825, 0, now(), NULL, 'opencell.admin', NULL, 'H13', 'rec20', 'degree Celsius per minute');
			INSERT INTO public.untdid_unit VALUES (826, 0, now(), NULL, 'opencell.admin', NULL, 'H14', 'rec20', 'degree Celsius per second');
			INSERT INTO public.untdid_unit VALUES (827, 0, now(), NULL, 'opencell.admin', NULL, 'H15', 'rec20', 'square centimetre per gram');
			INSERT INTO public.untdid_unit VALUES (828, 0, now(), NULL, 'opencell.admin', NULL, 'H16', 'rec20', 'square decametre');
			INSERT INTO public.untdid_unit VALUES (829, 0, now(), NULL, 'opencell.admin', NULL, 'H18', 'rec20', 'square hectometre');
			INSERT INTO public.untdid_unit VALUES (830, 0, now(), NULL, 'opencell.admin', NULL, 'H19', 'rec20', 'cubic hectometre');
			INSERT INTO public.untdid_unit VALUES (831, 0, now(), NULL, 'opencell.admin', NULL, 'H20', 'rec20', 'cubic kilometre');
			INSERT INTO public.untdid_unit VALUES (832, 0, now(), NULL, 'opencell.admin', NULL, 'H21', 'rec20', 'blank');
			INSERT INTO public.untdid_unit VALUES (833, 0, now(), NULL, 'opencell.admin', NULL, 'H22', 'rec20', 'volt square inch per pound-force');
			INSERT INTO public.untdid_unit VALUES (834, 0, now(), NULL, 'opencell.admin', NULL, 'H23', 'rec20', 'volt per inch');
			INSERT INTO public.untdid_unit VALUES (835, 0, now(), NULL, 'opencell.admin', NULL, 'H24', 'rec20', 'volt per microsecond');
			INSERT INTO public.untdid_unit VALUES (836, 0, now(), NULL, 'opencell.admin', NULL, 'H25', 'rec20', 'percent per kelvin');
			INSERT INTO public.untdid_unit VALUES (837, 0, now(), NULL, 'opencell.admin', NULL, 'H26', 'rec20', 'ohm per metre');
			INSERT INTO public.untdid_unit VALUES (838, 0, now(), NULL, 'opencell.admin', NULL, 'H27', 'rec20', 'degree per metre');
			INSERT INTO public.untdid_unit VALUES (839, 0, now(), NULL, 'opencell.admin', NULL, 'H28', 'rec20', 'microfarad per kilometre');
			INSERT INTO public.untdid_unit VALUES (840, 0, now(), NULL, 'opencell.admin', NULL, 'H29', 'rec20', 'microgram per litre');
			INSERT INTO public.untdid_unit VALUES (841, 0, now(), NULL, 'opencell.admin', NULL, 'H30', 'rec20', 'square micrometre (square micron)');
			INSERT INTO public.untdid_unit VALUES (842, 0, now(), NULL, 'opencell.admin', NULL, 'H31', 'rec20', 'ampere per kilogram');
			INSERT INTO public.untdid_unit VALUES (843, 0, now(), NULL, 'opencell.admin', NULL, 'H32', 'rec20', 'ampere squared second');
			INSERT INTO public.untdid_unit VALUES (844, 0, now(), NULL, 'opencell.admin', NULL, 'H33', 'rec20', 'farad per kilometre');
			INSERT INTO public.untdid_unit VALUES (845, 0, now(), NULL, 'opencell.admin', NULL, 'H34', 'rec20', 'hertz metre');
			INSERT INTO public.untdid_unit VALUES (846, 0, now(), NULL, 'opencell.admin', NULL, 'H35', 'rec20', 'kelvin metre per watt');
			INSERT INTO public.untdid_unit VALUES (847, 0, now(), NULL, 'opencell.admin', NULL, 'H36', 'rec20', 'megaohm per kilometre');
			INSERT INTO public.untdid_unit VALUES (848, 0, now(), NULL, 'opencell.admin', NULL, 'H37', 'rec20', 'megaohm per metre');
			INSERT INTO public.untdid_unit VALUES (849, 0, now(), NULL, 'opencell.admin', NULL, 'H38', 'rec20', 'megaampere');
			INSERT INTO public.untdid_unit VALUES (850, 0, now(), NULL, 'opencell.admin', NULL, 'H39', 'rec20', 'megahertz kilometre');
			INSERT INTO public.untdid_unit VALUES (851, 0, now(), NULL, 'opencell.admin', NULL, 'H40', 'rec20', 'newton per ampere');
			INSERT INTO public.untdid_unit VALUES (852, 0, now(), NULL, 'opencell.admin', NULL, 'H41', 'rec20', 'newton metre watt to the power minus 0,5');
			INSERT INTO public.untdid_unit VALUES (853, 0, now(), NULL, 'opencell.admin', NULL, 'H42', 'rec20', 'pascal per metre');
			INSERT INTO public.untdid_unit VALUES (854, 0, now(), NULL, 'opencell.admin', NULL, 'H43', 'rec20', 'siemens per centimetre');
			INSERT INTO public.untdid_unit VALUES (855, 0, now(), NULL, 'opencell.admin', NULL, 'H44', 'rec20', 'teraohm');
			INSERT INTO public.untdid_unit VALUES (856, 0, now(), NULL, 'opencell.admin', NULL, 'H45', 'rec20', 'volt second per metre');
			INSERT INTO public.untdid_unit VALUES (857, 0, now(), NULL, 'opencell.admin', NULL, 'H46', 'rec20', 'volt per second');
			INSERT INTO public.untdid_unit VALUES (858, 0, now(), NULL, 'opencell.admin', NULL, 'H47', 'rec20', 'watt per cubic metre');
			INSERT INTO public.untdid_unit VALUES (859, 0, now(), NULL, 'opencell.admin', NULL, 'H48', 'rec20', 'attofarad');
			INSERT INTO public.untdid_unit VALUES (860, 0, now(), NULL, 'opencell.admin', NULL, 'H49', 'rec20', 'centimetre per hour');
			INSERT INTO public.untdid_unit VALUES (861, 0, now(), NULL, 'opencell.admin', NULL, 'H50', 'rec20', 'reciprocal cubic centimetre');
			INSERT INTO public.untdid_unit VALUES (862, 0, now(), NULL, 'opencell.admin', NULL, 'H51', 'rec20', 'decibel per kilometre');
			INSERT INTO public.untdid_unit VALUES (863, 0, now(), NULL, 'opencell.admin', NULL, 'H52', 'rec20', 'decibel per metre');
			INSERT INTO public.untdid_unit VALUES (864, 0, now(), NULL, 'opencell.admin', NULL, 'H53', 'rec20', 'kilogram per bar');
			INSERT INTO public.untdid_unit VALUES (865, 0, now(), NULL, 'opencell.admin', NULL, 'H54', 'rec20', 'kilogram per cubic decimetre kelvin');
			INSERT INTO public.untdid_unit VALUES (866, 0, now(), NULL, 'opencell.admin', NULL, 'H55', 'rec20', 'kilogram per cubic decimetre bar');
			INSERT INTO public.untdid_unit VALUES (867, 0, now(), NULL, 'opencell.admin', NULL, 'H56', 'rec20', 'kilogram per square metre second');
			INSERT INTO public.untdid_unit VALUES (868, 0, now(), NULL, 'opencell.admin', NULL, 'H57', 'rec20', 'inch per two pi radiant');
			INSERT INTO public.untdid_unit VALUES (869, 0, now(), NULL, 'opencell.admin', NULL, 'H58', 'rec20', 'metre per volt second');
			INSERT INTO public.untdid_unit VALUES (870, 0, now(), NULL, 'opencell.admin', NULL, 'H59', 'rec20', 'square metre per newton');
			INSERT INTO public.untdid_unit VALUES (871, 0, now(), NULL, 'opencell.admin', NULL, 'H60', 'rec20', 'cubic metre per cubic metre');
			INSERT INTO public.untdid_unit VALUES (872, 0, now(), NULL, 'opencell.admin', NULL, 'H61', 'rec20', 'millisiemens per centimetre');
			INSERT INTO public.untdid_unit VALUES (873, 0, now(), NULL, 'opencell.admin', NULL, 'H62', 'rec20', 'millivolt per minute');
			INSERT INTO public.untdid_unit VALUES (874, 0, now(), NULL, 'opencell.admin', NULL, 'H63', 'rec20', 'milligram per square centimetre');
			INSERT INTO public.untdid_unit VALUES (875, 0, now(), NULL, 'opencell.admin', NULL, 'H64', 'rec20', 'milligram per gram');
			INSERT INTO public.untdid_unit VALUES (876, 0, now(), NULL, 'opencell.admin', NULL, 'H65', 'rec20', 'millilitre per cubic metre');
			INSERT INTO public.untdid_unit VALUES (877, 0, now(), NULL, 'opencell.admin', NULL, 'H66', 'rec20', 'millimetre per year');
			INSERT INTO public.untdid_unit VALUES (878, 0, now(), NULL, 'opencell.admin', NULL, 'H67', 'rec20', 'millimetre per hour');
			INSERT INTO public.untdid_unit VALUES (879, 0, now(), NULL, 'opencell.admin', NULL, 'H68', 'rec20', 'millimole per gram');
			INSERT INTO public.untdid_unit VALUES (880, 0, now(), NULL, 'opencell.admin', NULL, 'H69', 'rec20', 'picopascal per kilometre');
			INSERT INTO public.untdid_unit VALUES (881, 0, now(), NULL, 'opencell.admin', NULL, 'H70', 'rec20', 'picosecond');
			INSERT INTO public.untdid_unit VALUES (882, 0, now(), NULL, 'opencell.admin', NULL, 'H71', 'rec20', 'percent per month');
			INSERT INTO public.untdid_unit VALUES (883, 0, now(), NULL, 'opencell.admin', NULL, 'H72', 'rec20', 'percent per hectobar');
			INSERT INTO public.untdid_unit VALUES (884, 0, now(), NULL, 'opencell.admin', NULL, 'H73', 'rec20', 'percent per decakelvin');
			INSERT INTO public.untdid_unit VALUES (885, 0, now(), NULL, 'opencell.admin', NULL, 'H74', 'rec20', 'watt per metre');
			INSERT INTO public.untdid_unit VALUES (886, 0, now(), NULL, 'opencell.admin', NULL, 'H75', 'rec20', 'decapascal');
			INSERT INTO public.untdid_unit VALUES (887, 0, now(), NULL, 'opencell.admin', NULL, 'H76', 'rec20', 'gram per millimetre');
			INSERT INTO public.untdid_unit VALUES (888, 0, now(), NULL, 'opencell.admin', NULL, 'H77', 'rec20', 'module width');
			INSERT INTO public.untdid_unit VALUES (889, 0, now(), NULL, 'opencell.admin', NULL, 'H79', 'rec20', 'French gauge');
			INSERT INTO public.untdid_unit VALUES (890, 0, now(), NULL, 'opencell.admin', NULL, 'H80', 'rec20', 'rack unit');
			INSERT INTO public.untdid_unit VALUES (891, 0, now(), NULL, 'opencell.admin', NULL, 'H81', 'rec20', 'millimetre per minute');
			INSERT INTO public.untdid_unit VALUES (892, 0, now(), NULL, 'opencell.admin', NULL, 'H82', 'rec20', 'big point');
			INSERT INTO public.untdid_unit VALUES (893, 0, now(), NULL, 'opencell.admin', NULL, 'H83', 'rec20', 'litre per kilogram');
			INSERT INTO public.untdid_unit VALUES (894, 0, now(), NULL, 'opencell.admin', NULL, 'H84', 'rec20', 'gram millimetre');
			INSERT INTO public.untdid_unit VALUES (895, 0, now(), NULL, 'opencell.admin', NULL, 'H85', 'rec20', 'reciprocal week');
			INSERT INTO public.untdid_unit VALUES (896, 0, now(), NULL, 'opencell.admin', NULL, 'H87', 'rec20', 'piece');
			INSERT INTO public.untdid_unit VALUES (897, 0, now(), NULL, 'opencell.admin', NULL, 'H88', 'rec20', 'megaohm kilometre');
			INSERT INTO public.untdid_unit VALUES (898, 0, now(), NULL, 'opencell.admin', NULL, 'H89', 'rec20', 'percent per ohm');
			INSERT INTO public.untdid_unit VALUES (899, 0, now(), NULL, 'opencell.admin', NULL, 'H90', 'rec20', 'percent per degree');
			INSERT INTO public.untdid_unit VALUES (900, 0, now(), NULL, 'opencell.admin', NULL, 'H91', 'rec20', 'percent per ten thousand');
			INSERT INTO public.untdid_unit VALUES (901, 0, now(), NULL, 'opencell.admin', NULL, 'H92', 'rec20', 'percent per one hundred thousand');
			INSERT INTO public.untdid_unit VALUES (902, 0, now(), NULL, 'opencell.admin', NULL, 'H93', 'rec20', 'percent per hundred');
			INSERT INTO public.untdid_unit VALUES (903, 0, now(), NULL, 'opencell.admin', NULL, 'H94', 'rec20', 'percent per thousand');
			INSERT INTO public.untdid_unit VALUES (904, 0, now(), NULL, 'opencell.admin', NULL, 'H95', 'rec20', 'percent per volt');
			INSERT INTO public.untdid_unit VALUES (905, 0, now(), NULL, 'opencell.admin', NULL, 'H96', 'rec20', 'percent per bar');
			INSERT INTO public.untdid_unit VALUES (906, 0, now(), NULL, 'opencell.admin', NULL, 'H98', 'rec20', 'percent per inch');
			INSERT INTO public.untdid_unit VALUES (907, 0, now(), NULL, 'opencell.admin', NULL, 'H99', 'rec20', 'percent per metre');
			INSERT INTO public.untdid_unit VALUES (908, 0, now(), NULL, 'opencell.admin', NULL, 'HA', 'rec20', 'hank');
			INSERT INTO public.untdid_unit VALUES (909, 0, now(), NULL, 'opencell.admin', NULL, 'HAD', 'Rec20', 'Piece Day');
			INSERT INTO public.untdid_unit VALUES (910, 0, now(), NULL, 'opencell.admin', NULL, 'HBA', 'rec20', 'hectobar');
			INSERT INTO public.untdid_unit VALUES (911, 0, now(), NULL, 'opencell.admin', NULL, 'HBX', 'rec20', 'hundred boxes');
			INSERT INTO public.untdid_unit VALUES (912, 0, now(), NULL, 'opencell.admin', NULL, 'HC', 'rec20', 'hundred count');
			INSERT INTO public.untdid_unit VALUES (913, 0, now(), NULL, 'opencell.admin', NULL, 'HDW', 'rec20', 'hundred kilogram, dry weight');
			INSERT INTO public.untdid_unit VALUES (914, 0, now(), NULL, 'opencell.admin', NULL, 'HEA', 'rec20', 'head');
			INSERT INTO public.untdid_unit VALUES (915, 0, now(), NULL, 'opencell.admin', NULL, 'HGM', 'rec20', 'hectogram');
			INSERT INTO public.untdid_unit VALUES (916, 0, now(), NULL, 'opencell.admin', NULL, 'HH', 'rec20', 'hundred cubic foot');
			INSERT INTO public.untdid_unit VALUES (917, 0, now(), NULL, 'opencell.admin', NULL, 'HIU', 'rec20', 'hundred international unit');
			INSERT INTO public.untdid_unit VALUES (918, 0, now(), NULL, 'opencell.admin', NULL, 'HKM', 'rec20', 'hundred kilogram, net mass');
			INSERT INTO public.untdid_unit VALUES (919, 0, now(), NULL, 'opencell.admin', NULL, 'HLT', 'rec20', 'hectolitre');
			INSERT INTO public.untdid_unit VALUES (920, 0, now(), NULL, 'opencell.admin', NULL, 'HM', 'rec20', 'mile per hour (statute mile)');
			INSERT INTO public.untdid_unit VALUES (921, 0, now(), NULL, 'opencell.admin', NULL, 'HMO', 'Rec20', 'Piece Month');
			INSERT INTO public.untdid_unit VALUES (922, 0, now(), NULL, 'opencell.admin', NULL, 'HMQ', 'rec20', 'million cubic metre');
			INSERT INTO public.untdid_unit VALUES (923, 0, now(), NULL, 'opencell.admin', NULL, 'HMT', 'rec20', 'hectometre');
			INSERT INTO public.untdid_unit VALUES (924, 0, now(), NULL, 'opencell.admin', NULL, 'HPA', 'rec20', 'hectolitre of pure alcohol');
			INSERT INTO public.untdid_unit VALUES (925, 0, now(), NULL, 'opencell.admin', NULL, 'HTZ', 'rec20', 'hertz');
			INSERT INTO public.untdid_unit VALUES (926, 0, now(), NULL, 'opencell.admin', NULL, 'HUR', 'rec20', 'hour');
			INSERT INTO public.untdid_unit VALUES (927, 0, now(), NULL, 'opencell.admin', NULL, 'HWE', 'Rec20', 'Piece Week');
			INSERT INTO public.untdid_unit VALUES (928, 0, now(), NULL, 'opencell.admin', NULL, 'IA', 'rec20', 'inch pound (pound inch)');
			INSERT INTO public.untdid_unit VALUES (929, 0, now(), NULL, 'opencell.admin', NULL, 'IE', 'rec20', 'person');
			INSERT INTO public.untdid_unit VALUES (930, 0, now(), NULL, 'opencell.admin', NULL, 'INH', 'rec20', 'inch');
			INSERT INTO public.untdid_unit VALUES (931, 0, now(), NULL, 'opencell.admin', NULL, 'INK', 'rec20', 'square inch');
			INSERT INTO public.untdid_unit VALUES (932, 0, now(), NULL, 'opencell.admin', NULL, 'INQ', 'rec20', 'cubic inch');
			INSERT INTO public.untdid_unit VALUES (933, 0, now(), NULL, 'opencell.admin', NULL, 'ISD', 'rec20', 'international sugar degree');
			INSERT INTO public.untdid_unit VALUES (934, 0, now(), NULL, 'opencell.admin', NULL, 'IU', 'rec20', 'inch per second');
			INSERT INTO public.untdid_unit VALUES (935, 0, now(), NULL, 'opencell.admin', NULL, 'IUG', 'rec20', 'international unit per gram');
			INSERT INTO public.untdid_unit VALUES (936, 0, now(), NULL, 'opencell.admin', NULL, 'IV', 'rec20', 'inch per second squared');
			INSERT INTO public.untdid_unit VALUES (937, 0, now(), NULL, 'opencell.admin', NULL, 'J10', 'rec20', 'percent per millimetre');
			INSERT INTO public.untdid_unit VALUES (938, 0, now(), NULL, 'opencell.admin', NULL, 'J12', 'rec20', 'per mille per psi');
			INSERT INTO public.untdid_unit VALUES (939, 0, now(), NULL, 'opencell.admin', NULL, 'J13', 'rec20', 'degree API');
			INSERT INTO public.untdid_unit VALUES (940, 0, now(), NULL, 'opencell.admin', NULL, 'J14', 'rec20', 'degree Baume (origin scale)');
			INSERT INTO public.untdid_unit VALUES (941, 0, now(), NULL, 'opencell.admin', NULL, 'J15', 'rec20', 'degree Baume (US heavy)');
			INSERT INTO public.untdid_unit VALUES (942, 0, now(), NULL, 'opencell.admin', NULL, 'J16', 'rec20', 'degree Baume (US light)');
			INSERT INTO public.untdid_unit VALUES (943, 0, now(), NULL, 'opencell.admin', NULL, 'J17', 'rec20', 'degree Balling');
			INSERT INTO public.untdid_unit VALUES (944, 0, now(), NULL, 'opencell.admin', NULL, 'J18', 'rec20', 'degree Brix');
			INSERT INTO public.untdid_unit VALUES (945, 0, now(), NULL, 'opencell.admin', NULL, 'J19', 'rec20', 'degree Fahrenheit hour square foot per British thermal unit (thermochemical)');
			INSERT INTO public.untdid_unit VALUES (946, 0, now(), NULL, 'opencell.admin', NULL, 'J2', 'rec20', 'joule per kilogram');
			INSERT INTO public.untdid_unit VALUES (947, 0, now(), NULL, 'opencell.admin', NULL, 'J20', 'rec20', 'degree Fahrenheit per kelvin');
			INSERT INTO public.untdid_unit VALUES (948, 0, now(), NULL, 'opencell.admin', NULL, 'J21', 'rec20', 'degree Fahrenheit per bar');
			INSERT INTO public.untdid_unit VALUES (949, 0, now(), NULL, 'opencell.admin', NULL, 'J22', 'rec20', 'degree Fahrenheit hour square foot per British thermal unit (international table)');
			INSERT INTO public.untdid_unit VALUES (950, 0, now(), NULL, 'opencell.admin', NULL, 'J23', 'rec20', 'degree Fahrenheit per hour');
			INSERT INTO public.untdid_unit VALUES (951, 0, now(), NULL, 'opencell.admin', NULL, 'J24', 'rec20', 'degree Fahrenheit per minute');
			INSERT INTO public.untdid_unit VALUES (952, 0, now(), NULL, 'opencell.admin', NULL, 'J25', 'rec20', 'degree Fahrenheit per second');
			INSERT INTO public.untdid_unit VALUES (953, 0, now(), NULL, 'opencell.admin', NULL, 'J26', 'rec20', 'reciprocal degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (954, 0, now(), NULL, 'opencell.admin', NULL, 'J27', 'rec20', 'degree Oechsle');
			INSERT INTO public.untdid_unit VALUES (955, 0, now(), NULL, 'opencell.admin', NULL, 'J28', 'rec20', 'degree Rankine per hour');
			INSERT INTO public.untdid_unit VALUES (956, 0, now(), NULL, 'opencell.admin', NULL, 'J29', 'rec20', 'degree Rankine per minute');
			INSERT INTO public.untdid_unit VALUES (957, 0, now(), NULL, 'opencell.admin', NULL, 'J30', 'rec20', 'degree Rankine per second');
			INSERT INTO public.untdid_unit VALUES (958, 0, now(), NULL, 'opencell.admin', NULL, 'J31', 'rec20', 'degree Twaddell');
			INSERT INTO public.untdid_unit VALUES (959, 0, now(), NULL, 'opencell.admin', NULL, 'J32', 'rec20', 'micropoise');
			INSERT INTO public.untdid_unit VALUES (960, 0, now(), NULL, 'opencell.admin', NULL, 'J33', 'rec20', 'microgram per kilogram');
			INSERT INTO public.untdid_unit VALUES (961, 0, now(), NULL, 'opencell.admin', NULL, 'J34', 'rec20', 'microgram per cubic metre kelvin');
			INSERT INTO public.untdid_unit VALUES (962, 0, now(), NULL, 'opencell.admin', NULL, 'J35', 'rec20', 'microgram per cubic metre bar');
			INSERT INTO public.untdid_unit VALUES (963, 0, now(), NULL, 'opencell.admin', NULL, 'J36', 'rec20', 'microlitre per litre');
			INSERT INTO public.untdid_unit VALUES (964, 0, now(), NULL, 'opencell.admin', NULL, 'J38', 'rec20', 'baud');
			INSERT INTO public.untdid_unit VALUES (965, 0, now(), NULL, 'opencell.admin', NULL, 'J39', 'rec20', 'British thermal unit (mean)');
			INSERT INTO public.untdid_unit VALUES (966, 0, now(), NULL, 'opencell.admin', NULL, 'J40', 'rec20', 'British thermal unit (international table) foot per hour square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (967, 0, now(), NULL, 'opencell.admin', NULL, 'J41', 'rec20', 'British thermal unit (international table) inch per hour square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (968, 0, now(), NULL, 'opencell.admin', NULL, 'J42', 'rec20', 'British thermal unit (international table) inch per second square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (969, 0, now(), NULL, 'opencell.admin', NULL, 'J43', 'rec20', 'British thermal unit (international table) per pound degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (970, 0, now(), NULL, 'opencell.admin', NULL, 'J44', 'rec20', 'British thermal unit (international table) per minute');
			INSERT INTO public.untdid_unit VALUES (971, 0, now(), NULL, 'opencell.admin', NULL, 'J45', 'rec20', 'British thermal unit (international table) per second');
			INSERT INTO public.untdid_unit VALUES (972, 0, now(), NULL, 'opencell.admin', NULL, 'J46', 'rec20', 'British thermal unit (thermochemical) foot per hour square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (973, 0, now(), NULL, 'opencell.admin', NULL, 'J47', 'rec20', 'British thermal unit (thermochemical) per hour');
			INSERT INTO public.untdid_unit VALUES (974, 0, now(), NULL, 'opencell.admin', NULL, 'J48', 'rec20', 'British thermal unit (thermochemical) inch per hour square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (975, 0, now(), NULL, 'opencell.admin', NULL, 'J49', 'rec20', 'British thermal unit (thermochemical) inch per second square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1117, 0, now(), NULL, 'opencell.admin', NULL, 'KBA', 'rec20', 'kilobar');
			INSERT INTO public.untdid_unit VALUES (976, 0, now(), NULL, 'opencell.admin', NULL, 'J50', 'rec20', 'British thermal unit (thermochemical) per pound degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (977, 0, now(), NULL, 'opencell.admin', NULL, 'J51', 'rec20', 'British thermal unit (thermochemical) per minute');
			INSERT INTO public.untdid_unit VALUES (978, 0, now(), NULL, 'opencell.admin', NULL, 'J52', 'rec20', 'British thermal unit (thermochemical) per second');
			INSERT INTO public.untdid_unit VALUES (979, 0, now(), NULL, 'opencell.admin', NULL, 'J53', 'rec20', 'coulomb square metre per kilogram');
			INSERT INTO public.untdid_unit VALUES (980, 0, now(), NULL, 'opencell.admin', NULL, 'J54', 'rec20', 'megabaud');
			INSERT INTO public.untdid_unit VALUES (981, 0, now(), NULL, 'opencell.admin', NULL, 'J55', 'rec20', 'watt second');
			INSERT INTO public.untdid_unit VALUES (982, 0, now(), NULL, 'opencell.admin', NULL, 'J56', 'rec20', 'bar per bar');
			INSERT INTO public.untdid_unit VALUES (983, 0, now(), NULL, 'opencell.admin', NULL, 'J57', 'rec20', 'barrel (UK petroleum)');
			INSERT INTO public.untdid_unit VALUES (984, 0, now(), NULL, 'opencell.admin', NULL, 'J58', 'rec20', 'barrel (UK petroleum) per minute');
			INSERT INTO public.untdid_unit VALUES (985, 0, now(), NULL, 'opencell.admin', NULL, 'J59', 'rec20', 'barrel (UK petroleum) per day');
			INSERT INTO public.untdid_unit VALUES (986, 0, now(), NULL, 'opencell.admin', NULL, 'J60', 'rec20', 'barrel (UK petroleum) per hour');
			INSERT INTO public.untdid_unit VALUES (987, 0, now(), NULL, 'opencell.admin', NULL, 'J61', 'rec20', 'barrel (UK petroleum) per second');
			INSERT INTO public.untdid_unit VALUES (988, 0, now(), NULL, 'opencell.admin', NULL, 'J62', 'rec20', 'barrel (US petroleum) per hour');
			INSERT INTO public.untdid_unit VALUES (989, 0, now(), NULL, 'opencell.admin', NULL, 'J63', 'rec20', 'barrel (US petroleum) per second');
			INSERT INTO public.untdid_unit VALUES (990, 0, now(), NULL, 'opencell.admin', NULL, 'J64', 'rec20', 'bushel (UK) per day');
			INSERT INTO public.untdid_unit VALUES (991, 0, now(), NULL, 'opencell.admin', NULL, 'J65', 'rec20', 'bushel (UK) per hour');
			INSERT INTO public.untdid_unit VALUES (992, 0, now(), NULL, 'opencell.admin', NULL, 'J66', 'rec20', 'bushel (UK) per minute');
			INSERT INTO public.untdid_unit VALUES (993, 0, now(), NULL, 'opencell.admin', NULL, 'J67', 'rec20', 'bushel (UK) per second');
			INSERT INTO public.untdid_unit VALUES (994, 0, now(), NULL, 'opencell.admin', NULL, 'J68', 'rec20', 'bushel (US dry) per day');
			INSERT INTO public.untdid_unit VALUES (995, 0, now(), NULL, 'opencell.admin', NULL, 'J69', 'rec20', 'bushel (US dry) per hour');
			INSERT INTO public.untdid_unit VALUES (996, 0, now(), NULL, 'opencell.admin', NULL, 'J70', 'rec20', 'bushel (US dry) per minute');
			INSERT INTO public.untdid_unit VALUES (997, 0, now(), NULL, 'opencell.admin', NULL, 'J71', 'rec20', 'bushel (US dry) per second');
			INSERT INTO public.untdid_unit VALUES (998, 0, now(), NULL, 'opencell.admin', NULL, 'J72', 'rec20', 'centinewton metre');
			INSERT INTO public.untdid_unit VALUES (999, 0, now(), NULL, 'opencell.admin', NULL, 'J73', 'rec20', 'centipoise per kelvin');
			INSERT INTO public.untdid_unit VALUES (1000, 0, now(), NULL, 'opencell.admin', NULL, 'J74', 'rec20', 'centipoise per bar');
			INSERT INTO public.untdid_unit VALUES (1001, 0, now(), NULL, 'opencell.admin', NULL, 'J75', 'rec20', 'calorie (mean)');
			INSERT INTO public.untdid_unit VALUES (1002, 0, now(), NULL, 'opencell.admin', NULL, 'J76', 'rec20', 'calorie (international table) per gram degree Celsius');
			INSERT INTO public.untdid_unit VALUES (1003, 0, now(), NULL, 'opencell.admin', NULL, 'J78', 'rec20', 'calorie (thermochemical) per centimetre second degree Celsius');
			INSERT INTO public.untdid_unit VALUES (1004, 0, now(), NULL, 'opencell.admin', NULL, 'J79', 'rec20', 'calorie (thermochemical) per gram degree Celsius');
			INSERT INTO public.untdid_unit VALUES (1005, 0, now(), NULL, 'opencell.admin', NULL, 'J81', 'rec20', 'calorie (thermochemical) per minute');
			INSERT INTO public.untdid_unit VALUES (1006, 0, now(), NULL, 'opencell.admin', NULL, 'J82', 'rec20', 'calorie (thermochemical) per second');
			INSERT INTO public.untdid_unit VALUES (1007, 0, now(), NULL, 'opencell.admin', NULL, 'J83', 'rec20', 'clo');
			INSERT INTO public.untdid_unit VALUES (1008, 0, now(), NULL, 'opencell.admin', NULL, 'J84', 'rec20', 'centimetre per second kelvin');
			INSERT INTO public.untdid_unit VALUES (1009, 0, now(), NULL, 'opencell.admin', NULL, 'J85', 'rec20', 'centimetre per second bar');
			INSERT INTO public.untdid_unit VALUES (1010, 0, now(), NULL, 'opencell.admin', NULL, 'J87', 'rec20', 'cubic centimetre per cubic metre');
			INSERT INTO public.untdid_unit VALUES (1011, 0, now(), NULL, 'opencell.admin', NULL, 'J90', 'rec20', 'cubic decimetre per day');
			INSERT INTO public.untdid_unit VALUES (1012, 0, now(), NULL, 'opencell.admin', NULL, 'J91', 'rec20', 'cubic decimetre per cubic metre');
			INSERT INTO public.untdid_unit VALUES (1013, 0, now(), NULL, 'opencell.admin', NULL, 'J92', 'rec20', 'cubic decimetre per minute');
			INSERT INTO public.untdid_unit VALUES (1014, 0, now(), NULL, 'opencell.admin', NULL, 'J93', 'rec20', 'cubic decimetre per second');
			INSERT INTO public.untdid_unit VALUES (1015, 0, now(), NULL, 'opencell.admin', NULL, 'J95', 'rec20', 'ounce (UK fluid) per day');
			INSERT INTO public.untdid_unit VALUES (1016, 0, now(), NULL, 'opencell.admin', NULL, 'J96', 'rec20', 'ounce (UK fluid) per hour');
			INSERT INTO public.untdid_unit VALUES (1017, 0, now(), NULL, 'opencell.admin', NULL, 'J97', 'rec20', 'ounce (UK fluid) per minute');
			INSERT INTO public.untdid_unit VALUES (1018, 0, now(), NULL, 'opencell.admin', NULL, 'J98', 'rec20', 'ounce (UK fluid) per second');
			INSERT INTO public.untdid_unit VALUES (1019, 0, now(), NULL, 'opencell.admin', NULL, 'J99', 'rec20', 'ounce (US fluid) per day');
			INSERT INTO public.untdid_unit VALUES (1020, 0, now(), NULL, 'opencell.admin', NULL, 'JE', 'rec20', 'joule per kelvin');
			INSERT INTO public.untdid_unit VALUES (1021, 0, now(), NULL, 'opencell.admin', NULL, 'JK', 'rec20', 'megajoule per kilogram');
			INSERT INTO public.untdid_unit VALUES (1022, 0, now(), NULL, 'opencell.admin', NULL, 'JM', 'rec20', 'megajoule per cubic metre');
			INSERT INTO public.untdid_unit VALUES (1023, 0, now(), NULL, 'opencell.admin', NULL, 'JNT', 'rec20', 'pipeline joint');
			INSERT INTO public.untdid_unit VALUES (1024, 0, now(), NULL, 'opencell.admin', NULL, 'JOU', 'rec20', 'joule');
			INSERT INTO public.untdid_unit VALUES (1025, 0, now(), NULL, 'opencell.admin', NULL, 'JPS', 'rec20', 'hundred metre');
			INSERT INTO public.untdid_unit VALUES (1026, 0, now(), NULL, 'opencell.admin', NULL, 'JWL', 'rec20', 'number of jewels');
			INSERT INTO public.untdid_unit VALUES (1027, 0, now(), NULL, 'opencell.admin', NULL, 'K1', 'rec20', 'kilowatt demand');
			INSERT INTO public.untdid_unit VALUES (1028, 0, now(), NULL, 'opencell.admin', NULL, 'K10', 'rec20', 'ounce (US fluid) per hour');
			INSERT INTO public.untdid_unit VALUES (1029, 0, now(), NULL, 'opencell.admin', NULL, 'K11', 'rec20', 'ounce (US fluid) per minute');
			INSERT INTO public.untdid_unit VALUES (1030, 0, now(), NULL, 'opencell.admin', NULL, 'K12', 'rec20', 'ounce (US fluid) per second');
			INSERT INTO public.untdid_unit VALUES (1031, 0, now(), NULL, 'opencell.admin', NULL, 'K13', 'rec20', 'foot per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1032, 0, now(), NULL, 'opencell.admin', NULL, 'K14', 'rec20', 'foot per hour');
			INSERT INTO public.untdid_unit VALUES (1033, 0, now(), NULL, 'opencell.admin', NULL, 'K15', 'rec20', 'foot pound-force per hour');
			INSERT INTO public.untdid_unit VALUES (1034, 0, now(), NULL, 'opencell.admin', NULL, 'K16', 'rec20', 'foot pound-force per minute');
			INSERT INTO public.untdid_unit VALUES (1035, 0, now(), NULL, 'opencell.admin', NULL, 'K17', 'rec20', 'foot per psi');
			INSERT INTO public.untdid_unit VALUES (1036, 0, now(), NULL, 'opencell.admin', NULL, 'K18', 'rec20', 'foot per second degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1037, 0, now(), NULL, 'opencell.admin', NULL, 'K19', 'rec20', 'foot per second psi');
			INSERT INTO public.untdid_unit VALUES (1038, 0, now(), NULL, 'opencell.admin', NULL, 'K2', 'rec20', 'kilovolt ampere reactive demand');
			INSERT INTO public.untdid_unit VALUES (1039, 0, now(), NULL, 'opencell.admin', NULL, 'K20', 'rec20', 'reciprocal cubic foot');
			INSERT INTO public.untdid_unit VALUES (1040, 0, now(), NULL, 'opencell.admin', NULL, 'K21', 'rec20', 'cubic foot per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1041, 0, now(), NULL, 'opencell.admin', NULL, 'K22', 'rec20', 'cubic foot per day');
			INSERT INTO public.untdid_unit VALUES (1042, 0, now(), NULL, 'opencell.admin', NULL, 'K23', 'rec20', 'cubic foot per psi');
			INSERT INTO public.untdid_unit VALUES (1043, 0, now(), NULL, 'opencell.admin', NULL, 'K26', 'rec20', 'gallon (UK) per day');
			INSERT INTO public.untdid_unit VALUES (1044, 0, now(), NULL, 'opencell.admin', NULL, 'K27', 'rec20', 'gallon (UK) per hour');
			INSERT INTO public.untdid_unit VALUES (1045, 0, now(), NULL, 'opencell.admin', NULL, 'K28', 'rec20', 'gallon (UK) per second');
			INSERT INTO public.untdid_unit VALUES (1046, 0, now(), NULL, 'opencell.admin', NULL, 'K3', 'rec20', 'kilovolt ampere reactive hour');
			INSERT INTO public.untdid_unit VALUES (1047, 0, now(), NULL, 'opencell.admin', NULL, 'K30', 'rec20', 'gallon (US liquid) per second');
			INSERT INTO public.untdid_unit VALUES (1048, 0, now(), NULL, 'opencell.admin', NULL, 'K31', 'rec20', 'gram-force per square centimetre');
			INSERT INTO public.untdid_unit VALUES (1049, 0, now(), NULL, 'opencell.admin', NULL, 'K32', 'rec20', 'gill (UK) per day');
			INSERT INTO public.untdid_unit VALUES (1050, 0, now(), NULL, 'opencell.admin', NULL, 'K33', 'rec20', 'gill (UK) per hour');
			INSERT INTO public.untdid_unit VALUES (1051, 0, now(), NULL, 'opencell.admin', NULL, 'K34', 'rec20', 'gill (UK) per minute');
			INSERT INTO public.untdid_unit VALUES (1052, 0, now(), NULL, 'opencell.admin', NULL, 'K35', 'rec20', 'gill (UK) per second');
			INSERT INTO public.untdid_unit VALUES (1053, 0, now(), NULL, 'opencell.admin', NULL, 'K36', 'rec20', 'gill (US) per day');
			INSERT INTO public.untdid_unit VALUES (1054, 0, now(), NULL, 'opencell.admin', NULL, 'K37', 'rec20', 'gill (US) per hour');
			INSERT INTO public.untdid_unit VALUES (1055, 0, now(), NULL, 'opencell.admin', NULL, 'K38', 'rec20', 'gill (US) per minute');
			INSERT INTO public.untdid_unit VALUES (1056, 0, now(), NULL, 'opencell.admin', NULL, 'K39', 'rec20', 'gill (US) per second');
			INSERT INTO public.untdid_unit VALUES (1057, 0, now(), NULL, 'opencell.admin', NULL, 'K40', 'rec20', 'standard acceleration of free fall');
			INSERT INTO public.untdid_unit VALUES (1058, 0, now(), NULL, 'opencell.admin', NULL, 'K41', 'rec20', 'grain per gallon (US)');
			INSERT INTO public.untdid_unit VALUES (1059, 0, now(), NULL, 'opencell.admin', NULL, 'K42', 'rec20', 'horsepower (boiler)');
			INSERT INTO public.untdid_unit VALUES (1060, 0, now(), NULL, 'opencell.admin', NULL, 'K43', 'rec20', 'horsepower (electric)');
			INSERT INTO public.untdid_unit VALUES (1061, 0, now(), NULL, 'opencell.admin', NULL, 'K45', 'rec20', 'inch per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1062, 0, now(), NULL, 'opencell.admin', NULL, 'K46', 'rec20', 'inch per psi');
			INSERT INTO public.untdid_unit VALUES (1063, 0, now(), NULL, 'opencell.admin', NULL, 'K47', 'rec20', 'inch per second degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1064, 0, now(), NULL, 'opencell.admin', NULL, 'K48', 'rec20', 'inch per second psi');
			INSERT INTO public.untdid_unit VALUES (1065, 0, now(), NULL, 'opencell.admin', NULL, 'K49', 'rec20', 'reciprocal cubic inch');
			INSERT INTO public.untdid_unit VALUES (1066, 0, now(), NULL, 'opencell.admin', NULL, 'K50', 'rec20', 'kilobaud');
			INSERT INTO public.untdid_unit VALUES (1067, 0, now(), NULL, 'opencell.admin', NULL, 'K51', 'rec20', 'kilocalorie (mean)');
			INSERT INTO public.untdid_unit VALUES (1068, 0, now(), NULL, 'opencell.admin', NULL, 'K52', 'rec20', 'kilocalorie (international table) per hour metre degree Celsius');
			INSERT INTO public.untdid_unit VALUES (1069, 0, now(), NULL, 'opencell.admin', NULL, 'K53', 'rec20', 'kilocalorie (thermochemical)');
			INSERT INTO public.untdid_unit VALUES (1070, 0, now(), NULL, 'opencell.admin', NULL, 'K54', 'rec20', 'kilocalorie (thermochemical) per minute');
			INSERT INTO public.untdid_unit VALUES (1071, 0, now(), NULL, 'opencell.admin', NULL, 'K55', 'rec20', 'kilocalorie (thermochemical) per second');
			INSERT INTO public.untdid_unit VALUES (1072, 0, now(), NULL, 'opencell.admin', NULL, 'K58', 'rec20', 'kilomole per hour');
			INSERT INTO public.untdid_unit VALUES (1073, 0, now(), NULL, 'opencell.admin', NULL, 'K59', 'rec20', 'kilomole per cubic metre kelvin');
			INSERT INTO public.untdid_unit VALUES (1074, 0, now(), NULL, 'opencell.admin', NULL, 'K6', 'rec20', 'kilolitre');
			INSERT INTO public.untdid_unit VALUES (1075, 0, now(), NULL, 'opencell.admin', NULL, 'K60', 'rec20', 'kilomole per cubic metre bar');
			INSERT INTO public.untdid_unit VALUES (1076, 0, now(), NULL, 'opencell.admin', NULL, 'K61', 'rec20', 'kilomole per minute');
			INSERT INTO public.untdid_unit VALUES (1077, 0, now(), NULL, 'opencell.admin', NULL, 'K62', 'rec20', 'litre per litre');
			INSERT INTO public.untdid_unit VALUES (1078, 0, now(), NULL, 'opencell.admin', NULL, 'K63', 'rec20', 'reciprocal litre');
			INSERT INTO public.untdid_unit VALUES (1079, 0, now(), NULL, 'opencell.admin', NULL, 'K64', 'rec20', 'pound (avoirdupois) per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1080, 0, now(), NULL, 'opencell.admin', NULL, 'K65', 'rec20', 'pound (avoirdupois) square foot');
			INSERT INTO public.untdid_unit VALUES (1081, 0, now(), NULL, 'opencell.admin', NULL, 'K66', 'rec20', 'pound (avoirdupois) per day');
			INSERT INTO public.untdid_unit VALUES (1082, 0, now(), NULL, 'opencell.admin', NULL, 'K67', 'rec20', 'pound per foot hour');
			INSERT INTO public.untdid_unit VALUES (1083, 0, now(), NULL, 'opencell.admin', NULL, 'K68', 'rec20', 'pound per foot second');
			INSERT INTO public.untdid_unit VALUES (1084, 0, now(), NULL, 'opencell.admin', NULL, 'K69', 'rec20', 'pound (avoirdupois) per cubic foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1085, 0, now(), NULL, 'opencell.admin', NULL, 'K70', 'rec20', 'pound (avoirdupois) per cubic foot psi');
			INSERT INTO public.untdid_unit VALUES (1086, 0, now(), NULL, 'opencell.admin', NULL, 'K71', 'rec20', 'pound (avoirdupois) per gallon (UK)');
			INSERT INTO public.untdid_unit VALUES (1087, 0, now(), NULL, 'opencell.admin', NULL, 'K73', 'rec20', 'pound (avoirdupois) per hour degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1088, 0, now(), NULL, 'opencell.admin', NULL, 'K74', 'rec20', 'pound (avoirdupois) per hour psi');
			INSERT INTO public.untdid_unit VALUES (1089, 0, now(), NULL, 'opencell.admin', NULL, 'K75', 'rec20', 'pound (avoirdupois) per cubic inch degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1090, 0, now(), NULL, 'opencell.admin', NULL, 'K76', 'rec20', 'pound (avoirdupois) per cubic inch psi');
			INSERT INTO public.untdid_unit VALUES (1091, 0, now(), NULL, 'opencell.admin', NULL, 'K77', 'rec20', 'pound (avoirdupois) per psi');
			INSERT INTO public.untdid_unit VALUES (1092, 0, now(), NULL, 'opencell.admin', NULL, 'K78', 'rec20', 'pound (avoirdupois) per minute');
			INSERT INTO public.untdid_unit VALUES (1093, 0, now(), NULL, 'opencell.admin', NULL, 'K79', 'rec20', 'pound (avoirdupois) per minute degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1094, 0, now(), NULL, 'opencell.admin', NULL, 'K80', 'rec20', 'pound (avoirdupois) per minute psi');
			INSERT INTO public.untdid_unit VALUES (1095, 0, now(), NULL, 'opencell.admin', NULL, 'K81', 'rec20', 'pound (avoirdupois) per second');
			INSERT INTO public.untdid_unit VALUES (1096, 0, now(), NULL, 'opencell.admin', NULL, 'K82', 'rec20', 'pound (avoirdupois) per second degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1097, 0, now(), NULL, 'opencell.admin', NULL, 'K83', 'rec20', 'pound (avoirdupois) per second psi');
			INSERT INTO public.untdid_unit VALUES (1098, 0, now(), NULL, 'opencell.admin', NULL, 'K84', 'rec20', 'pound per cubic yard');
			INSERT INTO public.untdid_unit VALUES (1099, 0, now(), NULL, 'opencell.admin', NULL, 'K85', 'rec20', 'pound-force per square foot');
			INSERT INTO public.untdid_unit VALUES (1100, 0, now(), NULL, 'opencell.admin', NULL, 'K86', 'rec20', 'pound-force per square inch degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1101, 0, now(), NULL, 'opencell.admin', NULL, 'K87', 'rec20', 'psi cubic inch per second');
			INSERT INTO public.untdid_unit VALUES (1102, 0, now(), NULL, 'opencell.admin', NULL, 'K88', 'rec20', 'psi litre per second');
			INSERT INTO public.untdid_unit VALUES (1103, 0, now(), NULL, 'opencell.admin', NULL, 'K89', 'rec20', 'psi cubic metre per second');
			INSERT INTO public.untdid_unit VALUES (1104, 0, now(), NULL, 'opencell.admin', NULL, 'K90', 'rec20', 'psi cubic yard per second');
			INSERT INTO public.untdid_unit VALUES (1105, 0, now(), NULL, 'opencell.admin', NULL, 'K91', 'rec20', 'pound-force second per square foot');
			INSERT INTO public.untdid_unit VALUES (1106, 0, now(), NULL, 'opencell.admin', NULL, 'K92', 'rec20', 'pound-force second per square inch');
			INSERT INTO public.untdid_unit VALUES (1107, 0, now(), NULL, 'opencell.admin', NULL, 'K93', 'rec20', 'reciprocal psi');
			INSERT INTO public.untdid_unit VALUES (1108, 0, now(), NULL, 'opencell.admin', NULL, 'K94', 'rec20', 'quart (UK liquid) per day');
			INSERT INTO public.untdid_unit VALUES (1109, 0, now(), NULL, 'opencell.admin', NULL, 'K95', 'rec20', 'quart (UK liquid) per hour');
			INSERT INTO public.untdid_unit VALUES (1110, 0, now(), NULL, 'opencell.admin', NULL, 'K96', 'rec20', 'quart (UK liquid) per minute');
			INSERT INTO public.untdid_unit VALUES (1111, 0, now(), NULL, 'opencell.admin', NULL, 'K97', 'rec20', 'quart (UK liquid) per second');
			INSERT INTO public.untdid_unit VALUES (1112, 0, now(), NULL, 'opencell.admin', NULL, 'K98', 'rec20', 'quart (US liquid) per day');
			INSERT INTO public.untdid_unit VALUES (1113, 0, now(), NULL, 'opencell.admin', NULL, 'K99', 'rec20', 'quart (US liquid) per hour');
			INSERT INTO public.untdid_unit VALUES (1114, 0, now(), NULL, 'opencell.admin', NULL, 'KA', 'rec20', 'cake');
			INSERT INTO public.untdid_unit VALUES (1115, 0, now(), NULL, 'opencell.admin', NULL, 'KAT', 'rec20', 'katal');
			INSERT INTO public.untdid_unit VALUES (1116, 0, now(), NULL, 'opencell.admin', NULL, 'KB', 'rec20', 'kilocharacter');
			INSERT INTO public.untdid_unit VALUES (1118, 0, now(), NULL, 'opencell.admin', NULL, 'KCC', 'rec20', 'kilogram of choline chloride');
			INSERT INTO public.untdid_unit VALUES (1119, 0, now(), NULL, 'opencell.admin', NULL, 'KDW', 'rec20', 'kilogram drained net weight');
			INSERT INTO public.untdid_unit VALUES (1120, 0, now(), NULL, 'opencell.admin', NULL, 'KEL', 'rec20', 'kelvin');
			INSERT INTO public.untdid_unit VALUES (1121, 0, now(), NULL, 'opencell.admin', NULL, 'KGM', 'rec20', 'kilogram');
			INSERT INTO public.untdid_unit VALUES (1122, 0, now(), NULL, 'opencell.admin', NULL, 'KGS', 'rec20', 'kilogram per second');
			INSERT INTO public.untdid_unit VALUES (1123, 0, now(), NULL, 'opencell.admin', NULL, 'KHY', 'rec20', 'kilogram of hydrogen peroxide');
			INSERT INTO public.untdid_unit VALUES (1124, 0, now(), NULL, 'opencell.admin', NULL, 'KHZ', 'rec20', 'kilohertz');
			INSERT INTO public.untdid_unit VALUES (1125, 0, now(), NULL, 'opencell.admin', NULL, 'KI', 'rec20', 'kilogram per millimetre width');
			INSERT INTO public.untdid_unit VALUES (1126, 0, now(), NULL, 'opencell.admin', NULL, 'KIC', 'rec20', 'kilogram, including container');
			INSERT INTO public.untdid_unit VALUES (1127, 0, now(), NULL, 'opencell.admin', NULL, 'KIP', 'rec20', 'kilogram, including inner packaging');
			INSERT INTO public.untdid_unit VALUES (1128, 0, now(), NULL, 'opencell.admin', NULL, 'KJ', 'rec20', 'kilosegment');
			INSERT INTO public.untdid_unit VALUES (1129, 0, now(), NULL, 'opencell.admin', NULL, 'KJO', 'rec20', 'kilojoule');
			INSERT INTO public.untdid_unit VALUES (1130, 0, now(), NULL, 'opencell.admin', NULL, 'KL', 'rec20', 'kilogram per metre');
			INSERT INTO public.untdid_unit VALUES (1131, 0, now(), NULL, 'opencell.admin', NULL, 'KLK', 'rec20', 'lactic dry material percentage');
			INSERT INTO public.untdid_unit VALUES (1132, 0, now(), NULL, 'opencell.admin', NULL, 'KLX', 'rec20', 'kilolux');
			INSERT INTO public.untdid_unit VALUES (1133, 0, now(), NULL, 'opencell.admin', NULL, 'KMA', 'rec20', 'kilogram of methylamine');
			INSERT INTO public.untdid_unit VALUES (1134, 0, now(), NULL, 'opencell.admin', NULL, 'KMH', 'rec20', 'kilometre per hour');
			INSERT INTO public.untdid_unit VALUES (1135, 0, now(), NULL, 'opencell.admin', NULL, 'KMK', 'rec20', 'square kilometre');
			INSERT INTO public.untdid_unit VALUES (1136, 0, now(), NULL, 'opencell.admin', NULL, 'KMQ', 'rec20', 'kilogram per cubic metre');
			INSERT INTO public.untdid_unit VALUES (1137, 0, now(), NULL, 'opencell.admin', NULL, 'KMT', 'rec20', 'kilometre');
			INSERT INTO public.untdid_unit VALUES (1138, 0, now(), NULL, 'opencell.admin', NULL, 'KNI', 'rec20', 'kilogram of nitrogen');
			INSERT INTO public.untdid_unit VALUES (1139, 0, now(), NULL, 'opencell.admin', NULL, 'KNM', 'rec20', 'kilonewton per square metre');
			INSERT INTO public.untdid_unit VALUES (1140, 0, now(), NULL, 'opencell.admin', NULL, 'KNS', 'rec20', 'kilogram named substance');
			INSERT INTO public.untdid_unit VALUES (1141, 0, now(), NULL, 'opencell.admin', NULL, 'KNT', 'rec20', 'knot');
			INSERT INTO public.untdid_unit VALUES (1142, 0, now(), NULL, 'opencell.admin', NULL, 'KO', 'rec20', 'milliequivalence caustic potash per gram of product');
			INSERT INTO public.untdid_unit VALUES (1143, 0, now(), NULL, 'opencell.admin', NULL, 'KPA', 'rec20', 'kilopascal');
			INSERT INTO public.untdid_unit VALUES (1144, 0, now(), NULL, 'opencell.admin', NULL, 'KPH', 'rec20', 'kilogram of potassium hydroxide (caustic potash)');
			INSERT INTO public.untdid_unit VALUES (1145, 0, now(), NULL, 'opencell.admin', NULL, 'KPO', 'rec20', 'kilogram of potassium oxide');
			INSERT INTO public.untdid_unit VALUES (1146, 0, now(), NULL, 'opencell.admin', NULL, 'KPP', 'rec20', 'kilogram of phosphorus pentoxide (phosphoric anhydride)');
			INSERT INTO public.untdid_unit VALUES (1147, 0, now(), NULL, 'opencell.admin', NULL, 'KR', 'rec20', 'kiloroentgen');
			INSERT INTO public.untdid_unit VALUES (1148, 0, now(), NULL, 'opencell.admin', NULL, 'KSD', 'rec20', 'kilogram of substance 90 % dry');
			INSERT INTO public.untdid_unit VALUES (1149, 0, now(), NULL, 'opencell.admin', NULL, 'KSH', 'rec20', 'kilogram of sodium hydroxide (caustic soda)');
			INSERT INTO public.untdid_unit VALUES (1150, 0, now(), NULL, 'opencell.admin', NULL, 'KT', 'rec20', 'kit');
			INSERT INTO public.untdid_unit VALUES (1151, 0, now(), NULL, 'opencell.admin', NULL, 'KTN', 'rec20', 'kilotonne');
			INSERT INTO public.untdid_unit VALUES (1152, 0, now(), NULL, 'opencell.admin', NULL, 'KUR', 'rec20', 'kilogram of uranium');
			INSERT INTO public.untdid_unit VALUES (1153, 0, now(), NULL, 'opencell.admin', NULL, 'KVA', 'rec20', 'kilovolt - ampere');
			INSERT INTO public.untdid_unit VALUES (1154, 0, now(), NULL, 'opencell.admin', NULL, 'KVR', 'rec20', 'kilovar');
			INSERT INTO public.untdid_unit VALUES (1155, 0, now(), NULL, 'opencell.admin', NULL, 'KVT', 'rec20', 'kilovolt');
			INSERT INTO public.untdid_unit VALUES (1156, 0, now(), NULL, 'opencell.admin', NULL, 'KW', 'rec20', 'kilogram per millimetre');
			INSERT INTO public.untdid_unit VALUES (1157, 0, now(), NULL, 'opencell.admin', NULL, 'KWH', 'rec20', 'kilowatt hour');
			INSERT INTO public.untdid_unit VALUES (1158, 0, now(), NULL, 'opencell.admin', NULL, 'KWN', 'rec20', 'Kilowatt hour per normalized cubic metre');
			INSERT INTO public.untdid_unit VALUES (1159, 0, now(), NULL, 'opencell.admin', NULL, 'KWO', 'rec20', 'kilogram of tungsten trioxide');
			INSERT INTO public.untdid_unit VALUES (1160, 0, now(), NULL, 'opencell.admin', NULL, 'KWS', 'rec20', 'Kilowatt hour per standard cubic metre');
			INSERT INTO public.untdid_unit VALUES (1161, 0, now(), NULL, 'opencell.admin', NULL, 'KWT', 'rec20', 'kilowatt');
			INSERT INTO public.untdid_unit VALUES (1162, 0, now(), NULL, 'opencell.admin', NULL, 'KWY', 'Rec20', 'kilowatt year');
			INSERT INTO public.untdid_unit VALUES (1163, 0, now(), NULL, 'opencell.admin', NULL, 'KX', 'rec20', 'millilitre per kilogram');
			INSERT INTO public.untdid_unit VALUES (1164, 0, now(), NULL, 'opencell.admin', NULL, 'L10', 'rec20', 'quart (US liquid) per minute');
			INSERT INTO public.untdid_unit VALUES (1165, 0, now(), NULL, 'opencell.admin', NULL, 'L11', 'rec20', 'quart (US liquid) per second');
			INSERT INTO public.untdid_unit VALUES (1166, 0, now(), NULL, 'opencell.admin', NULL, 'L12', 'rec20', 'metre per second kelvin');
			INSERT INTO public.untdid_unit VALUES (1167, 0, now(), NULL, 'opencell.admin', NULL, 'L13', 'rec20', 'metre per second bar');
			INSERT INTO public.untdid_unit VALUES (1168, 0, now(), NULL, 'opencell.admin', NULL, 'L14', 'rec20', 'square metre hour degree Celsius per kilocalorie (international table)');
			INSERT INTO public.untdid_unit VALUES (1169, 0, now(), NULL, 'opencell.admin', NULL, 'L15', 'rec20', 'millipascal second per kelvin');
			INSERT INTO public.untdid_unit VALUES (1170, 0, now(), NULL, 'opencell.admin', NULL, 'L16', 'rec20', 'millipascal second per bar');
			INSERT INTO public.untdid_unit VALUES (1171, 0, now(), NULL, 'opencell.admin', NULL, 'L17', 'rec20', 'milligram per cubic metre kelvin');
			INSERT INTO public.untdid_unit VALUES (1172, 0, now(), NULL, 'opencell.admin', NULL, 'L18', 'rec20', 'milligram per cubic metre bar');
			INSERT INTO public.untdid_unit VALUES (1173, 0, now(), NULL, 'opencell.admin', NULL, 'L19', 'rec20', 'millilitre per litre');
			INSERT INTO public.untdid_unit VALUES (1174, 0, now(), NULL, 'opencell.admin', NULL, 'L2', 'rec20', 'litre per minute');
			INSERT INTO public.untdid_unit VALUES (1175, 0, now(), NULL, 'opencell.admin', NULL, 'L20', 'rec20', 'reciprocal cubic millimetre');
			INSERT INTO public.untdid_unit VALUES (1176, 0, now(), NULL, 'opencell.admin', NULL, 'L21', 'rec20', 'cubic millimetre per cubic metre');
			INSERT INTO public.untdid_unit VALUES (1177, 0, now(), NULL, 'opencell.admin', NULL, 'L23', 'rec20', 'mole per hour');
			INSERT INTO public.untdid_unit VALUES (1178, 0, now(), NULL, 'opencell.admin', NULL, 'L24', 'rec20', 'mole per kilogram kelvin');
			INSERT INTO public.untdid_unit VALUES (1179, 0, now(), NULL, 'opencell.admin', NULL, 'L25', 'rec20', 'mole per kilogram bar');
			INSERT INTO public.untdid_unit VALUES (1180, 0, now(), NULL, 'opencell.admin', NULL, 'L26', 'rec20', 'mole per litre kelvin');
			INSERT INTO public.untdid_unit VALUES (1181, 0, now(), NULL, 'opencell.admin', NULL, 'L27', 'rec20', 'mole per litre bar');
			INSERT INTO public.untdid_unit VALUES (1182, 0, now(), NULL, 'opencell.admin', NULL, 'L28', 'rec20', 'mole per cubic metre kelvin');
			INSERT INTO public.untdid_unit VALUES (1183, 0, now(), NULL, 'opencell.admin', NULL, 'L29', 'rec20', 'mole per cubic metre bar');
			INSERT INTO public.untdid_unit VALUES (1184, 0, now(), NULL, 'opencell.admin', NULL, 'L30', 'rec20', 'mole per minute');
			INSERT INTO public.untdid_unit VALUES (1185, 0, now(), NULL, 'opencell.admin', NULL, 'L31', 'rec20', 'milliroentgen aequivalent men');
			INSERT INTO public.untdid_unit VALUES (1186, 0, now(), NULL, 'opencell.admin', NULL, 'L32', 'rec20', 'nanogram per kilogram');
			INSERT INTO public.untdid_unit VALUES (1187, 0, now(), NULL, 'opencell.admin', NULL, 'L33', 'rec20', 'ounce (avoirdupois) per day');
			INSERT INTO public.untdid_unit VALUES (1188, 0, now(), NULL, 'opencell.admin', NULL, 'L34', 'rec20', 'ounce (avoirdupois) per hour');
			INSERT INTO public.untdid_unit VALUES (1189, 0, now(), NULL, 'opencell.admin', NULL, 'L35', 'rec20', 'ounce (avoirdupois) per minute');
			INSERT INTO public.untdid_unit VALUES (1190, 0, now(), NULL, 'opencell.admin', NULL, 'L36', 'rec20', 'ounce (avoirdupois) per second');
			INSERT INTO public.untdid_unit VALUES (1191, 0, now(), NULL, 'opencell.admin', NULL, 'L37', 'rec20', 'ounce (avoirdupois) per gallon (UK)');
			INSERT INTO public.untdid_unit VALUES (1192, 0, now(), NULL, 'opencell.admin', NULL, 'L38', 'rec20', 'ounce (avoirdupois) per gallon (US)');
			INSERT INTO public.untdid_unit VALUES (1193, 0, now(), NULL, 'opencell.admin', NULL, 'L39', 'rec20', 'ounce (avoirdupois) per cubic inch');
			INSERT INTO public.untdid_unit VALUES (1194, 0, now(), NULL, 'opencell.admin', NULL, 'L40', 'rec20', 'ounce (avoirdupois)-force');
			INSERT INTO public.untdid_unit VALUES (1195, 0, now(), NULL, 'opencell.admin', NULL, 'L41', 'rec20', 'ounce (avoirdupois)-force inch');
			INSERT INTO public.untdid_unit VALUES (1196, 0, now(), NULL, 'opencell.admin', NULL, 'L42', 'rec20', 'picosiemens per metre');
			INSERT INTO public.untdid_unit VALUES (1197, 0, now(), NULL, 'opencell.admin', NULL, 'L43', 'rec20', 'peck (UK)');
			INSERT INTO public.untdid_unit VALUES (1198, 0, now(), NULL, 'opencell.admin', NULL, 'L44', 'rec20', 'peck (UK) per day');
			INSERT INTO public.untdid_unit VALUES (1199, 0, now(), NULL, 'opencell.admin', NULL, 'L45', 'rec20', 'peck (UK) per hour');
			INSERT INTO public.untdid_unit VALUES (1200, 0, now(), NULL, 'opencell.admin', NULL, 'L46', 'rec20', 'peck (UK) per minute');
			INSERT INTO public.untdid_unit VALUES (1201, 0, now(), NULL, 'opencell.admin', NULL, 'L47', 'rec20', 'peck (UK) per second');
			INSERT INTO public.untdid_unit VALUES (1202, 0, now(), NULL, 'opencell.admin', NULL, 'L48', 'rec20', 'peck (US dry) per day');
			INSERT INTO public.untdid_unit VALUES (1203, 0, now(), NULL, 'opencell.admin', NULL, 'L49', 'rec20', 'peck (US dry) per hour');
			INSERT INTO public.untdid_unit VALUES (1204, 0, now(), NULL, 'opencell.admin', NULL, 'L50', 'rec20', 'peck (US dry) per minute');
			INSERT INTO public.untdid_unit VALUES (1205, 0, now(), NULL, 'opencell.admin', NULL, 'L51', 'rec20', 'peck (US dry) per second');
			INSERT INTO public.untdid_unit VALUES (1206, 0, now(), NULL, 'opencell.admin', NULL, 'L52', 'rec20', 'psi per psi');
			INSERT INTO public.untdid_unit VALUES (1207, 0, now(), NULL, 'opencell.admin', NULL, 'L53', 'rec20', 'pint (UK) per day');
			INSERT INTO public.untdid_unit VALUES (1208, 0, now(), NULL, 'opencell.admin', NULL, 'L54', 'rec20', 'pint (UK) per hour');
			INSERT INTO public.untdid_unit VALUES (1209, 0, now(), NULL, 'opencell.admin', NULL, 'L55', 'rec20', 'pint (UK) per minute');
			INSERT INTO public.untdid_unit VALUES (1210, 0, now(), NULL, 'opencell.admin', NULL, 'L56', 'rec20', 'pint (UK) per second');
			INSERT INTO public.untdid_unit VALUES (1211, 0, now(), NULL, 'opencell.admin', NULL, 'L57', 'rec20', 'pint (US liquid) per day');
			INSERT INTO public.untdid_unit VALUES (1212, 0, now(), NULL, 'opencell.admin', NULL, 'L58', 'rec20', 'pint (US liquid) per hour');
			INSERT INTO public.untdid_unit VALUES (1213, 0, now(), NULL, 'opencell.admin', NULL, 'L59', 'rec20', 'pint (US liquid) per minute');
			INSERT INTO public.untdid_unit VALUES (1214, 0, now(), NULL, 'opencell.admin', NULL, 'L60', 'rec20', 'pint (US liquid) per second');
			INSERT INTO public.untdid_unit VALUES (1215, 0, now(), NULL, 'opencell.admin', NULL, 'L63', 'rec20', 'slug per day');
			INSERT INTO public.untdid_unit VALUES (1216, 0, now(), NULL, 'opencell.admin', NULL, 'L64', 'rec20', 'slug per foot second');
			INSERT INTO public.untdid_unit VALUES (1217, 0, now(), NULL, 'opencell.admin', NULL, 'L65', 'rec20', 'slug per cubic foot');
			INSERT INTO public.untdid_unit VALUES (1218, 0, now(), NULL, 'opencell.admin', NULL, 'L66', 'rec20', 'slug per hour');
			INSERT INTO public.untdid_unit VALUES (1219, 0, now(), NULL, 'opencell.admin', NULL, 'L67', 'rec20', 'slug per minute');
			INSERT INTO public.untdid_unit VALUES (1220, 0, now(), NULL, 'opencell.admin', NULL, 'L68', 'rec20', 'slug per second');
			INSERT INTO public.untdid_unit VALUES (1221, 0, now(), NULL, 'opencell.admin', NULL, 'L69', 'rec20', 'tonne per kelvin');
			INSERT INTO public.untdid_unit VALUES (1222, 0, now(), NULL, 'opencell.admin', NULL, 'L70', 'rec20', 'tonne per bar');
			INSERT INTO public.untdid_unit VALUES (1223, 0, now(), NULL, 'opencell.admin', NULL, 'L71', 'rec20', 'tonne per day');
			INSERT INTO public.untdid_unit VALUES (1224, 0, now(), NULL, 'opencell.admin', NULL, 'L72', 'rec20', 'tonne per day kelvin');
			INSERT INTO public.untdid_unit VALUES (1225, 0, now(), NULL, 'opencell.admin', NULL, 'L73', 'rec20', 'tonne per day bar');
			INSERT INTO public.untdid_unit VALUES (1226, 0, now(), NULL, 'opencell.admin', NULL, 'L74', 'rec20', 'tonne per hour kelvin');
			INSERT INTO public.untdid_unit VALUES (1227, 0, now(), NULL, 'opencell.admin', NULL, 'L75', 'rec20', 'tonne per hour bar');
			INSERT INTO public.untdid_unit VALUES (1228, 0, now(), NULL, 'opencell.admin', NULL, 'L76', 'rec20', 'tonne per cubic metre kelvin');
			INSERT INTO public.untdid_unit VALUES (1229, 0, now(), NULL, 'opencell.admin', NULL, 'L77', 'rec20', 'tonne per cubic metre bar');
			INSERT INTO public.untdid_unit VALUES (1230, 0, now(), NULL, 'opencell.admin', NULL, 'L78', 'rec20', 'tonne per minute');
			INSERT INTO public.untdid_unit VALUES (1231, 0, now(), NULL, 'opencell.admin', NULL, 'L79', 'rec20', 'tonne per minute kelvin');
			INSERT INTO public.untdid_unit VALUES (1232, 0, now(), NULL, 'opencell.admin', NULL, 'L80', 'rec20', 'tonne per minute bar');
			INSERT INTO public.untdid_unit VALUES (1233, 0, now(), NULL, 'opencell.admin', NULL, 'L81', 'rec20', 'tonne per second');
			INSERT INTO public.untdid_unit VALUES (1234, 0, now(), NULL, 'opencell.admin', NULL, 'L82', 'rec20', 'tonne per second kelvin');
			INSERT INTO public.untdid_unit VALUES (1235, 0, now(), NULL, 'opencell.admin', NULL, 'L83', 'rec20', 'tonne per second bar');
			INSERT INTO public.untdid_unit VALUES (1236, 0, now(), NULL, 'opencell.admin', NULL, 'L84', 'rec20', 'ton (UK shipping)');
			INSERT INTO public.untdid_unit VALUES (1237, 0, now(), NULL, 'opencell.admin', NULL, 'L85', 'rec20', 'ton long per day');
			INSERT INTO public.untdid_unit VALUES (1238, 0, now(), NULL, 'opencell.admin', NULL, 'L86', 'rec20', 'ton (US shipping)');
			INSERT INTO public.untdid_unit VALUES (1239, 0, now(), NULL, 'opencell.admin', NULL, 'L87', 'rec20', 'ton short per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1240, 0, now(), NULL, 'opencell.admin', NULL, 'L88', 'rec20', 'ton short per day');
			INSERT INTO public.untdid_unit VALUES (1241, 0, now(), NULL, 'opencell.admin', NULL, 'L89', 'rec20', 'ton short per hour degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1242, 0, now(), NULL, 'opencell.admin', NULL, 'L90', 'rec20', 'ton short per hour psi');
			INSERT INTO public.untdid_unit VALUES (1243, 0, now(), NULL, 'opencell.admin', NULL, 'L91', 'rec20', 'ton short per psi');
			INSERT INTO public.untdid_unit VALUES (1244, 0, now(), NULL, 'opencell.admin', NULL, 'L92', 'rec20', 'ton (UK long) per cubic yard');
			INSERT INTO public.untdid_unit VALUES (1245, 0, now(), NULL, 'opencell.admin', NULL, 'L93', 'rec20', 'ton (US short) per cubic yard');
			INSERT INTO public.untdid_unit VALUES (1246, 0, now(), NULL, 'opencell.admin', NULL, 'L94', 'rec20', 'ton-force (US short)');
			INSERT INTO public.untdid_unit VALUES (1247, 0, now(), NULL, 'opencell.admin', NULL, 'L95', 'rec20', 'common year');
			INSERT INTO public.untdid_unit VALUES (1248, 0, now(), NULL, 'opencell.admin', NULL, 'L96', 'rec20', 'sidereal year');
			INSERT INTO public.untdid_unit VALUES (1249, 0, now(), NULL, 'opencell.admin', NULL, 'L98', 'rec20', 'yard per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1250, 0, now(), NULL, 'opencell.admin', NULL, 'L99', 'rec20', 'yard per psi');
			INSERT INTO public.untdid_unit VALUES (1251, 0, now(), NULL, 'opencell.admin', NULL, 'LA', 'rec20', 'pound per cubic inch');
			INSERT INTO public.untdid_unit VALUES (1252, 0, now(), NULL, 'opencell.admin', NULL, 'LAC', 'rec20', 'lactose excess percentage');
			INSERT INTO public.untdid_unit VALUES (1253, 0, now(), NULL, 'opencell.admin', NULL, 'LBR', 'rec20', 'pound');
			INSERT INTO public.untdid_unit VALUES (1254, 0, now(), NULL, 'opencell.admin', NULL, 'LBT', 'rec20', 'troy pound (US)');
			INSERT INTO public.untdid_unit VALUES (1255, 0, now(), NULL, 'opencell.admin', NULL, 'LD', 'rec20', 'litre per day');
			INSERT INTO public.untdid_unit VALUES (1256, 0, now(), NULL, 'opencell.admin', NULL, 'LEF', 'rec20', 'leaf');
			INSERT INTO public.untdid_unit VALUES (1257, 0, now(), NULL, 'opencell.admin', NULL, 'LF', 'rec20', 'linear foot');
			INSERT INTO public.untdid_unit VALUES (1258, 0, now(), NULL, 'opencell.admin', NULL, 'LH', 'rec20', 'labour hour');
			INSERT INTO public.untdid_unit VALUES (1259, 0, now(), NULL, 'opencell.admin', NULL, 'LK', 'rec20', 'link');
			INSERT INTO public.untdid_unit VALUES (1260, 0, now(), NULL, 'opencell.admin', NULL, 'LM', 'rec20', 'linear metre');
			INSERT INTO public.untdid_unit VALUES (1261, 0, now(), NULL, 'opencell.admin', NULL, 'LN', 'rec20', 'length');
			INSERT INTO public.untdid_unit VALUES (1262, 0, now(), NULL, 'opencell.admin', NULL, 'LO', 'rec20', 'lot  [unit of procurement]');
			INSERT INTO public.untdid_unit VALUES (1263, 0, now(), NULL, 'opencell.admin', NULL, 'LP', 'rec20', 'liquid pound');
			INSERT INTO public.untdid_unit VALUES (1264, 0, now(), NULL, 'opencell.admin', NULL, 'LPA', 'rec20', 'litre of pure alcohol');
			INSERT INTO public.untdid_unit VALUES (1265, 0, now(), NULL, 'opencell.admin', NULL, 'LR', 'rec20', 'layer');
			INSERT INTO public.untdid_unit VALUES (1266, 0, now(), NULL, 'opencell.admin', NULL, 'LS', 'rec20', 'lump sum');
			INSERT INTO public.untdid_unit VALUES (1267, 0, now(), NULL, 'opencell.admin', NULL, 'LTN', 'rec20', 'ton (UK) or long ton (US)');
			INSERT INTO public.untdid_unit VALUES (1268, 0, now(), NULL, 'opencell.admin', NULL, 'LTR', 'rec20', 'litre');
			INSERT INTO public.untdid_unit VALUES (1269, 0, now(), NULL, 'opencell.admin', NULL, 'LUB', 'rec20', 'metric ton, lubricating oil');
			INSERT INTO public.untdid_unit VALUES (1270, 0, now(), NULL, 'opencell.admin', NULL, 'LUM', 'rec20', 'lumen');
			INSERT INTO public.untdid_unit VALUES (1271, 0, now(), NULL, 'opencell.admin', NULL, 'LUX', 'rec20', 'lux');
			INSERT INTO public.untdid_unit VALUES (1272, 0, now(), NULL, 'opencell.admin', NULL, 'LY', 'rec20', 'linear yard');
			INSERT INTO public.untdid_unit VALUES (1273, 0, now(), NULL, 'opencell.admin', NULL, 'M1', 'rec20', 'milligram per litre');
			INSERT INTO public.untdid_unit VALUES (1274, 0, now(), NULL, 'opencell.admin', NULL, 'M10', 'rec20', 'reciprocal cubic yard');
			INSERT INTO public.untdid_unit VALUES (1275, 0, now(), NULL, 'opencell.admin', NULL, 'M11', 'rec20', 'cubic yard per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1276, 0, now(), NULL, 'opencell.admin', NULL, 'M12', 'rec20', 'cubic yard per day');
			INSERT INTO public.untdid_unit VALUES (1277, 0, now(), NULL, 'opencell.admin', NULL, 'M13', 'rec20', 'cubic yard per hour');
			INSERT INTO public.untdid_unit VALUES (1278, 0, now(), NULL, 'opencell.admin', NULL, 'M14', 'rec20', 'cubic yard per psi');
			INSERT INTO public.untdid_unit VALUES (1279, 0, now(), NULL, 'opencell.admin', NULL, 'M15', 'rec20', 'cubic yard per minute');
			INSERT INTO public.untdid_unit VALUES (1280, 0, now(), NULL, 'opencell.admin', NULL, 'M16', 'rec20', 'cubic yard per second');
			INSERT INTO public.untdid_unit VALUES (1281, 0, now(), NULL, 'opencell.admin', NULL, 'M17', 'rec20', 'kilohertz metre');
			INSERT INTO public.untdid_unit VALUES (1282, 0, now(), NULL, 'opencell.admin', NULL, 'M18', 'rec20', 'gigahertz metre');
			INSERT INTO public.untdid_unit VALUES (1283, 0, now(), NULL, 'opencell.admin', NULL, 'M19', 'rec20', 'Beaufort');
			INSERT INTO public.untdid_unit VALUES (1284, 0, now(), NULL, 'opencell.admin', NULL, 'M20', 'rec20', 'reciprocal megakelvin or megakelvin to the power minus one');
			INSERT INTO public.untdid_unit VALUES (1285, 0, now(), NULL, 'opencell.admin', NULL, 'M21', 'rec20', 'reciprocal kilovolt - ampere reciprocal hour');
			INSERT INTO public.untdid_unit VALUES (1286, 0, now(), NULL, 'opencell.admin', NULL, 'M22', 'rec20', 'millilitre per square centimetre minute');
			INSERT INTO public.untdid_unit VALUES (1287, 0, now(), NULL, 'opencell.admin', NULL, 'M23', 'rec20', 'newton per centimetre');
			INSERT INTO public.untdid_unit VALUES (1288, 0, now(), NULL, 'opencell.admin', NULL, 'M24', 'rec20', 'ohm kilometre');
			INSERT INTO public.untdid_unit VALUES (1289, 0, now(), NULL, 'opencell.admin', NULL, 'M25', 'rec20', 'percent per degree Celsius');
			INSERT INTO public.untdid_unit VALUES (1290, 0, now(), NULL, 'opencell.admin', NULL, 'M26', 'rec20', 'gigaohm per metre');
			INSERT INTO public.untdid_unit VALUES (1291, 0, now(), NULL, 'opencell.admin', NULL, 'M27', 'rec20', 'megahertz metre');
			INSERT INTO public.untdid_unit VALUES (1292, 0, now(), NULL, 'opencell.admin', NULL, 'M29', 'rec20', 'kilogram per kilogram');
			INSERT INTO public.untdid_unit VALUES (1293, 0, now(), NULL, 'opencell.admin', NULL, 'M30', 'rec20', 'reciprocal volt - ampere reciprocal second');
			INSERT INTO public.untdid_unit VALUES (1294, 0, now(), NULL, 'opencell.admin', NULL, 'M31', 'rec20', 'kilogram per kilometre');
			INSERT INTO public.untdid_unit VALUES (1295, 0, now(), NULL, 'opencell.admin', NULL, 'M32', 'rec20', 'pascal second per litre');
			INSERT INTO public.untdid_unit VALUES (1296, 0, now(), NULL, 'opencell.admin', NULL, 'M33', 'rec20', 'millimole per litre');
			INSERT INTO public.untdid_unit VALUES (1297, 0, now(), NULL, 'opencell.admin', NULL, 'M34', 'rec20', 'newton metre per square metre');
			INSERT INTO public.untdid_unit VALUES (1298, 0, now(), NULL, 'opencell.admin', NULL, 'M35', 'rec20', 'millivolt - ampere');
			INSERT INTO public.untdid_unit VALUES (1299, 0, now(), NULL, 'opencell.admin', NULL, 'M36', 'rec20', '30-day month');
			INSERT INTO public.untdid_unit VALUES (1300, 0, now(), NULL, 'opencell.admin', NULL, 'M37', 'rec20', 'actual/360');
			INSERT INTO public.untdid_unit VALUES (1301, 0, now(), NULL, 'opencell.admin', NULL, 'M38', 'rec20', 'kilometre per second squared');
			INSERT INTO public.untdid_unit VALUES (1302, 0, now(), NULL, 'opencell.admin', NULL, 'M39', 'rec20', 'centimetre per second squared');
			INSERT INTO public.untdid_unit VALUES (1303, 0, now(), NULL, 'opencell.admin', NULL, 'M4', 'rec20', 'monetary value');
			INSERT INTO public.untdid_unit VALUES (1304, 0, now(), NULL, 'opencell.admin', NULL, 'M40', 'rec20', 'yard per second squared');
			INSERT INTO public.untdid_unit VALUES (1305, 0, now(), NULL, 'opencell.admin', NULL, 'M41', 'rec20', 'millimetre per second squared');
			INSERT INTO public.untdid_unit VALUES (1306, 0, now(), NULL, 'opencell.admin', NULL, 'M42', 'rec20', 'mile (statute mile) per second squared');
			INSERT INTO public.untdid_unit VALUES (1307, 0, now(), NULL, 'opencell.admin', NULL, 'M43', 'rec20', 'mil');
			INSERT INTO public.untdid_unit VALUES (1308, 0, now(), NULL, 'opencell.admin', NULL, 'M44', 'rec20', 'revolution');
			INSERT INTO public.untdid_unit VALUES (1309, 0, now(), NULL, 'opencell.admin', NULL, 'M45', 'rec20', 'degree [unit of angle] per second squared');
			INSERT INTO public.untdid_unit VALUES (1310, 0, now(), NULL, 'opencell.admin', NULL, 'M46', 'rec20', 'revolution per minute ');
			INSERT INTO public.untdid_unit VALUES (1311, 0, now(), NULL, 'opencell.admin', NULL, 'M47', 'rec20', 'circular mil ');
			INSERT INTO public.untdid_unit VALUES (1312, 0, now(), NULL, 'opencell.admin', NULL, 'M48', 'rec20', 'square mile (based on U.S. survey foot) ');
			INSERT INTO public.untdid_unit VALUES (1313, 0, now(), NULL, 'opencell.admin', NULL, 'M49', 'rec20', 'chain (based on U.S. survey foot)');
			INSERT INTO public.untdid_unit VALUES (1314, 0, now(), NULL, 'opencell.admin', NULL, 'M5', 'rec20', 'microcurie');
			INSERT INTO public.untdid_unit VALUES (1315, 0, now(), NULL, 'opencell.admin', NULL, 'M50', 'rec20', 'furlong');
			INSERT INTO public.untdid_unit VALUES (1316, 0, now(), NULL, 'opencell.admin', NULL, 'M51', 'rec20', 'foot (U.S. survey) ');
			INSERT INTO public.untdid_unit VALUES (1317, 0, now(), NULL, 'opencell.admin', NULL, 'M52', 'rec20', 'mile (based on U.S. survey foot) ');
			INSERT INTO public.untdid_unit VALUES (1318, 0, now(), NULL, 'opencell.admin', NULL, 'M53', 'rec20', 'metre per pascal');
			INSERT INTO public.untdid_unit VALUES (1319, 0, now(), NULL, 'opencell.admin', NULL, 'M55', 'rec20', 'metre per radiant');
			INSERT INTO public.untdid_unit VALUES (1320, 0, now(), NULL, 'opencell.admin', NULL, 'M56', 'rec20', 'shake');
			INSERT INTO public.untdid_unit VALUES (1321, 0, now(), NULL, 'opencell.admin', NULL, 'M57', 'rec20', 'mile per minute ');
			INSERT INTO public.untdid_unit VALUES (1322, 0, now(), NULL, 'opencell.admin', NULL, 'M58', 'rec20', 'mile per second ');
			INSERT INTO public.untdid_unit VALUES (1323, 0, now(), NULL, 'opencell.admin', NULL, 'M59', 'rec20', 'metre per second pascal');
			INSERT INTO public.untdid_unit VALUES (1324, 0, now(), NULL, 'opencell.admin', NULL, 'M60', 'rec20', 'metre per hour');
			INSERT INTO public.untdid_unit VALUES (1325, 0, now(), NULL, 'opencell.admin', NULL, 'M61', 'rec20', 'inch per year');
			INSERT INTO public.untdid_unit VALUES (1326, 0, now(), NULL, 'opencell.admin', NULL, 'M62', 'rec20', 'kilometre per second ');
			INSERT INTO public.untdid_unit VALUES (1327, 0, now(), NULL, 'opencell.admin', NULL, 'M63', 'rec20', 'inch per minute');
			INSERT INTO public.untdid_unit VALUES (1328, 0, now(), NULL, 'opencell.admin', NULL, 'M64', 'rec20', 'yard per second');
			INSERT INTO public.untdid_unit VALUES (1329, 0, now(), NULL, 'opencell.admin', NULL, 'M65', 'rec20', 'yard per minute');
			INSERT INTO public.untdid_unit VALUES (1330, 0, now(), NULL, 'opencell.admin', NULL, 'M66', 'rec20', 'yard per hour');
			INSERT INTO public.untdid_unit VALUES (1331, 0, now(), NULL, 'opencell.admin', NULL, 'M67', 'rec20', 'acre-foot (based on U.S. survey foot)');
			INSERT INTO public.untdid_unit VALUES (1332, 0, now(), NULL, 'opencell.admin', NULL, 'M68', 'rec20', 'cord (128 ft3)');
			INSERT INTO public.untdid_unit VALUES (1333, 0, now(), NULL, 'opencell.admin', NULL, 'M69', 'rec20', 'cubic mile (UK statute)');
			INSERT INTO public.untdid_unit VALUES (1334, 0, now(), NULL, 'opencell.admin', NULL, 'M7', 'rec20', 'micro-inch');
			INSERT INTO public.untdid_unit VALUES (1335, 0, now(), NULL, 'opencell.admin', NULL, 'M70', 'rec20', 'ton, register ');
			INSERT INTO public.untdid_unit VALUES (1336, 0, now(), NULL, 'opencell.admin', NULL, 'M71', 'rec20', 'cubic metre per pascal');
			INSERT INTO public.untdid_unit VALUES (1337, 0, now(), NULL, 'opencell.admin', NULL, 'M72', 'rec20', 'bel');
			INSERT INTO public.untdid_unit VALUES (1338, 0, now(), NULL, 'opencell.admin', NULL, 'M73', 'rec20', 'kilogram per cubic metre pascal');
			INSERT INTO public.untdid_unit VALUES (1339, 0, now(), NULL, 'opencell.admin', NULL, 'M74', 'rec20', 'kilogram per pascal');
			INSERT INTO public.untdid_unit VALUES (1340, 0, now(), NULL, 'opencell.admin', NULL, 'M75', 'rec20', 'kilopound-force');
			INSERT INTO public.untdid_unit VALUES (1341, 0, now(), NULL, 'opencell.admin', NULL, 'M76', 'rec20', 'poundal');
			INSERT INTO public.untdid_unit VALUES (1342, 0, now(), NULL, 'opencell.admin', NULL, 'M77', 'rec20', 'kilogram metre per second squared');
			INSERT INTO public.untdid_unit VALUES (1343, 0, now(), NULL, 'opencell.admin', NULL, 'M78', 'rec20', 'pond');
			INSERT INTO public.untdid_unit VALUES (1344, 0, now(), NULL, 'opencell.admin', NULL, 'M79', 'rec20', 'square foot per hour ');
			INSERT INTO public.untdid_unit VALUES (1345, 0, now(), NULL, 'opencell.admin', NULL, 'M80', 'rec20', 'stokes per pascal');
			INSERT INTO public.untdid_unit VALUES (1346, 0, now(), NULL, 'opencell.admin', NULL, 'M81', 'rec20', 'square centimetre per second');
			INSERT INTO public.untdid_unit VALUES (1347, 0, now(), NULL, 'opencell.admin', NULL, 'M82', 'rec20', 'square metre per second pascal');
			INSERT INTO public.untdid_unit VALUES (1348, 0, now(), NULL, 'opencell.admin', NULL, 'M83', 'rec20', 'denier ');
			INSERT INTO public.untdid_unit VALUES (1349, 0, now(), NULL, 'opencell.admin', NULL, 'M84', 'rec20', 'pound per yard ');
			INSERT INTO public.untdid_unit VALUES (1350, 0, now(), NULL, 'opencell.admin', NULL, 'M85', 'rec20', 'ton, assay');
			INSERT INTO public.untdid_unit VALUES (1351, 0, now(), NULL, 'opencell.admin', NULL, 'M86', 'rec20', 'pfund');
			INSERT INTO public.untdid_unit VALUES (1352, 0, now(), NULL, 'opencell.admin', NULL, 'M87', 'rec20', 'kilogram per second pascal');
			INSERT INTO public.untdid_unit VALUES (1353, 0, now(), NULL, 'opencell.admin', NULL, 'M88', 'rec20', 'tonne per month');
			INSERT INTO public.untdid_unit VALUES (1354, 0, now(), NULL, 'opencell.admin', NULL, 'M89', 'rec20', 'tonne per year');
			INSERT INTO public.untdid_unit VALUES (1355, 0, now(), NULL, 'opencell.admin', NULL, 'M9', 'rec20', 'million Btu per 1000 cubic foot');
			INSERT INTO public.untdid_unit VALUES (1356, 0, now(), NULL, 'opencell.admin', NULL, 'M90', 'rec20', 'kilopound per hour');
			INSERT INTO public.untdid_unit VALUES (1357, 0, now(), NULL, 'opencell.admin', NULL, 'M91', 'rec20', 'pound per pound');
			INSERT INTO public.untdid_unit VALUES (1358, 0, now(), NULL, 'opencell.admin', NULL, 'M92', 'rec20', 'pound-force foot');
			INSERT INTO public.untdid_unit VALUES (1359, 0, now(), NULL, 'opencell.admin', NULL, 'M93', 'rec20', 'newton metre per radian');
			INSERT INTO public.untdid_unit VALUES (1360, 0, now(), NULL, 'opencell.admin', NULL, 'M94', 'rec20', 'kilogram metre');
			INSERT INTO public.untdid_unit VALUES (1361, 0, now(), NULL, 'opencell.admin', NULL, 'M95', 'rec20', 'poundal foot');
			INSERT INTO public.untdid_unit VALUES (1362, 0, now(), NULL, 'opencell.admin', NULL, 'M96', 'rec20', 'poundal inch');
			INSERT INTO public.untdid_unit VALUES (1363, 0, now(), NULL, 'opencell.admin', NULL, 'M97', 'rec20', 'dyne metre');
			INSERT INTO public.untdid_unit VALUES (1364, 0, now(), NULL, 'opencell.admin', NULL, 'M98', 'rec20', 'kilogram centimetre per second');
			INSERT INTO public.untdid_unit VALUES (1365, 0, now(), NULL, 'opencell.admin', NULL, 'M99', 'rec20', 'gram centimetre per second');
			INSERT INTO public.untdid_unit VALUES (1366, 0, now(), NULL, 'opencell.admin', NULL, 'MAH', 'rec20', 'megavolt ampere reactive hour');
			INSERT INTO public.untdid_unit VALUES (1367, 0, now(), NULL, 'opencell.admin', NULL, 'MAL', 'rec20', 'megalitre');
			INSERT INTO public.untdid_unit VALUES (1368, 0, now(), NULL, 'opencell.admin', NULL, 'MAM', 'rec20', 'megametre');
			INSERT INTO public.untdid_unit VALUES (1369, 0, now(), NULL, 'opencell.admin', NULL, 'MAR', 'rec20', 'megavar');
			INSERT INTO public.untdid_unit VALUES (1370, 0, now(), NULL, 'opencell.admin', NULL, 'MAW', 'rec20', 'megawatt');
			INSERT INTO public.untdid_unit VALUES (1371, 0, now(), NULL, 'opencell.admin', NULL, 'MBE', 'rec20', 'thousand standard brick equivalent');
			INSERT INTO public.untdid_unit VALUES (1372, 0, now(), NULL, 'opencell.admin', NULL, 'MBF', 'rec20', 'thousand board foot');
			INSERT INTO public.untdid_unit VALUES (1373, 0, now(), NULL, 'opencell.admin', NULL, 'MBR', 'rec20', 'millibar');
			INSERT INTO public.untdid_unit VALUES (1374, 0, now(), NULL, 'opencell.admin', NULL, 'MC', 'rec20', 'microgram');
			INSERT INTO public.untdid_unit VALUES (1375, 0, now(), NULL, 'opencell.admin', NULL, 'MCU', 'rec20', 'millicurie');
			INSERT INTO public.untdid_unit VALUES (1376, 0, now(), NULL, 'opencell.admin', NULL, 'MD', 'rec20', 'air dry metric ton');
			INSERT INTO public.untdid_unit VALUES (1377, 0, now(), NULL, 'opencell.admin', NULL, 'MGM', 'rec20', 'milligram');
			INSERT INTO public.untdid_unit VALUES (1378, 0, now(), NULL, 'opencell.admin', NULL, 'MHZ', 'rec20', 'megahertz');
			INSERT INTO public.untdid_unit VALUES (1379, 0, now(), NULL, 'opencell.admin', NULL, 'MIK', 'rec20', 'square mile (statute mile)');
			INSERT INTO public.untdid_unit VALUES (1380, 0, now(), NULL, 'opencell.admin', NULL, 'MIL', 'rec20', 'thousand');
			INSERT INTO public.untdid_unit VALUES (1381, 0, now(), NULL, 'opencell.admin', NULL, 'MIN', 'rec20', 'minute [unit of time]');
			INSERT INTO public.untdid_unit VALUES (1382, 0, now(), NULL, 'opencell.admin', NULL, 'MIO', 'rec20', 'million');
			INSERT INTO public.untdid_unit VALUES (1383, 0, now(), NULL, 'opencell.admin', NULL, 'MIU', 'rec20', 'million international unit');
			INSERT INTO public.untdid_unit VALUES (1384, 0, now(), NULL, 'opencell.admin', NULL, 'MKD', 'Rec20', 'Square Metre Day');
			INSERT INTO public.untdid_unit VALUES (1385, 0, now(), NULL, 'opencell.admin', NULL, 'MKM', 'Rec20', 'Square Metre Month');
			INSERT INTO public.untdid_unit VALUES (1386, 0, now(), NULL, 'opencell.admin', NULL, 'MKW', 'Rec20', 'Square Metre Week');
			INSERT INTO public.untdid_unit VALUES (1387, 0, now(), NULL, 'opencell.admin', NULL, 'MLD', 'rec20', 'milliard');
			INSERT INTO public.untdid_unit VALUES (1388, 0, now(), NULL, 'opencell.admin', NULL, 'MLT', 'rec20', 'millilitre');
			INSERT INTO public.untdid_unit VALUES (1389, 0, now(), NULL, 'opencell.admin', NULL, 'MMK', 'rec20', 'square millimetre');
			INSERT INTO public.untdid_unit VALUES (1390, 0, now(), NULL, 'opencell.admin', NULL, 'MMQ', 'rec20', 'cubic millimetre');
			INSERT INTO public.untdid_unit VALUES (1391, 0, now(), NULL, 'opencell.admin', NULL, 'MMT', 'rec20', 'millimetre');
			INSERT INTO public.untdid_unit VALUES (1392, 0, now(), NULL, 'opencell.admin', NULL, 'MND', 'rec20', 'kilogram, dry weight');
			INSERT INTO public.untdid_unit VALUES (1393, 0, now(), NULL, 'opencell.admin', NULL, 'MNJ', 'Rec20', 'Mega Joule per Normalised cubic Metre');
			INSERT INTO public.untdid_unit VALUES (1394, 0, now(), NULL, 'opencell.admin', NULL, 'MON', 'rec20', 'month');
			INSERT INTO public.untdid_unit VALUES (1395, 0, now(), NULL, 'opencell.admin', NULL, 'MPA', 'rec20', 'megapascal');
			INSERT INTO public.untdid_unit VALUES (1396, 0, now(), NULL, 'opencell.admin', NULL, 'MQD', 'Rec20', 'Cubic Metre Day');
			INSERT INTO public.untdid_unit VALUES (1397, 0, now(), NULL, 'opencell.admin', NULL, 'MQH', 'rec20', 'cubic metre per hour');
			INSERT INTO public.untdid_unit VALUES (1398, 0, now(), NULL, 'opencell.admin', NULL, 'MQM', 'Rec20', 'Cubic Metre Month');
			INSERT INTO public.untdid_unit VALUES (1399, 0, now(), NULL, 'opencell.admin', NULL, 'MQS', 'rec20', 'cubic metre per second');
			INSERT INTO public.untdid_unit VALUES (1400, 0, now(), NULL, 'opencell.admin', NULL, 'MQW', 'Rec20', 'Cubic Metre Week');
			INSERT INTO public.untdid_unit VALUES (1401, 0, now(), NULL, 'opencell.admin', NULL, 'MRD', 'Rec20', 'Metre Day');
			INSERT INTO public.untdid_unit VALUES (1402, 0, now(), NULL, 'opencell.admin', NULL, 'MRM', 'Rec20', 'Metre Month');
			INSERT INTO public.untdid_unit VALUES (1403, 0, now(), NULL, 'opencell.admin', NULL, 'MRW', 'Rec20', 'Metre Week');
			INSERT INTO public.untdid_unit VALUES (1404, 0, now(), NULL, 'opencell.admin', NULL, 'MSK', 'rec20', 'metre per second squared');
			INSERT INTO public.untdid_unit VALUES (1405, 0, now(), NULL, 'opencell.admin', NULL, 'MTK', 'rec20', 'square metre');
			INSERT INTO public.untdid_unit VALUES (1406, 0, now(), NULL, 'opencell.admin', NULL, 'MTQ', 'rec20', 'cubic metre');
			INSERT INTO public.untdid_unit VALUES (1407, 0, now(), NULL, 'opencell.admin', NULL, 'MTR', 'rec20', 'metre');
			INSERT INTO public.untdid_unit VALUES (1408, 0, now(), NULL, 'opencell.admin', NULL, 'MTS', 'rec20', 'metre per second');
			INSERT INTO public.untdid_unit VALUES (1409, 0, now(), NULL, 'opencell.admin', NULL, 'MTZ', 'Rec20', 'milihertz');
			INSERT INTO public.untdid_unit VALUES (1410, 0, now(), NULL, 'opencell.admin', NULL, 'MVA', 'rec20', 'megavolt - ampere');
			INSERT INTO public.untdid_unit VALUES (1411, 0, now(), NULL, 'opencell.admin', NULL, 'MWH', 'rec20', 'megawatt hour (1000 kW.h)');
			INSERT INTO public.untdid_unit VALUES (1412, 0, now(), NULL, 'opencell.admin', NULL, 'N1', 'rec20', 'pen calorie');
			INSERT INTO public.untdid_unit VALUES (1413, 0, now(), NULL, 'opencell.admin', NULL, 'N10', 'rec20', 'pound foot per second');
			INSERT INTO public.untdid_unit VALUES (1414, 0, now(), NULL, 'opencell.admin', NULL, 'N11', 'rec20', 'pound inch per second');
			INSERT INTO public.untdid_unit VALUES (1415, 0, now(), NULL, 'opencell.admin', NULL, 'N12', 'rec20', 'Pferdestaerke');
			INSERT INTO public.untdid_unit VALUES (1416, 0, now(), NULL, 'opencell.admin', NULL, 'N13', 'rec20', 'centimetre of mercury (0 ºC)');
			INSERT INTO public.untdid_unit VALUES (1417, 0, now(), NULL, 'opencell.admin', NULL, 'N14', 'rec20', 'centimetre of water (4 ºC)');
			INSERT INTO public.untdid_unit VALUES (1418, 0, now(), NULL, 'opencell.admin', NULL, 'N15', 'rec20', 'foot of water (39.2 ºF)');
			INSERT INTO public.untdid_unit VALUES (1419, 0, now(), NULL, 'opencell.admin', NULL, 'N16', 'rec20', 'inch of mercury (32 ºF)');
			INSERT INTO public.untdid_unit VALUES (1420, 0, now(), NULL, 'opencell.admin', NULL, 'N17', 'rec20', 'inch of mercury (60 ºF)');
			INSERT INTO public.untdid_unit VALUES (1421, 0, now(), NULL, 'opencell.admin', NULL, 'N18', 'rec20', 'inch of water (39.2 ºF)');
			INSERT INTO public.untdid_unit VALUES (1422, 0, now(), NULL, 'opencell.admin', NULL, 'N19', 'rec20', 'inch of water (60 ºF)');
			INSERT INTO public.untdid_unit VALUES (1423, 0, now(), NULL, 'opencell.admin', NULL, 'N20', 'rec20', 'kip per square inch');
			INSERT INTO public.untdid_unit VALUES (1424, 0, now(), NULL, 'opencell.admin', NULL, 'N21', 'rec20', 'poundal per square foot ');
			INSERT INTO public.untdid_unit VALUES (1425, 0, now(), NULL, 'opencell.admin', NULL, 'N22', 'rec20', 'ounce (avoirdupois) per square inch ');
			INSERT INTO public.untdid_unit VALUES (1426, 0, now(), NULL, 'opencell.admin', NULL, 'N23', 'rec20', 'conventional metre of water');
			INSERT INTO public.untdid_unit VALUES (1427, 0, now(), NULL, 'opencell.admin', NULL, 'N24', 'rec20', 'gram per square millimetre');
			INSERT INTO public.untdid_unit VALUES (1428, 0, now(), NULL, 'opencell.admin', NULL, 'N25', 'rec20', 'pound per square yard');
			INSERT INTO public.untdid_unit VALUES (1429, 0, now(), NULL, 'opencell.admin', NULL, 'N26', 'rec20', 'poundal per square inch');
			INSERT INTO public.untdid_unit VALUES (1430, 0, now(), NULL, 'opencell.admin', NULL, 'N27', 'rec20', 'foot to the fourth power ');
			INSERT INTO public.untdid_unit VALUES (1431, 0, now(), NULL, 'opencell.admin', NULL, 'N28', 'rec20', 'cubic decimetre per kilogram');
			INSERT INTO public.untdid_unit VALUES (1432, 0, now(), NULL, 'opencell.admin', NULL, 'N29', 'rec20', 'cubic foot per pound');
			INSERT INTO public.untdid_unit VALUES (1433, 0, now(), NULL, 'opencell.admin', NULL, 'N3', 'rec20', 'print point');
			INSERT INTO public.untdid_unit VALUES (1434, 0, now(), NULL, 'opencell.admin', NULL, 'N30', 'rec20', 'cubic inch per pound');
			INSERT INTO public.untdid_unit VALUES (1435, 0, now(), NULL, 'opencell.admin', NULL, 'N31', 'rec20', 'kilonewton per metre');
			INSERT INTO public.untdid_unit VALUES (1436, 0, now(), NULL, 'opencell.admin', NULL, 'N32', 'rec20', 'poundal per inch');
			INSERT INTO public.untdid_unit VALUES (1437, 0, now(), NULL, 'opencell.admin', NULL, 'N33', 'rec20', 'pound-force per yard');
			INSERT INTO public.untdid_unit VALUES (1438, 0, now(), NULL, 'opencell.admin', NULL, 'N34', 'rec20', 'poundal second per square foot ');
			INSERT INTO public.untdid_unit VALUES (1439, 0, now(), NULL, 'opencell.admin', NULL, 'N35', 'rec20', 'poise per pascal');
			INSERT INTO public.untdid_unit VALUES (1440, 0, now(), NULL, 'opencell.admin', NULL, 'N36', 'rec20', 'newton second per square metre');
			INSERT INTO public.untdid_unit VALUES (1441, 0, now(), NULL, 'opencell.admin', NULL, 'N37', 'rec20', 'kilogram per metre second');
			INSERT INTO public.untdid_unit VALUES (1442, 0, now(), NULL, 'opencell.admin', NULL, 'N38', 'rec20', 'kilogram per metre minute');
			INSERT INTO public.untdid_unit VALUES (1443, 0, now(), NULL, 'opencell.admin', NULL, 'N39', 'rec20', 'kilogram per metre day');
			INSERT INTO public.untdid_unit VALUES (1444, 0, now(), NULL, 'opencell.admin', NULL, 'N40', 'rec20', 'kilogram per metre hour');
			INSERT INTO public.untdid_unit VALUES (1445, 0, now(), NULL, 'opencell.admin', NULL, 'N41', 'rec20', 'gram per centimetre second');
			INSERT INTO public.untdid_unit VALUES (1446, 0, now(), NULL, 'opencell.admin', NULL, 'N42', 'rec20', 'poundal second per square inch');
			INSERT INTO public.untdid_unit VALUES (1447, 0, now(), NULL, 'opencell.admin', NULL, 'N43', 'rec20', 'pound per foot minute');
			INSERT INTO public.untdid_unit VALUES (1448, 0, now(), NULL, 'opencell.admin', NULL, 'N44', 'rec20', 'pound per foot day');
			INSERT INTO public.untdid_unit VALUES (1449, 0, now(), NULL, 'opencell.admin', NULL, 'N45', 'rec20', 'cubic metre per second pascal');
			INSERT INTO public.untdid_unit VALUES (1450, 0, now(), NULL, 'opencell.admin', NULL, 'N46', 'rec20', 'foot poundal');
			INSERT INTO public.untdid_unit VALUES (1451, 0, now(), NULL, 'opencell.admin', NULL, 'N47', 'rec20', 'inch poundal');
			INSERT INTO public.untdid_unit VALUES (1452, 0, now(), NULL, 'opencell.admin', NULL, 'N48', 'rec20', 'watt per square centimetre ');
			INSERT INTO public.untdid_unit VALUES (1453, 0, now(), NULL, 'opencell.admin', NULL, 'N49', 'rec20', 'watt per square inch ');
			INSERT INTO public.untdid_unit VALUES (1454, 0, now(), NULL, 'opencell.admin', NULL, 'N50', 'rec20', 'British thermal unit (international table) per square foot hour');
			INSERT INTO public.untdid_unit VALUES (1455, 0, now(), NULL, 'opencell.admin', NULL, 'N51', 'rec20', 'British thermal unit (thermochemical) per square foot hour');
			INSERT INTO public.untdid_unit VALUES (1456, 0, now(), NULL, 'opencell.admin', NULL, 'N52', 'rec20', 'British thermal unit (thermochemical) per square foot minute');
			INSERT INTO public.untdid_unit VALUES (1457, 0, now(), NULL, 'opencell.admin', NULL, 'N53', 'rec20', 'British thermal unit (international table) per square foot second');
			INSERT INTO public.untdid_unit VALUES (1458, 0, now(), NULL, 'opencell.admin', NULL, 'N54', 'rec20', 'British thermal unit (thermochemical) per square foot second');
			INSERT INTO public.untdid_unit VALUES (1459, 0, now(), NULL, 'opencell.admin', NULL, 'N55', 'rec20', 'British thermal unit (international table) per square inch second');
			INSERT INTO public.untdid_unit VALUES (1460, 0, now(), NULL, 'opencell.admin', NULL, 'N56', 'rec20', 'calorie (thermochemical) per square centimetre minute');
			INSERT INTO public.untdid_unit VALUES (1461, 0, now(), NULL, 'opencell.admin', NULL, 'N57', 'rec20', 'calorie (thermochemical) per square centimetre second');
			INSERT INTO public.untdid_unit VALUES (1462, 0, now(), NULL, 'opencell.admin', NULL, 'N58', 'rec20', 'British thermal unit (international table) per cubic foot ');
			INSERT INTO public.untdid_unit VALUES (1463, 0, now(), NULL, 'opencell.admin', NULL, 'N59', 'rec20', 'British thermal unit (thermochemical) per cubic foot');
			INSERT INTO public.untdid_unit VALUES (1464, 0, now(), NULL, 'opencell.admin', NULL, 'N60', 'rec20', 'British thermal unit (international table) per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1465, 0, now(), NULL, 'opencell.admin', NULL, 'N61', 'rec20', 'British thermal unit (thermochemical) per degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1466, 0, now(), NULL, 'opencell.admin', NULL, 'N62', 'rec20', 'British thermal unit (international table) per degree Rankine');
			INSERT INTO public.untdid_unit VALUES (1467, 0, now(), NULL, 'opencell.admin', NULL, 'N63', 'rec20', 'British thermal unit (thermochemical) per degree Rankine');
			INSERT INTO public.untdid_unit VALUES (1468, 0, now(), NULL, 'opencell.admin', NULL, 'N64', 'rec20', 'British thermal unit (thermochemical) per pound degree Rankine');
			INSERT INTO public.untdid_unit VALUES (1469, 0, now(), NULL, 'opencell.admin', NULL, 'N65', 'rec20', 'kilocalorie (international table) per gram kelvin');
			INSERT INTO public.untdid_unit VALUES (1470, 0, now(), NULL, 'opencell.admin', NULL, 'N66', 'rec20', 'British thermal unit (39 ºF) ');
			INSERT INTO public.untdid_unit VALUES (1471, 0, now(), NULL, 'opencell.admin', NULL, 'N67', 'rec20', 'British thermal unit (59 ºF)');
			INSERT INTO public.untdid_unit VALUES (1472, 0, now(), NULL, 'opencell.admin', NULL, 'N68', 'rec20', 'British thermal unit (60 ºF) ');
			INSERT INTO public.untdid_unit VALUES (1473, 0, now(), NULL, 'opencell.admin', NULL, 'N69', 'rec20', 'calorie (20 ºC) ');
			INSERT INTO public.untdid_unit VALUES (1474, 0, now(), NULL, 'opencell.admin', NULL, 'N70', 'rec20', 'quad (1015 BtuIT)');
			INSERT INTO public.untdid_unit VALUES (1475, 0, now(), NULL, 'opencell.admin', NULL, 'N71', 'rec20', 'therm (EC)');
			INSERT INTO public.untdid_unit VALUES (1476, 0, now(), NULL, 'opencell.admin', NULL, 'N72', 'rec20', 'therm (U.S.)');
			INSERT INTO public.untdid_unit VALUES (1477, 0, now(), NULL, 'opencell.admin', NULL, 'N73', 'rec20', 'British thermal unit (thermochemical) per pound');
			INSERT INTO public.untdid_unit VALUES (1478, 0, now(), NULL, 'opencell.admin', NULL, 'N74', 'rec20', 'British thermal unit (international table) per hour square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1479, 0, now(), NULL, 'opencell.admin', NULL, 'N75', 'rec20', 'British thermal unit (thermochemical) per hour square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1480, 0, now(), NULL, 'opencell.admin', NULL, 'N76', 'rec20', 'British thermal unit (international table) per second square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1555, 0, now(), NULL, 'opencell.admin', NULL, 'P31', 'rec20', 'stilb');
			INSERT INTO public.untdid_unit VALUES (1481, 0, now(), NULL, 'opencell.admin', NULL, 'N77', 'rec20', 'British thermal unit (thermochemical) per second square foot degree Fahrenheit');
			INSERT INTO public.untdid_unit VALUES (1482, 0, now(), NULL, 'opencell.admin', NULL, 'N78', 'rec20', 'kilowatt per square metre kelvin');
			INSERT INTO public.untdid_unit VALUES (1483, 0, now(), NULL, 'opencell.admin', NULL, 'N79', 'rec20', 'kelvin per pascal');
			INSERT INTO public.untdid_unit VALUES (1484, 0, now(), NULL, 'opencell.admin', NULL, 'N80', 'rec20', 'watt per metre degree Celsius');
			INSERT INTO public.untdid_unit VALUES (1485, 0, now(), NULL, 'opencell.admin', NULL, 'N81', 'rec20', 'kilowatt per metre kelvin');
			INSERT INTO public.untdid_unit VALUES (1486, 0, now(), NULL, 'opencell.admin', NULL, 'N82', 'rec20', 'kilowatt per metre degree Celsius');
			INSERT INTO public.untdid_unit VALUES (1487, 0, now(), NULL, 'opencell.admin', NULL, 'N83', 'rec20', 'metre per degree Celcius metre');
			INSERT INTO public.untdid_unit VALUES (1488, 0, now(), NULL, 'opencell.admin', NULL, 'N84', 'rec20', 'degree Fahrenheit hour per British thermal unit (international table)');
			INSERT INTO public.untdid_unit VALUES (1489, 0, now(), NULL, 'opencell.admin', NULL, 'N85', 'rec20', 'degree Fahrenheit hour per British thermal unit (thermochemical)');
			INSERT INTO public.untdid_unit VALUES (1490, 0, now(), NULL, 'opencell.admin', NULL, 'N86', 'rec20', 'degree Fahrenheit second per British thermal unit (international table)');
			INSERT INTO public.untdid_unit VALUES (1491, 0, now(), NULL, 'opencell.admin', NULL, 'N87', 'rec20', 'degree Fahrenheit second per British thermal unit (thermochemical)');
			INSERT INTO public.untdid_unit VALUES (1492, 0, now(), NULL, 'opencell.admin', NULL, 'N88', 'rec20', 'degree Fahrenheit hour square foot per British thermal unit (international table) inch');
			INSERT INTO public.untdid_unit VALUES (1493, 0, now(), NULL, 'opencell.admin', NULL, 'N89', 'rec20', 'degree Fahrenheit hour square foot per British thermal unit (thermochemical) inch');
			INSERT INTO public.untdid_unit VALUES (1494, 0, now(), NULL, 'opencell.admin', NULL, 'N90', 'rec20', 'kilofarad');
			INSERT INTO public.untdid_unit VALUES (1495, 0, now(), NULL, 'opencell.admin', NULL, 'N91', 'rec20', 'reciprocal joule');
			INSERT INTO public.untdid_unit VALUES (1496, 0, now(), NULL, 'opencell.admin', NULL, 'N92', 'rec20', 'picosiemens');
			INSERT INTO public.untdid_unit VALUES (1497, 0, now(), NULL, 'opencell.admin', NULL, 'N93', 'rec20', 'ampere per pascal');
			INSERT INTO public.untdid_unit VALUES (1498, 0, now(), NULL, 'opencell.admin', NULL, 'N94', 'rec20', 'franklin');
			INSERT INTO public.untdid_unit VALUES (1499, 0, now(), NULL, 'opencell.admin', NULL, 'N95', 'rec20', 'ampere minute');
			INSERT INTO public.untdid_unit VALUES (1500, 0, now(), NULL, 'opencell.admin', NULL, 'N96', 'rec20', 'biot');
			INSERT INTO public.untdid_unit VALUES (1501, 0, now(), NULL, 'opencell.admin', NULL, 'N97', 'rec20', 'gilbert');
			INSERT INTO public.untdid_unit VALUES (1502, 0, now(), NULL, 'opencell.admin', NULL, 'N98', 'rec20', 'volt per pascal');
			INSERT INTO public.untdid_unit VALUES (1503, 0, now(), NULL, 'opencell.admin', NULL, 'N99', 'rec20', 'picovolt');
			INSERT INTO public.untdid_unit VALUES (1504, 0, now(), NULL, 'opencell.admin', NULL, 'NA', 'rec20', 'milligram per kilogram');
			INSERT INTO public.untdid_unit VALUES (1505, 0, now(), NULL, 'opencell.admin', NULL, 'NAR', 'rec20', 'number of articles');
			INSERT INTO public.untdid_unit VALUES (1506, 0, now(), NULL, 'opencell.admin', NULL, 'NCL', 'rec20', 'number of cells');
			INSERT INTO public.untdid_unit VALUES (1507, 0, now(), NULL, 'opencell.admin', NULL, 'NEW', 'rec20', 'newton');
			INSERT INTO public.untdid_unit VALUES (1508, 0, now(), NULL, 'opencell.admin', NULL, 'NF', 'rec20', 'message');
			INSERT INTO public.untdid_unit VALUES (1509, 0, now(), NULL, 'opencell.admin', NULL, 'NIL', 'rec20', 'nil');
			INSERT INTO public.untdid_unit VALUES (1510, 0, now(), NULL, 'opencell.admin', NULL, 'NIU', 'rec20', 'number of international units');
			INSERT INTO public.untdid_unit VALUES (1511, 0, now(), NULL, 'opencell.admin', NULL, 'NL', 'rec20', 'load');
			INSERT INTO public.untdid_unit VALUES (1512, 0, now(), NULL, 'opencell.admin', NULL, 'NM3', 'rec20', 'Normalised cubic metre');
			INSERT INTO public.untdid_unit VALUES (1513, 0, now(), NULL, 'opencell.admin', NULL, 'NMI', 'rec20', 'nautical mile');
			INSERT INTO public.untdid_unit VALUES (1514, 0, now(), NULL, 'opencell.admin', NULL, 'NMP', 'rec20', 'number of packs');
			INSERT INTO public.untdid_unit VALUES (1515, 0, now(), NULL, 'opencell.admin', NULL, 'NPT', 'rec20', 'number of parts');
			INSERT INTO public.untdid_unit VALUES (1516, 0, now(), NULL, 'opencell.admin', NULL, 'NT', 'rec20', 'net ton');
			INSERT INTO public.untdid_unit VALUES (1517, 0, now(), NULL, 'opencell.admin', NULL, 'NTU', 'Rec20', 'Nephelometric turbidity unit');
			INSERT INTO public.untdid_unit VALUES (1518, 0, now(), NULL, 'opencell.admin', NULL, 'NU', 'rec20', 'newton metre');
			INSERT INTO public.untdid_unit VALUES (1519, 0, now(), NULL, 'opencell.admin', NULL, 'NX', 'rec20', 'part per thousand');
			INSERT INTO public.untdid_unit VALUES (1520, 0, now(), NULL, 'opencell.admin', NULL, 'OA', 'rec20', 'panel');
			INSERT INTO public.untdid_unit VALUES (1521, 0, now(), NULL, 'opencell.admin', NULL, 'ODE', 'rec20', 'ozone depletion equivalent');
			INSERT INTO public.untdid_unit VALUES (1522, 0, now(), NULL, 'opencell.admin', NULL, 'ODG', 'rec20', 'ODS Grams');
			INSERT INTO public.untdid_unit VALUES (1523, 0, now(), NULL, 'opencell.admin', NULL, 'ODK', 'rec20', 'ODS Kilograms');
			INSERT INTO public.untdid_unit VALUES (1524, 0, now(), NULL, 'opencell.admin', NULL, 'ODM', 'rec20', 'ODS Milligrams');
			INSERT INTO public.untdid_unit VALUES (1525, 0, now(), NULL, 'opencell.admin', NULL, 'OHM', 'rec20', 'ohm');
			INSERT INTO public.untdid_unit VALUES (1526, 0, now(), NULL, 'opencell.admin', NULL, 'ON', 'rec20', 'ounce per square yard');
			INSERT INTO public.untdid_unit VALUES (1527, 0, now(), NULL, 'opencell.admin', NULL, 'ONZ', 'rec20', 'ounce (avoirdupois)');
			INSERT INTO public.untdid_unit VALUES (1528, 0, now(), NULL, 'opencell.admin', NULL, 'OPM', 'rec20', 'oscillations per minute');
			INSERT INTO public.untdid_unit VALUES (1529, 0, now(), NULL, 'opencell.admin', NULL, 'OT', 'rec20', 'overtime hour');
			INSERT INTO public.untdid_unit VALUES (1530, 0, now(), NULL, 'opencell.admin', NULL, 'OZA', 'rec20', 'fluid ounce (US)');
			INSERT INTO public.untdid_unit VALUES (1531, 0, now(), NULL, 'opencell.admin', NULL, 'OZI', 'rec20', 'fluid ounce (UK)');
			INSERT INTO public.untdid_unit VALUES (1532, 0, now(), NULL, 'opencell.admin', NULL, 'P1', 'rec20', 'percent');
			INSERT INTO public.untdid_unit VALUES (1533, 0, now(), NULL, 'opencell.admin', NULL, 'P10', 'rec20', 'coulomb per metre');
			INSERT INTO public.untdid_unit VALUES (1534, 0, now(), NULL, 'opencell.admin', NULL, 'P11', 'rec20', 'kiloweber');
			INSERT INTO public.untdid_unit VALUES (1535, 0, now(), NULL, 'opencell.admin', NULL, 'P12', 'rec20', 'gamma');
			INSERT INTO public.untdid_unit VALUES (1536, 0, now(), NULL, 'opencell.admin', NULL, 'P13', 'rec20', 'kilotesla');
			INSERT INTO public.untdid_unit VALUES (1537, 0, now(), NULL, 'opencell.admin', NULL, 'P14', 'rec20', 'joule per second');
			INSERT INTO public.untdid_unit VALUES (1538, 0, now(), NULL, 'opencell.admin', NULL, 'P15', 'rec20', 'joule per minute');
			INSERT INTO public.untdid_unit VALUES (1539, 0, now(), NULL, 'opencell.admin', NULL, 'P16', 'rec20', 'joule per hour');
			INSERT INTO public.untdid_unit VALUES (1540, 0, now(), NULL, 'opencell.admin', NULL, 'P17', 'rec20', 'joule per day');
			INSERT INTO public.untdid_unit VALUES (1541, 0, now(), NULL, 'opencell.admin', NULL, 'P18', 'rec20', 'kilojoule per second');
			INSERT INTO public.untdid_unit VALUES (1542, 0, now(), NULL, 'opencell.admin', NULL, 'P19', 'rec20', 'kilojoule per minute');
			INSERT INTO public.untdid_unit VALUES (1543, 0, now(), NULL, 'opencell.admin', NULL, 'P2', 'rec20', 'pound per foot');
			INSERT INTO public.untdid_unit VALUES (1544, 0, now(), NULL, 'opencell.admin', NULL, 'P20', 'rec20', 'kilojoule per hour');
			INSERT INTO public.untdid_unit VALUES (1545, 0, now(), NULL, 'opencell.admin', NULL, 'P21', 'rec20', 'kilojoule per day');
			INSERT INTO public.untdid_unit VALUES (1546, 0, now(), NULL, 'opencell.admin', NULL, 'P22', 'rec20', 'nanoohm');
			INSERT INTO public.untdid_unit VALUES (1547, 0, now(), NULL, 'opencell.admin', NULL, 'P23', 'rec20', 'ohm circular-mil per foot ');
			INSERT INTO public.untdid_unit VALUES (1548, 0, now(), NULL, 'opencell.admin', NULL, 'P24', 'rec20', 'kilohenry');
			INSERT INTO public.untdid_unit VALUES (1549, 0, now(), NULL, 'opencell.admin', NULL, 'P25', 'rec20', 'lumen per square foot ');
			INSERT INTO public.untdid_unit VALUES (1550, 0, now(), NULL, 'opencell.admin', NULL, 'P26', 'rec20', 'phot');
			INSERT INTO public.untdid_unit VALUES (1551, 0, now(), NULL, 'opencell.admin', NULL, 'P27', 'rec20', 'footcandle');
			INSERT INTO public.untdid_unit VALUES (1552, 0, now(), NULL, 'opencell.admin', NULL, 'P28', 'rec20', 'candela per square inch ');
			INSERT INTO public.untdid_unit VALUES (1553, 0, now(), NULL, 'opencell.admin', NULL, 'P29', 'rec20', 'footlambert');
			INSERT INTO public.untdid_unit VALUES (1554, 0, now(), NULL, 'opencell.admin', NULL, 'P30', 'rec20', 'lambert');
			INSERT INTO public.untdid_unit VALUES (1556, 0, now(), NULL, 'opencell.admin', NULL, 'P32', 'rec20', 'candela per square foot');
			INSERT INTO public.untdid_unit VALUES (1557, 0, now(), NULL, 'opencell.admin', NULL, 'P33', 'rec20', 'kilocandela');
			INSERT INTO public.untdid_unit VALUES (1558, 0, now(), NULL, 'opencell.admin', NULL, 'P34', 'rec20', 'millicandela');
			INSERT INTO public.untdid_unit VALUES (1559, 0, now(), NULL, 'opencell.admin', NULL, 'P35', 'rec20', 'Hefner-Kerze');
			INSERT INTO public.untdid_unit VALUES (1560, 0, now(), NULL, 'opencell.admin', NULL, 'P36', 'rec20', 'international candle ');
			INSERT INTO public.untdid_unit VALUES (1561, 0, now(), NULL, 'opencell.admin', NULL, 'P37', 'rec20', 'British thermal unit (international table) per square foot');
			INSERT INTO public.untdid_unit VALUES (1562, 0, now(), NULL, 'opencell.admin', NULL, 'P38', 'rec20', 'British thermal unit (thermochemical) per square foot');
			INSERT INTO public.untdid_unit VALUES (1563, 0, now(), NULL, 'opencell.admin', NULL, 'P39', 'rec20', 'calorie (thermochemical) per square centimetre ');
			INSERT INTO public.untdid_unit VALUES (1564, 0, now(), NULL, 'opencell.admin', NULL, 'P40', 'rec20', 'langley');
			INSERT INTO public.untdid_unit VALUES (1565, 0, now(), NULL, 'opencell.admin', NULL, 'P41', 'rec20', 'decade (logarithmic)');
			INSERT INTO public.untdid_unit VALUES (1566, 0, now(), NULL, 'opencell.admin', NULL, 'P42', 'rec20', 'pascal squared second');
			INSERT INTO public.untdid_unit VALUES (1567, 0, now(), NULL, 'opencell.admin', NULL, 'P43', 'rec20', 'bel per metre');
			INSERT INTO public.untdid_unit VALUES (1568, 0, now(), NULL, 'opencell.admin', NULL, 'P44', 'rec20', 'pound mole');
			INSERT INTO public.untdid_unit VALUES (1569, 0, now(), NULL, 'opencell.admin', NULL, 'P45', 'rec20', 'pound mole per second');
			INSERT INTO public.untdid_unit VALUES (1570, 0, now(), NULL, 'opencell.admin', NULL, 'P46', 'rec20', 'pound mole per minute');
			INSERT INTO public.untdid_unit VALUES (1571, 0, now(), NULL, 'opencell.admin', NULL, 'P47', 'rec20', 'kilomole per kilogram');
			INSERT INTO public.untdid_unit VALUES (1572, 0, now(), NULL, 'opencell.admin', NULL, 'P48', 'rec20', 'pound mole per pound');
			INSERT INTO public.untdid_unit VALUES (1573, 0, now(), NULL, 'opencell.admin', NULL, 'P49', 'rec20', 'newton square metre per ampere');
			INSERT INTO public.untdid_unit VALUES (1574, 0, now(), NULL, 'opencell.admin', NULL, 'P5', 'rec20', 'five pack');
			INSERT INTO public.untdid_unit VALUES (1575, 0, now(), NULL, 'opencell.admin', NULL, 'P50', 'rec20', 'weber metre');
			INSERT INTO public.untdid_unit VALUES (1576, 0, now(), NULL, 'opencell.admin', NULL, 'P51', 'rec20', 'mol per kilogram pascal');
			INSERT INTO public.untdid_unit VALUES (1577, 0, now(), NULL, 'opencell.admin', NULL, 'P52', 'rec20', 'mol per cubic metre pascal');
			INSERT INTO public.untdid_unit VALUES (1578, 0, now(), NULL, 'opencell.admin', NULL, 'P53', 'rec20', 'unit pole ');
			INSERT INTO public.untdid_unit VALUES (1579, 0, now(), NULL, 'opencell.admin', NULL, 'P54', 'rec20', 'milligray per second');
			INSERT INTO public.untdid_unit VALUES (1580, 0, now(), NULL, 'opencell.admin', NULL, 'P55', 'rec20', 'microgray per second');
			INSERT INTO public.untdid_unit VALUES (1581, 0, now(), NULL, 'opencell.admin', NULL, 'P56', 'rec20', 'nanogray per second');
			INSERT INTO public.untdid_unit VALUES (1582, 0, now(), NULL, 'opencell.admin', NULL, 'P57', 'rec20', 'gray per minute');
			INSERT INTO public.untdid_unit VALUES (1583, 0, now(), NULL, 'opencell.admin', NULL, 'P58', 'rec20', 'milligray per minute');
			INSERT INTO public.untdid_unit VALUES (1584, 0, now(), NULL, 'opencell.admin', NULL, 'P59', 'rec20', 'microgray per minute');
			INSERT INTO public.untdid_unit VALUES (1585, 0, now(), NULL, 'opencell.admin', NULL, 'P60', 'rec20', 'nanogray per minute');
			INSERT INTO public.untdid_unit VALUES (1586, 0, now(), NULL, 'opencell.admin', NULL, 'P61', 'rec20', 'gray per hour');
			INSERT INTO public.untdid_unit VALUES (1587, 0, now(), NULL, 'opencell.admin', NULL, 'P62', 'rec20', 'milligray per hour');
			INSERT INTO public.untdid_unit VALUES (1588, 0, now(), NULL, 'opencell.admin', NULL, 'P63', 'rec20', 'microgray per hour');
			INSERT INTO public.untdid_unit VALUES (1589, 0, now(), NULL, 'opencell.admin', NULL, 'P64', 'rec20', 'nanogray per hour');
			INSERT INTO public.untdid_unit VALUES (1590, 0, now(), NULL, 'opencell.admin', NULL, 'P65', 'rec20', 'sievert per second');
			INSERT INTO public.untdid_unit VALUES (1591, 0, now(), NULL, 'opencell.admin', NULL, 'P66', 'rec20', 'millisievert per second');
			INSERT INTO public.untdid_unit VALUES (1592, 0, now(), NULL, 'opencell.admin', NULL, 'P67', 'rec20', 'microsievert per second');
			INSERT INTO public.untdid_unit VALUES (1593, 0, now(), NULL, 'opencell.admin', NULL, 'P68', 'rec20', 'nanosievert per second');
			INSERT INTO public.untdid_unit VALUES (1594, 0, now(), NULL, 'opencell.admin', NULL, 'P69', 'rec20', 'rem per second');
			INSERT INTO public.untdid_unit VALUES (1595, 0, now(), NULL, 'opencell.admin', NULL, 'P70', 'rec20', 'sievert per hour');
			INSERT INTO public.untdid_unit VALUES (1596, 0, now(), NULL, 'opencell.admin', NULL, 'P71', 'rec20', 'millisievert per hour');
			INSERT INTO public.untdid_unit VALUES (1597, 0, now(), NULL, 'opencell.admin', NULL, 'P72', 'rec20', 'microsievert per hour');
			INSERT INTO public.untdid_unit VALUES (1598, 0, now(), NULL, 'opencell.admin', NULL, 'P73', 'rec20', 'nanosievert per hour');
			INSERT INTO public.untdid_unit VALUES (1599, 0, now(), NULL, 'opencell.admin', NULL, 'P74', 'rec20', 'sievert per minute');
			INSERT INTO public.untdid_unit VALUES (1600, 0, now(), NULL, 'opencell.admin', NULL, 'P75', 'rec20', 'millisievert per minute');
			INSERT INTO public.untdid_unit VALUES (1601, 0, now(), NULL, 'opencell.admin', NULL, 'P76', 'rec20', 'microsievert per minute');
			INSERT INTO public.untdid_unit VALUES (1602, 0, now(), NULL, 'opencell.admin', NULL, 'P77', 'rec20', 'nanosievert per minute');
			INSERT INTO public.untdid_unit VALUES (1603, 0, now(), NULL, 'opencell.admin', NULL, 'P78', 'rec20', 'reciprocal square inch');
			INSERT INTO public.untdid_unit VALUES (1604, 0, now(), NULL, 'opencell.admin', NULL, 'P79', 'rec20', 'pascal square metre per kilogram');
			INSERT INTO public.untdid_unit VALUES (1605, 0, now(), NULL, 'opencell.admin', NULL, 'P80', 'rec20', 'millipascal per metre');
			INSERT INTO public.untdid_unit VALUES (1606, 0, now(), NULL, 'opencell.admin', NULL, 'P81', 'rec20', 'kilopascal per metre');
			INSERT INTO public.untdid_unit VALUES (1607, 0, now(), NULL, 'opencell.admin', NULL, 'P82', 'rec20', 'hectopascal per metre');
			INSERT INTO public.untdid_unit VALUES (1608, 0, now(), NULL, 'opencell.admin', NULL, 'P83', 'rec20', 'standard atmosphere per metre');
			INSERT INTO public.untdid_unit VALUES (1609, 0, now(), NULL, 'opencell.admin', NULL, 'P84', 'rec20', 'technical atmosphere per metre');
			INSERT INTO public.untdid_unit VALUES (1610, 0, now(), NULL, 'opencell.admin', NULL, 'P85', 'rec20', 'torr per metre');
			INSERT INTO public.untdid_unit VALUES (1611, 0, now(), NULL, 'opencell.admin', NULL, 'P86', 'rec20', 'psi per inch');
			INSERT INTO public.untdid_unit VALUES (1612, 0, now(), NULL, 'opencell.admin', NULL, 'P87', 'rec20', 'cubic metre per second square metre');
			INSERT INTO public.untdid_unit VALUES (1613, 0, now(), NULL, 'opencell.admin', NULL, 'P88', 'rec20', 'rhe');
			INSERT INTO public.untdid_unit VALUES (1614, 0, now(), NULL, 'opencell.admin', NULL, 'P89', 'rec20', 'pound-force foot per inch');
			INSERT INTO public.untdid_unit VALUES (1615, 0, now(), NULL, 'opencell.admin', NULL, 'P90', 'rec20', 'pound-force inch per inch ');
			INSERT INTO public.untdid_unit VALUES (1616, 0, now(), NULL, 'opencell.admin', NULL, 'P91', 'rec20', 'perm (0 ºC) ');
			INSERT INTO public.untdid_unit VALUES (1617, 0, now(), NULL, 'opencell.admin', NULL, 'P92', 'rec20', 'perm (23 ºC) ');
			INSERT INTO public.untdid_unit VALUES (1618, 0, now(), NULL, 'opencell.admin', NULL, 'P93', 'rec20', 'byte per second');
			INSERT INTO public.untdid_unit VALUES (1619, 0, now(), NULL, 'opencell.admin', NULL, 'P94', 'rec20', 'kilobyte per second');
			INSERT INTO public.untdid_unit VALUES (1620, 0, now(), NULL, 'opencell.admin', NULL, 'P95', 'rec20', 'megabyte per second');
			INSERT INTO public.untdid_unit VALUES (1621, 0, now(), NULL, 'opencell.admin', NULL, 'P96', 'rec20', 'reciprocal volt');
			INSERT INTO public.untdid_unit VALUES (1622, 0, now(), NULL, 'opencell.admin', NULL, 'P97', 'rec20', 'reciprocal radian');
			INSERT INTO public.untdid_unit VALUES (1623, 0, now(), NULL, 'opencell.admin', NULL, 'P98', 'rec20', 'pascal to the power sum of stoichiometric numbers');
			INSERT INTO public.untdid_unit VALUES (1624, 0, now(), NULL, 'opencell.admin', NULL, 'P99', 'rec20', 'mole per cubiv metre to the power sum of stoichiometric numbers');
			INSERT INTO public.untdid_unit VALUES (1625, 0, now(), NULL, 'opencell.admin', NULL, 'PAL', 'rec20', 'pascal');
			INSERT INTO public.untdid_unit VALUES (1626, 0, now(), NULL, 'opencell.admin', NULL, 'PD', 'rec20', 'pad');
			INSERT INTO public.untdid_unit VALUES (1627, 0, now(), NULL, 'opencell.admin', NULL, 'PFL', 'rec20', 'proof litre');
			INSERT INTO public.untdid_unit VALUES (1628, 0, now(), NULL, 'opencell.admin', NULL, 'PGL', 'rec20', 'proof gallon');
			INSERT INTO public.untdid_unit VALUES (1629, 0, now(), NULL, 'opencell.admin', NULL, 'PI', 'rec20', 'pitch');
			INSERT INTO public.untdid_unit VALUES (1630, 0, now(), NULL, 'opencell.admin', NULL, 'PLA', 'rec20', 'degree Plato');
			INSERT INTO public.untdid_unit VALUES (1631, 0, now(), NULL, 'opencell.admin', NULL, 'PO', 'rec20', 'pound per inch of length');
			INSERT INTO public.untdid_unit VALUES (1632, 0, now(), NULL, 'opencell.admin', NULL, 'PQ', 'rec20', 'page per inch');
			INSERT INTO public.untdid_unit VALUES (1633, 0, now(), NULL, 'opencell.admin', NULL, 'PR', 'rec20', 'pair');
			INSERT INTO public.untdid_unit VALUES (1634, 0, now(), NULL, 'opencell.admin', NULL, 'PS', 'rec20', 'pound-force per square inch');
			INSERT INTO public.untdid_unit VALUES (1635, 0, now(), NULL, 'opencell.admin', NULL, 'PTD', 'rec20', 'dry pint (US)');
			INSERT INTO public.untdid_unit VALUES (1636, 0, now(), NULL, 'opencell.admin', NULL, 'PTI', 'rec20', 'pint (UK)');
			INSERT INTO public.untdid_unit VALUES (1637, 0, now(), NULL, 'opencell.admin', NULL, 'PTL', 'rec20', 'liquid pint (US)');
			INSERT INTO public.untdid_unit VALUES (1638, 0, now(), NULL, 'opencell.admin', NULL, 'PTN', 'rec20', 'portion');
			INSERT INTO public.untdid_unit VALUES (1639, 0, now(), NULL, 'opencell.admin', NULL, 'Q10', 'rec20', 'joule per tesla');
			INSERT INTO public.untdid_unit VALUES (1640, 0, now(), NULL, 'opencell.admin', NULL, 'Q11', 'rec20', 'erlang');
			INSERT INTO public.untdid_unit VALUES (1641, 0, now(), NULL, 'opencell.admin', NULL, 'Q12', 'rec20', 'octet');
			INSERT INTO public.untdid_unit VALUES (1642, 0, now(), NULL, 'opencell.admin', NULL, 'Q13', 'rec20', 'octet per second');
			INSERT INTO public.untdid_unit VALUES (1643, 0, now(), NULL, 'opencell.admin', NULL, 'Q14', 'rec20', 'shannon');
			INSERT INTO public.untdid_unit VALUES (1644, 0, now(), NULL, 'opencell.admin', NULL, 'Q15', 'rec20', 'hartley');
			INSERT INTO public.untdid_unit VALUES (1645, 0, now(), NULL, 'opencell.admin', NULL, 'Q16', 'rec20', 'natural unit of information');
			INSERT INTO public.untdid_unit VALUES (1646, 0, now(), NULL, 'opencell.admin', NULL, 'Q17', 'rec20', 'shannon per second');
			INSERT INTO public.untdid_unit VALUES (1647, 0, now(), NULL, 'opencell.admin', NULL, 'Q18', 'rec20', 'hartley per second');
			INSERT INTO public.untdid_unit VALUES (1648, 0, now(), NULL, 'opencell.admin', NULL, 'Q19', 'rec20', 'natural unit of information per second');
			INSERT INTO public.untdid_unit VALUES (1649, 0, now(), NULL, 'opencell.admin', NULL, 'Q20', 'rec20', 'second per kilogramm');
			INSERT INTO public.untdid_unit VALUES (1650, 0, now(), NULL, 'opencell.admin', NULL, 'Q21', 'rec20', 'watt square metre');
			INSERT INTO public.untdid_unit VALUES (1651, 0, now(), NULL, 'opencell.admin', NULL, 'Q22', 'rec20', 'second per radian cubic metre');
			INSERT INTO public.untdid_unit VALUES (1652, 0, now(), NULL, 'opencell.admin', NULL, 'Q23', 'rec20', 'weber to the power minus one');
			INSERT INTO public.untdid_unit VALUES (1653, 0, now(), NULL, 'opencell.admin', NULL, 'Q24', 'rec20', 'reciprocal inch');
			INSERT INTO public.untdid_unit VALUES (1654, 0, now(), NULL, 'opencell.admin', NULL, 'Q25', 'rec20', 'dioptre');
			INSERT INTO public.untdid_unit VALUES (1655, 0, now(), NULL, 'opencell.admin', NULL, 'Q26', 'rec20', 'one per one');
			INSERT INTO public.untdid_unit VALUES (1656, 0, now(), NULL, 'opencell.admin', NULL, 'Q27', 'rec20', 'newton metre per metre');
			INSERT INTO public.untdid_unit VALUES (1657, 0, now(), NULL, 'opencell.admin', NULL, 'Q28', 'rec20', 'kilogram per square metre pascal second');
			INSERT INTO public.untdid_unit VALUES (1658, 0, now(), NULL, 'opencell.admin', NULL, 'Q29', 'rec20', 'microgram per hectogram');
			INSERT INTO public.untdid_unit VALUES (1659, 0, now(), NULL, 'opencell.admin', NULL, 'Q3', 'rec20', 'meal');
			INSERT INTO public.untdid_unit VALUES (1660, 0, now(), NULL, 'opencell.admin', NULL, 'Q30', 'rec20', 'pH (potential of Hydrogen)');
			INSERT INTO public.untdid_unit VALUES (1661, 0, now(), NULL, 'opencell.admin', NULL, 'Q31', 'rec20', 'kilojoule per gram');
			INSERT INTO public.untdid_unit VALUES (1662, 0, now(), NULL, 'opencell.admin', NULL, 'Q32', 'rec20', 'femtolitre');
			INSERT INTO public.untdid_unit VALUES (1663, 0, now(), NULL, 'opencell.admin', NULL, 'Q33', 'rec20', 'picolitre');
			INSERT INTO public.untdid_unit VALUES (1664, 0, now(), NULL, 'opencell.admin', NULL, 'Q34', 'rec20', 'nanolitre');
			INSERT INTO public.untdid_unit VALUES (1665, 0, now(), NULL, 'opencell.admin', NULL, 'Q35', 'rec20', 'megawatts per minute');
			INSERT INTO public.untdid_unit VALUES (1666, 0, now(), NULL, 'opencell.admin', NULL, 'Q36', 'rec20', 'square metre per cubic metre');
			INSERT INTO public.untdid_unit VALUES (1667, 0, now(), NULL, 'opencell.admin', NULL, 'Q37', 'rec20', 'Standard cubic metre per day');
			INSERT INTO public.untdid_unit VALUES (1668, 0, now(), NULL, 'opencell.admin', NULL, 'Q38', 'rec20', 'Standard cubic metre per hour');
			INSERT INTO public.untdid_unit VALUES (1669, 0, now(), NULL, 'opencell.admin', NULL, 'Q39', 'rec20', 'Normalized cubic metre per day');
			INSERT INTO public.untdid_unit VALUES (1670, 0, now(), NULL, 'opencell.admin', NULL, 'Q40', 'rec20', 'Normalized cubic metre per hour');
			INSERT INTO public.untdid_unit VALUES (1671, 0, now(), NULL, 'opencell.admin', NULL, 'Q41', 'rec20', 'Joule per normalised cubic metre');
			INSERT INTO public.untdid_unit VALUES (1672, 0, now(), NULL, 'opencell.admin', NULL, 'Q42', 'rec20', 'Joule per standard cubic metre');
			INSERT INTO public.untdid_unit VALUES (1673, 0, now(), NULL, 'opencell.admin', NULL, 'QA', 'rec20', 'page - facsimile');
			INSERT INTO public.untdid_unit VALUES (1674, 0, now(), NULL, 'opencell.admin', NULL, 'QAN', 'rec20', 'quarter (of a year)');
			INSERT INTO public.untdid_unit VALUES (1675, 0, now(), NULL, 'opencell.admin', NULL, 'QB', 'rec20', 'page - hardcopy');
			INSERT INTO public.untdid_unit VALUES (1676, 0, now(), NULL, 'opencell.admin', NULL, 'QR', 'rec20', 'quire');
			INSERT INTO public.untdid_unit VALUES (1677, 0, now(), NULL, 'opencell.admin', NULL, 'QTD', 'rec20', 'dry quart (US)');
			INSERT INTO public.untdid_unit VALUES (1678, 0, now(), NULL, 'opencell.admin', NULL, 'QTI', 'rec20', 'quart (UK)');
			INSERT INTO public.untdid_unit VALUES (1679, 0, now(), NULL, 'opencell.admin', NULL, 'QTL', 'rec20', 'liquid quart (US)');
			INSERT INTO public.untdid_unit VALUES (1680, 0, now(), NULL, 'opencell.admin', NULL, 'QTR', 'rec20', 'quarter (UK)');
			INSERT INTO public.untdid_unit VALUES (1681, 0, now(), NULL, 'opencell.admin', NULL, 'R1', 'rec20', 'pica');
			INSERT INTO public.untdid_unit VALUES (1682, 0, now(), NULL, 'opencell.admin', NULL, 'R9', 'rec20', 'thousand cubic metre');
			INSERT INTO public.untdid_unit VALUES (1683, 0, now(), NULL, 'opencell.admin', NULL, 'RH', 'rec20', 'running or operating hour');
			INSERT INTO public.untdid_unit VALUES (1684, 0, now(), NULL, 'opencell.admin', NULL, 'RM', 'rec20', 'ream');
			INSERT INTO public.untdid_unit VALUES (1685, 0, now(), NULL, 'opencell.admin', NULL, 'ROM', 'rec20', 'room');
			INSERT INTO public.untdid_unit VALUES (1686, 0, now(), NULL, 'opencell.admin', NULL, 'RP', 'rec20', 'pound per ream');
			INSERT INTO public.untdid_unit VALUES (1687, 0, now(), NULL, 'opencell.admin', NULL, 'RPM', 'rec20', 'revolutions per minute');
			INSERT INTO public.untdid_unit VALUES (1688, 0, now(), NULL, 'opencell.admin', NULL, 'RPS', 'rec20', 'revolutions per second');
			INSERT INTO public.untdid_unit VALUES (1689, 0, now(), NULL, 'opencell.admin', NULL, 'RT', 'rec20', 'revenue ton mile');
			INSERT INTO public.untdid_unit VALUES (1690, 0, now(), NULL, 'opencell.admin', NULL, 'S3', 'rec20', 'square foot per second');
			INSERT INTO public.untdid_unit VALUES (1691, 0, now(), NULL, 'opencell.admin', NULL, 'S4', 'rec20', 'square metre per second');
			INSERT INTO public.untdid_unit VALUES (1692, 0, now(), NULL, 'opencell.admin', NULL, 'SAN', 'rec20', 'half year (6 months)');
			INSERT INTO public.untdid_unit VALUES (1693, 0, now(), NULL, 'opencell.admin', NULL, 'SCO', 'rec20', 'score');
			INSERT INTO public.untdid_unit VALUES (1694, 0, now(), NULL, 'opencell.admin', NULL, 'SCR', 'rec20', 'scruple');
			INSERT INTO public.untdid_unit VALUES (1695, 0, now(), NULL, 'opencell.admin', NULL, 'SEC', 'rec20', 'second [unit of time]');
			INSERT INTO public.untdid_unit VALUES (1696, 0, now(), NULL, 'opencell.admin', NULL, 'SET', 'rec20', 'set');
			INSERT INTO public.untdid_unit VALUES (1697, 0, now(), NULL, 'opencell.admin', NULL, 'SG', 'rec20', 'segment');
			INSERT INTO public.untdid_unit VALUES (1698, 0, now(), NULL, 'opencell.admin', NULL, 'SIE', 'rec20', 'siemens');
			INSERT INTO public.untdid_unit VALUES (1699, 0, now(), NULL, 'opencell.admin', NULL, 'SM3', 'rec20', 'Standard cubic metre');
			INSERT INTO public.untdid_unit VALUES (1700, 0, now(), NULL, 'opencell.admin', NULL, 'SMI', 'rec20', 'mile (statute mile)');
			INSERT INTO public.untdid_unit VALUES (1701, 0, now(), NULL, 'opencell.admin', NULL, 'SQ', 'rec20', 'square');
			INSERT INTO public.untdid_unit VALUES (1702, 0, now(), NULL, 'opencell.admin', NULL, 'SQR', 'rec20', 'square, roofing');
			INSERT INTO public.untdid_unit VALUES (1703, 0, now(), NULL, 'opencell.admin', NULL, 'SR', 'rec20', 'strip');
			INSERT INTO public.untdid_unit VALUES (1704, 0, now(), NULL, 'opencell.admin', NULL, 'STC', 'rec20', 'stick');
			INSERT INTO public.untdid_unit VALUES (1705, 0, now(), NULL, 'opencell.admin', NULL, 'STI', 'rec20', 'stone (UK)');
			INSERT INTO public.untdid_unit VALUES (1706, 0, now(), NULL, 'opencell.admin', NULL, 'STK', 'rec20', 'stick, cigarette');
			INSERT INTO public.untdid_unit VALUES (1707, 0, now(), NULL, 'opencell.admin', NULL, 'STL', 'rec20', 'standard litre');
			INSERT INTO public.untdid_unit VALUES (1708, 0, now(), NULL, 'opencell.admin', NULL, 'STN', 'rec20', 'ton (US) or short ton (UK/US)');
			INSERT INTO public.untdid_unit VALUES (1709, 0, now(), NULL, 'opencell.admin', NULL, 'STW', 'rec20', 'straw');
			INSERT INTO public.untdid_unit VALUES (1710, 0, now(), NULL, 'opencell.admin', NULL, 'SW', 'rec20', 'skein');
			INSERT INTO public.untdid_unit VALUES (1711, 0, now(), NULL, 'opencell.admin', NULL, 'SX', 'rec20', 'shipment');
			INSERT INTO public.untdid_unit VALUES (1712, 0, now(), NULL, 'opencell.admin', NULL, 'SYR', 'rec20', 'syringe');
			INSERT INTO public.untdid_unit VALUES (1713, 0, now(), NULL, 'opencell.admin', NULL, 'T0', 'rec20', 'telecommunication line in service');
			INSERT INTO public.untdid_unit VALUES (1714, 0, now(), NULL, 'opencell.admin', NULL, 'T3', 'rec20', 'thousand piece');
			INSERT INTO public.untdid_unit VALUES (1715, 0, now(), NULL, 'opencell.admin', NULL, 'TAH', 'rec20', 'kiloampere hour (thousand ampere hour)');
			INSERT INTO public.untdid_unit VALUES (1716, 0, now(), NULL, 'opencell.admin', NULL, 'TAN', 'rec20', 'total acid number');
			INSERT INTO public.untdid_unit VALUES (1717, 0, now(), NULL, 'opencell.admin', NULL, 'TI', 'rec20', 'thousand square inch');
			INSERT INTO public.untdid_unit VALUES (1718, 0, now(), NULL, 'opencell.admin', NULL, 'TIC', 'rec20', 'metric ton, including container');
			INSERT INTO public.untdid_unit VALUES (1719, 0, now(), NULL, 'opencell.admin', NULL, 'TIP', 'rec20', 'metric ton, including inner packaging');
			INSERT INTO public.untdid_unit VALUES (1720, 0, now(), NULL, 'opencell.admin', NULL, 'TKM', 'rec20', 'tonne kilometre');
			INSERT INTO public.untdid_unit VALUES (1721, 0, now(), NULL, 'opencell.admin', NULL, 'TMS', 'rec20', 'kilogram of imported meat, less offal');
			INSERT INTO public.untdid_unit VALUES (1722, 0, now(), NULL, 'opencell.admin', NULL, 'TNE', 'rec20', 'tonne (metric ton)');
			INSERT INTO public.untdid_unit VALUES (1723, 0, now(), NULL, 'opencell.admin', NULL, 'TP', 'rec20', 'ten pack');
			INSERT INTO public.untdid_unit VALUES (1724, 0, now(), NULL, 'opencell.admin', NULL, 'TPI', 'rec20', 'teeth per inch');
			INSERT INTO public.untdid_unit VALUES (1725, 0, now(), NULL, 'opencell.admin', NULL, 'TPR', 'rec20', 'ten pair');
			INSERT INTO public.untdid_unit VALUES (1726, 0, now(), NULL, 'opencell.admin', NULL, 'TQD', 'rec20', 'thousand cubic metre per day');
			INSERT INTO public.untdid_unit VALUES (1727, 0, now(), NULL, 'opencell.admin', NULL, 'TRL', 'rec20', 'trillion (EUR)');
			INSERT INTO public.untdid_unit VALUES (1728, 0, now(), NULL, 'opencell.admin', NULL, 'TST', 'rec20', 'ten set');
			INSERT INTO public.untdid_unit VALUES (1729, 0, now(), NULL, 'opencell.admin', NULL, 'TTS', 'rec20', 'ten thousand sticks');
			INSERT INTO public.untdid_unit VALUES (1730, 0, now(), NULL, 'opencell.admin', NULL, 'U1', 'rec20', 'treatment');
			INSERT INTO public.untdid_unit VALUES (1731, 0, now(), NULL, 'opencell.admin', NULL, 'U2', 'rec20', 'tablet');
			INSERT INTO public.untdid_unit VALUES (1732, 0, now(), NULL, 'opencell.admin', NULL, 'UB', 'rec20', 'telecommunication line in service average');
			INSERT INTO public.untdid_unit VALUES (1733, 0, now(), NULL, 'opencell.admin', NULL, 'UC', 'rec20', 'telecommunication port');
			INSERT INTO public.untdid_unit VALUES (1734, 0, now(), NULL, 'opencell.admin', NULL, 'VA', 'rec20', 'volt - ampere per kilogram');
			INSERT INTO public.untdid_unit VALUES (1735, 0, now(), NULL, 'opencell.admin', NULL, 'VLT', 'rec20', 'volt');
			INSERT INTO public.untdid_unit VALUES (1736, 0, now(), NULL, 'opencell.admin', NULL, 'VP', 'rec20', 'percent volume');
			INSERT INTO public.untdid_unit VALUES (1737, 0, now(), NULL, 'opencell.admin', NULL, 'W2', 'rec20', 'wet kilo');
			INSERT INTO public.untdid_unit VALUES (1738, 0, now(), NULL, 'opencell.admin', NULL, 'WA', 'rec20', 'watt per kilogram');
			INSERT INTO public.untdid_unit VALUES (1739, 0, now(), NULL, 'opencell.admin', NULL, 'WB', 'rec20', 'wet pound');
			INSERT INTO public.untdid_unit VALUES (1740, 0, now(), NULL, 'opencell.admin', NULL, 'WCD', 'rec20', 'cord');
			INSERT INTO public.untdid_unit VALUES (1741, 0, now(), NULL, 'opencell.admin', NULL, 'WE', 'rec20', 'wet ton');
			INSERT INTO public.untdid_unit VALUES (1742, 0, now(), NULL, 'opencell.admin', NULL, 'WEB', 'rec20', 'weber');
			INSERT INTO public.untdid_unit VALUES (1743, 0, now(), NULL, 'opencell.admin', NULL, 'WEE', 'rec20', 'week');
			INSERT INTO public.untdid_unit VALUES (1744, 0, now(), NULL, 'opencell.admin', NULL, 'WG', 'rec20', 'wine gallon');
			INSERT INTO public.untdid_unit VALUES (1745, 0, now(), NULL, 'opencell.admin', NULL, 'WHR', 'rec20', 'watt hour');
			INSERT INTO public.untdid_unit VALUES (1746, 0, now(), NULL, 'opencell.admin', NULL, 'WM', 'rec20', 'working month');
			INSERT INTO public.untdid_unit VALUES (1747, 0, now(), NULL, 'opencell.admin', NULL, 'WSD', 'rec20', 'standard');
			INSERT INTO public.untdid_unit VALUES (1748, 0, now(), NULL, 'opencell.admin', NULL, 'WTT', 'rec20', 'watt');
			INSERT INTO public.untdid_unit VALUES (1749, 0, now(), NULL, 'opencell.admin', NULL, 'X1', 'rec20', 'Gunter''s chain');
			INSERT INTO public.untdid_unit VALUES (1750, 0, now(), NULL, 'opencell.admin', NULL, 'YDK', 'rec20', 'square yard');
			INSERT INTO public.untdid_unit VALUES (1751, 0, now(), NULL, 'opencell.admin', NULL, 'YDQ', 'rec20', 'cubic yard');
			INSERT INTO public.untdid_unit VALUES (1752, 0, now(), NULL, 'opencell.admin', NULL, 'YRD', 'rec20', 'yard');
			INSERT INTO public.untdid_unit VALUES (1753, 0, now(), NULL, 'opencell.admin', NULL, 'Z11', 'rec20', 'hanging container');
			INSERT INTO public.untdid_unit VALUES (1754, 0, now(), NULL, 'opencell.admin', NULL, 'Z9', 'Rec20', 'nanomole');
			INSERT INTO public.untdid_unit VALUES (1755, 0, now(), NULL, 'opencell.admin', NULL, 'ZP', 'rec20', 'page');
			INSERT INTO public.untdid_unit VALUES (1756, 0, now(), NULL, 'opencell.admin', NULL, 'ZZ', 'rec20', 'mutually defined');
			INSERT INTO public.untdid_unit VALUES (1757, 0, now(), NULL, 'opencell.admin', NULL, 'X1A', 'rec21', 'Drum, steel');
			INSERT INTO public.untdid_unit VALUES (1758, 0, now(), NULL, 'opencell.admin', NULL, 'X1B', 'rec21', 'Drum, aluminium');
			INSERT INTO public.untdid_unit VALUES (1759, 0, now(), NULL, 'opencell.admin', NULL, 'X1D', 'rec21', 'Drum, plywood');
			INSERT INTO public.untdid_unit VALUES (1760, 0, now(), NULL, 'opencell.admin', NULL, 'X1F', 'rec21', 'Container, flexible');
			INSERT INTO public.untdid_unit VALUES (1761, 0, now(), NULL, 'opencell.admin', NULL, 'X1G', 'rec21', 'Drum, fibre');
			INSERT INTO public.untdid_unit VALUES (1762, 0, now(), NULL, 'opencell.admin', NULL, 'X1W', 'rec21', 'Drum, wooden');
			INSERT INTO public.untdid_unit VALUES (1763, 0, now(), NULL, 'opencell.admin', NULL, 'X2C', 'rec21', 'Barrel, wooden');
			INSERT INTO public.untdid_unit VALUES (1764, 0, now(), NULL, 'opencell.admin', NULL, 'X3A', 'rec21', 'Jerrican, steel');
			INSERT INTO public.untdid_unit VALUES (1765, 0, now(), NULL, 'opencell.admin', NULL, 'X3H', 'rec21', 'Jerrican, plastic');
			INSERT INTO public.untdid_unit VALUES (1766, 0, now(), NULL, 'opencell.admin', NULL, 'X43', 'rec21', 'Bag, super bulk');
			INSERT INTO public.untdid_unit VALUES (1767, 0, now(), NULL, 'opencell.admin', NULL, 'X44', 'rec21', 'Bag, polybag');
			INSERT INTO public.untdid_unit VALUES (1768, 0, now(), NULL, 'opencell.admin', NULL, 'X4A', 'rec21', 'Box, steel');
			INSERT INTO public.untdid_unit VALUES (1769, 0, now(), NULL, 'opencell.admin', NULL, 'X4B', 'rec21', 'Box, aluminium');
			INSERT INTO public.untdid_unit VALUES (1770, 0, now(), NULL, 'opencell.admin', NULL, 'X4C', 'rec21', 'Box, natural wood');
			INSERT INTO public.untdid_unit VALUES (1771, 0, now(), NULL, 'opencell.admin', NULL, 'X4D', 'rec21', 'Box, plywood');
			INSERT INTO public.untdid_unit VALUES (1772, 0, now(), NULL, 'opencell.admin', NULL, 'X4F', 'rec21', 'Box, reconstituted wood');
			INSERT INTO public.untdid_unit VALUES (1773, 0, now(), NULL, 'opencell.admin', NULL, 'X4G', 'rec21', 'Box, fibreboard');
			INSERT INTO public.untdid_unit VALUES (1774, 0, now(), NULL, 'opencell.admin', NULL, 'X4H', 'rec21', 'Box, plastic');
			INSERT INTO public.untdid_unit VALUES (1775, 0, now(), NULL, 'opencell.admin', NULL, 'X5H', 'rec21', 'Bag, woven plastic');
			INSERT INTO public.untdid_unit VALUES (1776, 0, now(), NULL, 'opencell.admin', NULL, 'X5L', 'rec21', 'Bag, textile ');
			INSERT INTO public.untdid_unit VALUES (1777, 0, now(), NULL, 'opencell.admin', NULL, 'X5M', 'rec21', 'Bag, paper ');
			INSERT INTO public.untdid_unit VALUES (1778, 0, now(), NULL, 'opencell.admin', NULL, 'X6H', 'rec21', 'Composite packaging, plastic receptacle');
			INSERT INTO public.untdid_unit VALUES (1779, 0, now(), NULL, 'opencell.admin', NULL, 'X6P', 'rec21', 'Composite packaging, glass receptacle');
			INSERT INTO public.untdid_unit VALUES (1780, 0, now(), NULL, 'opencell.admin', NULL, 'X7A', 'rec21', 'Case, car');
			INSERT INTO public.untdid_unit VALUES (1781, 0, now(), NULL, 'opencell.admin', NULL, 'X7B', 'rec21', 'Case, wooden');
			INSERT INTO public.untdid_unit VALUES (1782, 0, now(), NULL, 'opencell.admin', NULL, 'X8A', 'rec21', 'Pallet, wooden');
			INSERT INTO public.untdid_unit VALUES (1783, 0, now(), NULL, 'opencell.admin', NULL, 'X8B', 'rec21', 'Crate, wooden');
			INSERT INTO public.untdid_unit VALUES (1784, 0, now(), NULL, 'opencell.admin', NULL, 'X8C', 'rec21', 'Bundle, wooden');
			INSERT INTO public.untdid_unit VALUES (1785, 0, now(), NULL, 'opencell.admin', NULL, 'XAA', 'rec21', 'Intermediate bulk container, rigid plastic');
			INSERT INTO public.untdid_unit VALUES (1786, 0, now(), NULL, 'opencell.admin', NULL, 'XAB', 'rec21', 'Receptacle, fibre ');
			INSERT INTO public.untdid_unit VALUES (1787, 0, now(), NULL, 'opencell.admin', NULL, 'XAC', 'rec21', 'Receptacle, paper ');
			INSERT INTO public.untdid_unit VALUES (1788, 0, now(), NULL, 'opencell.admin', NULL, 'XAD', 'rec21', 'Receptacle, wooden ');
			INSERT INTO public.untdid_unit VALUES (1789, 0, now(), NULL, 'opencell.admin', NULL, 'XAE', 'rec21', 'Aerosol');
			INSERT INTO public.untdid_unit VALUES (1790, 0, now(), NULL, 'opencell.admin', NULL, 'XAF', 'rec21', 'Pallet, modular, collars 80cms * 60cms ');
			INSERT INTO public.untdid_unit VALUES (1791, 0, now(), NULL, 'opencell.admin', NULL, 'XAG', 'rec21', 'Pallet, shrinkwrapped ');
			INSERT INTO public.untdid_unit VALUES (1792, 0, now(), NULL, 'opencell.admin', NULL, 'XAH', 'rec21', 'Pallet, 100cms * 110cms ');
			INSERT INTO public.untdid_unit VALUES (1793, 0, now(), NULL, 'opencell.admin', NULL, 'XAI', 'rec21', 'Clamshell');
			INSERT INTO public.untdid_unit VALUES (1794, 0, now(), NULL, 'opencell.admin', NULL, 'XAJ', 'rec21', 'Cone');
			INSERT INTO public.untdid_unit VALUES (1795, 0, now(), NULL, 'opencell.admin', NULL, 'XAL', 'rec21', 'Ball');
			INSERT INTO public.untdid_unit VALUES (1796, 0, now(), NULL, 'opencell.admin', NULL, 'XAM', 'rec21', 'Ampoule, non-protected ');
			INSERT INTO public.untdid_unit VALUES (1797, 0, now(), NULL, 'opencell.admin', NULL, 'XAP', 'rec21', 'Ampoule, protected ');
			INSERT INTO public.untdid_unit VALUES (1798, 0, now(), NULL, 'opencell.admin', NULL, 'XAT', 'rec21', 'Atomizer ');
			INSERT INTO public.untdid_unit VALUES (1799, 0, now(), NULL, 'opencell.admin', NULL, 'XAV', 'rec21', 'Capsule');
			INSERT INTO public.untdid_unit VALUES (1800, 0, now(), NULL, 'opencell.admin', NULL, 'XB4', 'rec21', 'Belt');
			INSERT INTO public.untdid_unit VALUES (1801, 0, now(), NULL, 'opencell.admin', NULL, 'XBA', 'rec21', 'Barrel ');
			INSERT INTO public.untdid_unit VALUES (1802, 0, now(), NULL, 'opencell.admin', NULL, 'XBB', 'rec21', 'Bobbin ');
			INSERT INTO public.untdid_unit VALUES (1803, 0, now(), NULL, 'opencell.admin', NULL, 'XBC', 'rec21', 'Bottlecrate / bottlerack ');
			INSERT INTO public.untdid_unit VALUES (1804, 0, now(), NULL, 'opencell.admin', NULL, 'XBD', 'rec21', 'Board');
			INSERT INTO public.untdid_unit VALUES (1805, 0, now(), NULL, 'opencell.admin', NULL, 'XBE', 'rec21', 'Bundle ');
			INSERT INTO public.untdid_unit VALUES (1806, 0, now(), NULL, 'opencell.admin', NULL, 'XBF', 'rec21', 'Balloon, non-protected ');
			INSERT INTO public.untdid_unit VALUES (1807, 0, now(), NULL, 'opencell.admin', NULL, 'XBG', 'rec21', 'Bag');
			INSERT INTO public.untdid_unit VALUES (1808, 0, now(), NULL, 'opencell.admin', NULL, 'XBH', 'rec21', 'Bunch');
			INSERT INTO public.untdid_unit VALUES (1809, 0, now(), NULL, 'opencell.admin', NULL, 'XBI', 'rec21', 'Bin');
			INSERT INTO public.untdid_unit VALUES (1810, 0, now(), NULL, 'opencell.admin', NULL, 'XBJ', 'rec21', 'Bucket ');
			INSERT INTO public.untdid_unit VALUES (1811, 0, now(), NULL, 'opencell.admin', NULL, 'XBK', 'rec21', 'Basket ');
			INSERT INTO public.untdid_unit VALUES (1812, 0, now(), NULL, 'opencell.admin', NULL, 'XBL', 'rec21', 'Bale, compressed ');
			INSERT INTO public.untdid_unit VALUES (1813, 0, now(), NULL, 'opencell.admin', NULL, 'XBM', 'rec21', 'Basin');
			INSERT INTO public.untdid_unit VALUES (1814, 0, now(), NULL, 'opencell.admin', NULL, 'XBN', 'rec21', 'Bale, non-compressed ');
			INSERT INTO public.untdid_unit VALUES (1815, 0, now(), NULL, 'opencell.admin', NULL, 'XBO', 'rec21', 'Bottle, non-protected, cylindrical ');
			INSERT INTO public.untdid_unit VALUES (1816, 0, now(), NULL, 'opencell.admin', NULL, 'XBP', 'rec21', 'Balloon, protected ');
			INSERT INTO public.untdid_unit VALUES (1817, 0, now(), NULL, 'opencell.admin', NULL, 'XBQ', 'rec21', 'Bottle, protected cylindrical');
			INSERT INTO public.untdid_unit VALUES (1818, 0, now(), NULL, 'opencell.admin', NULL, 'XBR', 'rec21', 'Bar');
			INSERT INTO public.untdid_unit VALUES (1819, 0, now(), NULL, 'opencell.admin', NULL, 'XBS', 'rec21', 'Bottle, non-protected, bulbous ');
			INSERT INTO public.untdid_unit VALUES (1820, 0, now(), NULL, 'opencell.admin', NULL, 'XBT', 'rec21', 'Bolt ');
			INSERT INTO public.untdid_unit VALUES (1821, 0, now(), NULL, 'opencell.admin', NULL, 'XBU', 'rec21', 'Butt ');
			INSERT INTO public.untdid_unit VALUES (1822, 0, now(), NULL, 'opencell.admin', NULL, 'XBV', 'rec21', 'Bottle, protected bulbous');
			INSERT INTO public.untdid_unit VALUES (1823, 0, now(), NULL, 'opencell.admin', NULL, 'XBW', 'rec21', 'Box, for liquids');
			INSERT INTO public.untdid_unit VALUES (1824, 0, now(), NULL, 'opencell.admin', NULL, 'XBX', 'rec21', 'Box');
			INSERT INTO public.untdid_unit VALUES (1825, 0, now(), NULL, 'opencell.admin', NULL, 'XBY', 'rec21', 'Board, in bundle/bunch/truss ');
			INSERT INTO public.untdid_unit VALUES (1826, 0, now(), NULL, 'opencell.admin', NULL, 'XBZ', 'rec21', 'Bars, in bundle/bunch/truss');
			INSERT INTO public.untdid_unit VALUES (1827, 0, now(), NULL, 'opencell.admin', NULL, 'XCA', 'rec21', 'Can, rectangular ');
			INSERT INTO public.untdid_unit VALUES (1828, 0, now(), NULL, 'opencell.admin', NULL, 'XCB', 'rec21', 'Crate, beer');
			INSERT INTO public.untdid_unit VALUES (1829, 0, now(), NULL, 'opencell.admin', NULL, 'XCC', 'rec21', 'Churn');
			INSERT INTO public.untdid_unit VALUES (1830, 0, now(), NULL, 'opencell.admin', NULL, 'XCD', 'rec21', 'Can, with handle and spout ');
			INSERT INTO public.untdid_unit VALUES (1831, 0, now(), NULL, 'opencell.admin', NULL, 'XCE', 'rec21', 'Creel');
			INSERT INTO public.untdid_unit VALUES (1832, 0, now(), NULL, 'opencell.admin', NULL, 'XCF', 'rec21', 'Coffer ');
			INSERT INTO public.untdid_unit VALUES (1833, 0, now(), NULL, 'opencell.admin', NULL, 'XCG', 'rec21', 'Cage ');
			INSERT INTO public.untdid_unit VALUES (1834, 0, now(), NULL, 'opencell.admin', NULL, 'XCH', 'rec21', 'Chest');
			INSERT INTO public.untdid_unit VALUES (1835, 0, now(), NULL, 'opencell.admin', NULL, 'XCI', 'rec21', 'Canister ');
			INSERT INTO public.untdid_unit VALUES (1836, 0, now(), NULL, 'opencell.admin', NULL, 'XCJ', 'rec21', 'Coffin ');
			INSERT INTO public.untdid_unit VALUES (1837, 0, now(), NULL, 'opencell.admin', NULL, 'XCK', 'rec21', 'Cask ');
			INSERT INTO public.untdid_unit VALUES (1838, 0, now(), NULL, 'opencell.admin', NULL, 'XCL', 'rec21', 'Coil ');
			INSERT INTO public.untdid_unit VALUES (1839, 0, now(), NULL, 'opencell.admin', NULL, 'XCM', 'rec21', 'Card');
			INSERT INTO public.untdid_unit VALUES (1840, 0, now(), NULL, 'opencell.admin', NULL, 'XCN', 'rec21', 'Container, not otherwise specified as transport equipment');
			INSERT INTO public.untdid_unit VALUES (1841, 0, now(), NULL, 'opencell.admin', NULL, 'XCO', 'rec21', 'Carboy, non-protected');
			INSERT INTO public.untdid_unit VALUES (1842, 0, now(), NULL, 'opencell.admin', NULL, 'XCP', 'rec21', 'Carboy, protected');
			INSERT INTO public.untdid_unit VALUES (1843, 0, now(), NULL, 'opencell.admin', NULL, 'XCQ', 'rec21', 'Cartridge');
			INSERT INTO public.untdid_unit VALUES (1844, 0, now(), NULL, 'opencell.admin', NULL, 'XCR', 'rec21', 'Crate');
			INSERT INTO public.untdid_unit VALUES (1845, 0, now(), NULL, 'opencell.admin', NULL, 'XCS', 'rec21', 'Case ');
			INSERT INTO public.untdid_unit VALUES (1846, 0, now(), NULL, 'opencell.admin', NULL, 'XCT', 'rec21', 'Carton ');
			INSERT INTO public.untdid_unit VALUES (1847, 0, now(), NULL, 'opencell.admin', NULL, 'XCU', 'rec21', 'Cup');
			INSERT INTO public.untdid_unit VALUES (1848, 0, now(), NULL, 'opencell.admin', NULL, 'XCV', 'rec21', 'Cover');
			INSERT INTO public.untdid_unit VALUES (1849, 0, now(), NULL, 'opencell.admin', NULL, 'XCW', 'rec21', 'Cage, roll ');
			INSERT INTO public.untdid_unit VALUES (1850, 0, now(), NULL, 'opencell.admin', NULL, 'XCX', 'rec21', 'Can, cylindrical ');
			INSERT INTO public.untdid_unit VALUES (1851, 0, now(), NULL, 'opencell.admin', NULL, 'XCY', 'rec21', 'Cylinder ');
			INSERT INTO public.untdid_unit VALUES (1852, 0, now(), NULL, 'opencell.admin', NULL, 'XCZ', 'rec21', 'Canvas ');
			INSERT INTO public.untdid_unit VALUES (1853, 0, now(), NULL, 'opencell.admin', NULL, 'XDA', 'rec21', 'Crate, multiple layer, plastic ');
			INSERT INTO public.untdid_unit VALUES (1854, 0, now(), NULL, 'opencell.admin', NULL, 'XDB', 'rec21', 'Crate, multiple layer, wooden');
			INSERT INTO public.untdid_unit VALUES (1855, 0, now(), NULL, 'opencell.admin', NULL, 'XDC', 'rec21', 'Crate, multiple layer, cardboard ');
			INSERT INTO public.untdid_unit VALUES (1856, 0, now(), NULL, 'opencell.admin', NULL, 'XDG', 'rec21', 'Cage, Commonwealth Handling Equipment Pool  (CHEP)');
			INSERT INTO public.untdid_unit VALUES (1857, 0, now(), NULL, 'opencell.admin', NULL, 'XDH', 'rec21', 'Box, Commonwealth Handling Equipment Pool (CHEP), Eurobox');
			INSERT INTO public.untdid_unit VALUES (1858, 0, now(), NULL, 'opencell.admin', NULL, 'XDI', 'rec21', 'Drum, iron ');
			INSERT INTO public.untdid_unit VALUES (1859, 0, now(), NULL, 'opencell.admin', NULL, 'XDJ', 'rec21', 'Demijohn, non-protected');
			INSERT INTO public.untdid_unit VALUES (1860, 0, now(), NULL, 'opencell.admin', NULL, 'XDK', 'rec21', 'Crate, bulk, cardboard ');
			INSERT INTO public.untdid_unit VALUES (1861, 0, now(), NULL, 'opencell.admin', NULL, 'XDL', 'rec21', 'Crate, bulk, plastic ');
			INSERT INTO public.untdid_unit VALUES (1862, 0, now(), NULL, 'opencell.admin', NULL, 'XDM', 'rec21', 'Crate, bulk, wooden');
			INSERT INTO public.untdid_unit VALUES (1863, 0, now(), NULL, 'opencell.admin', NULL, 'XDN', 'rec21', 'Dispenser');
			INSERT INTO public.untdid_unit VALUES (1864, 0, now(), NULL, 'opencell.admin', NULL, 'XDP', 'rec21', 'Demijohn, protected');
			INSERT INTO public.untdid_unit VALUES (1865, 0, now(), NULL, 'opencell.admin', NULL, 'XDR', 'rec21', 'Drum ');
			INSERT INTO public.untdid_unit VALUES (1866, 0, now(), NULL, 'opencell.admin', NULL, 'XDS', 'rec21', 'Tray, one layer no cover, plastic');
			INSERT INTO public.untdid_unit VALUES (1867, 0, now(), NULL, 'opencell.admin', NULL, 'XDT', 'rec21', 'Tray, one layer no cover, wooden ');
			INSERT INTO public.untdid_unit VALUES (1868, 0, now(), NULL, 'opencell.admin', NULL, 'XDU', 'rec21', 'Tray, one layer no cover, polystyrene');
			INSERT INTO public.untdid_unit VALUES (1869, 0, now(), NULL, 'opencell.admin', NULL, 'XDV', 'rec21', 'Tray, one layer no cover, cardboard');
			INSERT INTO public.untdid_unit VALUES (1870, 0, now(), NULL, 'opencell.admin', NULL, 'XDW', 'rec21', 'Tray, two layers no cover, plastic tray');
			INSERT INTO public.untdid_unit VALUES (1871, 0, now(), NULL, 'opencell.admin', NULL, 'XDX', 'rec21', 'Tray, two layers no cover, wooden');
			INSERT INTO public.untdid_unit VALUES (1872, 0, now(), NULL, 'opencell.admin', NULL, 'XDY', 'rec21', 'Tray, two layers no cover, cardboard ');
			INSERT INTO public.untdid_unit VALUES (1873, 0, now(), NULL, 'opencell.admin', NULL, 'XEC', 'rec21', 'Bag, plastic ');
			INSERT INTO public.untdid_unit VALUES (1874, 0, now(), NULL, 'opencell.admin', NULL, 'XED', 'rec21', 'Case, with pallet base ');
			INSERT INTO public.untdid_unit VALUES (1875, 0, now(), NULL, 'opencell.admin', NULL, 'XEE', 'rec21', 'Case, with pallet base, wooden ');
			INSERT INTO public.untdid_unit VALUES (1876, 0, now(), NULL, 'opencell.admin', NULL, 'XEF', 'rec21', 'Case, with pallet base, cardboard');
			INSERT INTO public.untdid_unit VALUES (1877, 0, now(), NULL, 'opencell.admin', NULL, 'XEG', 'rec21', 'Case, with pallet base, plastic');
			INSERT INTO public.untdid_unit VALUES (1878, 0, now(), NULL, 'opencell.admin', NULL, 'XEH', 'rec21', 'Case, with pallet base, metal');
			INSERT INTO public.untdid_unit VALUES (1879, 0, now(), NULL, 'opencell.admin', NULL, 'XEI', 'rec21', 'Case, isothermic ');
			INSERT INTO public.untdid_unit VALUES (1880, 0, now(), NULL, 'opencell.admin', NULL, 'XEN', 'rec21', 'Envelope ');
			INSERT INTO public.untdid_unit VALUES (1881, 0, now(), NULL, 'opencell.admin', NULL, 'XFB', 'rec21', 'Flexibag');
			INSERT INTO public.untdid_unit VALUES (1882, 0, now(), NULL, 'opencell.admin', NULL, 'XFC', 'rec21', 'Crate, fruit ');
			INSERT INTO public.untdid_unit VALUES (1883, 0, now(), NULL, 'opencell.admin', NULL, 'XFD', 'rec21', 'Crate, framed');
			INSERT INTO public.untdid_unit VALUES (1884, 0, now(), NULL, 'opencell.admin', NULL, 'XFE', 'rec21', 'Flexitank');
			INSERT INTO public.untdid_unit VALUES (1885, 0, now(), NULL, 'opencell.admin', NULL, 'XFI', 'rec21', 'Firkin ');
			INSERT INTO public.untdid_unit VALUES (1886, 0, now(), NULL, 'opencell.admin', NULL, 'XFL', 'rec21', 'Flask');
			INSERT INTO public.untdid_unit VALUES (1887, 0, now(), NULL, 'opencell.admin', NULL, 'XFO', 'rec21', 'Footlocker ');
			INSERT INTO public.untdid_unit VALUES (1888, 0, now(), NULL, 'opencell.admin', NULL, 'XFP', 'rec21', 'Filmpack ');
			INSERT INTO public.untdid_unit VALUES (1889, 0, now(), NULL, 'opencell.admin', NULL, 'XFR', 'rec21', 'Frame');
			INSERT INTO public.untdid_unit VALUES (1890, 0, now(), NULL, 'opencell.admin', NULL, 'XFT', 'rec21', 'Foodtainer');
			INSERT INTO public.untdid_unit VALUES (1891, 0, now(), NULL, 'opencell.admin', NULL, 'XFW', 'rec21', 'Cart, flatbed');
			INSERT INTO public.untdid_unit VALUES (1892, 0, now(), NULL, 'opencell.admin', NULL, 'XFX', 'rec21', 'Bag, flexible container');
			INSERT INTO public.untdid_unit VALUES (1893, 0, now(), NULL, 'opencell.admin', NULL, 'XGB', 'rec21', 'Bottle, gas');
			INSERT INTO public.untdid_unit VALUES (1894, 0, now(), NULL, 'opencell.admin', NULL, 'XGI', 'rec21', 'Girder ');
			INSERT INTO public.untdid_unit VALUES (1895, 0, now(), NULL, 'opencell.admin', NULL, 'XGL', 'rec21', 'Container, gallon');
			INSERT INTO public.untdid_unit VALUES (1896, 0, now(), NULL, 'opencell.admin', NULL, 'XGR', 'rec21', 'Receptacle, glass ');
			INSERT INTO public.untdid_unit VALUES (1897, 0, now(), NULL, 'opencell.admin', NULL, 'XGU', 'rec21', 'Tray, containing horizontally stacked flat items');
			INSERT INTO public.untdid_unit VALUES (1898, 0, now(), NULL, 'opencell.admin', NULL, 'XGY', 'rec21', 'Bag, gunny');
			INSERT INTO public.untdid_unit VALUES (1899, 0, now(), NULL, 'opencell.admin', NULL, 'XGZ', 'rec21', 'Girders, in bundle/bunch/truss ');
			INSERT INTO public.untdid_unit VALUES (1900, 0, now(), NULL, 'opencell.admin', NULL, 'XHA', 'rec21', 'Basket, with handle, plastic ');
			INSERT INTO public.untdid_unit VALUES (1901, 0, now(), NULL, 'opencell.admin', NULL, 'XHB', 'rec21', 'Basket, with handle, wooden');
			INSERT INTO public.untdid_unit VALUES (1902, 0, now(), NULL, 'opencell.admin', NULL, 'XHC', 'rec21', 'Basket, with handle, cardboard ');
			INSERT INTO public.untdid_unit VALUES (1903, 0, now(), NULL, 'opencell.admin', NULL, 'XHG', 'rec21', 'Hogshead ');
			INSERT INTO public.untdid_unit VALUES (1904, 0, now(), NULL, 'opencell.admin', NULL, 'XHN', 'rec21', 'Hanger');
			INSERT INTO public.untdid_unit VALUES (1905, 0, now(), NULL, 'opencell.admin', NULL, 'XHR', 'rec21', 'Hamper ');
			INSERT INTO public.untdid_unit VALUES (1906, 0, now(), NULL, 'opencell.admin', NULL, 'XIA', 'rec21', 'Package, display, wooden ');
			INSERT INTO public.untdid_unit VALUES (1907, 0, now(), NULL, 'opencell.admin', NULL, 'XIB', 'rec21', 'Package, display, cardboard');
			INSERT INTO public.untdid_unit VALUES (1908, 0, now(), NULL, 'opencell.admin', NULL, 'XIC', 'rec21', 'Package, display, plastic');
			INSERT INTO public.untdid_unit VALUES (1909, 0, now(), NULL, 'opencell.admin', NULL, 'XID', 'rec21', 'Package, display, metal');
			INSERT INTO public.untdid_unit VALUES (1910, 0, now(), NULL, 'opencell.admin', NULL, 'XIE', 'rec21', 'Package, show');
			INSERT INTO public.untdid_unit VALUES (1911, 0, now(), NULL, 'opencell.admin', NULL, 'XIF', 'rec21', 'Package, flow ');
			INSERT INTO public.untdid_unit VALUES (1912, 0, now(), NULL, 'opencell.admin', NULL, 'XIG', 'rec21', 'Package, paper wrapped');
			INSERT INTO public.untdid_unit VALUES (1913, 0, now(), NULL, 'opencell.admin', NULL, 'XIH', 'rec21', 'Drum, plastic');
			INSERT INTO public.untdid_unit VALUES (1914, 0, now(), NULL, 'opencell.admin', NULL, 'XIK', 'rec21', 'Package, cardboard, with bottle grip-holes ');
			INSERT INTO public.untdid_unit VALUES (1915, 0, now(), NULL, 'opencell.admin', NULL, 'XIL', 'rec21', 'Tray, rigid, lidded stackable (CEN TS 14482:2002)');
			INSERT INTO public.untdid_unit VALUES (1916, 0, now(), NULL, 'opencell.admin', NULL, 'XIN', 'rec21', 'Ingot');
			INSERT INTO public.untdid_unit VALUES (1917, 0, now(), NULL, 'opencell.admin', NULL, 'XIZ', 'rec21', 'Ingots, in bundle/bunch/truss');
			INSERT INTO public.untdid_unit VALUES (1918, 0, now(), NULL, 'opencell.admin', NULL, 'XJB', 'rec21', 'Bag, jumbo');
			INSERT INTO public.untdid_unit VALUES (1919, 0, now(), NULL, 'opencell.admin', NULL, 'XJC', 'rec21', 'Jerrican, rectangular');
			INSERT INTO public.untdid_unit VALUES (1920, 0, now(), NULL, 'opencell.admin', NULL, 'XJG', 'rec21', 'Jug');
			INSERT INTO public.untdid_unit VALUES (1921, 0, now(), NULL, 'opencell.admin', NULL, 'XJR', 'rec21', 'Jar');
			INSERT INTO public.untdid_unit VALUES (1922, 0, now(), NULL, 'opencell.admin', NULL, 'XJT', 'rec21', 'Jutebag');
			INSERT INTO public.untdid_unit VALUES (1923, 0, now(), NULL, 'opencell.admin', NULL, 'XJY', 'rec21', 'Jerrican, cylindrical');
			INSERT INTO public.untdid_unit VALUES (1924, 0, now(), NULL, 'opencell.admin', NULL, 'XKG', 'rec21', 'Keg');
			INSERT INTO public.untdid_unit VALUES (1925, 0, now(), NULL, 'opencell.admin', NULL, 'XKI', 'rec21', 'Kit');
			INSERT INTO public.untdid_unit VALUES (1926, 0, now(), NULL, 'opencell.admin', NULL, 'XLE', 'rec21', 'Luggage');
			INSERT INTO public.untdid_unit VALUES (1927, 0, now(), NULL, 'opencell.admin', NULL, 'XLG', 'rec21', 'Log');
			INSERT INTO public.untdid_unit VALUES (1928, 0, now(), NULL, 'opencell.admin', NULL, 'XLT', 'rec21', 'Lot');
			INSERT INTO public.untdid_unit VALUES (1929, 0, now(), NULL, 'opencell.admin', NULL, 'XLU', 'rec21', 'Lug');
			INSERT INTO public.untdid_unit VALUES (1930, 0, now(), NULL, 'opencell.admin', NULL, 'XLV', 'rec21', 'Liftvan');
			INSERT INTO public.untdid_unit VALUES (1931, 0, now(), NULL, 'opencell.admin', NULL, 'XLZ', 'rec21', 'Logs, in bundle/bunch/truss');
			INSERT INTO public.untdid_unit VALUES (1932, 0, now(), NULL, 'opencell.admin', NULL, 'XMA', 'rec21', 'Crate, metal');
			INSERT INTO public.untdid_unit VALUES (1933, 0, now(), NULL, 'opencell.admin', NULL, 'XMB', 'rec21', 'Bag, multiply');
			INSERT INTO public.untdid_unit VALUES (1934, 0, now(), NULL, 'opencell.admin', NULL, 'XMC', 'rec21', 'Crate, milk');
			INSERT INTO public.untdid_unit VALUES (1935, 0, now(), NULL, 'opencell.admin', NULL, 'XME', 'rec21', 'Container, metal');
			INSERT INTO public.untdid_unit VALUES (1936, 0, now(), NULL, 'opencell.admin', NULL, 'XMR', 'rec21', 'Receptacle, metal ');
			INSERT INTO public.untdid_unit VALUES (2087, 0, now(), NULL, 'opencell.admin', NULL, 'XWB', 'rec21', 'Wickerbottle ');
			INSERT INTO public.untdid_unit VALUES (1937, 0, now(), NULL, 'opencell.admin', NULL, 'XMS', 'rec21', 'Sack, multi-wall ');
			INSERT INTO public.untdid_unit VALUES (1938, 0, now(), NULL, 'opencell.admin', NULL, 'XMT', 'rec21', 'Mat');
			INSERT INTO public.untdid_unit VALUES (1939, 0, now(), NULL, 'opencell.admin', NULL, 'XMW', 'rec21', 'Receptacle, plastic wrapped ');
			INSERT INTO public.untdid_unit VALUES (1940, 0, now(), NULL, 'opencell.admin', NULL, 'XMX', 'rec21', 'Matchbox ');
			INSERT INTO public.untdid_unit VALUES (1941, 0, now(), NULL, 'opencell.admin', NULL, 'XNA', 'rec21', 'Not available');
			INSERT INTO public.untdid_unit VALUES (1942, 0, now(), NULL, 'opencell.admin', NULL, 'XNE', 'rec21', 'Unpacked or unpackaged ');
			INSERT INTO public.untdid_unit VALUES (1943, 0, now(), NULL, 'opencell.admin', NULL, 'XNF', 'rec21', 'Unpacked or unpackaged, single unit');
			INSERT INTO public.untdid_unit VALUES (1944, 0, now(), NULL, 'opencell.admin', NULL, 'XNG', 'rec21', 'Unpacked or unpackaged, multiple units');
			INSERT INTO public.untdid_unit VALUES (1945, 0, now(), NULL, 'opencell.admin', NULL, 'XNS', 'rec21', 'Nest ');
			INSERT INTO public.untdid_unit VALUES (1946, 0, now(), NULL, 'opencell.admin', NULL, 'XNT', 'rec21', 'Net');
			INSERT INTO public.untdid_unit VALUES (1947, 0, now(), NULL, 'opencell.admin', NULL, 'XNU', 'rec21', 'Net, tube, plastic ');
			INSERT INTO public.untdid_unit VALUES (1948, 0, now(), NULL, 'opencell.admin', NULL, 'XNV', 'rec21', 'Net, tube, textile ');
			INSERT INTO public.untdid_unit VALUES (1949, 0, now(), NULL, 'opencell.admin', NULL, 'XO1', 'Rec21', 'Two sided cage on wheels with fixing strap');
			INSERT INTO public.untdid_unit VALUES (1950, 0, now(), NULL, 'opencell.admin', NULL, 'XO2', 'Rec21', 'Trolley');
			INSERT INTO public.untdid_unit VALUES (1951, 0, now(), NULL, 'opencell.admin', NULL, 'XO3', 'Rec21', 'Oneway pallet ISO 0 - 1/2 EURO Pallet');
			INSERT INTO public.untdid_unit VALUES (1952, 0, now(), NULL, 'opencell.admin', NULL, 'XO4', 'Rec21', 'Oneway pallet ISO 1 - 1/1 EURO Pallet');
			INSERT INTO public.untdid_unit VALUES (1953, 0, now(), NULL, 'opencell.admin', NULL, 'XO5', 'Rec21', 'Oneway pallet ISO 2 - 2/1 EURO Pallet');
			INSERT INTO public.untdid_unit VALUES (1954, 0, now(), NULL, 'opencell.admin', NULL, 'XO6', 'Rec21', 'Pallet with exceptional dimensions');
			INSERT INTO public.untdid_unit VALUES (1955, 0, now(), NULL, 'opencell.admin', NULL, 'XO7', 'Rec21', 'Wooden pallet  40 cm x 80 cm');
			INSERT INTO public.untdid_unit VALUES (1956, 0, now(), NULL, 'opencell.admin', NULL, 'XO8', 'Rec21', 'Plastic pallet SRS 60 cm x 80 cm');
			INSERT INTO public.untdid_unit VALUES (1957, 0, now(), NULL, 'opencell.admin', NULL, 'XO9', 'Rec21', 'Plastic pallet SRS 80 cm x 120 cm');
			INSERT INTO public.untdid_unit VALUES (1958, 0, now(), NULL, 'opencell.admin', NULL, 'XOA', 'rec21', 'Pallet, CHEP 40 cm x 60 cm');
			INSERT INTO public.untdid_unit VALUES (1959, 0, now(), NULL, 'opencell.admin', NULL, 'XOB', 'rec21', 'Pallet, CHEP 80 cm x 120 cm');
			INSERT INTO public.untdid_unit VALUES (1960, 0, now(), NULL, 'opencell.admin', NULL, 'XOC', 'rec21', 'Pallet, CHEP 100 cm x 120 cm');
			INSERT INTO public.untdid_unit VALUES (1961, 0, now(), NULL, 'opencell.admin', NULL, 'XOD', 'rec21', 'Pallet, AS 4068-1993');
			INSERT INTO public.untdid_unit VALUES (1962, 0, now(), NULL, 'opencell.admin', NULL, 'XOE', 'rec21', 'Pallet, ISO T11');
			INSERT INTO public.untdid_unit VALUES (1963, 0, now(), NULL, 'opencell.admin', NULL, 'XOF', 'rec21', 'Platform, unspecified weight or dimension');
			INSERT INTO public.untdid_unit VALUES (1964, 0, now(), NULL, 'opencell.admin', NULL, 'XOG', 'Rec21', 'Pallet ISO 0 - 1/2 EURO Pallet');
			INSERT INTO public.untdid_unit VALUES (1965, 0, now(), NULL, 'opencell.admin', NULL, 'XOH', 'Rec21', 'Pallet ISO 1 - 1/1 EURO Pallet');
			INSERT INTO public.untdid_unit VALUES (1966, 0, now(), NULL, 'opencell.admin', NULL, 'XOI', 'Rec21', 'Pallet ISO 2 – 2/1 EURO Pallet');
			INSERT INTO public.untdid_unit VALUES (1967, 0, now(), NULL, 'opencell.admin', NULL, 'XOJ', 'Rec21', '1/4 EURO Pallet');
			INSERT INTO public.untdid_unit VALUES (1968, 0, now(), NULL, 'opencell.admin', NULL, 'XOK', 'rec21', 'Block');
			INSERT INTO public.untdid_unit VALUES (1969, 0, now(), NULL, 'opencell.admin', NULL, 'XOL', 'Rec21', '1/8 EURO Pallet');
			INSERT INTO public.untdid_unit VALUES (1970, 0, now(), NULL, 'opencell.admin', NULL, 'XOM', 'Rec21', 'Synthetic pallet ISO 1');
			INSERT INTO public.untdid_unit VALUES (1971, 0, now(), NULL, 'opencell.admin', NULL, 'XON', 'Rec21', 'Synthetic pallet ISO 2');
			INSERT INTO public.untdid_unit VALUES (1972, 0, now(), NULL, 'opencell.admin', NULL, 'XOP', 'Rec21', 'Wholesaler pallet');
			INSERT INTO public.untdid_unit VALUES (1973, 0, now(), NULL, 'opencell.admin', NULL, 'XOQ', 'Rec21', 'Pallet 80 X 100 cm');
			INSERT INTO public.untdid_unit VALUES (1974, 0, now(), NULL, 'opencell.admin', NULL, 'XOR', 'Rec21', 'Pallet 60 X 100 cm');
			INSERT INTO public.untdid_unit VALUES (1975, 0, now(), NULL, 'opencell.admin', NULL, 'XOS', 'Rec21', 'Oneway pallet');
			INSERT INTO public.untdid_unit VALUES (1976, 0, now(), NULL, 'opencell.admin', NULL, 'XOT', 'rec21', 'Octabin');
			INSERT INTO public.untdid_unit VALUES (1977, 0, now(), NULL, 'opencell.admin', NULL, 'XOU', 'rec21', 'Container, outer');
			INSERT INTO public.untdid_unit VALUES (1978, 0, now(), NULL, 'opencell.admin', NULL, 'XOV', 'Rec21', 'Returnable pallet');
			INSERT INTO public.untdid_unit VALUES (1979, 0, now(), NULL, 'opencell.admin', NULL, 'XOW', 'Rec21', 'Large bag, pallet sized');
			INSERT INTO public.untdid_unit VALUES (1980, 0, now(), NULL, 'opencell.admin', NULL, 'XOX', 'Rec21', 'A wheeled pallet with raised rim (81 x 67 x 135)');
			INSERT INTO public.untdid_unit VALUES (1981, 0, now(), NULL, 'opencell.admin', NULL, 'XOY', 'Rec21', 'A Wheeled pallet with raised rim (81 x 72 x 135)');
			INSERT INTO public.untdid_unit VALUES (1982, 0, now(), NULL, 'opencell.admin', NULL, 'XOZ', 'Rec21', 'Wheeled pallet with raised rim ( 81 x 60 x 16)');
			INSERT INTO public.untdid_unit VALUES (1983, 0, now(), NULL, 'opencell.admin', NULL, 'XP1', 'Rec21', 'CHEP pallet 60 cm x 80 cm ');
			INSERT INTO public.untdid_unit VALUES (1984, 0, now(), NULL, 'opencell.admin', NULL, 'XP2', 'rec21', 'Pan');
			INSERT INTO public.untdid_unit VALUES (1985, 0, now(), NULL, 'opencell.admin', NULL, 'XP3', 'Rec21', 'LPR pallet 60 cm x 80 cm');
			INSERT INTO public.untdid_unit VALUES (1986, 0, now(), NULL, 'opencell.admin', NULL, 'XP4', 'Rec21', 'LPR pallet 80 cm x 120 cm');
			INSERT INTO public.untdid_unit VALUES (1987, 0, now(), NULL, 'opencell.admin', NULL, 'XPA', 'rec21', 'Packet ');
			INSERT INTO public.untdid_unit VALUES (1988, 0, now(), NULL, 'opencell.admin', NULL, 'XPB', 'rec21', 'Pallet, box Combined open-ended box and pallet');
			INSERT INTO public.untdid_unit VALUES (1989, 0, now(), NULL, 'opencell.admin', NULL, 'XPC', 'rec21', 'Parcel ');
			INSERT INTO public.untdid_unit VALUES (1990, 0, now(), NULL, 'opencell.admin', NULL, 'XPD', 'rec21', 'Pallet, modular, collars 80cms * 100cms ');
			INSERT INTO public.untdid_unit VALUES (1991, 0, now(), NULL, 'opencell.admin', NULL, 'XPE', 'rec21', 'Pallet, modular, collars 80cms * 120cms ');
			INSERT INTO public.untdid_unit VALUES (1992, 0, now(), NULL, 'opencell.admin', NULL, 'XPF', 'rec21', 'Pen ');
			INSERT INTO public.untdid_unit VALUES (1993, 0, now(), NULL, 'opencell.admin', NULL, 'XPG', 'rec21', 'Plate');
			INSERT INTO public.untdid_unit VALUES (1994, 0, now(), NULL, 'opencell.admin', NULL, 'XPH', 'rec21', 'Pitcher');
			INSERT INTO public.untdid_unit VALUES (1995, 0, now(), NULL, 'opencell.admin', NULL, 'XPI', 'rec21', 'Pipe ');
			INSERT INTO public.untdid_unit VALUES (1996, 0, now(), NULL, 'opencell.admin', NULL, 'XPJ', 'rec21', 'Punnet');
			INSERT INTO public.untdid_unit VALUES (1997, 0, now(), NULL, 'opencell.admin', NULL, 'XPK', 'rec21', 'Package');
			INSERT INTO public.untdid_unit VALUES (1998, 0, now(), NULL, 'opencell.admin', NULL, 'XPL', 'rec21', 'Pail ');
			INSERT INTO public.untdid_unit VALUES (1999, 0, now(), NULL, 'opencell.admin', NULL, 'XPN', 'rec21', 'Plank');
			INSERT INTO public.untdid_unit VALUES (2000, 0, now(), NULL, 'opencell.admin', NULL, 'XPO', 'rec21', 'Pouch');
			INSERT INTO public.untdid_unit VALUES (2001, 0, now(), NULL, 'opencell.admin', NULL, 'XPP', 'rec21', 'Piece');
			INSERT INTO public.untdid_unit VALUES (2002, 0, now(), NULL, 'opencell.admin', NULL, 'XPR', 'rec21', 'Receptacle, plastic ');
			INSERT INTO public.untdid_unit VALUES (2003, 0, now(), NULL, 'opencell.admin', NULL, 'XPT', 'rec21', 'Pot');
			INSERT INTO public.untdid_unit VALUES (2004, 0, now(), NULL, 'opencell.admin', NULL, 'XPU', 'rec21', 'Tray ');
			INSERT INTO public.untdid_unit VALUES (2005, 0, now(), NULL, 'opencell.admin', NULL, 'XPV', 'rec21', 'Pipes, in bundle/bunch/truss ');
			INSERT INTO public.untdid_unit VALUES (2006, 0, now(), NULL, 'opencell.admin', NULL, 'XPX', 'rec21', 'Pallet ');
			INSERT INTO public.untdid_unit VALUES (2007, 0, now(), NULL, 'opencell.admin', NULL, 'XPY', 'rec21', 'Plates, in bundle/bunch/truss');
			INSERT INTO public.untdid_unit VALUES (2008, 0, now(), NULL, 'opencell.admin', NULL, 'XPZ', 'rec21', 'Planks, in bundle/bunch/truss');
			INSERT INTO public.untdid_unit VALUES (2009, 0, now(), NULL, 'opencell.admin', NULL, 'XQA', 'rec21', 'Drum, steel, non-removable head');
			INSERT INTO public.untdid_unit VALUES (2010, 0, now(), NULL, 'opencell.admin', NULL, 'XQB', 'rec21', 'Drum, steel, removable head');
			INSERT INTO public.untdid_unit VALUES (2011, 0, now(), NULL, 'opencell.admin', NULL, 'XQC', 'rec21', 'Drum, aluminium, non-removable head');
			INSERT INTO public.untdid_unit VALUES (2012, 0, now(), NULL, 'opencell.admin', NULL, 'XQD', 'rec21', 'Drum, aluminium, removable head');
			INSERT INTO public.untdid_unit VALUES (2013, 0, now(), NULL, 'opencell.admin', NULL, 'XQF', 'rec21', 'Drum, plastic, non-removable head');
			INSERT INTO public.untdid_unit VALUES (2014, 0, now(), NULL, 'opencell.admin', NULL, 'XQG', 'rec21', 'Drum, plastic, removable head');
			INSERT INTO public.untdid_unit VALUES (2015, 0, now(), NULL, 'opencell.admin', NULL, 'XQH', 'rec21', 'Barrel, wooden, bung type');
			INSERT INTO public.untdid_unit VALUES (2016, 0, now(), NULL, 'opencell.admin', NULL, 'XQJ', 'rec21', 'Barrel, wooden, removable head ');
			INSERT INTO public.untdid_unit VALUES (2017, 0, now(), NULL, 'opencell.admin', NULL, 'XQK', 'rec21', 'Jerrican, steel, non-removable head');
			INSERT INTO public.untdid_unit VALUES (2018, 0, now(), NULL, 'opencell.admin', NULL, 'XQL', 'rec21', 'Jerrican, steel, removable head');
			INSERT INTO public.untdid_unit VALUES (2019, 0, now(), NULL, 'opencell.admin', NULL, 'XQM', 'rec21', 'Jerrican, plastic, non-removable head');
			INSERT INTO public.untdid_unit VALUES (2020, 0, now(), NULL, 'opencell.admin', NULL, 'XQN', 'rec21', 'Jerrican, plastic, removable head');
			INSERT INTO public.untdid_unit VALUES (2021, 0, now(), NULL, 'opencell.admin', NULL, 'XQP', 'rec21', 'Box, wooden, natural wood, ordinary');
			INSERT INTO public.untdid_unit VALUES (2022, 0, now(), NULL, 'opencell.admin', NULL, 'XQQ', 'rec21', 'Box, wooden, natural wood, with sift proof walls');
			INSERT INTO public.untdid_unit VALUES (2023, 0, now(), NULL, 'opencell.admin', NULL, 'XQR', 'rec21', 'Box, plastic, expanded ');
			INSERT INTO public.untdid_unit VALUES (2024, 0, now(), NULL, 'opencell.admin', NULL, 'XQS', 'rec21', 'Box, plastic, solid');
			INSERT INTO public.untdid_unit VALUES (2025, 0, now(), NULL, 'opencell.admin', NULL, 'XRD', 'rec21', 'Rod');
			INSERT INTO public.untdid_unit VALUES (2026, 0, now(), NULL, 'opencell.admin', NULL, 'XRG', 'rec21', 'Ring ');
			INSERT INTO public.untdid_unit VALUES (2027, 0, now(), NULL, 'opencell.admin', NULL, 'XRJ', 'rec21', 'Rack, clothing hanger');
			INSERT INTO public.untdid_unit VALUES (2028, 0, now(), NULL, 'opencell.admin', NULL, 'XRK', 'rec21', 'Rack ');
			INSERT INTO public.untdid_unit VALUES (2029, 0, now(), NULL, 'opencell.admin', NULL, 'XRL', 'rec21', 'Reel ');
			INSERT INTO public.untdid_unit VALUES (2030, 0, now(), NULL, 'opencell.admin', NULL, 'XRO', 'rec21', 'Roll ');
			INSERT INTO public.untdid_unit VALUES (2031, 0, now(), NULL, 'opencell.admin', NULL, 'XRT', 'rec21', 'Rednet ');
			INSERT INTO public.untdid_unit VALUES (2032, 0, now(), NULL, 'opencell.admin', NULL, 'XRZ', 'rec21', 'Rods, in bundle/bunch/truss');
			INSERT INTO public.untdid_unit VALUES (2033, 0, now(), NULL, 'opencell.admin', NULL, 'XSA', 'rec21', 'Sack ');
			INSERT INTO public.untdid_unit VALUES (2034, 0, now(), NULL, 'opencell.admin', NULL, 'XSB', 'rec21', 'Slab');
			INSERT INTO public.untdid_unit VALUES (2035, 0, now(), NULL, 'opencell.admin', NULL, 'XSC', 'rec21', 'Crate, shallow ');
			INSERT INTO public.untdid_unit VALUES (2036, 0, now(), NULL, 'opencell.admin', NULL, 'XSD', 'rec21', 'Spindle');
			INSERT INTO public.untdid_unit VALUES (2037, 0, now(), NULL, 'opencell.admin', NULL, 'XSE', 'rec21', 'Sea-chest');
			INSERT INTO public.untdid_unit VALUES (2038, 0, now(), NULL, 'opencell.admin', NULL, 'XSH', 'rec21', 'Sachet ');
			INSERT INTO public.untdid_unit VALUES (2039, 0, now(), NULL, 'opencell.admin', NULL, 'XSI', 'rec21', 'Skid ');
			INSERT INTO public.untdid_unit VALUES (2040, 0, now(), NULL, 'opencell.admin', NULL, 'XSK', 'rec21', 'Case, skeleton ');
			INSERT INTO public.untdid_unit VALUES (2041, 0, now(), NULL, 'opencell.admin', NULL, 'XSL', 'rec21', 'Slipsheet ');
			INSERT INTO public.untdid_unit VALUES (2042, 0, now(), NULL, 'opencell.admin', NULL, 'XSM', 'rec21', 'Sheetmetal ');
			INSERT INTO public.untdid_unit VALUES (2043, 0, now(), NULL, 'opencell.admin', NULL, 'XSO', 'rec21', 'Spool ');
			INSERT INTO public.untdid_unit VALUES (2044, 0, now(), NULL, 'opencell.admin', NULL, 'XSP', 'rec21', 'Sheet, plastic wrapping');
			INSERT INTO public.untdid_unit VALUES (2045, 0, now(), NULL, 'opencell.admin', NULL, 'XSS', 'rec21', 'Case, steel');
			INSERT INTO public.untdid_unit VALUES (2046, 0, now(), NULL, 'opencell.admin', NULL, 'XST', 'rec21', 'Sheet');
			INSERT INTO public.untdid_unit VALUES (2047, 0, now(), NULL, 'opencell.admin', NULL, 'XSU', 'rec21', 'Suitcase ');
			INSERT INTO public.untdid_unit VALUES (2048, 0, now(), NULL, 'opencell.admin', NULL, 'XSV', 'rec21', 'Envelope, steel');
			INSERT INTO public.untdid_unit VALUES (2049, 0, now(), NULL, 'opencell.admin', NULL, 'XSW', 'rec21', 'Shrinkwrapped  ');
			INSERT INTO public.untdid_unit VALUES (2050, 0, now(), NULL, 'opencell.admin', NULL, 'XSX', 'Rec21', 'Set');
			INSERT INTO public.untdid_unit VALUES (2051, 0, now(), NULL, 'opencell.admin', NULL, 'XSY', 'rec21', 'Sleeve');
			INSERT INTO public.untdid_unit VALUES (2052, 0, now(), NULL, 'opencell.admin', NULL, 'XSZ', 'rec21', 'Sheets, in bundle/bunch/truss');
			INSERT INTO public.untdid_unit VALUES (2053, 0, now(), NULL, 'opencell.admin', NULL, 'XT1', 'rec21', 'Tablet');
			INSERT INTO public.untdid_unit VALUES (2054, 0, now(), NULL, 'opencell.admin', NULL, 'XTB', 'rec21', 'Tub');
			INSERT INTO public.untdid_unit VALUES (2055, 0, now(), NULL, 'opencell.admin', NULL, 'XTC', 'rec21', 'Tea-chest');
			INSERT INTO public.untdid_unit VALUES (2056, 0, now(), NULL, 'opencell.admin', NULL, 'XTD', 'rec21', 'Tube, collapsible');
			INSERT INTO public.untdid_unit VALUES (2057, 0, now(), NULL, 'opencell.admin', NULL, 'XTE', 'rec21', 'Tyre');
			INSERT INTO public.untdid_unit VALUES (2058, 0, now(), NULL, 'opencell.admin', NULL, 'XTG', 'rec21', 'Tank container, generic');
			INSERT INTO public.untdid_unit VALUES (2059, 0, now(), NULL, 'opencell.admin', NULL, 'XTI', 'rec21', 'Tierce');
			INSERT INTO public.untdid_unit VALUES (2060, 0, now(), NULL, 'opencell.admin', NULL, 'XTK', 'rec21', 'Tank, rectangular');
			INSERT INTO public.untdid_unit VALUES (2061, 0, now(), NULL, 'opencell.admin', NULL, 'XTL', 'rec21', 'Tub, with lid');
			INSERT INTO public.untdid_unit VALUES (2062, 0, now(), NULL, 'opencell.admin', NULL, 'XTN', 'rec21', 'Tin');
			INSERT INTO public.untdid_unit VALUES (2063, 0, now(), NULL, 'opencell.admin', NULL, 'XTO', 'rec21', 'Tun');
			INSERT INTO public.untdid_unit VALUES (2064, 0, now(), NULL, 'opencell.admin', NULL, 'XTR', 'rec21', 'Trunk');
			INSERT INTO public.untdid_unit VALUES (2065, 0, now(), NULL, 'opencell.admin', NULL, 'XTS', 'rec21', 'Truss');
			INSERT INTO public.untdid_unit VALUES (2066, 0, now(), NULL, 'opencell.admin', NULL, 'XTT', 'rec21', 'Bag, tote');
			INSERT INTO public.untdid_unit VALUES (2067, 0, now(), NULL, 'opencell.admin', NULL, 'XTU', 'rec21', 'Tube ');
			INSERT INTO public.untdid_unit VALUES (2068, 0, now(), NULL, 'opencell.admin', NULL, 'XTV', 'rec21', 'Tube, with nozzle ');
			INSERT INTO public.untdid_unit VALUES (2069, 0, now(), NULL, 'opencell.admin', NULL, 'XTW', 'rec21', 'Pallet, triwall');
			INSERT INTO public.untdid_unit VALUES (2070, 0, now(), NULL, 'opencell.admin', NULL, 'XTY', 'rec21', 'Tank, cylindrical');
			INSERT INTO public.untdid_unit VALUES (2071, 0, now(), NULL, 'opencell.admin', NULL, 'XTZ', 'rec21', 'Tubes, in bundle/bunch/truss ');
			INSERT INTO public.untdid_unit VALUES (2072, 0, now(), NULL, 'opencell.admin', NULL, 'XUC', 'rec21', 'Uncaged ');
			INSERT INTO public.untdid_unit VALUES (2073, 0, now(), NULL, 'opencell.admin', NULL, 'XUN', 'rec21', 'Unit');
			INSERT INTO public.untdid_unit VALUES (2074, 0, now(), NULL, 'opencell.admin', NULL, 'XVA', 'rec21', 'Vat');
			INSERT INTO public.untdid_unit VALUES (2075, 0, now(), NULL, 'opencell.admin', NULL, 'XVG', 'rec21', 'Bulk, gas (at 1031 mbar and 15°C)');
			INSERT INTO public.untdid_unit VALUES (2076, 0, now(), NULL, 'opencell.admin', NULL, 'XVI', 'rec21', 'Vial ');
			INSERT INTO public.untdid_unit VALUES (2077, 0, now(), NULL, 'opencell.admin', NULL, 'XVK', 'rec21', 'Vanpack ');
			INSERT INTO public.untdid_unit VALUES (2078, 0, now(), NULL, 'opencell.admin', NULL, 'XVL', 'rec21', 'Bulk, liquid ');
			INSERT INTO public.untdid_unit VALUES (2079, 0, now(), NULL, 'opencell.admin', NULL, 'XVN', 'rec21', 'Vehicle');
			INSERT INTO public.untdid_unit VALUES (2080, 0, now(), NULL, 'opencell.admin', NULL, 'XVO', 'rec21', 'Bulk, solid, large particles (“nodules”) ');
			INSERT INTO public.untdid_unit VALUES (2081, 0, now(), NULL, 'opencell.admin', NULL, 'XVP', 'rec21', 'Vacuum-packed');
			INSERT INTO public.untdid_unit VALUES (2082, 0, now(), NULL, 'opencell.admin', NULL, 'XVQ', 'rec21', 'Bulk, liquefied gas (at abnormal temperature/pressure) ');
			INSERT INTO public.untdid_unit VALUES (2083, 0, now(), NULL, 'opencell.admin', NULL, 'XVR', 'rec21', 'Bulk, solid, granular particles (“grains”) ');
			INSERT INTO public.untdid_unit VALUES (2084, 0, now(), NULL, 'opencell.admin', NULL, 'XVS', 'rec21', 'Bulk, scrap metal');
			INSERT INTO public.untdid_unit VALUES (2085, 0, now(), NULL, 'opencell.admin', NULL, 'XVY', 'rec21', 'Bulk, solid, fine particles (“powders”)');
			INSERT INTO public.untdid_unit VALUES (2086, 0, now(), NULL, 'opencell.admin', NULL, 'XWA', 'rec21', 'Intermediate bulk container');
			INSERT INTO public.untdid_unit VALUES (2088, 0, now(), NULL, 'opencell.admin', NULL, 'XWC', 'rec21', 'Intermediate bulk container, steel ');
			INSERT INTO public.untdid_unit VALUES (2089, 0, now(), NULL, 'opencell.admin', NULL, 'XWD', 'rec21', 'Intermediate bulk container, aluminium ');
			INSERT INTO public.untdid_unit VALUES (2090, 0, now(), NULL, 'opencell.admin', NULL, 'XWF', 'rec21', 'Intermediate bulk container, metal ');
			INSERT INTO public.untdid_unit VALUES (2091, 0, now(), NULL, 'opencell.admin', NULL, 'XWG', 'rec21', 'Intermediate bulk container, steel, pressurised > 10 kpa');
			INSERT INTO public.untdid_unit VALUES (2092, 0, now(), NULL, 'opencell.admin', NULL, 'XWH', 'rec21', 'Intermediate bulk container, aluminium, pressurised > 10 kpa');
			INSERT INTO public.untdid_unit VALUES (2093, 0, now(), NULL, 'opencell.admin', NULL, 'XWJ', 'rec21', 'Intermediate bulk container, metal, pressure 10 kpa ');
			INSERT INTO public.untdid_unit VALUES (2094, 0, now(), NULL, 'opencell.admin', NULL, 'XWK', 'rec21', 'Intermediate bulk container, steel, liquid ');
			INSERT INTO public.untdid_unit VALUES (2095, 0, now(), NULL, 'opencell.admin', NULL, 'XWL', 'rec21', 'Intermediate bulk container, aluminium, liquid ');
			INSERT INTO public.untdid_unit VALUES (2096, 0, now(), NULL, 'opencell.admin', NULL, 'XWM', 'rec21', 'Intermediate bulk container, metal, liquid ');
			INSERT INTO public.untdid_unit VALUES (2097, 0, now(), NULL, 'opencell.admin', NULL, 'XWN', 'rec21', 'Intermediate bulk container, woven plastic, without coat/liner ');
			INSERT INTO public.untdid_unit VALUES (2098, 0, now(), NULL, 'opencell.admin', NULL, 'XWP', 'rec21', 'Intermediate bulk container, woven plastic, coated ');
			INSERT INTO public.untdid_unit VALUES (2099, 0, now(), NULL, 'opencell.admin', NULL, 'XWQ', 'rec21', 'Intermediate bulk container, woven plastic, with liner ');
			INSERT INTO public.untdid_unit VALUES (2100, 0, now(), NULL, 'opencell.admin', NULL, 'XWR', 'rec21', 'Intermediate bulk container, woven plastic, coated and liner ');
			INSERT INTO public.untdid_unit VALUES (2101, 0, now(), NULL, 'opencell.admin', NULL, 'XWS', 'rec21', 'Intermediate bulk container, plastic film');
			INSERT INTO public.untdid_unit VALUES (2102, 0, now(), NULL, 'opencell.admin', NULL, 'XWT', 'rec21', 'Intermediate bulk container, textile with out coat/liner ');
			INSERT INTO public.untdid_unit VALUES (2103, 0, now(), NULL, 'opencell.admin', NULL, 'XWU', 'rec21', 'Intermediate bulk container, natural wood, with inner liner');
			INSERT INTO public.untdid_unit VALUES (2104, 0, now(), NULL, 'opencell.admin', NULL, 'XWV', 'rec21', 'Intermediate bulk container, textile, coated ');
			INSERT INTO public.untdid_unit VALUES (2105, 0, now(), NULL, 'opencell.admin', NULL, 'XWW', 'rec21', 'Intermediate bulk container, textile, with liner ');
			INSERT INTO public.untdid_unit VALUES (2106, 0, now(), NULL, 'opencell.admin', NULL, 'XWX', 'rec21', 'Intermediate bulk container, textile, coated and liner ');
			INSERT INTO public.untdid_unit VALUES (2107, 0, now(), NULL, 'opencell.admin', NULL, 'XWY', 'rec21', 'Intermediate bulk container, plywood, with inner liner ');
			INSERT INTO public.untdid_unit VALUES (2108, 0, now(), NULL, 'opencell.admin', NULL, 'XWZ', 'rec21', 'Intermediate bulk container, reconstituted wood, with inner liner');
			INSERT INTO public.untdid_unit VALUES (2109, 0, now(), NULL, 'opencell.admin', NULL, 'XXA', 'rec21', 'Bag, woven plastic, without inner coat/liner ');
			INSERT INTO public.untdid_unit VALUES (2110, 0, now(), NULL, 'opencell.admin', NULL, 'XXB', 'rec21', 'Bag, woven plastic, sift proof ');
			INSERT INTO public.untdid_unit VALUES (2111, 0, now(), NULL, 'opencell.admin', NULL, 'XXC', 'rec21', 'Bag, woven plastic, water resistant');
			INSERT INTO public.untdid_unit VALUES (2112, 0, now(), NULL, 'opencell.admin', NULL, 'XXD', 'rec21', 'Bag, plastics film ');
			INSERT INTO public.untdid_unit VALUES (2113, 0, now(), NULL, 'opencell.admin', NULL, 'XXF', 'rec21', 'Bag, textile, without inner coat/liner ');
			INSERT INTO public.untdid_unit VALUES (2114, 0, now(), NULL, 'opencell.admin', NULL, 'XXG', 'rec21', 'Bag, textile, sift proof ');
			INSERT INTO public.untdid_unit VALUES (2115, 0, now(), NULL, 'opencell.admin', NULL, 'XXH', 'rec21', 'Bag, textile, water resistant');
			INSERT INTO public.untdid_unit VALUES (2116, 0, now(), NULL, 'opencell.admin', NULL, 'XXJ', 'rec21', 'Bag, paper, multi-wall ');
			INSERT INTO public.untdid_unit VALUES (2117, 0, now(), NULL, 'opencell.admin', NULL, 'XXK', 'rec21', 'Bag, paper, multi-wall, water resistant');
			INSERT INTO public.untdid_unit VALUES (2118, 0, now(), NULL, 'opencell.admin', NULL, 'XYA', 'rec21', 'Composite packaging, plastic receptacle in steel drum');
			INSERT INTO public.untdid_unit VALUES (2119, 0, now(), NULL, 'opencell.admin', NULL, 'XYB', 'rec21', 'Composite packaging, plastic receptacle in steel crate box');
			INSERT INTO public.untdid_unit VALUES (2120, 0, now(), NULL, 'opencell.admin', NULL, 'XYC', 'rec21', 'Composite packaging, plastic receptacle in aluminium drum');
			INSERT INTO public.untdid_unit VALUES (2121, 0, now(), NULL, 'opencell.admin', NULL, 'XYD', 'rec21', 'Composite packaging, plastic receptacle in aluminium crate');
			INSERT INTO public.untdid_unit VALUES (2122, 0, now(), NULL, 'opencell.admin', NULL, 'XYF', 'rec21', 'Composite packaging, plastic receptacle in wooden box');
			INSERT INTO public.untdid_unit VALUES (2123, 0, now(), NULL, 'opencell.admin', NULL, 'XYG', 'rec21', 'Composite packaging, plastic receptacle in plywood drum');
			INSERT INTO public.untdid_unit VALUES (2124, 0, now(), NULL, 'opencell.admin', NULL, 'XYH', 'rec21', 'Composite packaging, plastic receptacle in plywood box ');
			INSERT INTO public.untdid_unit VALUES (2125, 0, now(), NULL, 'opencell.admin', NULL, 'XYJ', 'rec21', 'Composite packaging, plastic receptacle in fibre drum');
			INSERT INTO public.untdid_unit VALUES (2126, 0, now(), NULL, 'opencell.admin', NULL, 'XYK', 'rec21', 'Composite packaging, plastic receptacle in fibreboard box');
			INSERT INTO public.untdid_unit VALUES (2127, 0, now(), NULL, 'opencell.admin', NULL, 'XYL', 'rec21', 'Composite packaging, plastic receptacle in plastic drum');
			INSERT INTO public.untdid_unit VALUES (2128, 0, now(), NULL, 'opencell.admin', NULL, 'XYM', 'rec21', 'Composite packaging, plastic receptacle in solid plastic box');
			INSERT INTO public.untdid_unit VALUES (2129, 0, now(), NULL, 'opencell.admin', NULL, 'XYN', 'rec21', 'Composite packaging, glass receptacle in steel drum');
			INSERT INTO public.untdid_unit VALUES (2130, 0, now(), NULL, 'opencell.admin', NULL, 'XYP', 'rec21', 'Composite packaging, glass receptacle in steel crate box');
			INSERT INTO public.untdid_unit VALUES (2131, 0, now(), NULL, 'opencell.admin', NULL, 'XYQ', 'rec21', 'Composite packaging, glass receptacle in aluminium drum');
			INSERT INTO public.untdid_unit VALUES (2132, 0, now(), NULL, 'opencell.admin', NULL, 'XYR', 'rec21', 'Composite packaging, glass receptacle in aluminium crate');
			INSERT INTO public.untdid_unit VALUES (2133, 0, now(), NULL, 'opencell.admin', NULL, 'XYS', 'rec21', 'Composite packaging, glass receptacle in wooden box');
			INSERT INTO public.untdid_unit VALUES (2134, 0, now(), NULL, 'opencell.admin', NULL, 'XYT', 'rec21', 'Composite packaging, glass receptacle in plywood drum');
			INSERT INTO public.untdid_unit VALUES (2135, 0, now(), NULL, 'opencell.admin', NULL, 'XYV', 'rec21', 'Composite packaging, glass receptacle in wickerwork hamper');
			INSERT INTO public.untdid_unit VALUES (2136, 0, now(), NULL, 'opencell.admin', NULL, 'XYW', 'rec21', 'Composite packaging, glass receptacle in fibre drum');
			INSERT INTO public.untdid_unit VALUES (2137, 0, now(), NULL, 'opencell.admin', NULL, 'XYX', 'rec21', 'Composite packaging, glass receptacle in fibreboard box ');
			INSERT INTO public.untdid_unit VALUES (2138, 0, now(), NULL, 'opencell.admin', NULL, 'XYY', 'rec21', 'Composite packaging, glass receptacle in expandable plastic pack');
			INSERT INTO public.untdid_unit VALUES (2139, 0, now(), NULL, 'opencell.admin', NULL, 'XYZ', 'rec21', 'Composite packaging, glass receptacle in solid plastic pack');
			INSERT INTO public.untdid_unit VALUES (2140, 0, now(), NULL, 'opencell.admin', NULL, 'XZA', 'rec21', 'Intermediate bulk container, paper, multi-wall ');
			INSERT INTO public.untdid_unit VALUES (2141, 0, now(), NULL, 'opencell.admin', NULL, 'XZB', 'rec21', 'Bag, large ');
			INSERT INTO public.untdid_unit VALUES (2142, 0, now(), NULL, 'opencell.admin', NULL, 'XZC', 'rec21', 'Intermediate bulk container, paper, multi-wall, water resistant');
			INSERT INTO public.untdid_unit VALUES (2143, 0, now(), NULL, 'opencell.admin', NULL, 'XZD', 'rec21', 'Intermediate bulk container, rigid plastic, with structural equipment, solids');
			INSERT INTO public.untdid_unit VALUES (2144, 0, now(), NULL, 'opencell.admin', NULL, 'XZF', 'rec21', 'Intermediate bulk container, rigid plastic, freestanding, solids');
			INSERT INTO public.untdid_unit VALUES (2145, 0, now(), NULL, 'opencell.admin', NULL, 'XZG', 'rec21', 'Intermediate bulk container, rigid plastic, with structural equipment, pressurised');
			INSERT INTO public.untdid_unit VALUES (2146, 0, now(), NULL, 'opencell.admin', NULL, 'XZH', 'rec21', 'Intermediate bulk container, rigid plastic, freestanding, pressurised');
			INSERT INTO public.untdid_unit VALUES (2147, 0, now(), NULL, 'opencell.admin', NULL, 'XZJ', 'rec21', 'Intermediate bulk container, rigid plastic, with structural equipment, liquids ');
			INSERT INTO public.untdid_unit VALUES (2148, 0, now(), NULL, 'opencell.admin', NULL, 'XZK', 'rec21', 'Intermediate bulk container, rigid plastic, freestanding, liquids');
			INSERT INTO public.untdid_unit VALUES (2149, 0, now(), NULL, 'opencell.admin', NULL, 'XZL', 'rec21', 'Intermediate bulk container, composite, rigid plastic, solids');
			INSERT INTO public.untdid_unit VALUES (2150, 0, now(), NULL, 'opencell.admin', NULL, 'XZM', 'rec21', 'Intermediate bulk container, composite, flexible plastic, solids');
			INSERT INTO public.untdid_unit VALUES (2151, 0, now(), NULL, 'opencell.admin', NULL, 'XZN', 'rec21', 'Intermediate bulk container, composite, rigid plastic, pressurised ');
			INSERT INTO public.untdid_unit VALUES (2152, 0, now(), NULL, 'opencell.admin', NULL, 'XZP', 'rec21', 'Intermediate bulk container, composite, flexible plastic, pressurised');
			INSERT INTO public.untdid_unit VALUES (2153, 0, now(), NULL, 'opencell.admin', NULL, 'XZQ', 'rec21', 'Intermediate bulk container, composite, rigid plastic, liquids');
			INSERT INTO public.untdid_unit VALUES (2154, 0, now(), NULL, 'opencell.admin', NULL, 'XZR', 'rec21', 'Intermediate bulk container, composite, flexible plastic, liquids ');
			INSERT INTO public.untdid_unit VALUES (2155, 0, now(), NULL, 'opencell.admin', NULL, 'XZS', 'rec21', 'Intermediate bulk container, composite');
			INSERT INTO public.untdid_unit VALUES (2156, 0, now(), NULL, 'opencell.admin', NULL, 'XZT', 'rec21', 'Intermediate bulk container, fibreboard');
			INSERT INTO public.untdid_unit VALUES (2157, 0, now(), NULL, 'opencell.admin', NULL, 'XZU', 'rec21', 'Intermediate bulk container, flexible');
			INSERT INTO public.untdid_unit VALUES (2158, 0, now(), NULL, 'opencell.admin', NULL, 'XZV', 'rec21', 'Intermediate bulk container, metal, other than steel');
			INSERT INTO public.untdid_unit VALUES (2159, 0, now(), NULL, 'opencell.admin', NULL, 'XZW', 'rec21', 'Intermediate bulk container, natural wood');
			INSERT INTO public.untdid_unit VALUES (2160, 0, now(), NULL, 'opencell.admin', NULL, 'XZX', 'rec21', 'Intermediate bulk container, plywood');
			INSERT INTO public.untdid_unit VALUES (2161, 0, now(), NULL, 'opencell.admin', NULL, 'XZY', 'rec21', 'Intermediate bulk container, reconstituted wood');
			INSERT INTO public.untdid_unit VALUES (2162, 0, now(), NULL, 'opencell.admin', NULL, 'XZZ', 'rec21', 'Mutually defined ');

				
		]]>
		</sql>
		</changeSet>
		
		<changeSet id="#INTRD-12085_20221221" author="HatimOUDAD">
	
				<update tableName="billing_tax">
					<column name="vatex_id" value="57" />
					<where> tax_percentage = 0</where>
				</update>					
				
				<update tableName="billing_invoice_type">
					<column name="invoice_code_type_id" value="30" />
					<where>  id = -6</where>
				</update>
				<update tableName="billing_invoice_type">
					<column name="invoice_code_type_id" value="19" />
					<where>  id = -7</where>
				</update>
				<update tableName="billing_invoice_type">
					<column name="invoice_code_type_id" value="19" />
					<where>  id = -8</where>			
				</update>
				
				<update tableName="billing_invoice_type">
					<column name="invoice_code_type_id" value="18" />
					<where>  id = -1</where>
				</update>
				<update tableName="billing_invoice_type">
					<column name="invoice_code_type_id" value="19" />
					<where>  id = -2</where>
				</update>
				<update tableName="billing_invoice_type">
					<column name="invoice_code_type_id" value="23" />
					<where>  id = -5</where>
				</update>
			
		</changeSet>

</databaseChangeLog>
