<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <changeSet author="AndriusKarpavicius" id="rebuild-data-decisionRule">
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="1" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'Territory')==_VALUE_}" />
            <column name="name" value="Territory" />
            <column name="type" value="STRING" />
            <column name="value" value="Other" />
            <column name="model" valueNumeric="1" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="2" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'Territory')==_VALUE_}" />
            <column name="name" value="Territory" />
            <column name="type" value="STRING" />
            <column name="value" value="south" />
            <column name="model" valueNumeric="0" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="3" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'Territory')==_VALUE_}" />
            <column name="name" value="Territory" />
            <column name="type" value="STRING" />
            <column name="value" value="west" />
            <column name="model" valueNumeric="1" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="4" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'Territory')==_VALUE_}" />
            <column name="name" value="Territory" />
            <column name="type" value="STRING" />
            <column name="value" value="north" />
            <column name="model" valueNumeric="0" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="5" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'SalesAmount')==_VALUE_}" />
            <column name="name" value="Sales amount" />
            <column name="type" value="STRING" />
            <column name="value" value="Other" />
            <column name="model" valueNumeric="1" />
        </insert>
        <insert tableName="wf_decision_rule">
            <column name="id" valueNumeric="6" />
            <column name="version" valueNumeric="0" />
            <column name="condition_el" value="#{mv:getCFValue(entity,'AccountType')==_VALUE_}" />
            <column name="name" value="Account Type" />
            <column name="type" value="STRING" />
            <column name="value" value="Other" />
            <column name="model" valueNumeric="1" />
        </insert>
    </changeSet>

    <changeSet author="AndriusKarpavicius" id="rebuild-data-paymentGateway"> 
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="CARD" />
        </insert>
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="DIRECTDEBIT" />
        </insert>
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="PAYPALPAYMENTLINK" />
        </insert>
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="STRIPEDIRECTLINK" />
        </insert>
        <insert tableName="crm_provider_pay_methods">
            <column name="provider_id" valueNumeric="1" />
            <column name="payment_method" value="CHECK" />
        </insert>
    </changeSet>
    
    <changeSet author="AndriusKarpavicius" id="rebuild-data-payment-gateway">
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-10"/>
            <column name="version" valueNumeric="0"/>
            <column name="code" value="org.meveo.service.script.demo.CustomGatewayPaymentScript"/>
            <column name="src_type" value="JAVA_CLASS"/>
            <column name="description" value="CustomGatewayPaymentScript demo implementation"/>
            <column name="created" valueDate="${db.current.time}"/>
            <column name="script">
                <![CDATA[
					package org.meveo.service.script.demo;
					
					import java.io.StringReader;
					import java.util.Date;
					import java.util.Map;
					import javax.xml.xpath.*;
					import org.meveo.admin.exception.BusinessException;
					import org.meveo.model.payments.*;
					import org.meveo.service.script.payment.PaymentScript;
					import org.slf4j.Logger;
					import org.slf4j.LoggerFactory;
					import org.xml.sax.InputSource;
					
					/**
					 * @author anasseh
					 */
					public class CustomGatewayPaymentScript extends PaymentScript {
						private static final Logger log = LoggerFactory.getLogger(CustomGatewayPaymentScript.class);
					
						public void createCardToken(Map<String, Object> methodContext) throws BusinessException {
							log.info("createCardToken  methodContext {} ", methodContext);
							methodContext.put(PaymentScript.RESULT_TOKEN,
									"7ced0000-3ab2-000d-6a50-08d4b8a6" + (int) (Math.random() * 1000 + 1));
						}
					
						public void doPaymentToken(Map<String, Object> methodContext) throws BusinessException {
							doIt(methodContext, "PAL");
						}
					
						public void doPaymentCard(Map<String, Object> methodContext) throws BusinessException {
							doIt(methodContext, "PAL_CARD");
						}
					
						public void doRefundToken(Map<String, Object> methodContext) throws BusinessException {
							doIt(methodContext, "RFD");
						}
					
						public void doRefundCard(Map<String, Object> methodContext) throws BusinessException {
							doIt(methodContext, "RFD_CARD");
						}
					
						@Override
						public void doPaymentSepa(Map<String, Object> methodContext) throws BusinessException {
							log.info("doPaymentSepa  methodContext {} ", methodContext);
							doIt(methodContext, "PAL_SEPA");
						}
					
						@Override
						public void cancelPayment(Map<String, Object> methodContext) throws BusinessException {
							log.info("cancelPayment  methodContext {} ", methodContext);
						}
					
						@Override
						public void doRefundSepa(Map<String, Object> methodContext) throws BusinessException {
							log.info("doRefundSepa  methodContext {} ", methodContext);
							doIt(methodContext, "RFD_SEPA");
						}
					
						@Override
						public void checkPayment(Map<String, Object> methodContext) throws BusinessException {
							try {
								log.info("checkPayment  methodContext {} ", methodContext);
								String paymentResponse = "<root>";
								paymentResponse += "<STATUS>92</STATUS>";
								paymentResponse += "<PAYID>" + ((int) (Math.random() * 100000 + 1)) + "</PAYID>";
								paymentResponse += "<TRANSACTIONID>92</TRANSACTIONID>";
								paymentResponse += "<CRMTOKEN>clientSide</CRMTOKEN>";
								paymentResponse += "<BRAND>VISA</BRAND>";
								paymentResponse += "<ACCEPTENCE>bankRef</ACCEPTENCE>";
								paymentResponse += "</root>";
								methodContext.put(PaymentScript.RESULT_PAYMENT_STATUS, PaymentStatusEnum.PENDING);
								methodContext.put(PaymentScript.RESULT_PAYMENT_ID, getValue(paymentResponse, "/root/PAYID"));
								methodContext.put(PaymentScript.RESULT_TRANSACTION_ID, getValue(paymentResponse, "/root/TRANSACTIONID"));
								methodContext.put(PaymentScript.RESULT_CODE_CLIENT_SIDE, getValue(paymentResponse, "/root/CRMTOKEN"));
								methodContext.put(PaymentScript.RESULT_PAYMENT_BRAND, getValue(paymentResponse, "/root/BRAND"));
								methodContext.put(PaymentScript.RESULT_BANK_REFERENCE, getValue(paymentResponse, "/root/ACCEPTENCE"));
							} catch (Exception e) {
								throw new BusinessException(e.getMessage());
							}
						}
					
						@Override
						public void checkMandat(Map<String, Object> methodContext) throws BusinessException {
							log.info("checkMandat  methodContext {} ", methodContext);
							methodContext.put(PaymentScript.RESULT_MANDAT_ID, methodContext.get(PaymentScript.CONTEXT_MANDAT_ID));
							methodContext.put(PaymentScript.RESULT_MANDAT_REF, methodContext.get(PaymentScript.CONTEXT_MANDAT_REF));
							methodContext.put(PaymentScript.RESULT_STATE, MandatStateEnum.active);
							methodContext.put(PaymentScript.RESULT_STANDARD, PaymentScript.RESULT_STANDARD);
							methodContext.put(PaymentScript.RESULT_INT_SCORE, "12");
							methodContext.put(PaymentScript.RESULT_DATE_CREATED, new Date());
							methodContext.put(PaymentScript.RESULT_DATE_SIGNED, new Date());
							methodContext.put(PaymentScript.RESULT_SCHEME, PaymentScript.RESULT_SCHEME);
							methodContext.put(PaymentScript.RESULT_BIC, PaymentScript.RESULT_BIC);
							methodContext.put(PaymentScript.RESULT_IBAN, PaymentScript.RESULT_IBAN);
							methodContext.put(PaymentScript.RESULT_BANK_NAME, PaymentScript.RESULT_BANK_NAME);
						}
					
						@Override
						public void getHostedCheckoutUrl(Map<String, Object> methodContext) throws BusinessException {
							log.info("getHostedCheckoutUrl  methodContext {} ", methodContext);
					
							methodContext.put(PaymentScript.RESULT_HOSTED_CO_URL, "https://dump.url.com/checkoutPageUrl");
							methodContext.put(PaymentScript.RESULT_HOSTED_CO_ID, "123456789");
					
						}
					
						@Override
						public void createInvoice(Map<String, Object> methodContext) throws BusinessException {
							log.info("createInvoice  methodContext {} ", methodContext);
							methodContext.put(PaymentScript.RESULT_HOSTED_CO_URL, "https://dump.url.com/invoicePageUrl");
						}
					
						@Override
						public void createSepaDirectDebitToken(Map<String, Object> methodContext) throws BusinessException {
							log.info("createSepaDirectDebitToken  methodContext {} ", methodContext);
							methodContext.put(PaymentScript.RESULT_TOKEN,
									"7ced0000-3ab2-000d-6a50-08d4b8a6" + (int) (Math.random() * 1000 + 1));
					
						}
					
						@Override
						public void createMandate(Map<String, Object> methodContext) throws BusinessException {
							log.info("createMandate  methodContext {} ", methodContext);
					
						}
					
						@Override
						public void approveSepaDDMandate(Map<String, Object> methodContext) throws BusinessException {
							log.info("approveSepaDDMandate  methodContext {} ", methodContext);
					
						}
					
						@Override
						public void getHostedCheckoutStatus(Map<String, Object> methodContext) throws BusinessException {
							log.info("getHostedCheckoutStatus  methodContext {} ", methodContext);
							methodContext.put(PaymentScript.RESULT_HOSTED_CO_STATUS, PaymentScript.RESULT_HOSTED_CO_STATUS);
							methodContext.put(PaymentScript.RESULT_PAYMENT_ID, "123456");
							methodContext.put(PaymentScript.RESULT_PAYMENT_STATUS, PaymentStatusEnum.ACCEPTED);
					
						}
					
						private void doIt(Map<String, Object> methodContext, String operationType) throws BusinessException {
							try {
								log.debug("EXECUTE  methodContext {} ", methodContext);
								Long amountCts = (Long) methodContext.get(PaymentScript.CONTEXT_AMOUNT_CTS);
								if (amountCts == null) {
									throw new BusinessException("amountCts is null");
								}
					
								// DEMO : get tokenId or card infos from context
								String body = "{";
								body += " \"PSPID\" : \"PSPID\" ,";
								body += " \"USERID\" : \"USERID\" ,";
								body += " \"PSWD\" : \"PSWD\" ,";
								body += " \"REFKIND\" :  \"PSPID\" ,";
								body += " \"REFID\" : \"PSPID\" ,";
								body += " \"OPERATION\" : \"" + operationType + "\" ,";
								body += " \"AMOUNT\" : \"" + amountCts.longValue() + "\" ,";
								body += " \"SHASIGN\" : \"SHASIGN\" ,";
								body += " }";
					
								String paymentResponse = "<root>";
								paymentResponse += "<STATUS>92</STATUS>";
								paymentResponse += "<PAYID>" + ((int) (Math.random() * 100000 + 1)) + "</PAYID>";
								paymentResponse += "<TRANSACTIONID>92</TRANSACTIONID>";
								paymentResponse += "<CRMTOKEN>clientSide</CRMTOKEN>";
								paymentResponse += "<BRAND>VISA</BRAND>";
								paymentResponse += "<ACCEPTENCE>bankRef</ACCEPTENCE>";
								paymentResponse += "</root>";
								methodContext.put(PaymentScript.RESULT_PAYMENT_STATUS, PaymentStatusEnum.PENDING);
								methodContext.put(PaymentScript.RESULT_PAYMENT_ID, getValue(paymentResponse, "/root/PAYID"));
								methodContext.put(PaymentScript.RESULT_TRANSACTION_ID, getValue(paymentResponse, "/root/TRANSACTIONID"));
								methodContext.put(PaymentScript.RESULT_CODE_CLIENT_SIDE, getValue(paymentResponse, "/root/CRMTOKEN"));
								methodContext.put(PaymentScript.RESULT_PAYMENT_BRAND, getValue(paymentResponse, "/root/BRAND"));
								methodContext.put(PaymentScript.RESULT_BANK_REFERENCE, getValue(paymentResponse, "/root/ACCEPTENCE"));
							} catch (Exception e) {
								throw new BusinessException(e.getMessage());
							}
						}
					
						private String getValue(String sourceXML, String expression) throws XPathExpressionException {
							InputSource iSource = new InputSource(new StringReader(sourceXML));
							XPathFactory xpathFactory = XPathFactory.newInstance();
							XPath xpath = xpathFactory.newXPath();
							return xpath.evaluate(expression, iSource);
						}
					}
				]]>
            </column>
        </insert>
              
        <sql><![CDATA[INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-11  , 0, 0,  ${db.current.time}, 'org.meveo.service.script.demo.PaymentCallBackScript', 'PaymentCallBackScript', 'JAVA_CLASS', null);]]></sql>

        <sql><![CDATA[INSERT INTO ${db.schema.adapted}ar_payment_gateway (id, version, disabled, created, updated, code, description, type, payment_method, card_type,
        implementation_class_name, script_instance_id, trading_currency_id, application_el, uuid, creator) VALUES (-1, 0, 0,  ${db.current.time}, NULL, 'GatewayDemo_CARD', 'GatewayDemo CARD for Demo', 'CUSTOM', 'CARD', NULL, NULL, -10, NULL, NULL,
          '3bb099a3-e72d-49ea-9d96-908e74569e02', 'opencell.admin');]]></sql>
        <sql><![CDATA[INSERT INTO ${db.schema.adapted}ar_payment_gateway (id, version, disabled, created, updated, code, description, type, payment_method, card_type,
        implementation_class_name, script_instance_id, trading_currency_id, application_el, uuid, creator) VALUES (-2, 0, 0,  ${db.current.time}, NULL, 'GatewayDemo_DD', 'GatewayDemo DirectDebit for Demo', 'CUSTOM', 'DIRECTDEBIT', NULL, NULL, -10, NULL, NULL,
          '45b099a3-e72d-49ee-9d56-908e74569e56', 'opencell.admin');]]></sql>          

        <sql><![CDATA[INSERT INTO ${db.schema.adapted}adm_notification (id, version, disabled, created, updated, code, description, class_name_filter, event_expression_filter, event_type_filter, creator, updater, counter_instance_id, counter_template_id, script_instance_id, priority) VALUES (-10, 0, 0,  ${db.current.time}, NULL, 'PaymentCallBack', NULL, 'org.meveo.model.notification.InboundRequest',
          '#{event.pathInfo.startsWith("/DEMO/custom_payment-callback?")}', 'INBOUND_REQ', 'opencell.admin', NULL, NULL, NULL, -11, 0);]]></sql>

        <sql><![CDATA[INSERT INTO ${db.schema.adapted}adm_notification_params VALUES (-10, '#{event.getParameters()}', 'params');]]></sql>        

    </changeSet>

    
    
    
    <changeSet author="ZBARIKI" id="#6048_20210326" dbms="postgresql"/>        
    <changeSet author="MohamedSTITANE" id="#6048_20210326" dbms="oracle"/>    

    <changeSet id="#INTRD-13383_20230123" author="bourras">
        <insert tableName="meveo_script_instance">
            <column name="id" valueSequenceNext="meveo_script_instance_seq"/>
            <column name="version" valueNumeric="0"/>
            <column name="code" value="org.meveo.service.script.product.OneShotOtherTypeMigrationScript"/>
            <column name="src_type" value="JAVA_CLASS"/>
            <column name="description" value="Migrate OneShot Charge of Type OTHER to INVOICING_PLAN"/>
            <column name="created" valueDate="${db.current.time}"/>
        </insert>
    </changeSet>
    
    <changeSet author="AmineBENAICHA" id="#6048_20210611">
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-30"/>
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="org.meveo.service.script.ServiceTemplateToProductScript" />
            <column name="description" value="Migration ServiceTemplate To Product" />
            <column name="src_type" value="JAVA_CLASS" />
        </insert>
        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-40" />
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="updated" valueDate="null" />
            <column name="uuid" value="ServiceTemplateToProductJob" />
            <column name="code" value="ServiceTemplateToProductJob" />
            <column name="description" value="ServiceTemplateToProductJob" />
            <column name="job_category" value="MEDIATION" />
            <column name="job_template" value="ScriptingJob" />
            <column name="parametres" valueNumeric="null" />
            <column name="creator" value="opencell.admin" />
            <column name="updater" value="null" />
            <column name="timerentity_id" value="null" />
            <column name="cf_values">
                <![CDATA[
                    {"ScriptingJob_script":[{"entity":{"classname":"org.meveo.model.scripts.ScriptInstance","code":"org.meveo.service.script.ServiceTemplateToProductScript","id":-30}}],"ScriptingJob_TransactionType":[{"string":"REQUIRES_NEW"}]}
                ]]>
            </column>
        </insert>
    </changeSet>

            
       <!-- DONT REMOVE THIS CHANGESET - KEEP AT THE BOTTOM OF THE FILE  -->
    <changeSet id="#liquibase_hack_data-scripts" author="AbdelmounaimAkadid">
        <sql>update databasechangelog set filename='src/main/db_resources/changelog/current/data.xml' where filename='src/main/db_resources/changelog/rebuild/data-scripts.xml'</sql>
    </changeSet>

</databaseChangeLog>
