<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.2.xsd http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
    
    <changeSet author="AndriusKarpavicius" id="rebuild-data-report-extracts">
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-1"/>
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ACCOUNT_OPS" />
            <column name="description" value="Export account operations" />
            <column name="src_type" value="JAVA" />
            <column name="script">
<![CDATA[package org.meveo.service.script.export; import java.io.File; import java.io.FileWriter; import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.List; import java.util.Map; import org.meveo.admin.exception.BusinessException; import org.meveo.model.payments.AccountOperation; import org.meveo.model.payments.CustomerAccount; import org.meveo.model.payments.RecordedInvoice; import org.meveo.service.payments.impl.AccountOperationService; import org.meveo.service.script.Script; import org.meveo.service.script.finance.ReportExtractScript; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import java.util.Date; public class ExportAccountOperationScript extends ReportExtractScript { private static final Logger LOGGER = LoggerFactory.getLogger(ExportAccountOperationScript.class); private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(AccountOperationService.class.getSimpleName()); @Override public void execute(Map<String, Object> initContext) throws BusinessException { try { LOGGER.debug("#####################Starting of script ExportAccountOperationScript"); Date startDate = (Date) initContext.get(ReportExtractScript.START_DATE); Date endDate = (Date) initContext.get(ReportExtractScript.END_DATE); DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); List<AccountOperation> accountOperations = accountOperationService.list(); initContext.put(ReportExtractScript.LINE_COUNT, accountOperations.size()); String exportDir = String.valueOf(initContext.get(ReportExtractScript.DIR)); File dir = new File(exportDir); if (!dir.exists()) { dir.mkdirs(); } CustomerAccount customerAccount = null; StringBuilder sb =new StringBuilder(); sb.append("Transaction Date;Transaction Type;Amount;Due Date;Reference;Transaction Category;Invoice Date;" + "Customer Account Code;Customer Account Description\n"); for (AccountOperation accountOperation : accountOperations) { if(accountOperation.getTransactionDate().equals(startDate) || accountOperation.getTransactionDate().equals(endDate) || (accountOperation.getTransactionDate().after(startDate) && accountOperation.getTransactionDate().before(endDate))) { customerAccount = accountOperation.getCustomerAccount(); sb.append(nil(accountOperation.getTransactionDate().toString())+ ";"); sb.append(nil(accountOperation.getType()) + ";"); sb.append(nil(accountOperation.getAmount().toString()) + ";"); sb.append(isNull(accountOperation.getDueDate()) + ";"); sb.append(nil(accountOperation.getReference()) + ";"); sb.append(nil(accountOperation.getTransactionCategory().toString()) + ";"); if(accountOperation instanceof RecordedInvoice) { RecordedInvoice invoice = (RecordedInvoice) accountOperation; sb.append(invoice.getInvoiceDate().toString() + ";"); } else { sb.append(";"); } sb.append(nil(customerAccount.getCode()) + ";"); sb.append(nil(customerAccount.getDescriptionOrCode()) + ";\n"); } } String strFilename = String.valueOf(initContext.get(ReportExtractScript.FILENAME)); LOGGER.debug("output={}", strFilename); File file = new File(dir + File.separator + strFilename); file.createNewFile(); FileWriter fileWriter = new FileWriter(file); fileWriter.write(sb.toString()); fileWriter.close(); LOGGER.debug("#####################Ending of script ExportAccountOperationScript"); } catch (Exception e) { initContext.put(ReportExtractScript.ERROR_MESSAGE, e.getMessage()); LOGGER.error("Exception:", e); throw new BusinessException(e.getMessage()); } } private String isNull(Object obj) { if(obj == null) { return ""; } else { return obj.toString(); } } private String nil(String word) { if (word == null || "null".equalsIgnoreCase(word)) { return ""; } else { return word; } } }]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="SALES_JOURNAL" />
            <column name="description" value="Sales Journal" />
            <column name="category" value="sales"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="sales-[yyyy_MM_dd].html"></column>
            <column name="result_type" value="HTML"></column>
            <column name="uuid" value="SALES_JOURNAL_UUID"></column>
            <column name="sql_query">
                <![CDATA[SELECT
				    TO_CHAR(ao.invoice_date,'MM') AS "Mois",
				    TO_CHAR(ao.invoice_date,'DD/MM/YYYY') AS "Date facture",
				    text('HG') AS "Code comptable",
				    ae.code AS "Client facturé",
				    text('MAI') AS "Type article",
				    split_part(bac.code, ',', 6) AS "Famille statistique",
				    split_part(bac.code, ',', 2) AS "Article",
				    trim(TO_CHAR(ia.amount_without_tax,'9999990D00')) AS "Montant HT",
				    trim(TO_CHAR(ia.quantity,'9999990')) AS "Qté facturée",
				    ao.reference AS "No facture",
				    ao.description AS "Catégorie facture",
				    ao.code AS "Type de pièce",
				    text('VEN') AS "Journal"
				FROM
				    ar_customer_account ae
				INNER JOIN ar_account_operation ao ON ao.customer_account_id = ae.id
				INNER JOIN billing_invoice i ON i.invoice_number = ao.reference
				INNER JOIN billing_invoice_agregate ia ON (ia.invoice_id = i.id AND type = 'F')
				LEFT JOIN billing_accounting_code bac ON bac.id = ia.accounting_code_id
				WHERE :START_DATE<>:END_DATE
				AND ao.invoice_date >= to_date('01/' || TO_CHAR(CURRENT_DATE,'MM/YYYY'),'DD/MM/YYYY') + interval '-12 month'
				AND ao.invoice_date <= to_date('01/' || TO_CHAR(CURRENT_DATE,'MM/YYYY'),'DD/MM/YYYY') + interval '0 month'
				ORDER BY
				    ae.code,
				    ao.code,
				    split_part(bac.code, ',', 6),
				    split_part(bac.code, ',', 2)
			    ]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-1"></column>
            <column name="params_key" value="START_DATE"></column>
            <column name="params" value="31/01/2017"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-1"></column>
            <column name="params_key" value="END_DATE"></column>
            <column name="params" value="31/12/2018"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="ACCOUNT_OPS" />
            <column name="description" value="Export account operations" />
            <column name="category" value="sales"></column>
            <column name="script_type" value="JAVA"></column>
            <column name="filename_format" value="accounts-ops-[yyyy_MM_dd].csv"></column>
            <column name="script_instance_id" value="-1"></column>
            <column name="uuid" value="ACOUNT_OPS_UUID"></column>
            <column name="result_type" value="CSV"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-2"></column>
            <column name="params_key" value="START_DATE"></column>
            <column name="params" value="31/01/2017"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-2"></column>
            <column name="params_key" value="END_DATE"></column>
            <column name="params" value="31/12/2018"></column>
        </insert>


        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-3" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="FULL_HIERARCHY" />
            <column name="description" value="Full hierarchy export" />
            <column name="category" value="customer"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="hierarchy-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="FULL_HIERARCHY_UUID"></column>
            <column name="sql_query">
                <![CDATA[select s.code AS "Seller code"
	, s.description AS "Seller description"
	, coalesce(c.code, '') AS "Customer code"
	, coalesce(replace(c.description, ',', ' '), '') AS "Customer description"
	, coalesce(ca.code, '') AS "Customer Account code"
	, coalesce(replace(ca.description, ',', ' '), '') AS "Customer Account description"
	, coalesce(ba.code, '') AS "Billing Account code"
	, coalesce(replace(ba.description, ',', ' '), '') AS "Billing Account description"
	, coalesce(ua.code, '') AS "User Account code"
	, coalesce(replace(ua.description, ',', ' '), '') AS "User Account description"
	, coalesce(su.code, '') AS "Subscription code"
	, coalesce(replace(su.description, ',', ' '), '') AS "Subscription description"
	, coalesce(ap.acces_user_id, '') AS "Access Point id"  
from  crm_seller s left
	OUTER JOIN crm_customer c  on c.seller_id = s.id left
	OUTER JOIN ar_customer_account ca  on ca.customer_id = c.id left
	OUTER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id left
	OUTER JOIN billing_user_account ua  on ua.billing_account_id = ba.id left
	OUTER JOIN billing_subscription su  on su.user_account_id = ua.id left
	OUTER JOIN medina_access ap  on ap.subscription_id = su.id 
where s.code ilike '%' || :SEARCH_CRITERION || '%'  or s.description ilike '%' 
	|| :SEARCH_CRITERION || '%'  or c.code ilike '%' || :SEARCH_CRITERION 
	|| '%'  or c.description ilike '%' || :SEARCH_CRITERION || '%'  or ca.code ilike '%' 
	|| :SEARCH_CRITERION || '%'  or ca.description ilike '%' || :SEARCH_CRITERION 
	|| '%'  or ba.code ilike '%' || :SEARCH_CRITERION || '%'  or ba.description ilike '%' 
	|| :SEARCH_CRITERION || '%'  or ua.code ilike '%' || :SEARCH_CRITERION 
	|| '%'  or ua.description ilike '%' || :SEARCH_CRITERION || '%'  or su.code ilike '%' 
	|| :SEARCH_CRITERION || '%'  or su.description ilike '%' || :SEARCH_CRITERION 
	|| '%'  or ap.acces_user_id ilike '%' || :SEARCH_CRITERION || '%'  
order by s.code
	,c.code
	,ca.code
	,ba.code
	,ua.code
	,su.code
	,ap.acces_user_id]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-3"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-4" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="CUSTOMERS_PER_SELLER" />
            <column name="description" value="Customers per seller" />
            <column name="category" value="customer"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="customers_per_seller-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="CUSTOMERS_PER_SELLER_UUID"></column>
            <column name="sql_query">
                <![CDATA[select s.code AS "Seller code"
					        , s.description AS "Seller description"
					        , coalesce(c.code, '') AS "Customer code"
					        , coalesce(replace(c.description, ',', ' '), '') AS "Customer description"  
					from  crm_seller s left
					        OUTER JOIN crm_customer c  on c.seller_id = s.id
					where(  s.code ilike '%' || :SEARCH_CRITERION 
					        || '%'  or s.description ilike '%' || :SEARCH_CRITERION || '%'  or c.code ilike '%' 
					        || :SEARCH_CRITERION || '%'  or c.description ilike '%' || :SEARCH_CRITERION || '%'  )  
					and (  s.code ilike '%' || :SELLER || '%'  or s.description ilike '%' || :SELLER || '%'  )  
					order by s.code
					        ,c.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-4"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-4"></column>
            <column name="params_key" value="SELLER"></column>
            <column name="params" value="%"></column>
        </insert>

        <!-- Invoiced -->
        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-5" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="INVOICED_GLOBAL" />
            <column name="description" value="Total invoiced amount per month for interval (ex: last 12 months = -12 month)" />
            <column name="category" value="invoiced"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="invoiced_global-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="INVOICED_GLOBAL_UUID"></column>
            <column name="sql_query">
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
    , it.code AS "Invoice type code"
    , it.description AS "Invoice type description"
    , trim(to_char(sum(i.amount_without_tax), '9999999990.00')) AS "Amount without tax"
    , trim(to_char(sum(i.amount_with_tax), '9999999990.00')) AS "Amount with tax"  
from billing_invoice i 
    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id 
where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))  
group by date_trunc('month', i.invoice_date)
    , it.code
    , it.description order by date_trunc('month', i.invoice_date) DESC
    , it.code DESC]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-5"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-6" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="INVOICED_BA_HIERARCHY" />
            <column name="description" value="Invoiced per Billing Account with hierarchy per month for interval, global filter" />
            <column name="category" value="invoiced"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="invoiced_per_billing_account_hierarchy-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="INVOICED_BA_HIERARCHY_UUID"></column>
            <column name="sql_query">
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
	, s.code AS "Seller code"
	, s.description AS "Seller description"
	, c.code AS "Customer code"
	, c.description AS "Customer description"
	, ca.code AS "Customer Account code"
	, ca.description AS "Customer Account description"
	, ba.code AS "Billing Account code"
	, ba.description AS "Billing Account description"
	, it.code AS "Invoice type code"
	, it.description AS "Invoice type description"
	, to_char(sum(i.amount_without_tax), '9999999990.00') AS "Amount without tax"
	, to_char(sum(i.amount_with_tax), '9999999990.00') AS "Amount with tax"  
from crm_seller s 
	INNER JOIN crm_customer c  on c.seller_id = s.id
	INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
	INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
	INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
	INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id 
where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))  
and(  s.code ilike '%' || :SEARCH_CRITERION || '%'  or s.description ilike '%' || :SEARCH_CRITERION 
	|| '%'  or c.code ilike '%' || :SEARCH_CRITERION || '%'  or c.description ilike '%' || :SEARCH_CRITERION 
	|| '%'  or ca.code ilike '%' || :SEARCH_CRITERION || '%'  or ca.description ilike '%' || :SEARCH_CRITERION 
	|| '%'  or ba.code ilike '%' || :SEARCH_CRITERION || '%'  or ba.description ilike '%' || :SEARCH_CRITERION 
	|| '%'  )  group by date_trunc('month', i.invoice_date)
	, it.code
	, it.description
	, s.code
	, s.description
	, c.code
	, c.description
	, ca.code
	, ca.description
	, ba.code
	, ba.description order by date_trunc('month', i.invoice_date) DESC
	, it.code DESC
	, s.code
	, c.code
	, ca.code
	, ba.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-6"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-6"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-7" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="INVOICED_BA" />
            <column name="description" value="Invoiced per Billing Account per month for interval, global filter" />
            <column name="category" value="invoiced"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="invoiced_per_billing_account-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="INVOICED_BA_UUID"></column>
            <column name="sql_query">
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
	, ba.code AS "Billing Account code"
	, ba.description AS "Billing Account description"
	, it.code AS "Invoice type code"
	, it.description AS "Invoice type description"
	, to_char(sum(i.amount_without_tax), '9999999990.00') AS "Amount without tax"
	, to_char(sum(i.amount_with_tax), '9999999990.00') AS "Amount with tax"  
from crm_seller s
	INNER JOIN crm_customer c  on c.seller_id = s.id
	INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
	INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
	INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
	INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id 
where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))  
and(  ba.code ilike '%' || :SEARCH_CRITERION || '%'  or ba.description ilike '%' || :SEARCH_CRITERION || '%'  )  
group by date_trunc('month', i.invoice_date)
	, it.code
	, it.description
	, ba.code
	, ba.description order by date_trunc('month', i.invoice_date) DESC
	, it.code DESC
	, ba.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-7"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-7"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-8" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="INVOICED_CA" />
            <column name="description" value="Invoiced per Customer Account per month for interval, global filter" />
            <column name="category" value="invoiced"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="invoiced_per_customer_account-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="INVOICED_CA_UUID"></column>
            <column name="sql_query">
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
    , ca.code AS "Customer Account code"
    , ca.description AS "Customer Account description"
    , it.code AS "Invoice type code"
    , it.description AS "Invoice type description"
    , to_char(sum(i.amount_without_tax), '9999999990.00') AS "Amount without tax"
    , to_char(sum(i.amount_with_tax), '9999999990.00') AS "Amount with tax"  
from crm_seller s
    INNER JOIN crm_customer c  on c.seller_id = s.id
    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id 
where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))  
and(  ca.code ilike '%' || :SEARCH_CRITERION || '%'  or ca.description ilike '%' || :SEARCH_CRITERION || '%'  )  
group by date_trunc('month', i.invoice_date)
    , it.code
    , it.description
    , ca.code
    , ca.description order by date_trunc('month', i.invoice_date) DESC
    , it.code DESC
    , ca.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-8"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-8"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-9" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="INVOICED_C" />
            <column name="description" value="Invoiced per Customer per month for interval, global filter" />
            <column name="category" value="invoiced"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="invoiced_per_customer-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="INVOICED_C_UUID"></column>
            <column name="sql_query">
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
	, c.code AS "Customer code"
	, c.description AS "Customer description"
	, it.code AS "Invoice type code"
	, it.description AS "Invoice type description"
	, to_char(sum(i.amount_without_tax), '9999999990.00') AS "Amount without tax"
	, to_char(sum(i.amount_with_tax), '9999999990.00') AS "Amount with tax"  
from crm_seller s
	INNER JOIN crm_customer c  on c.seller_id = s.id
	INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
	INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
	INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
	INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id 
where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))  
and(  c.code ilike '%' || :SEARCH_CRITERION || '%'  or c.description ilike '%' || :SEARCH_CRITERION || '%'  )  
group by date_trunc('month', i.invoice_date)
	, it.code
	, it.description
	, c.code
	, c.description order by date_trunc('month', i.invoice_date) DESC
	, it.code DESC
	, c.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-9"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-9"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-10" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="INVOICED_S" />
            <column name="description" value="Invoiced per Seller per month for interval, global filter" />
            <column name="category" value="invoiced"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="invoiced_per_seller-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="INVOICED_S_UUID"></column>
            <column name="sql_query">
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS  Month 
    , s.code AS  "Seller code"
    , s.description AS  "Seller description"
    , it.code AS  "Invoice type code"
    , it.description AS  "Invoice type description"
    , to_char(sum(i.amount_without_tax), '9999999990.00') AS  "Amount without tax"
    , to_char(sum(i.amount_with_tax), '9999999990.00') AS  "Amount with tax"   
from crm_seller s
    INNER JOIN crm_customer c  on c.seller_id = s.id
    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id 
where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || 'month' AS INTERVAL))  
and(  s.code ilike '%' || :SEARCH_CRITERION || '%'  or s.description ilike '%' || :SEARCH_CRITERION || '%'  )  
group by date_trunc('month', i.invoice_date)
    , it.code
    , it.description
    , s.code
    , s.description order by date_trunc('month', i.invoice_date) DESC
    , it.code DESC
    , s.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-10"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-10"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-11" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="INVOICED_OF" />
            <column name="description" value="Invoiced per Offer per month for interval, global filter" />
            <column name="category" value="invoiced"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="invoiced_per_offer-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="INVOICED_OF_UUID"></column>
            <column name="sql_query">
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
                    , of.code AS "Offer code"
                    , of.description AS "Offer description"
                    , it.code AS "Invoice type code"
                    , it.description AS "Invoice type description"
                    , to_char(sum(rt.amount_without_tax), '9999999990.00') AS "Amount without tax"
                    , to_char(sum(rt.amount_with_tax), '9999999990.00') AS "Amount with tax"  
                from cat_offer_template of
                    INNER JOIN billing_wallet_operation wo on wo.offer_code = OF.code
                    INNER JOIN billing_rated_transaction rt on wo.rated_transaction_id = rt.id
                    INNER JOIN billing_invoice i  on i.id = rt.invoice_id
                    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id 
                where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))  
                and(  of.code ilike '%' || :SEARCH_CRITERION || '%'  or OF.description ilike '%' || :SEARCH_CRITERION || '%'  )  
                group by date_trunc('month', i.invoice_date)
                    , it.code
                    , it.description
                    , of.code
                    , of.description order by date_trunc('month', i.invoice_date) DESC
                    , it.code DESC
                    , of.code
                ]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-11"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-11"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <!-- Recorded Invoice -->
        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-12" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="RECORDED_GLOBAL" />
            <column name="description" value="Recorded invoices per month for interval, global filter" />
            <column name="category" value="recorded"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="recorded_global-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="RECORDED_GLOBAL_UUID"></column>
            <column name="sql_query">
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount DEBIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'CREDIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount CREDIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE - ao.amount
                END), '99999999990.00') AS "Balance"
FROM ar_account_operation ao
WHERE ao.invoice_date IS NOT NULL
AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
GROUP BY date_trunc('month', ao.invoice_date)
ORDER BY date_trunc('month', ao.invoice_date) DESC]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-12"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-13" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="RECORDED_BA_HIERARCHY" />
            <column name="description" value="Recorded per Billing Account with Hierarchy per month for interval, global filter" />
            <column name="category" value="recorded"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="recorded_per_billing_account_hierarchy-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="RECORDED_BA_HIERARCHY_UUID"></column>
            <column name="sql_query">
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
    ,s.code AS "Seller code"
    ,s.description AS "Seller description"
    ,c.code AS "Customer code"
    ,c.description AS "Customer description"
    ,ca.code AS "Customer Account code"
    ,ca.description AS "Customer Account description"
    ,ba.code AS "Billing Account code"
    ,ba.description AS "Billing Account description"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount DEBIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'CREDIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount CREDIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE - ao.amount
                END), '99999999990.00') AS "Balance"
FROM crm_seller s
    INNER JOIN crm_customer c ON c.seller_id = s.id
    INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
    INNER JOIN billing_billing_account ba ON ba.customer_account_id = ca.id
    INNER JOIN billing_invoice i ON i.billing_account_id = ba.id
    INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
        AND ao.reference = i.invoice_number
        AND ao.invoice_date = i.invoice_date
        AND ao.amount = abs(i.amount_with_tax)
WHERE ao.invoice_date IS NOT NULL
    AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
    AND (
        s.code ilike '%' || :SEARCH_CRITERION || '%'
        OR s.description ilike '%' || :SEARCH_CRITERION || '%'
        OR c.code ilike '%' || :SEARCH_CRITERION || '%'
        OR c.description ilike '%' || :SEARCH_CRITERION || '%'
        OR ca.code ilike '%' || :SEARCH_CRITERION || '%'
        OR ca.description ilike '%' || :SEARCH_CRITERION || '%'
        OR ba.code ilike '%' || :SEARCH_CRITERION || '%'
        OR ba.description ilike '%' || :SEARCH_CRITERION || '%'
        )
GROUP BY date_trunc('month', ao.invoice_date)
    ,s.code
    ,s.description
    ,c.code
    ,c.description
    ,ca.code
    ,ca.description
    ,ba.code
    ,ba.description
ORDER BY date_trunc('month', ao.invoice_date) DESC
    ,s.code
    ,c.code
    ,ca.code
    ,ba.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-13"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-13"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-14" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="RECORDED_BA" />
            <column name="description" value="Recorded per Billing Account per month for interval, global filter" />
            <column name="category" value="recorded"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="recorded_per_billing_account-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="RECORDED_BA_UUID"></column>
            <column name="sql_query">
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
    ,ba.code AS "Billing Account code"
    ,ba.description AS "Billing Account description"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount DEBIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'CREDIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount CREDIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE - ao.amount
                END), '99999999990.00') AS "Balance"
FROM crm_seller s
    INNER JOIN crm_customer c ON c.seller_id = s.id
    INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
    INNER JOIN billing_billing_account ba ON ba.customer_account_id = ca.id
    INNER JOIN billing_invoice i ON i.billing_account_id = ba.id
    INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
        AND ao.reference = i.invoice_number
        AND ao.invoice_date = i.invoice_date
        AND ao.amount = abs(i.amount_with_tax)
WHERE ao.invoice_date IS NOT NULL
    AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
    AND (
        ba.code ilike '%' || :SEARCH_CRITERION || '%'
        OR ba.description ilike '%' || :SEARCH_CRITERION || '%'
        )
GROUP BY date_trunc('month', ao.invoice_date)
    ,ba.code
    ,ba.description
ORDER BY date_trunc('month', ao.invoice_date) DESC
    ,ba.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-14"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-14"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-15" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="RECORDED_CA" />
            <column name="description" value="Recorded per Customer Account per month for interval, global filter" />
            <column name="category" value="recorded"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="recorded_per_customer_account-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="RECORDED_CA_UUID"></column>
            <column name="sql_query">
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
    ,ca.code AS "Customer Account code"
    ,ca.description AS "Customer Account description"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount DEBIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'CREDIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount CREDIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE - ao.amount
                END), '99999999990.00') AS "Balance"
FROM crm_seller s
    INNER JOIN crm_customer c ON c.seller_id = s.id
    INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
    INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
WHERE ao.invoice_date IS NOT NULL
    AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
    AND (
        ca.code ilike '%' || :SEARCH_CRITERION || '%'
        OR ca.description ilike '%' || :SEARCH_CRITERION || '%'
        )
GROUP BY date_trunc('month', ao.invoice_date)
    ,ca.code
    ,ca.description
ORDER BY date_trunc('month', ao.invoice_date) DESC
    ,ca.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-15"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-15"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-16" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="RECORDED_C" />
            <column name="description" value="Recorded per Customer per month for interval, global filter" />
            <column name="category" value="recorded"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="recorded_per_customer-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="RECORDED_C_UUID"></column>
            <column name="sql_query">
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
    ,c.code AS "Customer code"
    ,c.description AS "Customer description"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount DEBIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'CREDIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount CREDIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE - ao.amount
                END), '99999999990.00') AS "Balance"
FROM crm_seller s
    INNER JOIN crm_customer c ON c.seller_id = s.id
    INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
    INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
WHERE ao.invoice_date IS NOT NULL
    AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
    AND (
        c.code ilike '%' || :SEARCH_CRITERION || '%'
        OR c.description ilike '%' || :SEARCH_CRITERION || '%'
        )
GROUP BY date_trunc('month', ao.invoice_date)
    ,c.code
    ,c.description
ORDER BY date_trunc('month', ao.invoice_date) DESC
    ,c.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-16"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-16"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-17" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="RECORDED_S" />
            <column name="description" value="Recorded per Seller per month for interval, global filter" />
            <column name="category" value="recorded"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="recorded_per_seller-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="RECORDED_S_UUID"></column>
            <column name="sql_query">
                <![CDATA[SELECT trim(to_char(date_trunc('month', ao.invoice_date), 'Month')) || to_char(date_trunc('month', ao.invoice_date), ' YYYY') AS "Month"
    ,s.code AS "Seller code"
    ,s.description AS "Seller description"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount DEBIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'CREDIT'
                    THEN ao.amount
                ELSE 0
                END), '99999999990.00') AS "Amount CREDIT"
    ,to_char(sum(CASE 
                WHEN ao.transaction_category = 'DEBIT'
                    THEN ao.amount
                ELSE - ao.amount
                END), '99999999990.00') AS "Balance"
FROM crm_seller s
    INNER JOIN crm_customer c ON c.seller_id = s.id
    INNER JOIN ar_customer_account ca ON ca.customer_id = c.id
    INNER JOIN ar_account_operation ao ON ao.customer_account_id = ca.id
WHERE ao.invoice_date IS NOT NULL
    AND ao.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))
    AND (
        s.code ilike '%' || :SEARCH_CRITERION || '%'
        OR s.description ilike '%' || :SEARCH_CRITERION || '%'
        )
GROUP BY date_trunc('month', ao.invoice_date)
    ,s.code
    ,s.description
ORDER BY date_trunc('month', ao.invoice_date) DESC
    ,s.code]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-17"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-17"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <!-- UnBilled -->
        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-18" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="UNBILLED_UA_HIERARCHY" />
            <column name="description" value="Unbilled per User Account with Hierarchy, global filter" />
            <column name="category" value="unbilled"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="unbilled_per_user_account_hierarchy-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="UNBILLED_UA_HIERARCHY_UUID"></column>
            <column name="sql_query">
                <![CDATA[select s.code AS "Seller code"
                    , s.description AS "Seller description"
                    , c.code AS "Customer code"
                    , c.description AS "Customer description"
                    , ca.code AS "Customer Account code"
                    , ca.description AS "Customer Account description"
                    , ba.code AS "Billing Account code"
                    , ba.description AS "Billing Account description"
                    , ua.code AS "User Account code"
                    , ua.description AS "User Account description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"  
                from  billing_wallet_operation wo 
                    INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id 
                    INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id 
                    INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id 
                    INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id 
                    INNER JOIN crm_customer c  on c.id = ca.customer_id 
                    INNER JOIN crm_seller s  on s.id = c.seller_id 
                where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED' 
                    and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )  
                and(  s.code ilike '%' || :SEARCH_CRITERION || '%'  or s.description ilike '%' || :SEARCH_CRITERION || '%'  or c.code ilike '%' 
                    || :SEARCH_CRITERION || '%'  or c.description ilike '%' || :SEARCH_CRITERION || '%'  or ca.code ilike '%' 
                    || :SEARCH_CRITERION || '%'  or ca.description ilike '%' || :SEARCH_CRITERION || '%'  or ba.code ilike '%' 
                    || :SEARCH_CRITERION || '%'  or ba.description ilike '%' || :SEARCH_CRITERION || '%'  or ua.code ilike '%' 
                    || :SEARCH_CRITERION || '%'  or ua.description ilike '%' || :SEARCH_CRITERION || '%'  )  
                group by s.code
                    , s.description
                    , c.code
                    , c.description
                    , ca.code
                    , ca.description
                    , ba.code
                    , ba.description
                    , ua.code
                    , ua.description order by s.code
                    , c.code
                    , ca.code
                    , ba.code
                    , ua.code
                ]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-18"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-19" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="UNBILLED_UA" />
            <column name="description" value="Unbilled per User Account, global filter" />
            <column name="category" value="unbilled"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="unbilled_per_user_account-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="UNBILLED_UA_UUID"></column>
            <column name="sql_query">
                <![CDATA[select ua.code AS "User Account code"
                    , ua.description AS "User Account description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"  
                from  billing_wallet_operation wo 
                    INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id 
                    INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id 
                    INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id 
                    INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id 
                    INNER JOIN crm_customer c  on c.id = ca.customer_id 
                    INNER JOIN crm_seller s  on s.id = c.seller_id 
                where  (  wo.STATUS = 'OPEN'  or (   wo.STATUS = 'TREATED'   
                    and EXISTS (   select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id   
                and rt.STATUS = 'OPEN'   )  )  )  and(  ua.code ilike '%' || :SEARCH_CRITERION || '%'  or ua.description ilike '%' 
                    || :SEARCH_CRITERION || '%'  )  
                group by ua.code
                    , ua.description 
                order by ua.code
                ]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-19"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-20" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="UNBILLED_BA" />
            <column name="description" value="Unbilled per Billing Account, global filter" />
            <column name="category" value="unbilled"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="unbilled_per_billing_account-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="UNBILLED_BA_UUID"></column>
            <column name="sql_query">
                <![CDATA[select ba.code AS "Billing Account code"
                    , ba.description AS "Billing Account description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"  
                from  billing_wallet_operation wo
                    INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
                    INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
                    INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id
                    INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id
                    INNER JOIN crm_customer c  on c.id = ca.customer_id
                    INNER JOIN crm_seller s  on s.id = c.seller_id 
                where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED' 
                    and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )  
                    and(  ba.code ilike '%' || :SEARCH_CRITERION || '%'  or ba.description ilike '%' || :SEARCH_CRITERION || '%'  )  
                group by ba.code, ba.description 
                order by ba.code
                ]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-20"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-21" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="UNBILLED_CA" />
            <column name="description" value="Unbilled per Customer Account, global filter" />
            <column name="category" value="unbilled"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="unbilled_per_customer_account-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="UNBILLED_CA_UUID"></column>
            <column name="sql_query">
                <![CDATA[select ca.code AS "Customer Account code"
					, ca.description AS "Customer Account description"
					, count(DISTINCT wo.id) AS "Transaction count"
					, to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
					, to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"  
				from  billing_wallet_operation wo
					INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
					INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
					INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id
					INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id
					INNER JOIN crm_customer c  on c.id = ca.customer_id
					INNER JOIN crm_seller s  on s.id = c.seller_id 
				where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED' 
					and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )  
				and(  ca.code ilike '%' || :SEARCH_CRITERION || '%'  or ca.description ilike '%' || :SEARCH_CRITERION || '%'  )  
				group by ca.code, ca.description 
				order by ca.code
				]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-21"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-22" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="UNBILLED_C" />
            <column name="description" value="Unbilled per Customer, global filter" />
            <column name="category" value="unbilled"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="unbilled_per_customer-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="UNBILLED_C_UUID"></column>
            <column name="sql_query">
                <![CDATA[select c.code AS "Customer code"
                    , c.description AS "Customer description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"  
                from  billing_wallet_operation wo
                    INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id
                    INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id
                    INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id 
                    INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id 
                    INNER JOIN crm_customer c  on c.id = ca.customer_id 
                    INNER JOIN crm_seller s  on s.id = c.seller_id 
                where  (  wo.STATUS = 'OPEN'  or (   wo.STATUS = 'TREATED'   
                    and EXISTS (   select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN'   )  )  )  
                and(  c.code ilike '%' || :SEARCH_CRITERION || '%'  or c.description ilike '%' || :SEARCH_CRITERION || '%'  )  
                group by c.code, c.description 
                order by c.code
                ]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-22"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-23" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="UNBILLED_S" />
            <column name="description" value="Unbilled per Seller, global filter" />
            <column name="category" value="unbilled"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="unbilled_per_seller-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="UNBILLED_S_UUID"></column>
            <column name="sql_query">
                <![CDATA[select s.code AS "Seller code"
                    , s.description AS "Seller description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"  
                from  billing_wallet_operation wo 
                    INNER JOIN billing_wallet wa  on wa.id = wo.wallet_id 
                    INNER JOIN billing_user_account ua  on ua.id = wa.user_account_id 
                    INNER JOIN billing_billing_account ba  on ba.id = ua.billing_account_id 
                    INNER JOIN ar_customer_account ca  on ca.id = ba.customer_account_id 
                    INNER JOIN crm_customer c  on c.id = ca.customer_id 
                    INNER JOIN crm_seller s  on s.id = c.seller_id 
                where  (  wo.STATUS = 'OPEN'  or (  wo.STATUS = 'TREATED' 
                    and EXISTS (  select 1 from billing_rated_transaction rt where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )  
                and(  s.code ilike '%' || :SEARCH_CRITERION || '%'  or s.description ilike '%' || :SEARCH_CRITERION || '%'  )  
                group by s.code, s.description 
                order by s.code
                ]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-23"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-24" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="UNBILLED_OF" />
            <column name="description" value="Unbilled per Offer, global filter" />
            <column name="category" value="unbilled"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="unbilled_per_offer-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="UNBILLED_OF_UUID"></column>
            <column name="sql_query">
                <![CDATA[select of.code AS "Offer code"
                    , of.description AS "Offer description"
                    , count(DISTINCT wo.id) AS "Transaction count"
                    , to_char(sum(wo.amount_without_tax), '99999999990.00') AS "Amount without tax"
                    , to_char(sum(wo.amount_with_tax), '99999999990.00') AS "Amount with tax"  
                from  cat_offer_template of 
                    INNER JOIN billing_wallet_operation wo  on wo.offer_code = OF.code 
                where  (  wo.STATUS = 'OPEN'  or ( wo.STATUS = 'TREATED' 
                    and EXISTS ( select 1  from billing_rated_transaction rt  where wo.rated_transaction_id = rt.id and rt.STATUS = 'OPEN' )  )  )  
                and(  of.code ilike '%' || :SEARCH_CRITERION || '%'  or OF.description ilike '%' || :SEARCH_CRITERION || '%'  )  
                group by of.code, of.description 
                order by of.code
                ]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-24"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <!-- MISC -->
        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-25" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="INVOICES" />
            <column name="description" value="Invoices per month" />
            <column name="category" value="invoiced"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="invoices-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="INVOICES_UUID"></column>
            <column name="sql_query">
                <![CDATA[select trim(to_char(date_trunc('month', i.invoice_date), 'Month')) || to_char(date_trunc('month', i.invoice_date), ' YYYY') AS "Month"
    , to_char(i.invoice_date, 'YYYY-MM-DD') AS "Invoice date"
    , i.invoice_number AS "Invoice number"
    , to_char(i.amount_without_tax, '9999999990.00') AS "Amount without tax"
    , to_char(i.amount_with_tax, '9999999990.00') AS "Amount with tax"
    , it.code AS "Invoice type code"
    , it.description AS "Invoice type description"
    , s.code AS "Seller code"
    , s.description AS "Seller description"
    , c.code AS "Customer code"
    , c.description AS "Customer description"
    , ca.code AS "Customer Account code"
    , ca.description AS "Customer Account description"
    , ba.code AS "Billing Account code"
    , ba.description AS "Billing Account description"  
from crm_seller s
    INNER JOIN crm_customer c  on c.seller_id = s.id
    INNER JOIN ar_customer_account ca  on ca.customer_id = c.id
    INNER JOIN billing_billing_account ba  on ba.customer_account_id = ca.id
    INNER JOIN billing_invoice i  on i.billing_account_id = ba.id
    INNER JOIN billing_invoice_type it  on it.id = i.invoice_type_id 
where i.invoice_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))  
and(  s.code ilike '%' || :SEARCH_CRITERION || '%'  or s.description ilike '%' || :SEARCH_CRITERION 
    || '%'  or c.code ilike '%' || :SEARCH_CRITERION || '%'  or c.description ilike '%' || :SEARCH_CRITERION 
    || '%'  or ca.code ilike '%' || :SEARCH_CRITERION || '%'  or ca.description ilike '%' || :SEARCH_CRITERION 
    || '%'  or ba.code ilike '%' || :SEARCH_CRITERION || '%'  or ba.description ilike '%' || :SEARCH_CRITERION 
    || '%'  )  
order by date_trunc('month', i.invoice_date) DESC
    , i.invoice_date DESC
    , it.code
    , i.invoice_number]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-25"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-25"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-26" />
            <column name="version" valueNumeric="0" />

            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="EDR" />
            <column name="description" value="EDR by status, global filter" />
            <column name="category" value="edr"></column>
            <column name="script_type" value="SQL"></column>
            <column name="filename_format" value="edr_by_status-[yyyyMMdd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="EDR_UUID"></column>
            <column name="sql_query">
                <![CDATA[SELECT  edr.id AS "Id"
    , edr.STATUS AS "Status"
    , edr.reject_reason AS "Rejection reason"
    , edr.access_code AS "Access code"
    , su.code AS "Subscription code"
    , of.code AS "Offer code"
    , edr.event_date AS "Event date"
    , edr.origin_batch AS "Origin batch"
    , edr.origin_record AS "Origin record"
    , edr.quantity AS "Quantity"
    , edr.parameter_1 AS "Param S1"
    , edr.parameter_2 AS "Param S2"
    , edr.parameter_3 AS "Param S3"
    , edr.parameter_4 AS "Param S4"
    , edr.parameter_5 AS "Param S5"
    , edr.parameter_6 AS "Param S6"
    , edr.parameter_7 AS "Param S7"
    , edr.parameter_8 AS "Param S8"
    , edr.parameter_9 AS "Param S9"
    , edr.date_parameter_1 AS "Param D1"
    , edr.date_parameter_2 AS "Param D2"
    , edr.date_parameter_3 AS "Param D3"
    , edr.date_parameter_4 AS "Param D4"
    , edr.date_parameter_5 AS "Param D5"
    , edr.decimal_parameter_1 AS "Param N1"
    , edr.decimal_parameter_2 AS "Param N2"
    , edr.decimal_parameter_3 AS "Param N3"
    , edr.decimal_parameter_4 AS "Param N4"
    , edr.decimal_parameter_5 AS "Param N5"  
from rating_edr edr
    INNER JOIN billing_subscription su  on su.id = edr.subscription_id
    INNER JOIN cat_offer_template of  on OF.id = su.offer_id where edr.event_date > (date_trunc('month', CURRENT_DATE) - CAST(:MONTH_INTERVAL || ' month' AS INTERVAL))  
and edr.STATUS ilike '%' || :EDR_STATUS || '%'  and(  su.code ilike '%' || :SEARCH_CRITERION || '%'  or OF.code ilike '%' 
    || :SEARCH_CRITERION || '%'  or edr.access_code ilike '%' || :SEARCH_CRITERION || '%'  or edr.reject_reason ilike '%' 
    || :SEARCH_CRITERION || '%'  or edr.origin_batch ilike '%' || :SEARCH_CRITERION || '%'  or edr.origin_record ilike '%' 
    || :SEARCH_CRITERION || '%'  or edr.parameter_1 ilike '%' || :SEARCH_CRITERION || '%'  or edr.parameter_2 ilike '%' 
    || :SEARCH_CRITERION || '%'  or edr.parameter_3 ilike '%' || :SEARCH_CRITERION || '%'  or edr.parameter_4 ilike '%' 
    || :SEARCH_CRITERION || '%'  or edr.parameter_5 ilike '%' || :SEARCH_CRITERION || '%'  or edr.parameter_6 ilike '%' 
    || :SEARCH_CRITERION || '%'  or edr.parameter_7 ilike '%' || :SEARCH_CRITERION || '%'  or edr.parameter_8 ilike '%' 
    || :SEARCH_CRITERION || '%'  or edr.parameter_9 ilike '%' || :SEARCH_CRITERION || '%')  
order by edr.STATUS, edr.id DESC]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-26"></column>
            <column name="params_key" value="SEARCH_CRITERION"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-26"></column>
            <column name="params_key" value="MONTH_INTERVAL"></column>
            <column name="params" value="12"></column>
        </insert>

        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-26"></column>
            <column name="params_key" value="EDR_STATUS"></column>
            <column name="params" value="%"></column>
        </insert>

        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-12"/>
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="org.meveo.service.script.presale.AgedBalanceReporting" />
            <column name="description" value="Aged Balance Reporting Script" />
            <column name="src_type" value="JAVA" />
            <column name="script">
                <![CDATA[package org.meveo.service.script.presale; import java.io.File; import java.math.BigDecimal; import java.math.RoundingMode; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map; import org.apache.commons.lang3.time.DateUtils; import org.meveo.admin.exception.BusinessException; import org.meveo.commons.utils.CsvBuilder; import org.meveo.model.payments.CustomerAccount; import org.meveo.service.payments.impl.CustomerAccountService; import org.meveo.service.script.finance.ReportExtractScript; import org.slf4j.Logger; import org.slf4j.LoggerFactory; /** * @author anasseh * @corrector jpviegas */ public class AgedBalanceReporting extends ReportExtractScript { private static final Logger log = LoggerFactory.getLogger(AgedBalanceReporting.class); private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(CustomerAccountService.class.getSimpleName()); @Override public void execute(Map<String, Object> executeContext) throws BusinessException { try { log.debug("execute executeContext:{}", executeContext); Map<String, Object> params = new HashMap<String, Object>(); params.put("sysdate30", DateUtils.addDays(new Date(), -30)); params.put("sysdate60", DateUtils.addDays(new Date(), -60)); params.put("sysdate90", DateUtils.addDays(new Date(), -90)); String query = "Select ao.customerAccount.id , " + "sum (case when ao.dueDate <= current_date() and ao.dueDate >:sysdate30 then  ao.amount else 0 end ) as sum_0_30, " + "sum (case when ao.dueDate <=:sysdate30 and ao.dueDate >:sysdate60 then  ao.amount else 0 end ) as sum_30_60, " + "sum (case when ao.dueDate <=:sysdate60 and ao.dueDate >:sysdate90 then  ao.amount else 0 end ) as sum_60_90, " + "sum (case when ao.dueDate <=:sysdate90  then  ao.amount else 0 end ) as sum_90_up " + "from AccountOperation ao where ao.transactionCategory = 'DEBIT'  group by ao.customerAccount"; List<Object[]> rows = (List<Object[]>)  customerAccountService.executeSelectQuery(query,params); log.debug("execute rows size:{}", rows == null ? null : rows.size()); String dirOutput = String.valueOf(executeContext.get(ReportExtractScript.DIR)); String filename = String.valueOf(executeContext.get(ReportExtractScript.FILENAME)); CsvBuilder csvBuilder = new CsvBuilder(";", false); String[] header = { "CA_DESC", "C_DESC","DEBT_TIER_0_30_DAYS","DEBT_TIER_30_60_DAYS","DEBT_TIER_60_90_DAYS","DEBT_TIER_90_DAYS" }; csvBuilder.appendValues(header); csvBuilder.startNewLine(); for (Object[] row : rows) { CustomerAccount ca = customerAccountService.findById(((Long)row[0])); csvBuilder.appendValue(ca.getDescription()); csvBuilder.appendValue(ca.getCustomer().getDescription()); csvBuilder.appendValue(round((BigDecimal)row[1])); csvBuilder.appendValue(round((BigDecimal)row[2])); csvBuilder.appendValue(round((BigDecimal)row[3])); csvBuilder.appendValue(round((BigDecimal)row[4])); csvBuilder.startNewLine(); } csvBuilder.toFile(dirOutput + File.separator + filename); log.debug("execute file generated:{}", dirOutput + File.separator + filename); } catch (Exception e) { log.error("Error on AgedBalanceReporting:", e); throw new BusinessException(e.getMessage()); } } private String round(BigDecimal amount) { if(amount == null) { return ""; } if (amount.scale() > 4) { String amountAsString = "" + amount; amount = new BigDecimal(amount.longValue() + "." + amountAsString.substring(amountAsString.indexOf(".") + 1).substring(0, 4)); } amount = amount.setScale(2, RoundingMode.UP); return amount.toPlainString(); } }]]>
            </column>
        </insert>

        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-27" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="AgedBalanceReport" />
            <column name="description" value="Aged Balance Report" />
            <column name="category" value="AgedBalance"></column>
            <column name="script_type" value="JAVA"></column>
            <column name="filename_format" value="AgedBalanceReporting-[yyyy_MM_dd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="AgedBalanceReport_UUID"></column>
            <column name="script_instance_id" value="-12"></column>
        </insert>

        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-13"/>
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="org.meveo.service.script.presale.CustomerRevenuReporting" />
            <column name="description" value="Customer Revenu Reporting Script" />
            <column name="src_type" value="JAVA" />
            <column name="script">
                <![CDATA[package org.meveo.service.script.presale; import java.io.File; import java.math.BigDecimal; import java.math.RoundingMode; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map; import org.meveo.admin.exception.BusinessException; import org.meveo.commons.utils.CsvBuilder; import org.meveo.model.payments.CustomerAccount; import org.meveo.service.payments.impl.AccountOperationService; import org.meveo.service.payments.impl.CustomerAccountService; import org.meveo.service.script.finance.ReportExtractScript; import org.slf4j.Logger; import org.slf4j.LoggerFactory; /** * @author anasseh * */ public class CustomerRevenuReporting extends ReportExtractScript { private static final Logger log = LoggerFactory.getLogger(CustomerRevenuReporting.class); private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(CustomerAccountService.class.getSimpleName()); @Override public void execute(Map<String, Object> executeContext) throws BusinessException { try { log.debug("execute executeContext:{}", executeContext); Date startDate = (Date) executeContext.get(ReportExtractScript.START_DATE); Date endDate = (Date) executeContext.get(ReportExtractScript.END_DATE); Map<String, Object> params = new HashMap<String, Object>(); params.put("startDateIN", startDate); params.put("endDateIN", endDate); String query = "Select ao.customerAccount.id , sum (ao.amount) as sum_amount from AccountOperation ao where ao.transactionCategory = 'DEBIT' and ao.dueDate >=:startDateIN " + "and ao.dueDate <:endDateIN  group by ao.customerAccount order by sum_amount desc"; List<Object[]> aos = (List<Object[]>)  customerAccountService.executeSelectQuery(query,params); log.debug("execute aos size:{}", aos == null ? null : aos.size()); String dirOutput = String.valueOf(executeContext.get(ReportExtractScript.DIR)); String filename = String.valueOf(executeContext.get(CustomerRevenuReporting.FILENAME)); CsvBuilder csvBuilder = new CsvBuilder(";", false); String[] header = { "CA_DESC", "C_DESC","SUM_REVENUE" }; csvBuilder.appendValues(header); csvBuilder.startNewLine(); for (Object[] ao : aos) { CustomerAccount ca = customerAccountService.findById(((Long)ao[0])); csvBuilder.appendValue(ca.getDescription()); csvBuilder.appendValue(ca.getCustomer().getDescription()); csvBuilder.appendValue(round((BigDecimal)ao[1])); csvBuilder.startNewLine(); } csvBuilder.toFile(dirOutput + File.separator + filename); log.debug("execute file generated:{}", dirOutput + File.separator + filename); } catch (Exception e) { log.error("Error on CustomerRevenuReporting:", e); throw new BusinessException(e.getMessage()); } } private String round(BigDecimal amount) { if(amount == null) { return ""; } if (amount.scale() > 4) { String amountAsString = "" + amount; amount = new BigDecimal(amount.longValue() + "." + amountAsString.substring(amountAsString.indexOf(".") + 1).substring(0, 4)); } amount = amount.setScale(2, RoundingMode.UP); return amount.toPlainString(); } }]]>
            </column>
        </insert>
        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-28" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="CustomerRevenuReport" />
            <column name="description" value="Customers revenu Report" />
            <column name="category" value="revenu"></column>
            <column name="script_type" value="JAVA"></column>
            <column name="filename_format" value="CustomerRevenuReporting-[yyyy_MM_dd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="CustomerRevenuReport_UUID"></column>
            <column name="script_instance_id" value="-13"></column>
        </insert>
        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-28"></column>
            <column name="params_key" value="START_DATE"></column>
            <column name="params" value="31/01/2015"></column>
        </insert>
        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-28"></column>
            <column name="params_key" value="END_DATE"></column>
            <column name="params" value="31/01/2019"></column>
        </insert>
        <insert tableName="meveo_script_instance">
            <column name="id" valueNumeric="-15"/>
            <column name="version" valueNumeric="0" />
            <column name="disabled" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="org.meveo.service.script.presale.CustomerPerOfferReporting" />
            <column name="description" value="Customer Per Offer Reporting Script" />
            <column name="src_type" value="JAVA" />
            <column name="script">
                <![CDATA[
                package org.meveo.service.script.presale; import java.io.File; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map; import org.meveo.admin.exception.BusinessException; import org.meveo.commons.utils.CsvBuilder; import org.meveo.commons.utils.StringUtils; import org.meveo.model.billing.UserAccount; import org.meveo.model.catalog.OfferTemplate; import org.meveo.service.billing.impl.SubscriptionService; import org.meveo.service.script.finance.ReportExtractScript; import org.slf4j.Logger; import org.slf4j.LoggerFactory; /** * @author anasseh * */ public class CustomerPerOfferReporting extends ReportExtractScript { private static final Logger log = LoggerFactory.getLogger(CustomerPerOfferReporting.class); private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(SubscriptionService.class.getSimpleName()); @Override public void execute(Map<String, Object> executeContext) throws BusinessException { try { log.debug("execute executeContext:{}", executeContext); Date startDate = (Date) executeContext.get(ReportExtractScript.START_DATE); String offerCode = (String) executeContext.get("OFFER_CODE"); Map<String, Object> params = new HashMap<String, Object>(); params.put("subDateIN", startDate); String query = "Select distinct sub.offer, sub.userAccount from Subscription sub where sub.subscriptionDate >:subDateIN "; if (!StringUtils.isBlank(offerCode)) { query += " and sub.offer.code =:offCodeIN "; params.put("offCodeIN", offerCode); } List<Object[]> rows = (List<Object[]>) subscriptionService.executeSelectQuery(query  + "order by sub.offer.code",params); log.debug("execute rows size:{}", rows == null ? null : rows.size()); String dirOutput = String.valueOf(executeContext.get(ReportExtractScript.DIR)); String filename = String.valueOf(executeContext.get(CustomerPerOfferReporting.FILENAME)); CsvBuilder csvBuilder = new CsvBuilder(";", false); String[] header = { "OFF_CODE", "OFF_DESC", "UA_DESC",  "BA_DESC",  "CA_DESC", "C_DESC" }; csvBuilder.appendValues(header); csvBuilder.startNewLine(); for (Object[] row : rows) { csvBuilder.appendValue(((OfferTemplate)row[0]).getCode()); csvBuilder.appendValue(((OfferTemplate)row[0]).getDescription()); csvBuilder.appendValue(((UserAccount)row[1]).getDescription()); csvBuilder.appendValue(((UserAccount)row[1]).getBillingAccount().getDescription()); csvBuilder.appendValue(((UserAccount)row[1]).getBillingAccount().getCustomerAccount().getDescription()); csvBuilder.appendValue(((UserAccount)row[1]).getBillingAccount().getCustomerAccount().getCustomer().getDescription()); csvBuilder.startNewLine(); } csvBuilder.toFile(dirOutput + File.separator + filename); log.debug("execute file generated:{}", dirOutput + File.separator + filename); } catch (Exception e) { log.error("Error on CustomerPerOfferReporting:", e); throw new BusinessException(e.getMessage()); } } }
                ]]>
            </column>
        </insert>
        <insert tableName="dwh_report_extract">
            <column name="id" valueNumeric="-30" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="code" value="CustomersPerOfferReport" />
            <column name="description" value="List of customer with revenue sorted by decreasing revenue (in a period)" />
            <column name="category" value="accounts"></column>
            <column name="script_type" value="JAVA"></column>
            <column name="filename_format" value="CustomersPerOffer-[yyyy_MM_dd].csv"></column>
            <column name="result_type" value="CSV"></column>
            <column name="uuid" value="CustomersPerOfferReport_UUID"></column>
            <column name="script_instance_id" value="-15"></column>
        </insert>
        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-30"></column>
            <column name="params_key" value="START_DATE"></column>
            <column name="params" value="31/01/2015"></column>
        </insert>
        <insert tableName="dwh_report_extract_params">
            <column name="reportextract_id" value="-30"></column>
            <column name="params_key" value="OFFER_CODE"></column>
            <column name="params" value=""></column>
        </insert>

    </changeSet>

    <changeSet author="AndriusKarpavicius" id="rebuild-data-ddRequest">
        <insert tableName="ar_ddrequest_builder">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2018-08-12 14:04:19.955" />
            <column name="code" value="Sepa_STD" />
            <column name="description" value="Sepa  : urn:iso:std:iso:20022:tech:xsd:pain.008.001.02 and Sepa reject file Pain002" />
            <column name="type" value="NATIF" />
            <column name="implementation_class_name" value="org.meveo.admin.sepa.SepaFile" />
            <column name="nb_ops_file" value="-1" />
            <column name="max_size_file" value="-1" />
            <column name="uuid" value="44bb7507-11cc-4a98-aa50-1777ddae3e6c" />
            <column name="creator" value="opencell.admin" />
            <column name="payment_level" value="AO" />
        </insert>
        <insert tableName="ar_ddrequest_builder">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="2018-08-12 14:05:32.622" />
            <column name="code" value="Sepa_Paynum" />
            <column name="description" value="Sepa Paynum" />
            <column name="type" value="NATIF" />
            <column name="implementation_class_name" value="org.meveo.admin.sepa.PaynumFile" />
            <column name="nb_ops_file" value="-1" />
            <column name="max_size_file" value="-1" />
            <column name="uuid" value="a6873856-1d25-4df8-8801-09314528aa17" />
            <column name="creator" value="opencell.admin" />
            <column name="payment_level" value="AO" />
        </insert>
    </changeSet>

    <changeSet author="AndriusKarpavicius" id="rebuild-data-adm_custom_generic_entity_code">
    	<insert tableName="generic_sequence">
            <column name="id" valueNumeric="-1" />
            <column name="created" valueDate="2018-10-02 12:09:00.913" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="order_quote_sequence" />
            <column name="description" value="Order and Quote" />
            <column name="sequence_type" value="UUID" />
        </insert>
        <insert tableName="generic_sequence">
            <column name="id" valueNumeric="-2" />
            <column name="created" valueDate="2018-10-02 12:09:00.913" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="seller_sequence" />
            <column name="description" value="Seller sequence" />
            <column name="sequence_type" value="SEQUENCE" />
            <column name="sequence_size" valueNumeric="9" />
            <column name="current_number" valueNumeric="0" />
        </insert>
        <insert tableName="generic_sequence">
            <column name="id" valueNumeric="-3" />
            <column name="created" valueDate="2018-10-02 12:09:00.913" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="code" value="customer_sequence" />
            <column name="description" value="Customer sequence" />
            <column name="sequence_type" value="SEQUENCE" />
            <column name="sequence_size" valueNumeric="5" />
            <column name="current_number" valueNumeric="0" />
        </insert>
   
        <insert tableName="adm_custom_generic_entity_code">
            <column name="id" valueNumeric="-1" />
            <column name="created" valueDate="2018-10-02 12:09:00.913" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="entity_class" value="Customer" />
            <column name="sequence_id" valueNumeric="-3" />
        </insert>
        <insert tableName="adm_custom_generic_entity_code">
            <column name="id" valueNumeric="-2" />
            <column name="created" valueDate="2018-10-02 12:12:09.935" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="entity_class" value="Quote" />
            <column name="sequence_id" valueNumeric="-1" />
        </insert>
        <insert tableName="adm_custom_generic_entity_code">
            <column name="id" valueNumeric="-3" />
            <column name="created" valueDate="2018-10-02 12:12:09.936" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="entity_class" value="Order" />
            <column name="sequence_id" valueNumeric="-1" />
        </insert>
        <insert tableName="adm_custom_generic_entity_code">
            <column name="id" valueNumeric="-4" />
            <column name="created" valueDate="2018-10-02 12:12:09.937" />
            <column name="creator" value="OPENCELL.ADMIN" />
            <column name="version" valueNumeric="1" />
            <column name="entity_class" value="Seller" />
            <column name="sequence_id" valueNumeric="-2" />
        </insert>
    </changeSet>
    
    <changeSet id="#5417_20200929 - Error while running CUSTOMERS_PER_SELLER report extracts" author="Mohamed-Ali-HAMMAL"/>
    <changeSet id="#5425_20200930 - Failed to execute some report extract" author="Mohamed-Ali-HAMMAL"/>
    <changeSet id="#12569_20221222" author="HichamELHALOUI"/>
    <changeSet id="#12573_20221223" author="HichamELHALOUI"/>

       <!-- DONT REMOVE THIS CHANGESET - KEEP AT THE BOTTOM OF THE FILE  -->
    <changeSet id="#liquibase_hack_data-reports" author="AbdelmounaimAkadid">
        <sql>update databasechangelog set filename='src/main/db_resources/changelog/current/data.xml' where filename='src/main/db_resources/changelog/rebuild/data-reports.xml'</sql>
    </changeSet>

</databaseChangeLog>
