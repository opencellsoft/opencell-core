<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet id="#5532_20201006 - Dunning workflow" author="NabilOuachi">
        <sql dbms="postgresql"><![CDATA[
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script) VALUES (-25, 0, 0, ${db.current.time}, 'org.meveo.service.script.SimpleDunning', 'Simple Dunning script', 'JAVA', '
        package org.meveo.service.script;

        import org.apache.commons.beanutils.PropertyUtils;
        import org.meveo.model.billing.InvoiceStatusEnum;
        import org.meveo.model.dunning.DunningDocument;
        import org.meveo.model.dunning.DunningDocumentStatus;
        import org.meveo.model.generic.wf.GWFTransition;
        import org.meveo.model.notification.NotificationEventTypeEnum;
        import org.meveo.model.payments.*;
        import org.meveo.service.billing.impl.SubscriptionService;
        import org.meveo.service.notification.DefaultNotificationService;
        import org.meveo.service.notification.GenericNotificationService;
        import org.meveo.service.payments.impl.AccountOperationService;
        import org.meveo.service.payments.impl.CustomerAccountService;
        import org.meveo.service.payments.impl.DunningDocumentService;
        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

        import java.math.BigDecimal;
        import java.math.RoundingMode;
        import java.util.*;

        import static org.meveo.admin.job.GenericWorkflowJob.IWF_ENTITY;
        import static org.meveo.admin.job.GenericWorkflowJob.WF_ACTUAL_TRANSITION;

        public class SimpleDunning extends org.meveo.service.script.Script {

            private static final Logger log = LoggerFactory.getLogger(SimpleDunning.class);

            private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface("CustomerAccountService");
            private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface("AccountOperationService");
            private DefaultNotificationService defaultNotificationService = (DefaultNotificationService) getServiceInterface("DefaultNotificationService");
            private GenericNotificationService genericNotificationService = (GenericNotificationService) getServiceInterface("GenericNotificationService");
            private DunningDocumentService dunningDocumentService = (DunningDocumentService) getServiceInterface("DunningDocumentService");
            private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");

            @Override
            public void execute(Map<String, Object> context) {
                log.info(">>> Method context >>>");
                context.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(entry -> {
                    log.info("{}={}", entry.getKey(), entry.getValue());
                });

                CustomerAccount customerAccount = (CustomerAccount) context.get(IWF_ENTITY);
                GWFTransition gwfTransition = (GWFTransition) context.get(WF_ACTUAL_TRANSITION);

                if ("R0".equals(gwfTransition.getFromStatus()) && "R1".equals(gwfTransition.getToStatus())) {
                    sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R1);
                } else if ("R1".equals(gwfTransition.getFromStatus()) && "R2".equals(gwfTransition.getToStatus())) {
                    sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R2);
                } else if ("R2".equals(gwfTransition.getFromStatus()) && "R3".equals(gwfTransition.getToStatus())) {
                    customerAccount = updateDunningLevel(customerAccount, DunningLevelEnum.R3);
                    suspendSubsciptions(customerAccount);
                    createDunningDocument(customerAccount);
                } else if ("R3".equals(gwfTransition.getFromStatus()) && "R4".equals(gwfTransition.getToStatus())) {
                    customerAccount = updateDunningLevel(customerAccount, DunningLevelEnum.R4);
                    updateAccountOperationsToWritteOff(customerAccount);
                    markInvoicesAsAbandoned(customerAccount.getAccountOperations());
                    customerAccount.setStatus(CustomerAccountStatusEnum.CLOSE);
                    customerAccount.setDateStatus(new Date());
                    customerAccountService.update(customerAccount);
                } else if ("R3".equals(gwfTransition.getFromStatus()) && "R0".equals(gwfTransition.getToStatus())) {
                    customerAccount = sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R0);
                    activateSubscription(customerAccount);
                    closeDunningDocuments(customerAccount);
                } else if ("R0".equals(gwfTransition.getToStatus())) {
                    sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R0);
                }
            }

            private void markInvoicesAsAbandoned(List<AccountOperation> accountOperations) {
                for(AccountOperation accountOperation : accountOperations){
                    if (accountOperation instanceof RecordedInvoice) {
                        ((RecordedInvoice) accountOperation).getInvoice().setStatus(InvoiceStatusEnum.ABANDONED);
                        accountOperationService.update(accountOperation);
                    }
                }
            }

            private void updateAccountOperationsToWritteOff(CustomerAccount customerAccount) {
                List<AccountOperation> writeOffs = new ArrayList<>();
                List<AccountOperation> accountOperations = customerAccount.getAccountOperations();
                for (AccountOperation accountOperation : accountOperations) {
                    WriteOff writeOff = new WriteOff();
                    try {
                        PropertyUtils.copyProperties(writeOff, accountOperation);
                        writeOff.setId(null);
                        writeOff.setAccountingWritings(null);
                        writeOff.setMatchingAmounts(null);
                        writeOff.setPaymentHistories(null);
                        writeOff.setInvoices(null);
                        writeOff.setAuditableFields(null);
                        if (accountOperation.getTransactionCategory() == OperationCategoryEnum.DEBIT)
                            writeOff.setTransactionCategory(OperationCategoryEnum.CREDIT);
                        else
                            writeOff.setTransactionCategory(OperationCategoryEnum.DEBIT);
                        writeOff.setMatchingStatus(MatchingStatusEnum.L);
                        accountOperation.setMatchingStatus(MatchingStatusEnum.L);
                        accountOperationService.create(writeOff);
                        writeOffs.add(writeOff);
                    } catch (Exception e) {
                        log.error("error while copy ao to write off: " + accountOperation);
                    }
                }
                customerAccount.getAccountOperations().addAll(writeOffs);
            }

            private void closeDunningDocuments(CustomerAccount customerAccount) {
                for (AccountOperation accountOperation : customerAccount.getAccountOperations()) {
                    if (accountOperation instanceof RecordedInvoice) {
                        ((RecordedInvoice) accountOperation).setDunningDocument(null);
                        ((RecordedInvoice) accountOperation).getInvoice().setStatus(InvoiceStatusEnum.PAID);
                        accountOperationService.update(accountOperation);
                    }
                }

                for(DunningDocument dd : customerAccount.getDunningDocuments()){
                    dd.setStatus(DunningDocumentStatus.CLOSED);
                    dunningDocumentService.update(dd);
                }
            }

            private void activateSubscription(CustomerAccount customerAccount) {
                subscriptionService.listByCustomer(customerAccount.getCustomer())
                        .forEach(sub -> subscriptionService.subscriptionReactivation(sub, new Date()));
            }

            private void suspendSubsciptions(CustomerAccount customerAccount) {
                subscriptionService.listByCustomer(customerAccount.getCustomer())
                        .forEach(sub -> subscriptionService.subscriptionSuspension(sub, new Date()));
            }

            private CustomerAccount sendEmailAndUpdateDunningLevel(CustomerAccount customerAccount, DunningLevelEnum dunningLevelEnum) {
                customerAccount = updateDunningLevel(customerAccount, dunningLevelEnum);
                if (dunningLevelEnum == DunningLevelEnum.R0) {
                    sendEmail(customerAccount, NotificationEventTypeEnum.TO_R0);
                } else if (dunningLevelEnum == DunningLevelEnum.R1) {
                    computeDueBalanceAndSendEmail(customerAccount, NotificationEventTypeEnum.TO_R1);
                } else if (dunningLevelEnum == DunningLevelEnum.R2) {
                    computeDueBalanceAndSendEmail(customerAccount, NotificationEventTypeEnum.TO_R2);
                }
                return customerAccount;
            }

            private CustomerAccount updateDunningLevel(CustomerAccount customerAccount, DunningLevelEnum dunningLevelEnum) {
                customerAccount = customerAccountService.refreshOrRetrieve(customerAccount);
                customerAccount.setDunningLevel(dunningLevelEnum);
                customerAccount.setPreviousDunningDateLevel(customerAccount.getDateDunningLevel());
                customerAccount.setDateDunningLevel(new Date());
                return customerAccountService.update(customerAccount);
            }

            private void computeDueBalanceAndSendEmail(CustomerAccount customerAccount, NotificationEventTypeEnum notificationEventType) {
                BigDecimal dueBalance = customerAccountService.customerAccountBalanceDue(customerAccount, new Date());
                customerAccount.setDueBalance(String.format("%s %s", dueBalance.setScale(2, RoundingMode.HALF_UP).toString(), customerAccount.getTradingCurrency().getCurrencyCode()));
                sendEmail(customerAccount, notificationEventType);
            }

            private void sendEmail(CustomerAccount customerAccount, NotificationEventTypeEnum notificationEventType) {
                genericNotificationService.getApplicableNotifications(notificationEventType, customerAccount)
                        .forEach(notif -> defaultNotificationService.fireNotification(notif, customerAccount));
            }

            private void createDunningDocument(CustomerAccount customerAccount) {
                List<AccountOperation> accountOperations = customerAccount.getAccountOperations();
                DunningDocument dunningDocument = new DunningDocument();
                dunningDocument.setCustomerAccount(customerAccount);
                dunningDocument.setStatus(DunningDocumentStatus.OPEN);

                if (accountOperations != null) {
                    List<RecordedInvoice> ris = new ArrayList<>();
                    for (AccountOperation accountOperation : accountOperations) {
                        if (accountOperation instanceof RecordedInvoice) {
                            if (accountOperation instanceof RecordedInvoice) {
                                ((RecordedInvoice) accountOperation).setDunningDocument(dunningDocument);
                                ((RecordedInvoice) accountOperation).getInvoice().setStatus(InvoiceStatusEnum.DISPUTED);
                                ris.add((RecordedInvoice) accountOperation);
                            }
                        }
                    }
                    dunningDocument.setDueInvoices(ris);
                }

                dunningDocumentService.create(dunningDocument);
            }
        }
        ');
        ]]></sql>
        <sql dbms="oracle" endDelimiter="/"><![CDATA[
        Declare
            scriptData CLOB;
        Begin
            scriptData := to_clob('package org.meveo.service.script;

        import org.apache.commons.beanutils.PropertyUtils;
        import org.meveo.model.billing.InvoiceStatusEnum;
        import org.meveo.model.dunning.*;
        import org.meveo.model.generic.wf.GWFTransition;
        import org.meveo.model.notification.NotificationEventTypeEnum;
        import org.meveo.model.payments.*;
        import org.meveo.service.billing.impl.SubscriptionService;
        import org.meveo.service.notification.*;
        import org.meveo.service.payments.impl.*;
        import org.slf4j.*;

        import java.math.*;
        import java.util.*;

        import static org.meveo.admin.job.GenericWorkflowJob.IWF_ENTITY;
        import static org.meveo.admin.job.GenericWorkflowJob.WF_ACTUAL_TRANSITION;

        public class SimpleDunning extends org.meveo.service.script.Script {

            private static final Logger log = LoggerFactory.getLogger(SimpleDunning.class);

            private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface("CustomerAccountService");
            private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface("AccountOperationService");
            private DefaultNotificationService defaultNotificationService = (DefaultNotificationService) getServiceInterface("DefaultNotificationService");
            private GenericNotificationService genericNotificationService = (GenericNotificationService) getServiceInterface("GenericNotificationService");
            private DunningDocumentService dunningDocumentService = (DunningDocumentService) getServiceInterface("DunningDocumentService");
            private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");

            @Override
            public void execute(Map<String, Object> context) {
                log.info(">>> Method context >>>");
                context.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(entry -> {
                    log.info("{}={}", entry.getKey(), entry.getValue());
                });

                CustomerAccount customerAccount = (CustomerAccount) context.get(IWF_ENTITY);
                GWFTransition gwfTransition = (GWFTransition) context.get(WF_ACTUAL_TRANSITION);

                if ("R0".equals(gwfTransition.getFromStatus()) && "R1".equals(gwfTransition.getToStatus())) {
                    sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R1);
                } else if ("R1".equals(gwfTransition.getFromStatus()) && "R2".equals(gwfTransition.getToStatus())) {
                    sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R2);
                } else if ("R2".equals(gwfTransition.getFromStatus()) && "R3".equals(gwfTransition.getToStatus())) {
                    customerAccount = updateDunningLevel(customerAccount, DunningLevelEnum.R3);
                    suspendSubsciptions(customerAccount);
                    createDunningDocument(customerAccount);
                } else if ("R3".equals(gwfTransition.getFromStatus()) && "R4".equals(gwfTransition.getToStatus())) {
                    customerAccount = updateDunningLevel(customerAccount, DunningLevelEnum.R4);
                    updateAccountOperationsToWritteOff(customerAccount);
                    markInvoicesAsAbandoned(customerAccount.getAccountOperations());
                    customerAccount.setStatus(CustomerAccountStatusEnum.CLOSE);
                    customerAccount.setDateStatus(new Date());
                    customerAccountService.update(customerAccount);
                } else if ("R3".equals(gwfTransition.getFromStatus()) && "R0".equals(gwfTransition.getToStatus())) {
                    customerAccount = sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R0);
                    activateSubscription(customerAccount);
                    closeDunningDocuments(customerAccount);
                } else if ("R0".equals(gwfTransition.getToStatus())) {
                    sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R0);
                }
            }

            private void markInvoicesAsAbandoned(List<AccountOperation> accountOperations) {
                for(AccountOperation accountOperation : accountOperations){
                    if (accountOperation instanceof RecordedInvoice) {
                        ((RecordedInvoice) accountOperation).getInvoice().setStatus(InvoiceStatusEnum.ABANDONED);
                        accountOperationService.update(accountOperation);
                    }
                }
            }

            private void updateAccountOperationsToWritteOff(CustomerAccount customerAccount) {
                List<AccountOperation> writeOffs = new ArrayList<>();
                List<AccountOperation> accountOperations = customerAccount.getAccountOperations();
                for (AccountOperation accountOperation : accountOperations) {
                    WriteOff writeOff = new WriteOff();
                    try {
                        PropertyUtils.copyProperties(writeOff, accountOperation);
                        writeOff.setId(null);
                        writeOff.setAccountingWritings(null);
                        writeOff.setMatchingAmounts(null);
                        writeOff.setPaymentHistories(null);
                        writeOff.setInvoices(null);
                        writeOff.setAuditableFields(null);
                        if (accountOperation.getTransactionCategory() == OperationCategoryEnum.DEBIT)
                            writeOff.setTransactionCategory(OperationCategoryEnum.CREDIT);
                        else
                            writeOff.setTransactionCategory(OperationCategoryEnum.DEBIT);
                        writeOff.setMatchingStatus(MatchingStatusEnum.L);
                        accountOperation.setMatchingStatus(MatchingStatusEnum.L);
                        accountOperationService.create(writeOff);
                        writeOffs.add(writeOff);
                    } catch (Exception e) {
                        log.error("error while copy ao to write off: " + accountOperation);
                    }
                }
                customerAccount.getAccountOperations().addAll(writeOffs);
            }

            private void closeDunningDocuments(CustomerAccount customerAccount) {
                for (AccountOperation accountOperation : customerAccount.getAccountOperations()) {
                    if (accountOperation instanceof RecordedInvoice) {
                        ((RecordedInvoice) accountOperation).setDunningDocument(null);
                        ((RecordedInvoice) accountOperation).getInvoice().setStatus(InvoiceStatusEnum.PAID);
                        accountOperationService.update(accountOperation);
                    }
                }

                for(DunningDocument dd : customerAccount.getDunningDocuments()){
                    dd.setStatus(DunningDocumentStatus.CLOSED);
                    dunningDocumentService.update(dd);
                }
            }

            private void activateSubscription(CustomerAccount customerAccount) {
                subscriptionService.listByCustomer(customerAccount.getCustomer())
                        .forEach(sub -> subscriptionService.subscriptionReactivation(sub, new Date()));
            }

            private void suspendSubsciptions(CustomerAccount customerAccount) {
                subscriptionService.listByCustomer(customerAccount.getCustomer())
                        .forEach(sub -> subscriptionService.subscriptionSuspension(sub, new Date()));
            }

            private CustomerAccount sendEmailAndUpdateDunningLevel(CustomerAccount customerAccount, DunningLevelEnum dunningLevelEnum) {
                customerAccount = updateDunningLevel(customerAccount, dunningLevelEnum);
                if (dunningLevelEnum == DunningLevelEnum.R0) {
                    sendEmail(customerAccount, NotificationEventTypeEnum.TO_R0);
                } else if (dunningLevelEnum == DunningLevelEnum.R1) {
                    computeDueBalanceAndSendEmail(customerAccount, NotificationEventTypeEnum.TO_R1);
                } else if (dunningLevelEnum == DunningLevelEnum.R2) {
                    computeDueBalanceAndSendEmail(customerAccount, NotificationEventTypeEnum.TO_R2);
                }
                return customerAccount;
            }

            private CustomerAccount updateDunningLevel(CustomerAccount customerAccount, DunningLevelEnum dunningLevelEnum) {
                customerAccount = customerAccountService.refreshOrRetrieve(customerAccount);
                customerAccount.setDunningLevel(dunningLevelEnum);
                customerAccount.setPreviousDunningDateLevel(customerAccount.getDateDunningLevel());
                customerAccount.setDateDunningLevel(new Date());
                return customerAccountService.update(customerAccount);
            }

            private void computeDueBalanceAndSendEmail(CustomerAccount customerAccount, NotificationEventTypeEnum notificationEventType) {
                BigDecimal dueBalance = customerAccountService.customerAccountBalanceDue(customerAccount, new Date());
                customerAccount.setDueBalance(String.format("%s %s", dueBalance.setScale(2, RoundingMode.HALF_UP).toString(), customerAccount.getTradingCurrency().getCurrencyCode()));
                sendEmail(customerAccount, notificationEventType);
            }

            private void sendEmail(CustomerAccount customerAccount, NotificationEventTypeEnum notificationEventType) {
                genericNotificationService.getApplicableNotifications(notificationEventType, customerAccount)
                        .forEach(notif -> defaultNotificationService.fireNotification(notif, customerAccount));
            }

            private void createDunningDocument(CustomerAccount customerAccount) {
                List<AccountOperation> accountOperations = customerAccount.getAccountOperations();
                DunningDocument dunningDocument = new DunningDocument();
                dunningDocument.setCustomerAccount(customerAccount);
                dunningDocument.setStatus(DunningDocumentStatus.OPEN);

                if (accountOperations != null) {
                    List<RecordedInvoice> ris = new ArrayList<>();
                    for (AccountOperation accountOperation : accountOperations) {
                        if (accountOperation instanceof RecordedInvoice) {
                            if (accountOperation instanceof RecordedInvoice) {
                                ((RecordedInvoice) accountOperation).setDunningDocument(dunningDocument);
                                ((RecordedInvoice) accountOperation).getInvoice().setStatus(InvoiceStatusEnum.DISPUTED);
                                ris.add((RecordedInvoice) accountOperation);
                            }
                        }
                    }
                    dunningDocument.setDueInvoices(ris);
                }

                dunningDocumentService.create(dunningDocument);
            }
        }');
        INSERT INTO ${db.schema.adapted}meveo_script_instance (id, version, disabled, created, code, description, src_type, script)
        VALUES (-25, 0, 0, ${db.current.time}, 'org.meveo.service.script.SimpleDunning', 'Simple Dunning script', 'JAVA', scriptData);
        End;
        /

        ]]></sql>
        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-10"></column>
            <column name="version" value="0"></column>
            <column name="disabled" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="dunningJob_R1TimesUp"></column>
            <column name="description" value="Days to wait before dunning transition R1 - R2 fires up"></column>
            <column name="applicable_on_el" value='#{entity.code.equals("WF_Dunning")}'></column>
            <column name="description_i18n" value='{"FRA":"Nombre de jours à attendre avant le déclenchement de la transition R1 - R2","ENG":"Days to wait before dunning transition R1 - R2 fires up"}'></column>
            <column name="field_type" value="LONG"></column>
            <column name="value_required" value="1"></column>
            <column name="default_value" value="30"></column>
            <column name="storage_type" value="SINGLE"></column>
            <column name="applies_to" value="GenericWorkflow"></column>
            <column name="gui_position" value="tab:Parameters|FRA=Paramètres|ENG=Parameters:1;fieldGroup:Group|FRA=Groupe|ENG=Group:0;field:0"></column>
            <column name="allow_edit" value="1"></column>
            <column name="hide_on_new" value="0"></column>
            <column name="display_format" value="30"></column>
            <column name="unique_constraint" value="0"></column>
            <column name="anonymize_gdpr" value="0"></column>
        </insert>

        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-11"></column>
            <column name="version" value="0"></column>
            <column name="disabled" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="dunningJob_R2TimesUp"></column>
            <column name="description" value="Days to wait before dunning transition R2 - R3 fires up"></column>
            <column name="applicable_on_el" value='#{entity.code.equals("WF_Dunning")}'></column>
            <column name="description_i18n" value='{"FRA":"Nombre de jours à attendre avant le déclenchement de la transition R2 - R3","ENG":"Days to wait before dunning transition R2 - R3 fires up"}'></column>
            <column name="field_type" value="LONG"></column>
            <column name="value_required" value="1"></column>
            <column name="default_value" value="30"></column>
            <column name="storage_type" value="SINGLE"></column>
            <column name="applies_to" value="GenericWorkflow"></column>
            <column name="gui_position" value="tab:Parameters|FRA=Paramètres|ENG=Parameters:2;fieldGroup:Group|FRA=Groupe|ENG=Group:1;field:1"></column>
            <column name="allow_edit" value="1"></column>
            <column name="hide_on_new" value="0"></column>
            <column name="display_format" value="30"></column>
            <column name="unique_constraint" value="0"></column>
            <column name="anonymize_gdpr" value="0"></column>
        </insert>

        <insert tableName="crm_custom_field_tmpl">
            <column name="id" valueNumeric="-12"></column>
            <column name="version" value="0"></column>
            <column name="disabled" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="dunningJob_R3TimesUp"></column>
            <column name="description" value="Days to wait before dunning transition R3 - R4 fires up"></column>
            <column name="applicable_on_el" value='#{entity.code.equals("WF_Dunning")}'></column>
            <column name="description_i18n" value='{"FRA":"Nombre de jours à attendre avant le déclenchement de la transition R3 - R4","ENG":"Days to wait before dunning transition R2 - R3 fires up"}'></column>
            <column name="field_type" value="LONG"></column>
            <column name="value_required" value="1"></column>
            <column name="default_value" value="30"></column>
            <column name="storage_type" value="SINGLE"></column>
            <column name="applies_to" value="GenericWorkflow"></column>
            <column name="gui_position" value="tab:Parameters|FRA=Paramètres|ENG=Parameters:3;fieldGroup:Group|FRA=Groupe|ENG=Group:2;field:2"></column>
            <column name="allow_edit" value="1"></column>
            <column name="hide_on_new" value="0"></column>
            <column name="display_format" value="30"></column>
            <column name="unique_constraint" value="0"></column>
            <column name="anonymize_gdpr" value="0"></column>
        </insert>

        <insert tableName="wf_generic_workflow">
            <column name="id" valueNumeric="-1"></column>
            <column name="version" value="0"></column>
            <column name="disabled" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="WF_Dunning"></column>
            <column name="description" value="dunning workflow"></column>
            <column name="target_entity_class" value="org.meveo.model.payments.CustomerAccount"></column>
            <column name="enable_history" value="1"></column>
            <column name="init_status" value="R0"></column>
            <column name="cf_values" value='{"dunningJob_R1TimesUp":[{"long":30}],"dunningJob_R2TimesUp":[{"long":30}],"dunningJob_R3TimesUp":[{"long":30}]}'></column>
            <column name="uuid" value="934c4821-e56e-44d2-b4a1-4be86f922263"></column>
        </insert>

        <insert tableName="wf_status">
            <column name="id" valueNumeric="-1"></column>
            <column name="version" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="R0"></column>
            <column name="description" value="No dunning"></column>
            <column name="uuid" value="7cc6eaf5-8f45-4381-94f5-4c5243a3013d"></column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_status">
            <column name="id" valueNumeric="-2"></column>
            <column name="version" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="R1"></column>
            <column name="description" value="Reminder email sent"></column>
            <column name="uuid" value="3e82a3d5-a98e-4fb1-a232-68559d118e35"></column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_status">
            <column name="id" valueNumeric="-3"></column>
            <column name="version" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="R2"></column>
            <column name="description" value="Account suspended"></column>
            <column name="uuid" value="f79944eb-d08d-4520-8ca6-8d11ff256984"></column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_status">
            <column name="id" valueNumeric="-4"></column>
            <column name="version" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="R3"></column>
            <column name="description" value="Dunning file sent to external company"></column>
            <column name="uuid" value="29303780-37f8-4c94-bd40-979f8f89b41c"></column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_status">
            <column name="id" valueNumeric="-5"></column>
            <column name="version" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="R4"></column>
            <column name="description" value="Dunning file sent to external company"></column>
            <column name="uuid" value="34b3d2be-1525-11eb-adc1-0242ac120002"></column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>

        <insert tableName="wf_generic_transition">
            <column name="id" valueNumeric="-1"></column>
            <column name="uuid" value="f8ac0942-686b-45d7-9707-1f6cad4f2443"></column>
            <column name="version" value="0"></column>
            <column name="from_status" value="R0"></column>
            <column name="to_status" value="R1"></column>
            <column name="priority" value="1"></column>
            <column name="description" value="Some amount is due"></column>
            <column name="action_script_id" value="-25"></column>
            <column name="condition_el">
                <![CDATA[#{entity.dunningLevel == 'R0' && mv:getBean('CustomerAccountService').customerAccountBalanceDue(entity, mv:now())  > 0}]]>
            </column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_generic_transition">
            <column name="id" valueNumeric="-2"></column>
            <column name="uuid" value="79a9cdac-0dc6-4a96-b402-da4e7310cf69"></column>
            <column name="version" value="0"></column>
            <column name="from_status" value="R1"></column>
            <column name="to_status" value="R0"></column>
            <column name="priority" value="2"></column>
            <column name="description" value="All is fine again"></column>
            <column name="action_script_id" value="-25"></column>
            <column name="condition_el">
                <![CDATA[#{entity.dunningLevel == 'R1' && mv:getBean('CustomerAccountService').customerAccountBalanceDue(entity, mv:now()) <= 0}]]>
            </column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_generic_transition">
            <column name="id" valueNumeric="-3"></column>
            <column name="uuid" value="bbad0d8c-b598-4b64-a36b-072a90802d13"></column>
            <column name="version" value="0"></column>
            <column name="from_status" value="R1"></column>
            <column name="to_status" value="R2"></column>
            <column name="priority" value="3"></column>
            <column name="description" value="Time is up"></column>
            <column name="action_script_id" value="-25"></column>
            <column name="condition_el">
                <![CDATA[#{entity.dunningLevel == 'R1' && mv:now().after(mv:addToDate(entity.dateDunningLevel, 5, mv:getCFValue(mv:getBean('GenericWorkflowService').findByCode('WF_Dunning'), 'dunningJob_R1TimesUp')))}]]>
            </column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_generic_transition">
            <column name="id" valueNumeric="-4"></column>
            <column name="uuid" value="7d2ef938-e4bc-415c-aa2d-4f27ad9cfe82"></column>
            <column name="version" value="0"></column>
            <column name="from_status" value="R2"></column>
            <column name="to_status" value="RO"></column>
            <column name="priority" value="4"></column>
            <column name="description" value="All is fine again"></column>
            <column name="action_script_id" value="-25"></column>
            <column name="condition_el">
                <![CDATA[#{entity.dunningLevel == 'R2' && mv:getBean('CustomerAccountService').customerAccountBalanceDue(entity, mv:now()) <= 0}]]>
            </column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_generic_transition">
            <column name="id" valueNumeric="-5"></column>
            <column name="uuid" value="bbae5117c-7947-4738-aab0-b0a6e188a195"></column>
            <column name="version" value="0"></column>
            <column name="from_status" value="R2"></column>
            <column name="to_status" value="R3"></column>
            <column name="priority" value="5"></column>
            <column name="description" value="Debt collector is in"></column>
            <column name="action_script_id" value="-25"></column>
            <column name="condition_el">
                <![CDATA[#{entity.dunningLevel == 'R2' && mv:now().after(mv:addToDate(entity.dateDunningLevel, 5, mv:getCFValue(mv:getBean('GenericWorkflowService').findByCode('WF_Dunning'), 'dunningJob_R2TimesUp')))}]]>
            </column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_generic_transition">
            <column name="id" valueNumeric="-6"></column>
            <column name="uuid" value="9a93fb94-1521-11eb-adc1-0242ac120002"></column>
            <column name="version" value="0"></column>
            <column name="from_status" value="R3"></column>
            <column name="to_status" value="R0"></column>
            <column name="priority" value="6"></column>
            <column name="description" value="All is fine again"></column>
            <column name="action_script_id" value="-25"></column>
            <column name="condition_el">
                <![CDATA[#{entity.dunningLevel == 'R3' && mv:getBean('CustomerAccountService').customerAccountBalanceDue(entity, mv:now()) <= 0}]]>
            </column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>
        <insert tableName="wf_generic_transition">
            <column name="id" valueNumeric="-7"></column>
            <column name="uuid" value="bd912e9c-175f-11eb-adc1-0242ac120002"></column>
            <column name="version" value="0"></column>
            <column name="from_status" value="R3"></column>
            <column name="to_status" value="R4"></column>
            <column name="priority" value="7"></column>
            <column name="description" value="Account wil be closed"></column>
            <column name="action_script_id" value="-25"></column>
            <column name="condition_el">
                <![CDATA[#{entity.dunningLevel == 'R3' && mv:now().after(mv:addToDate(entity.dateDunningLevel, 5, mv:getCFValue(mv:getBean('GenericWorkflowService').findByCode('WF_Dunning'), 'dunningJob_R3TimesUp')))}]]>
            </column>
            <column name="generic_wf_id" valueNumeric="-1"></column>
        </insert>

        <insert tableName="meveo_job_instance">
            <column name="id" valueNumeric="-29"></column>
            <column name="version" value="0"></column>
            <column name="disabled" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="WF_Dunning_JOB"></column>
            <column name="job_category" value="UTILS"></column>
            <column name="job_template" value="GenericWorkflowJob"></column>
            <column name="single_node" value="1"></column>
            <column name="exclude_inv_without_amount" value="0"></column>
            <column name="exclude_inv_without_amount" value="1"></column>
            <column name="cf_values" value='{"gwfJob_nbRuns":[{"long":1}], "gwfJob_waitingMillis":[{"long":0}],"gwfJob_generic_wf":[{"entity":{"classname":"org.meveo.model.generic.wf.GenericWorkflow","code":"WF_Dunning"}}]}'></column>
            <column name="uuid" value="18636982-e611-4b29-b0d2-4314464c94b2"></column>
        </insert>


        <insert tableName="com_message_template">
            <column name="media" value="EMAIL"></column>
            <column name="id" valueNumeric="-1"></column>
            <column name="version" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="code" value="TO_R1_MAIL_TEMPLATE"></column>
            <column name="type" value="DUNNING"></column>
            <column name="tag_start" value="#{"></column>
            <column name="tag_end" value="}"></column>
            <column name="description" value="to R1 status email template"></column>
            <column name="subject" value="You have unpaid invoices"></column>
            <column name="textcontent">
                <![CDATA[Hi #{event.name.title.description} #{event.name.lastName},

Your account #{event.code} has unpaid invoices for a total of #{event.dueBalance}.

Regards,

Accounting Team
                ]]>
            </column>
        </insert>

        <insert tableName="com_message_template">
            <column name="media" value="EMAIL"></column>
            <column name="id" valueNumeric="-2"></column>
            <column name="version" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="code" value="TO_RO_MAIL_TEMPLATE"></column>
            <column name="type" value="DUNNING"></column>
            <column name="tag_start" value="#{"></column>
            <column name="tag_end" value="}"></column>
            <column name="description" value="to R0 status email template"></column>
            <column name="subject" value="All invoices have been paid"></column>
            <column name="textcontent">
                <![CDATA[Hi #{event.name.title.description} #{event.name.lastName},

All unpaid invoices for your account #{event.code} have been paid.
Your dunning status has been reset to normal.

Best regards,

Accounting Team
                ]]>
            </column>
        </insert>

        <insert tableName="com_message_template">
            <column name="media" value="EMAIL"></column>
            <column name="id" valueNumeric="-3"></column>
            <column name="version" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="code" value="TO_R2_MAIL_TEMPLATE"></column>
            <column name="type" value="DUNNING"></column>
            <column name="tag_start" value="#{"></column>
            <column name="tag_end" value="}"></column>
            <column name="description" value="to R2 status email template"></column>
            <column name="subject" value="You still have unpaid invoices"></column>
            <column name="textcontent">
                <![CDATA[Hi #{event.name.title.description} #{event.name.lastName},

Your account #{event.code} has unpaid invoices for a total of #{event.dueBalance}, since #{event.previousDunningDateLevel}.

A registered letter with acknowledgement of receipt has been sent to your address:
#{ event.address.address1 }
#{ event.address.zipCode } #{ event.address.city }

Regards,

Accounting Team
                ]]>
            </column>
        </insert>

        <insert tableName="adm_notification">
            <column name="id" valueNumeric="-11"></column>
            <column name="uuid" valueNumeric="-11"></column>
            <column name="version" value="0"></column>
            <column name="disabled" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="TO_R1_NOTIFICATION"></column>

            <column name="class_name_filter" value="org.meveo.model.payments.CustomerAccount"></column>
            <column name="event_type_filter" value="TO_R1"></column>

        </insert>

        <insert tableName="adm_notif_email">
            <column name="id" valueNumeric="-11"></column>
            <column name="email_from" value="no-reply@opencellsoft.com"></column>
            <column name="email_to_el" value="#{event.contactInformation.email}"></column>
            <column name="email_template_id" value="-1"></column>
        </insert>

        <insert tableName="adm_notification">
            <column name="id" valueNumeric="-12"></column>
            <column name="uuid" valueNumeric="-12"></column>
            <column name="version" value="0"></column>
            <column name="disabled" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="TO_R0_NOTIFICATION"></column>

            <column name="class_name_filter" value="org.meveo.model.payments.CustomerAccount"></column>
            <column name="event_type_filter" value="TO_R0"></column>

        </insert>

        <insert tableName="adm_notif_email">
            <column name="id" valueNumeric="-12"></column>
            <column name="email_from" value="no-reply@opencellsoft.com"></column>
            <column name="email_to_el" value="#{event.contactInformation.email}"></column>
            <column name="email_template_id" value="-2"></column>
        </insert>

        <insert tableName="adm_notification">
            <column name="id" valueNumeric="-13"></column>
            <column name="uuid" valueNumeric="-13"></column>
            <column name="version" value="0"></column>
            <column name="disabled" value="0"></column>
            <column name="created" valueDate="${db.current.time}"></column>
            <column name="creator" value="applicationInitializer"></column>
            <column name="code" value="TO_R2_NOTIFICATION"></column>

            <column name="class_name_filter" value="org.meveo.model.payments.CustomerAccount"></column>
            <column name="event_type_filter" value="TO_R2"></column>

        </insert>

        <insert tableName="adm_notif_email">
            <column name="id" valueNumeric="-13"></column>
            <column name="email_from" value="no-reply@opencellsoft.com"></column>
            <column name="email_to_el" value="#{event.contactInformation.email}"></column>
            <column name="email_template_id" value="-3"></column>
        </insert>

    </changeSet>

    <changeSet author="ZBARIKI" id="#6048_20210326_2">
        <sql dbms="postgresql"><![CDATA[UPDATE ${db.schema.adapted}meveo_script_instance SET

            script = 'package org.meveo.service.script;
import static org.meveo.admin.job.GenericWorkflowJob.IWF_ENTITY;
import static org.meveo.admin.job.GenericWorkflowJob.WF_ACTUAL_TRANSITION;
import static org.meveo.model.billing.InvoicePaymentStatusEnum.ABANDONED;
import static org.meveo.model.billing.InvoicePaymentStatusEnum.DISPUTED;
import static org.meveo.model.billing.InvoicePaymentStatusEnum.PAID;

import org.meveo.model.billing.InvoicePaymentStatusEnum;
import org.meveo.model.dunning.DunningDocument;
import org.meveo.model.dunning.DunningDocumentStatus;
import org.meveo.model.generic.wf.GWFTransition;
import org.meveo.model.notification.NotificationEventTypeEnum;
import org.meveo.model.payments.*;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.notification.DefaultNotificationService;
import org.meveo.service.notification.GenericNotificationService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.CustomerAccountService;
import org.meveo.service.payments.impl.DunningDocumentService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.*;

public class SimpleDunning extends org.meveo.service.script.Script {

    private static final Logger log = LoggerFactory.getLogger(SimpleDunning.class);

    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface("CustomerAccountService");
    private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface("AccountOperationService");
    private DefaultNotificationService defaultNotificationService = (DefaultNotificationService) getServiceInterface("DefaultNotificationService");
    private GenericNotificationService genericNotificationService = (GenericNotificationService) getServiceInterface("GenericNotificationService");
    private DunningDocumentService dunningDocumentService = (DunningDocumentService) getServiceInterface("DunningDocumentService");
    private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");

    @Override
    public void execute(Map<String, Object> context) {
        log.info(">>> Method context >>>");
        context.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(entry -> {
            log.info("{}={}", entry.getKey(), entry.getValue());
        });

        CustomerAccount customerAccount = (CustomerAccount) context.get(IWF_ENTITY);
        GWFTransition gwfTransition = (GWFTransition) context.get(WF_ACTUAL_TRANSITION);

        if ("R0".equals(gwfTransition.getFromStatus()) && "R1".equals(gwfTransition.getToStatus())) {
            sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R1);
        } else if ("R1".equals(gwfTransition.getFromStatus()) && "R2".equals(gwfTransition.getToStatus())) {
            sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R2);
        } else if ("R2".equals(gwfTransition.getFromStatus()) && "R3".equals(gwfTransition.getToStatus())) {
            customerAccount = updateDunningLevel(customerAccount, DunningLevelEnum.R3);
            suspendSubsciptions(customerAccount);
            createDunningDocument(customerAccount);
        } else if ("R3".equals(gwfTransition.getFromStatus()) && "R4".equals(gwfTransition.getToStatus())) {
            customerAccount = updateDunningLevel(customerAccount, DunningLevelEnum.R4);
            updateAccountOperationsToWritteOff(customerAccount);
            markInvoicesAsAbandoned(customerAccount.getAccountOperations());
            customerAccount.setStatus(CustomerAccountStatusEnum.CLOSE);
            customerAccount.setDateStatus(new Date());
            customerAccountService.update(customerAccount);
        } else if ("R3".equals(gwfTransition.getFromStatus()) && "R0".equals(gwfTransition.getToStatus())) {
            customerAccount = sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R0);
            activateSubscription(customerAccount);
            closeDunningDocuments(customerAccount);
        } else if ("R0".equals(gwfTransition.getToStatus())) {
            sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R0);
        }
    }

    private void markInvoicesAsAbandoned(List<AccountOperation> accountOperations) {
        for (AccountOperation accountOperation : accountOperations) {
            if (accountOperation instanceof RecordedInvoice) {
                ((RecordedInvoice) accountOperation).getInvoice().setPaymentStatus(ABANDONED);
                accountOperationService.update(accountOperation);
            }
        }
    }

    private void updateAccountOperationsToWritteOff(CustomerAccount customerAccount) {
        List<AccountOperation> writeOffs = new ArrayList<>();
        List<AccountOperation> accountOperations = customerAccount.getAccountOperations();
        for (AccountOperation accountOperation : accountOperations) {
            AccountOperation writeOff = new WriteOff();
            try {
                writeOff = (WriteOff)copy(accountOperation);
                writeOff.setId(null);
                writeOff.setMatchingAmounts(null);
                writeOff.setPaymentHistories(null);
                writeOff.setInvoices(null);
                writeOff.setAuditableFields(null);
                if (accountOperation.getTransactionCategory() == OperationCategoryEnum.DEBIT)
                    writeOff.setTransactionCategory(OperationCategoryEnum.CREDIT);
                else
                    writeOff.setTransactionCategory(OperationCategoryEnum.DEBIT);
                writeOff.setMatchingStatus(MatchingStatusEnum.L);
                accountOperation.setMatchingStatus(MatchingStatusEnum.L);
                accountOperationService.create(writeOff);
                writeOffs.add(writeOff);
            } catch (Exception e) {
                log.error("error while copy ao to write off: " + accountOperation);
            }
        }
        customerAccount.getAccountOperations().addAll(writeOffs);
    }

    private void closeDunningDocuments(CustomerAccount customerAccount) {
        for (AccountOperation accountOperation : customerAccount.getAccountOperations()) {
            if (accountOperation instanceof RecordedInvoice) {
                ((RecordedInvoice) accountOperation).setDunningDocument(null);
                ((RecordedInvoice) accountOperation).getInvoice().setPaymentStatus(PAID);
                accountOperationService.update(accountOperation);
            }
        }

        for (DunningDocument dd : customerAccount.getDunningDocuments()) {
            dd.setStatus(DunningDocumentStatus.CLOSED);
            dunningDocumentService.update(dd);
        }
    }

    private void activateSubscription(CustomerAccount customerAccount) {
        subscriptionService.listByCustomer(customerAccount.getCustomer())
                .forEach(sub -> subscriptionService.subscriptionReactivation(sub, new Date()));
    }

    private void suspendSubsciptions(CustomerAccount customerAccount) {
        subscriptionService.listByCustomer(customerAccount.getCustomer())
                .forEach(sub -> subscriptionService.subscriptionSuspension(sub, new Date()));
    }

    private CustomerAccount sendEmailAndUpdateDunningLevel(CustomerAccount customerAccount, DunningLevelEnum dunningLevelEnum) {
        customerAccount = updateDunningLevel(customerAccount, dunningLevelEnum);
        if (dunningLevelEnum == DunningLevelEnum.R0) {
            sendEmail(customerAccount, NotificationEventTypeEnum.TO_R0);
        } else if (dunningLevelEnum == DunningLevelEnum.R1) {
            computeDueBalanceAndSendEmail(customerAccount, NotificationEventTypeEnum.TO_R1);
        } else if (dunningLevelEnum == DunningLevelEnum.R2) {
            computeDueBalanceAndSendEmail(customerAccount, NotificationEventTypeEnum.TO_R2);
        }
        return customerAccount;
    }

    private CustomerAccount updateDunningLevel(CustomerAccount customerAccount, DunningLevelEnum dunningLevelEnum) {
        customerAccount = customerAccountService.refreshOrRetrieve(customerAccount);
        customerAccount.setDunningLevel(dunningLevelEnum);
        customerAccount.setDateDunningLevel(new Date());
        return customerAccountService.update(customerAccount);
    }

    private void computeDueBalanceAndSendEmail(CustomerAccount customerAccount, NotificationEventTypeEnum notificationEventType) {
        BigDecimal dueBalance = customerAccountService.customerAccountBalanceDue(customerAccount, new Date());
        customerAccount.setDueBalance(String.format("%s %s", dueBalance.setScale(2, RoundingMode.HALF_UP).toString(), customerAccount.getTradingCurrency().getCurrencyCode()));
        sendEmail(customerAccount, notificationEventType);
    }

    private void sendEmail(CustomerAccount customerAccount, NotificationEventTypeEnum notificationEventType) {
        genericNotificationService.getApplicableNotifications(notificationEventType, customerAccount)
                .forEach(notif -> defaultNotificationService.fireNotification(notif, customerAccount));
    }

    private void createDunningDocument(CustomerAccount customerAccount) {
        List<AccountOperation> accountOperations = customerAccount.getAccountOperations();
        DunningDocument dunningDocument = new DunningDocument();
        dunningDocument.setCustomerAccount(customerAccount);
        dunningDocument.setStatus(DunningDocumentStatus.OPEN);

        if (accountOperations != null) {
            List<RecordedInvoice> ris = new ArrayList<>();
            for (AccountOperation accountOperation : accountOperations) {
                if (accountOperation instanceof RecordedInvoice) {
                    if (accountOperation instanceof RecordedInvoice) {
                        ((RecordedInvoice) accountOperation).setDunningDocument(dunningDocument);
                        ((RecordedInvoice) accountOperation).getInvoice().setPaymentStatus(DISPUTED);
                        ris.add((RecordedInvoice) accountOperation);
                    }
                }
            }
            dunningDocument.setDueInvoices(ris);
        }

        dunningDocumentService.create(dunningDocument);
    }

    private <T> T copy(T entity) throws IllegalAccessException, InstantiationException {
        Class<?> clazz = entity.getClass();
        T newEntity = (T) entity.getClass().newInstance();
        while (clazz != null) {
            copyFields(entity, newEntity, clazz);
            clazz = clazz.getSuperclass();
        }
        return newEntity;
    }

    private <T> T copyFields(T entity, T newEntity, Class<?> clazz) throws IllegalAccessException {
        List<Field> fields = new ArrayList<>();
        for (Field field : clazz.getDeclaredFields()) {
            fields.add(field);
        }
        for (Field field : fields) {
            if (!java.lang.reflect.Modifier.isStatic(field.getModifiers())) {
                field.setAccessible(true);
                field.set(newEntity, field.get(entity));
            }
        }
        return newEntity;
    }
}'
            WHERE code = 'org.meveo.service.script.SimpleDunning';
           ]]>
        </sql>
        <sql dbms="oracle" endDelimiter="/">
            <![CDATA[
            Declare
                scriptData CLOB;
            Begin
                scriptData  := to_clob('package org.meveo.service.script;
import static org.meveo.admin.job.GenericWorkflowJob.IWF_ENTITY;
import static org.meveo.admin.job.GenericWorkflowJob.WF_ACTUAL_TRANSITION;
import static org.meveo.model.billing.InvoicePaymentStatusEnum.ABANDONED;
import static org.meveo.model.billing.InvoicePaymentStatusEnum.DISPUTED;
import static org.meveo.model.billing.InvoicePaymentStatusEnum.PAID;

import org.meveo.model.billing.InvoicePaymentStatusEnum;
import org.meveo.model.dunning.DunningDocument;
import org.meveo.model.dunning.DunningDocumentStatus;
import org.meveo.model.generic.wf.GWFTransition;
import org.meveo.model.notification.NotificationEventTypeEnum;
import org.meveo.model.payments.*;
import org.meveo.service.billing.impl.SubscriptionService;
import org.meveo.service.notification.DefaultNotificationService;
import org.meveo.service.notification.GenericNotificationService;
import org.meveo.service.payments.impl.AccountOperationService;
import org.meveo.service.payments.impl.CustomerAccountService;
import org.meveo.service.payments.impl.DunningDocumentService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.*;

public class SimpleDunning extends org.meveo.service.script.Script {

    private static final Logger log = LoggerFactory.getLogger(SimpleDunning.class);

    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface("CustomerAccountService");
    private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface("AccountOperationService");
    private DefaultNotificationService defaultNotificationService = (DefaultNotificationService) getServiceInterface("DefaultNotificationService");
    private GenericNotificationService genericNotificationService = (GenericNotificationService) getServiceInterface("GenericNotificationService");
    private DunningDocumentService dunningDocumentService = (DunningDocumentService) getServiceInterface("DunningDocumentService");
    private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface("SubscriptionService");

    @Override
    public void execute(Map<String, Object> context) {
        log.info(">>> Method context >>>");
        context.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(entry -> {
            log.info("{}={}", entry.getKey(), entry.getValue());
        });

        CustomerAccount customerAccount = (CustomerAccount) context.get(IWF_ENTITY);
        GWFTransition gwfTransition = (GWFTransition) context.get(WF_ACTUAL_TRANSITION);

        if ("R0".equals(gwfTransition.getFromStatus()) && "R1".equals(gwfTransition.getToStatus())) {
            sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R1);
        } else if ("R1".equals(gwfTransition.getFromStatus()) && "R2".equals(gwfTransition.getToStatus())) {
            sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R2);
        } else if ("R2".equals(gwfTransition.getFromStatus()) && "R3".equals(gwfTransition.getToStatus())) {
            customerAccount = updateDunningLevel(customerAccount, DunningLevelEnum.R3);
            suspendSubsciptions(customerAccount);
            createDunningDocument(customerAccount);
        } else if ("R3".equals(gwfTransition.getFromStatus()) && "R4".equals(gwfTransition.getToStatus())) {
            customerAccount = updateDunningLevel(customerAccount, DunningLevelEnum.R4);
            updateAccountOperationsToWritteOff(customerAccount);
            markInvoicesAsAbandoned(customerAccount.getAccountOperations());
            customerAccount.setStatus(CustomerAccountStatusEnum.CLOSE);
            customerAccount.setDateStatus(new Date());
            customerAccountService.update(customerAccount);
        } else if ("R3".equals(gwfTransition.getFromStatus()) && "R0".equals(gwfTransition.getToStatus())) {
            customerAccount = sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R0);
            activateSubscription(customerAccount);
            closeDunningDocuments(customerAccount);
        } else if ("R0".equals(gwfTransition.getToStatus())) {
            sendEmailAndUpdateDunningLevel(customerAccount, DunningLevelEnum.R0);
        }
    }

    private void markInvoicesAsAbandoned(List<AccountOperation> accountOperations) {
        for (AccountOperation accountOperation : accountOperations) {
            if (accountOperation instanceof RecordedInvoice) {
                ((RecordedInvoice) accountOperation).getInvoice().setPaymentStatus(ABANDONED);
                accountOperationService.update(accountOperation);
            }
        }
    }

    private void updateAccountOperationsToWritteOff(CustomerAccount customerAccount) {
        List<AccountOperation> writeOffs = new ArrayList<>();
        List<AccountOperation> accountOperations = customerAccount.getAccountOperations();
        for (AccountOperation accountOperation : accountOperations) {
            AccountOperation writeOff = new WriteOff();
            try {
                writeOff = (WriteOff)copy(accountOperation);
                writeOff.setId(null);
                writeOff.setMatchingAmounts(null);
                writeOff.setPaymentHistories(null);
                writeOff.setInvoices(null);
                writeOff.setAuditableFields(null);
                if (accountOperation.getTransactionCategory() == OperationCategoryEnum.DEBIT)
                    writeOff.setTransactionCategory(OperationCategoryEnum.CREDIT);
                else
                    writeOff.setTransactionCategory(OperationCategoryEnum.DEBIT);
                writeOff.setMatchingStatus(MatchingStatusEnum.L);
                accountOperation.setMatchingStatus(MatchingStatusEnum.L);
                accountOperationService.create(writeOff);
                writeOffs.add(writeOff);
            } catch (Exception e) {
                log.error("error while copy ao to write off: " + accountOperation);
            }
        }
        customerAccount.getAccountOperations().addAll(writeOffs);
    }

    private void closeDunningDocuments(CustomerAccount customerAccount) {
        for (AccountOperation accountOperation : customerAccount.getAccountOperations()) {
            if (accountOperation instanceof RecordedInvoice) {
                ((RecordedInvoice) accountOperation).setDunningDocument(null);
                ((RecordedInvoice) accountOperation).getInvoice().setPaymentStatus(PAID);
                accountOperationService.update(accountOperation);
            }
        }

        for (DunningDocument dd : customerAccount.getDunningDocuments()) {
            dd.setStatus(DunningDocumentStatus.CLOSED);
            dunningDocumentService.update(dd);
        }
    }

    private void activateSubscription(CustomerAccount customerAccount) {
        subscriptionService.listByCustomer(customerAccount.getCustomer())
                .forEach(sub -> subscriptionService.subscriptionReactivation(sub, new Date()));
    }

    private void suspendSubsciptions(CustomerAccount customerAccount) {
        subscriptionService.listByCustomer(customerAccount.getCustomer())
                .forEach(sub -> subscriptionService.subscriptionSuspension(sub, new Date()));
    }

    private CustomerAccount sendEmailAndUpdateDunningLevel(CustomerAccount customerAccount, DunningLevelEnum dunningLevelEnum) {
        customerAccount = updateDunningLevel(customerAccount, dunningLevelEnum);
        if (dunningLevelEnum == DunningLevelEnum.R0) {
            sendEmail(customerAccount, NotificationEventTypeEnum.TO_R0);
        } else if (dunningLevelEnum == DunningLevelEnum.R1) {
            computeDueBalanceAndSendEmail(customerAccount, NotificationEventTypeEnum.TO_R1);
        } else if (dunningLevelEnum == DunningLevelEnum.R2) {
            computeDueBalanceAndSendEmail(customerAccount, NotificationEventTypeEnum.TO_R2);
        }
        return customerAccount;
    }

    private CustomerAccount updateDunningLevel(CustomerAccount customerAccount, DunningLevelEnum dunningLevelEnum) {
        customerAccount = customerAccountService.refreshOrRetrieve(customerAccount);
        customerAccount.setDunningLevel(dunningLevelEnum);
        customerAccount.setDateDunningLevel(new Date());
        return customerAccountService.update(customerAccount);
    }

    private void computeDueBalanceAndSendEmail(CustomerAccount customerAccount, NotificationEventTypeEnum notificationEventType) {
        BigDecimal dueBalance = customerAccountService.customerAccountBalanceDue(customerAccount, new Date());
        customerAccount.setDueBalance(String.format("%s %s", dueBalance.setScale(2, RoundingMode.HALF_UP).toString(), customerAccount.getTradingCurrency().getCurrencyCode()));
        sendEmail(customerAccount, notificationEventType);
    }

    private void sendEmail(CustomerAccount customerAccount, NotificationEventTypeEnum notificationEventType) {
        genericNotificationService.getApplicableNotifications(notificationEventType, customerAccount)
                .forEach(notif -> defaultNotificationService.fireNotification(notif, customerAccount));
    }

    private void createDunningDocument(CustomerAccount customerAccount) {
        List<AccountOperation> accountOperations = customerAccount.getAccountOperations();
        DunningDocument dunningDocument = new DunningDocument();
        dunningDocument.setCustomerAccount(customerAccount);
        dunningDocument.setStatus(DunningDocumentStatus.OPEN);

        if (accountOperations != null) {
            List<RecordedInvoice> ris = new ArrayList<>();
            for (AccountOperation accountOperation : accountOperations) {
                if (accountOperation instanceof RecordedInvoice) {
                    if (accountOperation instanceof RecordedInvoice) {
                        ((RecordedInvoice) accountOperation).setDunningDocument(dunningDocument);
                        ((RecordedInvoice) accountOperation).getInvoice().setPaymentStatus(DISPUTED);
                        ris.add((RecordedInvoice) accountOperation);
                    }
                }
            }
            dunningDocument.setDueInvoices(ris);
        }

        dunningDocumentService.create(dunningDocument);
    }

    private <T> T copy(T entity) throws IllegalAccessException, InstantiationException {
        Class<?> clazz = entity.getClass();
        T newEntity = (T) entity.getClass().newInstance();
        while (clazz != null) {
            copyFields(entity, newEntity, clazz);
            clazz = clazz.getSuperclass();
        }
        return newEntity;
    }

    private <T> T copyFields(T entity, T newEntity, Class<?> clazz) throws IllegalAccessException {
        List<Field> fields = new ArrayList<>();
        for (Field field : clazz.getDeclaredFields()) {
            fields.add(field);
        }
        for (Field field : fields) {
            if (!java.lang.reflect.Modifier.isStatic(field.getModifiers())) {
                field.setAccessible(true);
                field.set(newEntity, field.get(entity));
            }
        }
        return newEntity;
    }
}');
        UPDATE ${db.schema.adapted}meveo_script_instance SET script = scriptData
        WHERE code = 'org.meveo.service.script.SimpleDunning';

        End;
        /
           ]]>
    </sql>
    </changeSet>
    

    <changeSet id="INTRD-2731_20211103" author="AmineBENAICHA">

        <!-- Dunning Policies B2C -->
        <insert tableName="dunning_policy">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="policy_name" value="Default policy B2C-EN" />
            <column name="policy_description" value="This is a default policy for B2C" />
            <column name="min_balance_trigger" valueNumeric="1" />
            <column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
            <column name="determine_level_by" value="DAYS_OVERDUE" />
            <column name="policy_priority" valueNumeric="null" />
            <column name="attach_invoices_to_emails" valueNumeric="1" />
            <column name="is_active_policy" valueNumeric="1" />
        </insert>
        <insert tableName="dunning_policy_rule">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="rule_joint" value="null" />
            <column name="dunning_policy_id" valueNumeric="-1" />
        </insert>
        <insert tableName="dunning_policy_rule_line">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="policy_condition_target" value="IsIndividual" />
            <column name="policy_condition_operator" value="equals" />
            <column name="policy_condition_target_value" value="TRUE" />
            <column name="rule_line_joint" value="null" />
            <column name="dunning_policy_rule_id" valueNumeric="-1" />
        </insert>

        <!-- Level 1 B2C -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL1" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="1" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-1" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Email B2C LVL1" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="AUTOMATIC" />
            <column name="action_channel" value="EMAIL" />
            <column name="action_notification_template_id" valueNumeric="-3" /><!-- Template name= ENG - B2C relance 1 (J+1) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-1" />
            <column name="dunning_level_id" valueNumeric="-1" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="1" />
            <column name="dunning_level_id" valueNumeric="-1" />
            <column name="dunning_policy_id" valueNumeric="-1" />
        </insert>
        
        <!-- Level 2 B2C -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL2" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="7" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Email B2C LVL2" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="AUTOMATIC" />
            <column name="action_channel" value="EMAIL" />
            <column name="action_notification_template_id" valueNumeric="-4" /><!-- Template name= ENG - B2C relance 2 (J+7) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-2" />
            <column name="dunning_level_id" valueNumeric="-2" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="2" />
            <column name="dunning_level_id" valueNumeric="-2" />
            <column name="dunning_policy_id" valueNumeric="-1" />
        </insert>
        
        <!-- Level 3 B2C -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-3" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL3" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="10" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-3" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Call B2C LVL3" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="CALL" />
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-3" />
            <column name="dunning_level_id" valueNumeric="-3" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="3" />
            <column name="dunning_level_id" valueNumeric="-3" />
            <column name="dunning_policy_id" valueNumeric="-1" />
        </insert>
        
        <!-- Level 4 B2C -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-4" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL4" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="1" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="14" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-4" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Letter B2C LVL4" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="LETTER" />
            <column name="action_notification_template_id" valueNumeric="-5" /><!-- Template name= ENG - B2C relance 4 (J+14) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-4" />
            <column name="dunning_level_id" valueNumeric="-4" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="4" />
            <column name="dunning_level_id" valueNumeric="-4" />
            <column name="dunning_policy_id" valueNumeric="-1" />
        </insert>       
        <!-- ****************************************** -->
        <!-- ****************************************** -->
        <!-- ****************************************** -->
        <!-- Dunning Policies B2B -->
        <insert tableName="dunning_policy">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="policy_name" value="Default policy B2B-EN" />
            <column name="policy_description" value="This is a default policy for B2B" />
            <column name="min_balance_trigger" valueNumeric="1" />
            <column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
            <column name="determine_level_by" value="DAYS_OVERDUE" />
            <column name="policy_priority" valueNumeric="null" />
            <column name="attach_invoices_to_emails" valueNumeric="1" />
            <column name="is_active_policy" valueNumeric="1" />
        </insert>
        <insert tableName="dunning_policy_rule">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="rule_joint" value="null" />
            <column name="dunning_policy_id" valueNumeric="-2" />
        </insert>
        <insert tableName="dunning_policy_rule_line">
            <column name="id" valueNumeric="-2" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="policy_condition_target" value="IsCompany" />
            <column name="policy_condition_operator" value="equals" />
            <column name="policy_condition_target_value" value="TRUE" />
            <column name="rule_line_joint" value="null" />
            <column name="dunning_policy_rule_id" valueNumeric="-2" />
        </insert>

        <!-- Level 1 B2B -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-5" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL1B2B" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="15" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-5" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Email B2B LVL1" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="AUTOMATIC" />
            <column name="action_channel" value="EMAIL" />
            <column name="action_notification_template_id" valueNumeric="-1" /><!-- Template name= ENG - B2B relance 1 (J+15) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-5" />
            <column name="dunning_level_id" valueNumeric="-5" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="1" />
            <column name="dunning_level_id" valueNumeric="-5" />
            <column name="dunning_policy_id" valueNumeric="-2" />
        </insert>
        
        <!-- Level 2 B2B -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-6" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL2B2B" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="22" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-6" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Call B2B LVL2" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="CALL" />
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-6" />
            <column name="dunning_level_id" valueNumeric="-6" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="2" />
            <column name="dunning_level_id" valueNumeric="-6" />
            <column name="dunning_policy_id" valueNumeric="-2" />
        </insert>
        
        <!-- Level 3 B2B -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-7" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL3B2B" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="27" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-7" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Call B2B LVL3" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="CALL" />
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-7" />
            <column name="dunning_level_id" valueNumeric="-7" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="3" />
            <column name="dunning_level_id" valueNumeric="-7" />
            <column name="dunning_policy_id" valueNumeric="-2" />
        </insert>
        
        <!-- Level 4 B2B -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-8" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL4B2B" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="1" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="35" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-8" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Letter B2B LVL4" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="LETTER" />
            <column name="action_notification_template_id" valueNumeric="-2" /><!-- Template name= ENG - B2B relance 4 (J+35) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-8" />
            <column name="dunning_level_id" valueNumeric="-8" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="4" />
            <column name="dunning_level_id" valueNumeric="-8" />
            <column name="dunning_policy_id" valueNumeric="-2" />
        </insert>

    </changeSet>    
    
    <changeSet id="INTRD-2732_20211104" author="AmineBENAICHA">

        <!-- Dunning Policies B2C -->
        <insert tableName="dunning_policy">
            <column name="id" valueNumeric="-10" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="policy_name" value="Default policy B2C-FR" />
            <column name="policy_description" value="This is a default policy for B2C" />
            <column name="min_balance_trigger" valueNumeric="1" />
            <column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
            <column name="determine_level_by" value="DAYS_OVERDUE" />
            <column name="policy_priority" valueNumeric="null" />
            <column name="attach_invoices_to_emails" valueNumeric="1" />
            <column name="is_active_policy" valueNumeric="1" />
        </insert>
        <insert tableName="dunning_policy_rule">
            <column name="id" valueNumeric="-10" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="rule_joint" value="null" />
            <column name="dunning_policy_id" valueNumeric="-10" />
        </insert>
        <insert tableName="dunning_policy_rule_line">
            <column name="id" valueNumeric="-10" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="policy_condition_target" value="IsIndividual" />
            <column name="policy_condition_operator" value="equals" />
            <column name="policy_condition_target_value" value="TRUE" />
            <column name="rule_line_joint" value="null" />
            <column name="dunning_policy_rule_id" valueNumeric="-10" />
        </insert>

        <!-- Level 1 B2C -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-10" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL1-FR" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="1" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-10" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Email B2C LVL1-FR" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="AUTOMATIC" />
            <column name="action_channel" value="EMAIL" />
            <column name="action_notification_template_id" valueNumeric="-8" /><!-- Template name= FR - B2C relance 1 (J+1) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-10" />
            <column name="dunning_level_id" valueNumeric="-10" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="1" />
            <column name="dunning_level_id" valueNumeric="-10" />
            <column name="dunning_policy_id" valueNumeric="-10" />
        </insert>
        
        <!-- Level 2 B2C -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-20" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL2-FR" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="7" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-20" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Email B2C LVL2-FR" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="AUTOMATIC" />
            <column name="action_channel" value="EMAIL" />
            <column name="action_notification_template_id" valueNumeric="-9" /><!-- Template name= FR - B2C relance 2 (J+7) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-20" />
            <column name="dunning_level_id" valueNumeric="-20" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="2" />
            <column name="dunning_level_id" valueNumeric="-20" />
            <column name="dunning_policy_id" valueNumeric="-10" />
        </insert>
        
        <!-- Level 3 B2C -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-30" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL3-FR" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="10" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-30" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Call B2C LVL3-FR" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="CALL" />
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-30" />
            <column name="dunning_level_id" valueNumeric="-30" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="3" />
            <column name="dunning_level_id" valueNumeric="-30" />
            <column name="dunning_policy_id" valueNumeric="-10" />
        </insert>
        
        <!-- Level 4 B2C -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-40" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL4-FR" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="1" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="14" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-40" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Letter B2C LVL4-FR" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="LETTER" />
            <column name="action_notification_template_id" valueNumeric="-10" /><!-- Template name= FR - B2C relance 4 (J+14) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-40" />
            <column name="dunning_level_id" valueNumeric="-40" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="4" />
            <column name="dunning_level_id" valueNumeric="-40" />
            <column name="dunning_policy_id" valueNumeric="-10" />
        </insert>       
        <!-- ****************************************** -->
        <!-- ****************************************** -->
        <!-- ****************************************** -->
        <!-- Dunning Policies B2B -->
        <insert tableName="dunning_policy">
            <column name="id" valueNumeric="-20" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="policy_name" value="Default policy B2B-FR" />
            <column name="policy_description" value="This is a default policy for B2B" />
            <column name="min_balance_trigger" valueNumeric="1" />
            <column name="min_balance_trigger_currency_id" valueNumeric="5" /><!-- € -->
            <column name="determine_level_by" value="DAYS_OVERDUE" />
            <column name="policy_priority" valueNumeric="null" />
            <column name="attach_invoices_to_emails" valueNumeric="1" />
            <column name="is_active_policy" valueNumeric="1" />
        </insert>
        <insert tableName="dunning_policy_rule">
            <column name="id" valueNumeric="-20" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="rule_joint" value="null" />
            <column name="dunning_policy_id" valueNumeric="-20" />
        </insert>
        <insert tableName="dunning_policy_rule_line">
            <column name="id" valueNumeric="-20" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="policy_condition_target" value="IsCompany" />
            <column name="policy_condition_operator" value="equals" />
            <column name="policy_condition_target_value" value="TRUE" />
            <column name="rule_line_joint" value="null" />
            <column name="dunning_policy_rule_id" valueNumeric="-20" />
        </insert>

        <!-- Level 1 B2B -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-50" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL1B2B-FR" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="15" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-50" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Email B2B LVL1-FR" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="AUTOMATIC" />
            <column name="action_channel" value="EMAIL" />
            <column name="action_notification_template_id" valueNumeric="-6" /><!-- Template name= FR - B2B relance 1 (J+15) -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-50" />
            <column name="dunning_level_id" valueNumeric="-50" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="1" />
            <column name="dunning_level_id" valueNumeric="-50" />
            <column name="dunning_policy_id" valueNumeric="-20" />
        </insert>
        
        <!-- Level 2 B2B -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-60" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL2B2B-FR" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="22" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-60" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Call B2B LVL2-FR" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="CALL" />
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-60" />
            <column name="dunning_level_id" valueNumeric="-60" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="2" />
            <column name="dunning_level_id" valueNumeric="-60" />
            <column name="dunning_policy_id" valueNumeric="-20" />
        </insert>
        
        <!-- Level 3 B2B -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-70" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL3B2B-FR" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="0" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="27" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-70" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Call B2B LVL3-FR" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="CALL" />
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-70" />
            <column name="dunning_level_id" valueNumeric="-70" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="3" />
            <column name="dunning_level_id" valueNumeric="-70" />
            <column name="dunning_policy_id" valueNumeric="-20" />
        </insert>
        
        <!-- Level 4 B2B -->
        <insert tableName="dunning_level">
            <column name="id" valueNumeric="-80" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="LVL4B2B-FR" />
            <column name="description" value="N/A" />
            <column name="reminder" valueNumeric="0" />
            <column name="end_dunning_level" valueNumeric="1" />
            <column name="active" valueNumeric="1" />
            <column name="days_overdue" valueNumeric="35" />
            <column name="min_balance" valueNumeric="0" />
            <column name="charge_currency_id" valueNumeric="null" />
            <column name="soft_decline" valueNumeric="0" />
        </insert>
        <insert tableName="ar_dunning_action">
            <column name="id" valueNumeric="-80" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="code" value="Letter B2B LVL4-FR" />
            <column name="description" value="N/A" />
            <column name="is_action_active" valueNumeric="1" />
            <column name="action_type" value="SEND_NOTIFICATION" />
            <column name="action_mode" value="MANUAL" />
            <column name="action_channel" value="LETTER" />
            <column name="action_notification_template_id" valueNumeric="-7" /><!-- Template name= FR - B2B relance 4 (J+35)  -->
        </insert>
        <insert tableName="dunning_level_dunning_action">
            <column name="dunning_action_id" valueNumeric="-80" />
            <column name="dunning_level_id" valueNumeric="-80" />
        </insert>
        <insert tableName="dunning_policy_level">
            <column name="id" valueSequenceNext="dunning_policy_level_seq" />
            <column name="version" valueNumeric="0" />
            <column name="created" valueDate="${db.current.time}" />
            <column name="creator" value="applicationInitializer" />
            <column name="sequence" valueNumeric="4" />
            <column name="dunning_level_id" valueNumeric="-80" />
            <column name="dunning_policy_id" valueNumeric="-20" />
        </insert>

    </changeSet>
</databaseChangeLog>